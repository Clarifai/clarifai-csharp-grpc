// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/clarifai/api/resources.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Clarifai.Api {

  /// <summary>Holder for reflection information generated from proto/clarifai/api/resources.proto</summary>
  public static partial class ResourcesReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/clarifai/api/resources.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResourcesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJwcm90by9jbGFyaWZhaS9hcGkvcmVzb3VyY2VzLnByb3RvEgxjbGFyaWZh",
            "aS5hcGkaJnByb3RvL2NsYXJpZmFpL2FwaS9zdGF0dXMvc3RhdHVzLnByb3Rv",
            "Gilwcm90by9jbGFyaWZhaS9hcGkvdXRpbHMvZXh0ZW5zaW9ucy5wcm90bxoo",
            "cHJvdG8vY2xhcmlmYWkvYXV0aC91dGlsL2V4dGVuc2lvbi5wcm90bxocZ29v",
            "Z2xlL3Byb3RvYnVmL3N0cnVjdC5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3Rp",
            "bWVzdGFtcC5wcm90byLlAwoKQW5ub3RhdGlvbhIKCgJpZBgBIAEoCRIQCghp",
            "bnB1dF9pZBgCIAEoCRIgCgRkYXRhGAMgASgLMhIuY2xhcmlmYWkuYXBpLkRh",
            "dGESMAoPYW5ub3RhdGlvbl9pbmZvGA0gASgLMhcuZ29vZ2xlLnByb3RvYnVm",
            "LlN0cnVjdBIPCgd1c2VyX2lkGA8gASgJEhgKEG1vZGVsX3ZlcnNpb25faWQY",
            "ECABKAkSIgoWZW1iZWRfbW9kZWxfdmVyc2lvbl9pZBgOIAEoCUICGAESKwoG",
            "c3RhdHVzGAcgASgLMhsuY2xhcmlmYWkuYXBpLnN0YXR1cy5TdGF0dXMSLgoK",
            "Y3JlYXRlZF9hdBgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "LwoLbW9kaWZpZWRfYXQYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEhMKB3RydXN0ZWQYCiABKAhCAhgBEhMKC2lucHV0X2xldmVsGBEgASgI",
            "Ei8KDmNvbnNlbnN1c19pbmZvGBIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cnVjdBIPCgd0YXNrX2lkGBMgASgJSgQIBBAFSgQIBRAGSgQIBhAHSgQICxAM",
            "SgQIDBANIrcDCgNBcHASCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIYChBk",
            "ZWZhdWx0X2xhbmd1YWdlGAMgASgJEhsKE2RlZmF1bHRfd29ya2Zsb3dfaWQY",
            "BCABKAkSDwoHdXNlcl9pZBgFIAEoCRIuCgpjcmVhdGVkX2F0GAYgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIvCgttb2RpZmllZF9hdBgRIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASHAoUbGVnYWxfY29uc2Vu",
            "dF9zdGF0dXMYByABKA0SKQoIbWV0YWRhdGEYDSABKAsyFy5nb29nbGUucHJv",
            "dG9idWYuU3RydWN0EhMKC2Rlc2NyaXB0aW9uGA4gASgJEhEKCXNhbXBsZV9t",
            "cxgPIAEoDRIsCgp2aXNpYmlsaXR5GBAgASgLMhguY2xhcmlmYWkuYXBpLlZp",
            "c2liaWxpdHkSFAoMZGF0YV90aWVyX2lkGBIgASgJEhIKCmlzX3N0YXJyZWQY",
            "EyABKAgSEgoKc3Rhcl9jb3VudBgUIAEoBUoECAoQC0oECAsQDEoECAwQDSIY",
            "CghBcHBRdWVyeRIMCgRuYW1lGAEgASgJIpACCgxDb2xsYWJvcmF0b3ISCgoC",
            "aWQYASABKAkSHgoDYXBwGAIgASgLMhEuY2xhcmlmYWkuYXBpLkFwcBIgCgR1",
            "c2VyGAMgASgLMhIuY2xhcmlmYWkuYXBpLlVzZXISDgoGc2NvcGVzGAQgAygJ",
            "EhEKCWVuZHBvaW50cxgFIAMoCRIuCgpjcmVhdGVkX2F0GAYgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBIvCgttb2RpZmllZF9hdBgHIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKZGVsZXRlZF9hdBgIIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiqQEKDUNvbGxhYm9yYXRp",
            "b24SHgoDYXBwGAEgASgLMhEuY2xhcmlmYWkuYXBpLkFwcBIlCglhcHBfb3du",
            "ZXIYAiABKAsyEi5jbGFyaWZhaS5hcGkuVXNlchIOCgZzY29wZXMYAyADKAkS",
            "EQoJZW5kcG9pbnRzGAQgAygJEi4KCmNyZWF0ZWRfYXQYBSABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wImoKBUF1ZGlvEgsKA3VybBgBIAEoCRIO",
            "CgZiYXNlNjQYAiABKAwSGwoTYWxsb3dfZHVwbGljYXRlX3VybBgEIAEoCBIn",
            "CgZob3N0ZWQYBSABKAsyFy5jbGFyaWZhaS5hcGkuSG9zdGVkVVJMIqQCCgVU",
            "cmFjaxIKCgJpZBgBIAEoCRIgCgRkYXRhGAIgASgLMhIuY2xhcmlmYWkuYXBp",
            "LkRhdGESMQoKdHJhY2tfaW5mbxgDIAEoCzIdLmNsYXJpZmFpLmFwaS5UcmFj",
            "ay5UcmFja0luZm8SKQoJdGltZV9pbmZvGAQgASgLMhYuY2xhcmlmYWkuYXBp",
            "LlRpbWVJbmZvGo4BCglUcmFja0luZm8SEgoKbnVtX2ZyYW1lcxgBIAEoDRIu",
            "CgpiZWdpbl90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBIsCghlbmRfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASDwoHcXVhbGl0eRgEIAEoAiJoCgdDbHVzdGVyEgoKAmlkGAEgASgJEg0K",
            "BWNvdW50GAIgASgNEg0KBXNjb3JlGAMgASgCEh8KBGhpdHMYBCADKAsyES5j",
            "bGFyaWZhaS5hcGkuSGl0EhIKCnByb2plY3Rpb24YBSADKAIiTQoFQ29sb3IS",
            "DwoHcmF3X2hleBgBIAEoCRIeCgN3M2MYAiABKAsyES5jbGFyaWZhaS5hcGku",
            "VzNDEhMKBXZhbHVlGAMgASgCQgSAtRgBIiAKA1czQxILCgNoZXgYASABKAkS",
            "DAoEbmFtZRgCIAEoCSIvCgxVc2VyQXBwSURTZXQSDwoHdXNlcl9pZBgBIAEo",
            "CRIOCgZhcHBfaWQYAiABKAkiSgoLUGF0Y2hBY3Rpb24SCgoCb3AYASABKAkS",
            "IQoZbWVyZ2VfY29uZmxpY3RfcmVzb2x1dGlvbhgCIAEoCRIMCgRwYXRoGAMg",
            "ASgJIvYBCgdDb25jZXB0EgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSGgoF",
            "dmFsdWUYAyABKAJCC9W1GAAAgD+AtRgBEi4KCmNyZWF0ZWRfYXQYBCABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhAKCGxhbmd1YWdlGAUgASgJ",
            "Eg4KBmFwcF9pZBgGIAEoCRISCgpkZWZpbml0aW9uGAcgASgJEhAKCHZvY2Fi",
            "X2lkGAggASgJEiwKCnZpc2liaWxpdHkYCSABKAsyGC5jbGFyaWZhaS5hcGku",
            "VmlzaWJpbGl0eRIPCgd1c2VyX2lkGAogASgJIqQBCgxDb25jZXB0Q291bnQS",
            "CgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRI6ChJjb25jZXB0X3R5cGVfY291",
            "bnQYAyABKAsyHi5jbGFyaWZhaS5hcGkuQ29uY2VwdFR5cGVDb3VudBI+ChRk",
            "ZXRhaWxfY29uY2VwdF9jb3VudBgEIAEoCzIgLmNsYXJpZmFpLmFwaS5EZXRh",
            "aWxDb25jZXB0Q291bnQiQgoQQ29uY2VwdFR5cGVDb3VudBIWCghwb3NpdGl2",
            "ZRgBIAEoDUIEgLUYARIWCghuZWdhdGl2ZRgCIAEoDUIEgLUYASLfAQoSRGV0",
            "YWlsQ29uY2VwdENvdW50EjEKCXByb2Nlc3NlZBgBIAEoCzIeLmNsYXJpZmFp",
            "LmFwaS5Db25jZXB0VHlwZUNvdW50EjIKCnRvX3Byb2Nlc3MYAiABKAsyHi5j",
            "bGFyaWZhaS5hcGkuQ29uY2VwdFR5cGVDb3VudBIuCgZlcnJvcnMYAyABKAsy",
            "Hi5jbGFyaWZhaS5hcGkuQ29uY2VwdFR5cGVDb3VudBIyCgpwcm9jZXNzaW5n",
            "GAQgASgLMh4uY2xhcmlmYWkuYXBpLkNvbmNlcHRUeXBlQ291bnQiQwoMQ29u",
            "Y2VwdFF1ZXJ5EgwKBG5hbWUYASABKAkSEAoIbGFuZ3VhZ2UYAiABKAkSEwoL",
            "d29ya2Zsb3dfaWQYAyABKAki2QEKD0NvbmNlcHRSZWxhdGlvbhIKCgJpZBgB",
            "IAEoCRIuCg9zdWJqZWN0X2NvbmNlcHQYAiABKAsyFS5jbGFyaWZhaS5hcGku",
            "Q29uY2VwdBItCg5vYmplY3RfY29uY2VwdBgDIAEoCzIVLmNsYXJpZmFpLmFw",
            "aS5Db25jZXB0EhEKCXByZWRpY2F0ZRgEIAEoCRIaChJrbm93bGVkZ2VfZ3Jh",
            "cGhfaWQYBSABKAkSLAoKdmlzaWJpbGl0eRgGIAEoCzIYLmNsYXJpZmFpLmFw",
            "aS5WaXNpYmlsaXR5InkKDktub3dsZWRnZUdyYXBoEgoKAmlkGAEgASgJEgwK",
            "BG5hbWUYAiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSFwoPZXhhbXBsZXNf",
            "YXBwX2lkGAQgASgJEh8KF3NhbXBsZWRfZXhhbXBsZXNfYXBwX2lkGAUgASgJ",
            "IkQKEUNvbmNlcHRNYXBwaW5nSm9iEhoKEmtub3dsZWRnZV9ncmFwaF9pZBgB",
            "IAEoCRITCgtjb25jZXB0X2lkcxgCIAMoCSI/Cg9Db25jZXB0TGFuZ3VhZ2US",
            "CgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRISCgpkZWZpbml0aW9uGAMgASgJ",
            "IrIECgREYXRhEiIKBWltYWdlGAEgASgLMhMuY2xhcmlmYWkuYXBpLkltYWdl",
            "EiIKBXZpZGVvGAIgASgLMhMuY2xhcmlmYWkuYXBpLlZpZGVvEicKCGNvbmNl",
            "cHRzGAMgAygLMhUuY2xhcmlmYWkuYXBpLkNvbmNlcHQSKQoIbWV0YWRhdGEY",
            "BSABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Eh4KA2dlbxgGIAEoCzIR",
            "LmNsYXJpZmFpLmFwaS5HZW8SIwoGY29sb3JzGAcgAygLMhMuY2xhcmlmYWku",
            "YXBpLkNvbG9yEicKCGNsdXN0ZXJzGAggAygLMhUuY2xhcmlmYWkuYXBpLkNs",
            "dXN0ZXISKwoKZW1iZWRkaW5ncxgJIAMoCzIXLmNsYXJpZmFpLmFwaS5FbWJl",
            "ZGRpbmcSJQoHcmVnaW9ucxgLIAMoCzIULmNsYXJpZmFpLmFwaS5SZWdpb24S",
            "IwoGZnJhbWVzGAwgAygLMhMuY2xhcmlmYWkuYXBpLkZyYW1lEiAKBHRleHQY",
            "DSABKAsyEi5jbGFyaWZhaS5hcGkuVGV4dBIiCgVhdWRpbxgOIAEoCzITLmNs",
            "YXJpZmFpLmFwaS5BdWRpbxIjCgZ0cmFja3MYDyADKAsyEy5jbGFyaWZhaS5h",
            "cGkuVHJhY2sSMAoNdGltZV9zZWdtZW50cxgQIAMoCzIZLmNsYXJpZmFpLmFw",
            "aS5UaW1lU2VnbWVudEoECAQQBUoECAoQCyKGAQoGUmVnaW9uEgoKAmlkGAEg",
            "ASgJEi0KC3JlZ2lvbl9pbmZvGAIgASgLMhguY2xhcmlmYWkuYXBpLlJlZ2lv",
            "bkluZm8SIAoEZGF0YRgDIAEoCzISLmNsYXJpZmFpLmFwaS5EYXRhEg0KBXZh",
            "bHVlGAQgASgCEhAKCHRyYWNrX2lkGAUgASgJIrcBCgpSZWdpb25JbmZvEi8K",
            "DGJvdW5kaW5nX2JveBgBIAEoCzIZLmNsYXJpZmFpLmFwaS5Cb3VuZGluZ0Jv",
            "eBIgCgRtYXNrGAQgASgLMhIuY2xhcmlmYWkuYXBpLk1hc2sSJgoHcG9seWdv",
            "bhgFIAEoCzIVLmNsYXJpZmFpLmFwaS5Qb2x5Z29uEiIKBXBvaW50GAYgASgL",
            "MhMuY2xhcmlmYWkuYXBpLlBvaW50SgQIAhADSgQIAxAEIm8KC0JvdW5kaW5n",
            "Qm94EhUKB3RvcF9yb3cYASABKAJCBIC1GAESFgoIbGVmdF9jb2wYAiABKAJC",
            "BIC1GAESGAoKYm90dG9tX3JvdxgDIAEoAkIEgLUYARIXCglyaWdodF9jb2wY",
            "BCABKAJCBIC1GAEiNAoJRnJhbWVJbmZvEhMKBWluZGV4GAEgASgNQgSAtRgB",
            "EhIKBHRpbWUYAiABKA1CBIC1GAEiYgoFRnJhbWUSKwoKZnJhbWVfaW5mbxgB",
            "IAEoCzIXLmNsYXJpZmFpLmFwaS5GcmFtZUluZm8SIAoEZGF0YRgCIAEoCzIS",
            "LmNsYXJpZmFpLmFwaS5EYXRhEgoKAmlkGAMgASgJIjAKBE1hc2sSIgoFaW1h",
            "Z2UYAiABKAsyEy5jbGFyaWZhaS5hcGkuSW1hZ2VKBAgBEAIiLgoHUG9seWdv",
            "bhIjCgZwb2ludHMYASADKAsyEy5jbGFyaWZhaS5hcGkuUG9pbnQiOAoFUG9p",
            "bnQSEQoDcm93GAEgASgCQgSAtRgBEhEKA2NvbBgCIAEoAkIEgLUYARIJCgF6",
            "GAMgASgCIjcKCUVtYmVkZGluZxISCgZ2ZWN0b3IYASADKAJCAhABEhYKDm51",
            "bV9kaW1lbnNpb25zGAIgASgNIjsKCEdlb1BvaW50EhcKCWxvbmdpdHVkZRgB",
            "IAEoAkIEgLUYARIWCghsYXRpdHVkZRgCIAEoAkIEgLUYASItCghHZW9MaW1p",
            "dBIMCgR0eXBlGAEgASgJEhMKBXZhbHVlGAIgASgCQgSAtRgBIjoKDUdlb0Jv",
            "eGVkUG9pbnQSKQoJZ2VvX3BvaW50GAEgASgLMhYuY2xhcmlmYWkuYXBpLkdl",
            "b1BvaW50IokBCgNHZW8SKQoJZ2VvX3BvaW50GAEgASgLMhYuY2xhcmlmYWku",
            "YXBpLkdlb1BvaW50EikKCWdlb19saW1pdBgCIAEoCzIWLmNsYXJpZmFpLmFw",
            "aS5HZW9MaW1pdBIsCgdnZW9fYm94GAMgAygLMhsuY2xhcmlmYWkuYXBpLkdl",
            "b0JveGVkUG9pbnQicAoFSW1hZ2USCwoDdXJsGAEgASgJEg4KBmJhc2U2NBgC",
            "IAEoDBIbChNhbGxvd19kdXBsaWNhdGVfdXJsGAQgASgIEicKBmhvc3RlZBgF",
            "IAEoCzIXLmNsYXJpZmFpLmFwaS5Ib3N0ZWRVUkxKBAgDEAQiTwoJSG9zdGVk",
            "VVJMEg4KBnByZWZpeBgBIAEoCRIOCgZzdWZmaXgYAiABKAkSDQoFc2l6ZXMY",
            "AyADKAkSEwoLY3Jvc3NvcmlnaW4YBCABKAki3gEKBUlucHV0EgoKAmlkGAEg",
            "ASgJEiAKBGRhdGEYAiABKAsyEi5jbGFyaWZhaS5hcGkuRGF0YRIuCgpjcmVh",
            "dGVkX2F0GAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIvCgtt",
            "b2RpZmllZF9hdBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "KwoGc3RhdHVzGAYgASgLMhsuY2xhcmlmYWkuYXBpLnN0YXR1cy5TdGF0dXMS",
            "EwoLZGF0YXNldF9pZHMYByADKAlKBAgDEAQi2gEKCklucHV0Q291bnQSFwoJ",
            "cHJvY2Vzc2VkGAEgASgNQgSAtRgBEhgKCnRvX3Byb2Nlc3MYAiABKA1CBIC1",
            "GAESFAoGZXJyb3JzGAMgASgNQgSAtRgBEhgKCnByb2Nlc3NpbmcYBCABKA1C",
            "BIC1GAESFwoJcmVpbmRleGVkGAUgASgNQgSAtRgBEhgKCnRvX3JlaW5kZXgY",
            "BiABKA1CBIC1GAESHAoOcmVpbmRleF9lcnJvcnMYByABKA1CBIC1GAESGAoK",
            "cmVpbmRleGluZxgIIAEoDUIEgLUYASJuChlXb3JrZmxvd1Jlc3VsdHNTaW1p",
            "bGFyaXR5EigKC3Byb2JlX2lucHV0GAEgASgLMhMuY2xhcmlmYWkuYXBpLklu",
            "cHV0EicKDHBvb2xfcmVzdWx0cxgCIAMoCzIRLmNsYXJpZmFpLmFwaS5IaXQi",
            "9AEKA0tleRIKCgJpZBgBIAEoCRIMCgR0eXBlGAggASgJEhMKC2Rlc2NyaXB0",
            "aW9uGAIgASgJEg4KBnNjb3BlcxgDIAMoCRIRCgllbmRwb2ludHMYByADKAkS",
            "HwoEYXBwcxgEIAMoCzIRLmNsYXJpZmFpLmFwaS5BcHASLgoKY3JlYXRlZF9h",
            "dBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKZXhwaXJl",
            "c19hdBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASGgoSYXV0",
            "aG9yaXplZF9pZHBfaWRzGAkgAygJIvoECgVNb2RlbBIKCgJpZBgBIAEoCRIM",
            "CgRuYW1lGAIgASgJEi4KCmNyZWF0ZWRfYXQYAyABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEi8KC21vZGlmaWVkX2F0GBMgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBIUCgZhcHBfaWQYBCABKAlCBIC1GAESLQoL",
            "b3V0cHV0X2luZm8YBSABKAsyGC5jbGFyaWZhaS5hcGkuT3V0cHV0SW5mbxIx",
            "Cg1tb2RlbF92ZXJzaW9uGAYgASgLMhouY2xhcmlmYWkuYXBpLk1vZGVsVmVy",
            "c2lvbhIUCgxkaXNwbGF5X25hbWUYByABKAkSDwoHdXNlcl9pZBgJIAEoCRIr",
            "CgppbnB1dF9pbmZvGAwgASgLMhcuY2xhcmlmYWkuYXBpLklucHV0SW5mbxIr",
            "Cgp0cmFpbl9pbmZvGA0gASgLMhcuY2xhcmlmYWkuYXBpLlRyYWluSW5mbxIV",
            "Cg1tb2RlbF90eXBlX2lkGA4gASgJEiwKCnZpc2liaWxpdHkYDyABKAsyGC5j",
            "bGFyaWZhaS5hcGkuVmlzaWJpbGl0eRITCgtkZXNjcmlwdGlvbhgQIAEoCRIp",
            "CghtZXRhZGF0YRgRIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QSDQoF",
            "bm90ZXMYEiABKAkSFgoIdG9vbGtpdHMYFCADKAlCBIC1GAESFwoJdXNlX2Nh",
            "c2VzGBUgAygJQgSAtRgBEhIKCmlzX3N0YXJyZWQYFiABKAgSEgoKc3Rhcl9j",
            "b3VudBgXIAEoBUoECAgQCUoECAoQC0oECAsQDCJ0Cg5Nb2RlbFJlZmVyZW5j",
            "ZRIKCgJpZBgBIAEoCRIQCghtb2RlbF9pZBgCIAEoCRILCgN1cmwYAyABKAkS",
            "DAoEbmFtZRgEIAEoCRIpCghtZXRhZGF0YRgFIAEoCzIXLmdvb2dsZS5wcm90",
            "b2J1Zi5TdHJ1Y3QilwEKGE1vZGVsVmVyc2lvbklucHV0RXhhbXBsZRIKCgJp",
            "ZBgBIAEoCRIQCghtb2RlbF9pZBgCIAEoCRIYChBtb2RlbF92ZXJzaW9uX2lk",
            "GAMgASgJEiAKBGRhdGEYBCABKAsyEi5jbGFyaWZhaS5hcGkuRGF0YRIMCgRu",
            "YW1lGAUgASgJEhMKC2Rlc2NyaXB0aW9uGAYgASgJIugBCgpPdXRwdXRJbmZv",
            "EiAKBGRhdGEYASABKAsyEi5jbGFyaWZhaS5hcGkuRGF0YRIxCg1vdXRwdXRf",
            "Y29uZmlnGAIgASgLMhouY2xhcmlmYWkuYXBpLk91dHB1dENvbmZpZxIPCgdt",
            "ZXNzYWdlGAMgASgJEgwKBHR5cGUYBCABKAkSEAoIdHlwZV9leHQYBSABKAkS",
            "KwoKZmllbGRzX21hcBgGIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QS",
            "JwoGcGFyYW1zGAcgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdCJhCglJ",
            "bnB1dEluZm8SKwoKZmllbGRzX21hcBgBIAEoCzIXLmdvb2dsZS5wcm90b2J1",
            "Zi5TdHJ1Y3QSJwoGcGFyYW1zGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cnVjdCI0CglUcmFpbkluZm8SJwoGcGFyYW1zGAEgASgLMhcuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cnVjdCKDBAoMT3V0cHV0Q29uZmlnEikKG2NvbmNlcHRzX211",
            "dHVhbGx5X2V4Y2x1c2l2ZRgBIAEoCEIEgLUYARIgChJjbG9zZWRfZW52aXJv",
            "bm1lbnQYAiABKAhCBIC1GAESHQoRZXhpc3RpbmdfbW9kZWxfaWQYAyABKAlC",
            "AhgBEhAKCGxhbmd1YWdlGAQgASgJEhwKEGh5cGVyX3BhcmFtZXRlcnMYBSAB",
            "KAlCAhgBEhoKDG1heF9jb25jZXB0cxgGIAEoDUIEgLUYARIXCgltaW5fdmFs",
            "dWUYByABKAJCBIC1GAESLgoPc2VsZWN0X2NvbmNlcHRzGAggAygLMhUuY2xh",
            "cmlmYWkuYXBpLkNvbmNlcHQSGAoQdHJhaW5pbmdfdGltZW91dBgJIAEoDRIR",
            "CglzYW1wbGVfbXMYCiABKA0SLQoMaHlwZXJfcGFyYW1zGA0gASgLMhcuZ29v",
            "Z2xlLnByb3RvYnVmLlN0cnVjdBIeChZlbWJlZF9tb2RlbF92ZXJzaW9uX2lk",
            "GA4gASgJEikKIWZhaWxfb25fbWlzc2luZ19wb3NpdGl2ZV9leGFtcGxlcxgP",
            "IAEoCBIzCg5tb2RlbF9tZXRhZGF0YRgRIAEoCzIXLmdvb2dsZS5wcm90b2J1",
            "Zi5TdHJ1Y3RCAhgBSgQICxAMSgQIDBANSgQIEBARSgQIEhATIrADCglNb2Rl",
            "bFR5cGUSCgoCaWQYASABKAkSDQoFdGl0bGUYAiABKAkSEwoLZGVzY3JpcHRp",
            "b24YAyABKAkSDAoEdHlwZRgEIAEoCRIUCgxpbnB1dF9maWVsZHMYBSADKAkS",
            "FQoNb3V0cHV0X2ZpZWxkcxgGIAMoCRIRCgl0cmFpbmFibGUYCCABKAgSEQoJ",
            "Y3JlYXRhYmxlGAkgASgIEhUKDWludGVybmFsX29ubHkYCiABKAgSNwoRbW9k",
            "ZWxfdHlwZV9maWVsZHMYCyADKAsyHC5jbGFyaWZhaS5hcGkuTW9kZWxUeXBl",
            "RmllbGQSIgoacmVxdWlyZXNfc2VxdWVudGlhbF9mcmFtZXMYDCABKAgSEQoJ",
            "ZXZhbHVhYmxlGA0gASgIEkEKIGV4cGVjdGVkX3ByZXRyYWluZWRfaW5wdXRf",
            "ZmllbGRzGA4gASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdBJCCiFleHBl",
            "Y3RlZF9wcmV0cmFpbmVkX291dHB1dF9maWVsZHMYDyABKAsyFy5nb29nbGUu",
            "cHJvdG9idWYuU3RydWN0SgQIBxAIIpkFCg5Nb2RlbFR5cGVGaWVsZBIMCgRw",
            "YXRoGAEgASgJEkMKCmZpZWxkX3R5cGUYAiABKA4yLy5jbGFyaWZhaS5hcGku",
            "TW9kZWxUeXBlRmllbGQuTW9kZWxUeXBlRmllbGRUeXBlEi0KDWRlZmF1bHRf",
            "dmFsdWUYAyABKAsyFi5nb29nbGUucHJvdG9idWYuVmFsdWUSEwoLZGVzY3Jp",
            "cHRpb24YBCABKAkSEwoLcGxhY2Vob2xkZXIYBSABKAkSQgoXbW9kZWxfdHlw",
            "ZV9lbnVtX29wdGlvbnMYBiADKAsyIS5jbGFyaWZhaS5hcGkuTW9kZWxUeXBl",
            "RW51bU9wdGlvbhIVCg1pbnRlcm5hbF9vbmx5GAcgASgIEhAKCHJlcXVpcmVk",
            "GAggASgIEj8KFW1vZGVsX3R5cGVfcmFuZ2VfaW5mbxgJIAEoCzIgLmNsYXJp",
            "ZmFpLmFwaS5Nb2RlbFR5cGVSYW5nZUluZm8irAIKEk1vZGVsVHlwZUZpZWxk",
            "VHlwZRIhCh1JTlZBTElEX01PREVMX1RZUEVfRklFTERfVFlQRRAAEgsKB0JP",
            "T0xFQU4QARIKCgZTVFJJTkcQAhIKCgZOVU1CRVIQAxIVChFBUlJBWV9PRl9D",
            "T05DRVBUUxAEEiQKIEFSUkFZX09GX0NPTkNFUFRTX1dJVEhfVEhSRVNIT0xE",
            "EAUSCQoFUkFOR0UQBxIICgRFTlVNEAgSEQoNQ09MTEFCT1JBVE9SUxAJEggK",
            "BEpTT04QChIUChBBUlJBWV9PRl9OVU1CRVJTEAsSGQoVV09SS0ZMT1dfRU1C",
            "RURfTU9ERUxTEAwSFAoQQVJSQVlfT0ZfU1RSSU5HUxANEhIKDlJFQ1VSU0lW",
            "RV9FTlVNEA4iBAgGEAYiPAoSTW9kZWxUeXBlUmFuZ2VJbmZvEgsKA21pbhgB",
            "IAEoAhILCgNtYXgYAiABKAISDAoEc3RlcBgDIAEoAiKGAQoTTW9kZWxUeXBl",
            "RW51bU9wdGlvbhIKCgJpZBgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRI3",
            "ChFtb2RlbF90eXBlX2ZpZWxkcxgDIAMoCzIcLmNsYXJpZmFpLmFwaS5Nb2Rl",
            "bFR5cGVGaWVsZBIVCg1pbnRlcm5hbF9vbmx5GAQgASgIIkMKCk1vZGVsUXVl",
            "cnkSDAoEbmFtZRgBIAEoCRIQCgR0eXBlGAIgASgJQgIYARIVCg1tb2RlbF90",
            "eXBlX2lkGAMgASgJIuUDCgxNb2RlbFZlcnNpb24SCgoCaWQYASABKAkSLgoK",
            "Y3JlYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "KwoGc3RhdHVzGAMgASgLMhsuY2xhcmlmYWkuYXBpLnN0YXR1cy5TdGF0dXMS",
            "HAoUYWN0aXZlX2NvbmNlcHRfY291bnQYBCABKA0SKgoHbWV0cmljcxgFIAEo",
            "CzIZLmNsYXJpZmFpLmFwaS5FdmFsTWV0cmljcxIZChF0b3RhbF9pbnB1dF9j",
            "b3VudBgGIAEoDRIwCgxjb21wbGV0ZWRfYXQYCiABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEhMKC2Rlc2NyaXB0aW9uGAsgASgJEiwKCnZpc2li",
            "aWxpdHkYDCABKAsyGC5jbGFyaWZhaS5hcGkuVmlzaWJpbGl0eRIOCgZhcHBf",
            "aWQYDSABKAkSDwoHdXNlcl9pZBgOIAEoCRIvCgttb2RpZmllZF9hdBgPIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASKQoIbWV0YWRhdGEYECAB",
            "KAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Eg8KB2xpY2Vuc2UYESABKAlK",
            "BAgJEAoi4AEKFVByZXRyYWluZWRNb2RlbENvbmZpZxIKCgJpZBgBIAEoCRIM",
            "CgR0eXBlGAIgASgJEjEKEGlucHV0X2ZpZWxkc19tYXAYAyABKAsyFy5nb29n",
            "bGUucHJvdG9idWYuU3RydWN0EjIKEW91dHB1dF9maWVsZHNfbWFwGAQgASgL",
            "MhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdBIcChRkYXRhX3Byb3ZpZGVyX3Bh",
            "cmFtcxgFIAEoCRIVCg1tb2RlbF96aXBfdXJsGAYgASgJEhEKCW92ZXJ3cml0",
            "ZRgHIAEoCCI+CgpUcmFpblN0YXRzEjAKCmxvc3NfY3VydmUYASADKAsyHC5j",
            "bGFyaWZhaS5hcGkuTG9zc0N1cnZlRW50cnkiQgoOTG9zc0N1cnZlRW50cnkS",
            "DQoFZXBvY2gYASABKA0SEwoLZ2xvYmFsX3N0ZXAYAiABKA0SDAoEY29zdBgD",
            "IAEoAiIxCgpMYWJlbENvdW50EhQKDGNvbmNlcHRfbmFtZRgBIAEoCRINCgVj",
            "b3VudBgCIAEoDSJMChFMYWJlbERpc3RyaWJ1dGlvbhI3ChVwb3NpdGl2ZV9s",
            "YWJlbF9jb3VudHMYASADKAsyGC5jbGFyaWZhaS5hcGkuTGFiZWxDb3VudCJC",
            "ChdDb29jY3VycmVuY2VNYXRyaXhFbnRyeRILCgNyb3cYASABKAkSCwoDY29s",
            "GAIgASgJEg0KBWNvdW50GAMgASgNImAKEkNvb2NjdXJyZW5jZU1hdHJpeBI1",
            "CgZtYXRyaXgYASADKAsyJS5jbGFyaWZhaS5hcGkuQ29vY2N1cnJlbmNlTWF0",
            "cml4RW50cnkSEwoLY29uY2VwdF9pZHMYAiADKAkiTgoUQ29uZnVzaW9uTWF0",
            "cml4RW50cnkSEQoJcHJlZGljdGVkGAEgASgJEg4KBmFjdHVhbBgCIAEoCRIT",
            "CgV2YWx1ZRgEIAEoAkIEgLUYASJaCg9Db25mdXNpb25NYXRyaXgSMgoGbWF0",
            "cml4GAEgAygLMiIuY2xhcmlmYWkuYXBpLkNvbmZ1c2lvbk1hdHJpeEVudHJ5",
            "EhMKC2NvbmNlcHRfaWRzGAIgAygJInQKA1JPQxIRCgNmcHIYASADKAJCBIC1",
            "GAESEQoDdHByGAIgAygCQgSAtRgBEhgKCnRocmVzaG9sZHMYAyADKAJCBIC1",
            "GAESFQoNZnByX3Blcl9pbWFnZRgEIAMoAhIWCg5mcHJfcGVyX29iamVjdBgF",
            "IAMoAiJfChRQcmVjaXNpb25SZWNhbGxDdXJ2ZRIUCgZyZWNhbGwYASADKAJC",
            "BIC1GAESFwoJcHJlY2lzaW9uGAIgAygCQgSAtRgBEhgKCnRocmVzaG9sZHMY",
            "AyADKAJCBIC1GAEi6gIKDUJpbmFyeU1ldHJpY3MSFQoHbnVtX3BvcxgBIAEo",
            "DUIEgLUYARIVCgdudW1fbmVnGAIgASgNQgSAtRgBEhUKB251bV90b3QYAyAB",
            "KA1CBIC1GAESFQoHcm9jX2F1YxgEIAEoAkIEgLUYARIQCgJmMRgFIAEoAkIE",
            "gLUYARImCgdjb25jZXB0GAYgASgLMhUuY2xhcmlmYWkuYXBpLkNvbmNlcHQS",
            "JAoJcm9jX2N1cnZlGAcgASgLMhEuY2xhcmlmYWkuYXBpLlJPQxJCChZwcmVj",
            "aXNpb25fcmVjYWxsX2N1cnZlGAggASgLMiIuY2xhcmlmYWkuYXBpLlByZWNp",
            "c2lvblJlY2FsbEN1cnZlEhUKDWF2Z19wcmVjaXNpb24YCSABKAISEQoJYXJl",
            "YV9uYW1lGAogASgJEhAKCGFyZWFfbWluGAsgASgBEhAKCGFyZWFfbWF4GAwg",
            "ASgBEgsKA2lvdRgNIAEoAiKRAQoOVHJhY2tlck1ldHJpY3MSEAoIbW90X21v",
            "dGEYASABKAISGAoQbW90X251bV9zd2l0Y2hlcxgCIAEoBRISCgptb3JzZV9m",
            "cmFnGAMgASgCEhUKDWF2Z19wcmVjaXNpb24YBCABKAISDAoEYWlpZBgFIAEo",
            "CRIaChJ1bmlxdWVfc3dpdGNoX3JhdGUYBiABKAIi7gEKEEV2YWxUZXN0U2V0",
            "RW50cnkSDgoCaWQYASABKAlCAhgBEg8KA3VybBgCIAEoCUICGAESIgoFaW5w",
            "dXQYBiABKAsyEy5jbGFyaWZhaS5hcGkuSW5wdXQSMQoScHJlZGljdGVkX2Nv",
            "bmNlcHRzGAMgAygLMhUuY2xhcmlmYWkuYXBpLkNvbmNlcHQSNAoVZ3JvdW5k",
            "X3RydXRoX2NvbmNlcHRzGAQgAygLMhUuY2xhcmlmYWkuYXBpLkNvbmNlcHQS",
            "LAoKYW5ub3RhdGlvbhgFIAEoCzIYLmNsYXJpZmFpLmFwaS5Bbm5vdGF0aW9u",
            "Is0BCg5MT1BRRXZhbFJlc3VsdBIJCgFrGAEgASgFEiMKFXJlY2FsbF92c19i",
            "cnV0ZV9mb3JjZRgCIAEoAkIEgLUYARIoChprZW5kYWxsX3RhdV92c19icnV0",
            "ZV9mb3JjZRgDIAEoAkIEgLUYARIoChptb3N0X2ZyZXF1ZW50X2NvZGVfcGVy",
            "Y2VudBgEIAEoAkIEgLUYARIXCglsb3BxX25kY2cYBSABKAJCBIC1GAESHgoQ",
            "YnJ1dGVfZm9yY2VfbmRjZxgGIAEoAkIEgLUYASKMAwoOTWV0cmljc1N1bW1h",
            "cnkSGQoNdG9wMV9hY2N1cmFjeRgBIAEoAkICGAESGQoNdG9wNV9hY2N1cmFj",
            "eRgCIAEoAkICGAESHwoRbWFjcm9fYXZnX3JvY19hdWMYAyABKAJCBIC1GAES",
            "HwoRbWFjcm9fc3RkX3JvY19hdWMYBCABKAJCBIC1GAESIAoSbWFjcm9fYXZn",
            "X2YxX3Njb3JlGAUgASgCQgSAtRgBEiAKEm1hY3JvX3N0ZF9mMV9zY29yZRgG",
            "IAEoAkIEgLUYARIhChNtYWNyb19hdmdfcHJlY2lzaW9uGAcgASgCQgSAtRgB",
            "Eh4KEG1hY3JvX2F2Z19yZWNhbGwYCCABKAJCBIC1GAESIQoZbWVhbl9hdmdf",
            "cHJlY2lzaW9uX2lvdV81MBgKIAEoAhIkChxtZWFuX2F2Z19wcmVjaXNpb25f",
            "aW91X3JhbmdlGAsgASgCEjIKDGxvcHFfbWV0cmljcxgJIAMoCzIcLmNsYXJp",
            "ZmFpLmFwaS5MT1BRRXZhbFJlc3VsdCKvBAoLRXZhbE1ldHJpY3MSKwoGc3Rh",
            "dHVzGAEgASgLMhsuY2xhcmlmYWkuYXBpLnN0YXR1cy5TdGF0dXMSCgoCaWQY",
            "CiABKAkSLQoHc3VtbWFyeRgCIAEoCzIcLmNsYXJpZmFpLmFwaS5NZXRyaWNz",
            "U3VtbWFyeRI3ChBjb25mdXNpb25fbWF0cml4GAMgASgLMh0uY2xhcmlmYWku",
            "YXBpLkNvbmZ1c2lvbk1hdHJpeBI9ChNjb29jY3VycmVuY2VfbWF0cml4GAQg",
            "ASgLMiAuY2xhcmlmYWkuYXBpLkNvb2NjdXJyZW5jZU1hdHJpeBI1CgxsYWJl",
            "bF9jb3VudHMYBSABKAsyHy5jbGFyaWZhaS5hcGkuTGFiZWxEaXN0cmlidXRp",
            "b24SMwoOYmluYXJ5X21ldHJpY3MYBiADKAsyGy5jbGFyaWZhaS5hcGkuQmlu",
            "YXJ5TWV0cmljcxIwCgh0ZXN0X3NldBgHIAMoCzIeLmNsYXJpZmFpLmFwaS5F",
            "dmFsVGVzdFNldEVudHJ5EjQKD21ldHJpY3NfYnlfYXJlYRgIIAMoCzIbLmNs",
            "YXJpZmFpLmFwaS5CaW5hcnlNZXRyaWNzEjUKEG1ldHJpY3NfYnlfY2xhc3MY",
            "CSADKAsyGy5jbGFyaWZhaS5hcGkuQmluYXJ5TWV0cmljcxI1Cg90cmFja2Vy",
            "X21ldHJpY3MYCyADKAsyHC5jbGFyaWZhaS5hcGkuVHJhY2tlck1ldHJpY3Mi",
            "twEKC0ZpZWxkc1ZhbHVlEhgKEGNvbmZ1c2lvbl9tYXRyaXgYASABKAgSGwoT",
            "Y29vY2N1cnJlbmNlX21hdHJpeBgCIAEoCBIUCgxsYWJlbF9jb3VudHMYAyAB",
            "KAgSFgoOYmluYXJ5X21ldHJpY3MYBCABKAgSEAoIdGVzdF9zZXQYBSABKAgS",
            "FwoPbWV0cmljc19ieV9hcmVhGAYgASgIEhgKEG1ldHJpY3NfYnlfY2xhc3MY",
            "ByABKAgi2wEKBk91dHB1dBIKCgJpZBgBIAEoCRIrCgZzdGF0dXMYAiABKAsy",
            "Gy5jbGFyaWZhaS5hcGkuc3RhdHVzLlN0YXR1cxIuCgpjcmVhdGVkX2F0GAMg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIiCgVtb2RlbBgEIAEo",
            "CzITLmNsYXJpZmFpLmFwaS5Nb2RlbBIiCgVpbnB1dBgFIAEoCzITLmNsYXJp",
            "ZmFpLmFwaS5JbnB1dBIgCgRkYXRhGAYgASgLMhIuY2xhcmlmYWkuYXBpLkRh",
            "dGEiNAoJU2NvcGVEZXBzEg0KBXNjb3BlGAEgASgJEhgKEGRlcGVuZGluZ19z",
            "Y29wZXMYAiADKAkiOgoMRW5kcG9pbnREZXBzEhAKCGVuZHBvaW50GAEgASgJ",
            "EhgKEGRlcGVuZGluZ19zY29wZXMYAiADKAkibAoDSGl0EhMKBXNjb3JlGAEg",
            "ASgCQgSAtRgBEiIKBWlucHV0GAIgASgLMhMuY2xhcmlmYWkuYXBpLklucHV0",
            "EiwKCmFubm90YXRpb24YAyABKAsyGC5jbGFyaWZhaS5hcGkuQW5ub3RhdGlv",
            "biKNAQoDQW5kEiIKBWlucHV0GAEgASgLMhMuY2xhcmlmYWkuYXBpLklucHV0",
            "EiQKBm91dHB1dBgCIAEoCzIULmNsYXJpZmFpLmFwaS5PdXRwdXQSDgoGbmVn",
            "YXRlGAMgASgIEiwKCmFubm90YXRpb24YBCABKAsyGC5jbGFyaWZhaS5hcGku",
            "QW5ub3RhdGlvbiKEAQoFUXVlcnkSHwoEYW5kcxgBIAMoCzIRLmNsYXJpZmFp",
            "LmFwaS5BbmQSEAoIbGFuZ3VhZ2UYAiABKAkSJQoHZmlsdGVycxgDIAMoCzIU",
            "LmNsYXJpZmFpLmFwaS5GaWx0ZXISIQoFcmFua3MYBCADKAsyEi5jbGFyaWZh",
            "aS5hcGkuUmFuayLeAgoGU2VhcmNoEiIKBXF1ZXJ5GAEgASgLMhMuY2xhcmlm",
            "YWkuYXBpLlF1ZXJ5EgoKAmlkGAIgASgJEhYKDmFwcGxpY2F0aW9uX2lkGAMg",
            "ASgJEgwKBG5hbWUYBCABKAkSKQoFYXNfb2YYBSABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEhAKCGdpdF9oYXNoGAYgASgJEi4KCmNyZWF0ZWRf",
            "YXQYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi8KC21vZGlm",
            "aWVkX2F0GAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIRCglh",
            "bGdvcml0aG0YCSABKAkSDAoEc2F2ZRgKIAEoCBIRCgltaW5fdmFsdWUYCyAB",
            "KAISLAoKdmlzaWJpbGl0eRgMIAEoCzIYLmNsYXJpZmFpLmFwaS5WaXNpYmls",
            "aXR5IqQBCgZGaWx0ZXISDgoGbmVnYXRlGAMgASgIEiwKCmFubm90YXRpb24Y",
            "BCABKAsyGC5jbGFyaWZhaS5hcGkuQW5ub3RhdGlvbhIiCgVpbnB1dBgFIAEo",
            "CzITLmNsYXJpZmFpLmFwaS5JbnB1dBI4ChdsYXN0X3VwZGF0ZWRfdGltZV9y",
            "YW5nZRgGIAEoCzIXLmNsYXJpZmFpLmFwaS5UaW1lUmFuZ2UiaQoJVGltZVJh",
            "bmdlEi4KCnN0YXJ0X3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEiwKCGVuZF90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcCJECgRSYW5rEg4KBm5lZ2F0ZRgDIAEoCBIsCgphbm5vdGF0aW9u",
            "GAQgASgLMhguY2xhcmlmYWkuYXBpLkFubm90YXRpb24ijQIKF0Fubm90YXRp",
            "b25TZWFyY2hNZXRyaWNzEioKDGdyb3VuZF90cnV0aBgBIAEoCzIULmNsYXJp",
            "ZmFpLmFwaS5TZWFyY2gSLAoOc2VhcmNoX3RvX2V2YWwYAiABKAsyFC5jbGFy",
            "aWZhaS5hcGkuU2VhcmNoEioKB21ldHJpY3MYAyABKAsyGS5jbGFyaWZhaS5h",
            "cGkuRXZhbE1ldHJpY3MSIAoEZGF0YRgEIAEoCzISLmNsYXJpZmFpLmFwaS5E",
            "YXRhEhwKFGFjdGl2ZV9jb25jZXB0X2NvdW50GAUgASgNEiwKCnZpc2liaWxp",
            "dHkYBiABKAsyGC5jbGFyaWZhaS5hcGkuVmlzaWJpbGl0eSJmCgRUZXh0EgsK",
            "A3JhdxgBIAEoCRILCgN1cmwYAiABKAkSGwoTYWxsb3dfZHVwbGljYXRlX3Vy",
            "bBgDIAEoCBInCgZob3N0ZWQYBCABKAsyFy5jbGFyaWZhaS5hcGkuSG9zdGVk",
            "VVJMItYFCgRVc2VyEgoKAmlkGAEgASgJEhkKDXByaW1hcnlfZW1haWwYAiAB",
            "KAlCAhgBEhIKCmZpcnN0X25hbWUYAyABKAkSEQoJbGFzdF9uYW1lGAQgASgJ",
            "EhQKDGNvbXBhbnlfbmFtZRgFIAEoCRIRCglqb2JfdGl0bGUYEyABKAkSEAoI",
            "am9iX3JvbGUYFCABKAkSFQoJYmlsbF90eXBlGAcgASgJQgIYARIuCgpjcmVh",
            "dGVkX2F0GAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI5ChFk",
            "YXRlX2dkcHJfY29uc2VudBgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXBCAhgBEjgKEGRhdGVfdG9zX2NvbnNlbnQYCSABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wQgIYARI+ChZkYXRlX21hcmtldGluZ19jb25z",
            "ZW50GAogASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEICGAESLQoI",
            "bWV0YWRhdGEYCyABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgIYARI3",
            "Cg9lbWFpbF9hZGRyZXNzZXMYDCADKAsyGi5jbGFyaWZhaS5hcGkuRW1haWxB",
            "ZGRyZXNzQgIYARIYCgxpc19vcmdfYWRtaW4YDiABKAhCAhgBEiMKF3R3b19m",
            "YWN0b3JfYXV0aF9lbmFibGVkGA8gASgIQgIYARIXCgt0ZWFtc19jb3VudBgQ",
            "IAEoDUICGAESEgoKaXNfc3RhcnJlZBgVIAEoCBISCgpzdGFyX2NvdW50GBYg",
            "ASgFEiwKCnZpc2liaWxpdHkYESABKAsyGC5jbGFyaWZhaS5hcGkuVmlzaWJp",
            "bGl0eRItCgt1c2VyX2RldGFpbBgSIAEoCzIYLmNsYXJpZmFpLmFwaS5Vc2Vy",
            "RGV0YWlsSgQIDRAOIqsDCgpVc2VyRGV0YWlsEhUKDXByaW1hcnlfZW1haWwY",
            "ASABKAkSEQoJYmlsbF90eXBlGAIgASgJEjUKEWRhdGVfZ2Rwcl9jb25zZW50",
            "GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI0ChBkYXRlX3Rv",
            "c19jb25zZW50GAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI6",
            "ChZkYXRlX21hcmtldGluZ19jb25zZW50GAUgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIpCghtZXRhZGF0YRgGIAEoCzIXLmdvb2dsZS5wcm90",
            "b2J1Zi5TdHJ1Y3QSMwoPZW1haWxfYWRkcmVzc2VzGAcgAygLMhouY2xhcmlm",
            "YWkuYXBpLkVtYWlsQWRkcmVzcxIUCgxpc19vcmdfYWRtaW4YCCABKAgSHwoX",
            "dHdvX2ZhY3Rvcl9hdXRoX2VuYWJsZWQYCSABKAgSEwoLdGVhbXNfY291bnQY",
            "CiABKA0SDwoHY291bnRyeRgLIAEoCRINCgVzdGF0ZRgMIAEoCSJSCgxFbWFp",
            "bEFkZHJlc3MSEwoFZW1haWwYASABKAlCBIC1GAESFQoHcHJpbWFyeRgCIAEo",
            "CEIEgLUYARIWCgh2ZXJpZmllZBgDIAEoCEIEgLUYASIdCghQYXNzd29yZBIR",
            "CglwbGFpbnRleHQYASABKAkihgMKElBhc3N3b3JkVmlvbGF0aW9ucxIWCg5t",
            "aW5pbXVtX2xlbmd0aBgBIAEoCBIWCg5tYXhpbXVtX2xlbmd0aBgCIAEoCBIZ",
            "ChF1cHBlcl9jYXNlX25lZWRlZBgDIAEoCBIZChFsb3dlcl9jYXNlX25lZWRl",
            "ZBgEIAEoCBIWCg5udW1lcmljX25lZWRlZBgFIAEoCBIfChdub25fYWxwaGFu",
            "dW1lcmljX25lZWRlZBgGIAEoCBIWCg5wYXNzd29yZF9yZXVzZRgHIAEoCBIV",
            "Cg1leGNsdWRlX25hbWVzGAggASgIEhUKDWV4Y2x1ZGVfZW1haWwYCSABKAgS",
            "HAoUbm9fY29uZnVzaW5nX2xldHRlcnMYCiABKAgSGwoTbm9fc2ltcGxlX3Bh",
            "c3N3b3JkcxgLIAEoCBIYChBub19jb21tb25fdm9jYWJzGAwgASgIEhsKE25v",
            "X292ZXJsYXBfd2l0aF9vbGQYDSABKAgSGQoRcGFzc3dvcmRfbGlmZXNwYW4Y",
            "DiABKAgigQEKBVZpZGVvEgsKA3VybBgBIAEoCRIOCgZiYXNlNjQYAiABKAwS",
            "GwoTYWxsb3dfZHVwbGljYXRlX3VybBgEIAEoCBIVCg10aHVtYm5haWxfdXJs",
            "GAUgASgJEicKBmhvc3RlZBgGIAEoCzIXLmNsYXJpZmFpLmFwaS5Ib3N0ZWRV",
            "Ukwi9AIKCFdvcmtmbG93EgoKAmlkGAEgASgJEg4KBmFwcF9pZBgCIAEoCRIu",
            "CgpjcmVhdGVkX2F0GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBIpCgVub2RlcxgEIAMoCzIaLmNsYXJpZmFpLmFwaS5Xb3JrZmxvd05vZGUS",
            "KQoIbWV0YWRhdGEYBSABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0EiwK",
            "CnZpc2liaWxpdHkYBiABKAsyGC5jbGFyaWZhaS5hcGkuVmlzaWJpbGl0eRIP",
            "Cgd1c2VyX2lkGAcgASgJEi8KC21vZGlmaWVkX2F0GAggASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBIuCgd2ZXJzaW9uGAkgASgLMh0uY2xhcmlm",
            "YWkuYXBpLldvcmtmbG93VmVyc2lvbhISCgppc19zdGFycmVkGAogASgIEhIK",
            "CnN0YXJfY291bnQYCyABKAUiuAIKD1dvcmtmbG93VmVyc2lvbhIKCgJpZBgB",
            "IAEoCRITCgt3b3JrZmxvd19pZBgCIAEoCRIuCgpjcmVhdGVkX2F0GAMgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIvCgttb2RpZmllZF9hdBgE",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoKdmlzaWJpbGl0",
            "eRgFIAEoCzIYLmNsYXJpZmFpLmFwaS5WaXNpYmlsaXR5EikKBW5vZGVzGAYg",
            "AygLMhouY2xhcmlmYWkuYXBpLldvcmtmbG93Tm9kZRIpCghtZXRhZGF0YRgH",
            "IAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QSDgoGYXBwX2lkGAggASgJ",
            "Eg8KB3VzZXJfaWQYCSABKAkihQEKDFdvcmtmbG93Tm9kZRIKCgJpZBgBIAEo",
            "CRIiCgVtb2RlbBgCIAEoCzITLmNsYXJpZmFpLmFwaS5Nb2RlbBIsCgtub2Rl",
            "X2lucHV0cxgDIAMoCzIXLmNsYXJpZmFpLmFwaS5Ob2RlSW5wdXQSFwoPc3Vw",
            "cHJlc3Nfb3V0cHV0GAQgASgIIhwKCU5vZGVJbnB1dBIPCgdub2RlX2lkGAEg",
            "ASgJIoECCg5Xb3JrZmxvd1Jlc3VsdBIKCgJpZBgBIAEoCRIrCgZzdGF0dXMY",
            "AiABKAsyGy5jbGFyaWZhaS5hcGkuc3RhdHVzLlN0YXR1cxIuCgpjcmVhdGVk",
            "X2F0GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIiCgVtb2Rl",
            "bBgEIAEoCzITLmNsYXJpZmFpLmFwaS5Nb2RlbBIiCgVpbnB1dBgFIAEoCzIT",
            "LmNsYXJpZmFpLmFwaS5JbnB1dBIlCgdvdXRwdXRzGAYgAygLMhQuY2xhcmlm",
            "YWkuYXBpLk91dHB1dBIXCg9zdXBwcmVzc19vdXRwdXQYByABKAgiGwoNV29y",
            "a2Zsb3dTdGF0ZRIKCgJpZBgBIAEoCSKOAgoOQXBwRHVwbGljYXRpb24SCgoC",
            "aWQYASABKAkSEgoKbmV3X2FwcF9pZBgCIAEoCRIUCgxuZXdfYXBwX25hbWUY",
            "AyABKAkSKwoGc3RhdHVzGAQgASgLMhsuY2xhcmlmYWkuYXBpLnN0YXR1cy5T",
            "dGF0dXMSLgoKY3JlYXRlZF9hdBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASNAoQbGFzdF9tb2RpZmllZF9hdBgGIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASMwoGZmlsdGVyGAcgASgLMiMuY2xhcmlmYWku",
            "YXBpLkFwcER1cGxpY2F0aW9uRmlsdGVycyKKAQoVQXBwRHVwbGljYXRpb25G",
            "aWx0ZXJzEhMKC2NvcHlfaW5wdXRzGAEgASgIEhUKDWNvcHlfY29uY2VwdHMY",
            "AiABKAgSGAoQY29weV9hbm5vdGF0aW9ucxgDIAEoCBITCgtjb3B5X21vZGVs",
            "cxgEIAEoCBIWCg5jb3B5X3dvcmtmbG93cxgFIAEoCCLNBQoEVGFzaxIKCgJp",
            "ZBgBIAEoCRIuCgpjcmVhdGVkX2F0GAIgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBIvCgttb2RpZmllZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASKQoEdHlwZRgEIAEoDjIbLmNsYXJpZmFpLmFwaS5U",
            "YXNrLlRhc2tUeXBlEhMKC2Rlc2NyaXB0aW9uGAUgASgJEigKBndvcmtlchgG",
            "IAEoCzIYLmNsYXJpZmFpLmFwaS5UYXNrV29ya2VyEhMKC2NvbmNlcHRfaWRz",
            "GAcgAygJEjMKDGlucHV0X3NvdXJjZRgIIAEoCzIdLmNsYXJpZmFpLmFwaS5U",
            "YXNrSW5wdXRTb3VyY2USEQoJc2FtcGxlX21zGAkgASgNEjMKDGFpX2Fzc2lz",
            "dGFudBgKIAEoCzIdLmNsYXJpZmFpLmFwaS5UYXNrQUlBc3Npc3RhbnQSKAoG",
            "cmV2aWV3GAsgASgLMhguY2xhcmlmYWkuYXBpLlRhc2tSZXZpZXcSKwoGc3Rh",
            "dHVzGAwgASgLMhsuY2xhcmlmYWkuYXBpLnN0YXR1cy5TdGF0dXMSDAoEbmFt",
            "ZRgNIAEoCRI6ChBhaV9hc3Npc3RfcGFyYW1zGA4gASgLMiAuY2xhcmlmYWku",
            "YXBpLkFpQXNzaXN0UGFyYW1ldGVycxIsCgp2aXNpYmlsaXR5GA8gASgLMhgu",
            "Y2xhcmlmYWkuYXBpLlZpc2liaWxpdHkSDgoGYXBwX2lkGBAgASgJEg8KB3Vz",
            "ZXJfaWQYESABKAkibAoIVGFza1R5cGUSEAoMVFlQRV9OT1RfU0VUEAASGwoX",
            "Q09OQ0VQVFNfQ0xBU1NJRklDQVRJT04QARIaChZCT1VORElOR19CT1hfREVU",
            "RUNUSU9OEAISFQoRUE9MWUdPTl9ERVRFQ1RJT04QAyJgChJBaUFzc2lzdFBh",
            "cmFtZXRlcnMSFQoNbWluX3RocmVzaG9sZBgBIAEoAhIVCg1tYXhfdGhyZXNo",
            "b2xkGAIgASgCEhwKFGNvbmNlcHRfcmVsYXRpb25faWRzGAMgAygJIpgCCgpU",
            "YXNrV29ya2VyEj0KCHN0cmF0ZWd5GAEgASgOMisuY2xhcmlmYWkuYXBpLlRh",
            "c2tXb3JrZXIuVGFza1dvcmtlclN0cmF0ZWd5EhAKCHVzZXJfaWRzGAIgAygJ",
            "ElQKGXBhcnRpdGlvbmVkX3N0cmF0ZWd5X2luZm8YAyABKAsyLy5jbGFyaWZh",
            "aS5hcGkuVGFza1dvcmtlclBhcnRpdGlvbmVkU3RyYXRlZ3lJbmZvSAAiUgoS",
            "VGFza1dvcmtlclN0cmF0ZWd5EhsKF1dPUktFUl9TVFJBVEVHWV9OT1RfU0VU",
            "EAASDwoLUEFSVElUSU9ORUQQAhIICgRGVUxMEAMiBAgBEAFCDwoNc3RyYXRl",
            "Z3lfaW5mbyKpAgohVGFza1dvcmtlclBhcnRpdGlvbmVkU3RyYXRlZ3lJbmZv",
            "ElsKBHR5cGUYASABKA4yTS5jbGFyaWZhaS5hcGkuVGFza1dvcmtlclBhcnRp",
            "dGlvbmVkU3RyYXRlZ3lJbmZvLlRhc2tXb3JrZXJQYXJ0aXRpb25lZFN0cmF0",
            "ZWd5EhkKEXdvcmtlcnNfcGVyX2lucHV0GAIgASgFEigKB3dlaWdodHMYAyAB",
            "KAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0ImIKHVRhc2tXb3JrZXJQYXJ0",
            "aXRpb25lZFN0cmF0ZWd5EicKI1BBUlRJVElPTkVEX1dPUktFUl9TVFJBVEVH",
            "WV9OT1RfU0VUEAASCgoGRVZFTkxZEAESDAoIV0VJR0hURUQQAiK2AQoPVGFz",
            "a0lucHV0U291cmNlEj8KBHR5cGUYASABKA4yMS5jbGFyaWZhaS5hcGkuVGFz",
            "a0lucHV0U291cmNlLlRhc2tJbnB1dFNvdXJjZVR5cGUSCgoCaWQYAiABKAki",
            "VgoTVGFza0lucHV0U291cmNlVHlwZRIdChlJTlBVVF9TT1VSQ0VfVFlQRV9O",
            "T1RfU0VUEAASDgoKQUxMX0lOUFVUUxABEhAKDFNBVkVEX1NFQVJDSBACIukC",
            "CgpUYXNrUmV2aWV3Ej0KCHN0cmF0ZWd5GAEgASgOMisuY2xhcmlmYWkuYXBp",
            "LlRhc2tSZXZpZXcuVGFza1Jldmlld1N0cmF0ZWd5EhAKCHVzZXJfaWRzGAIg",
            "AygJEkoKFG1hbnVhbF9zdHJhdGVneV9pbmZvGAMgASgLMiouY2xhcmlmYWku",
            "YXBpLlRhc2tSZXZpZXdNYW51YWxTdHJhdGVneUluZm9IABJQChdjb25zZW5z",
            "dXNfc3RyYXRlZ3lfaW5mbxgEIAEoCzItLmNsYXJpZmFpLmFwaS5UYXNrUmV2",
            "aWV3Q29uc2Vuc3VzU3RyYXRlZ3lJbmZvSAAiWwoSVGFza1Jldmlld1N0cmF0",
            "ZWd5EiAKHFRBU0tfUkVWSUVXX1NUUkFURUdZX05PVF9TRVQQABIICgROT05F",
            "EAESCgoGTUFOVUFMEAISDQoJQ09OU0VOU1VTEANCDwoNc3RyYXRlZ3lfaW5m",
            "byI5ChxUYXNrUmV2aWV3TWFudWFsU3RyYXRlZ3lJbmZvEhkKEXNhbXBsZV9w",
            "ZXJjZW50YWdlGAEgASgCIkMKH1Rhc2tSZXZpZXdDb25zZW5zdXNTdHJhdGVn",
            "eUluZm8SGgoSYXBwcm92YWxfdGhyZXNob2xkGAIgASgNSgQIARACIiYKD1Rh",
            "c2tBSUFzc2lzdGFudBITCgt3b3JrZmxvd19pZBgBIAEoCSK8AQoWVGFza1N0",
            "YXR1c0NvdW50UGVyVXNlchIPCgd1c2VyX2lkGAEgASgJEhUKB3BlbmRpbmcY",
            "AiABKA1CBIC1GAESHQoPYXdhaXRpbmdfcmV2aWV3GAMgASgNQgSAtRgBEhUK",
            "B3N1Y2Nlc3MYBCABKA1CBIC1GAESGwoNcmV2aWV3X2RlbmllZBgFIAEoDUIE",
            "gLUYARInChlhd2FpdGluZ19jb25zZW5zdXNfcmV2aWV3GAYgASgNQgSAtRgB",
            "IoECCglDb2xsZWN0b3ISCgoCaWQYASABKAkSEwoLZGVzY3JpcHRpb24YAiAB",
            "KAkSLgoKY3JlYXRlZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASHQoVcHJlX3F1ZXVlX3dvcmtmbG93X2lkGAQgASgJEh4KFnBvc3Rf",
            "cXVldWVfd29ya2Zsb3dfaWQYBSABKAkSNwoQY29sbGVjdG9yX3NvdXJjZRgG",
            "IAEoCzIdLmNsYXJpZmFpLmFwaS5Db2xsZWN0b3JTb3VyY2USKwoGc3RhdHVz",
            "GAcgASgLMhsuY2xhcmlmYWkuYXBpLnN0YXR1cy5TdGF0dXMidAoPQ29sbGVj",
            "dG9yU291cmNlEmEKJ2FwaV9wb3N0X21vZGVsX291dHB1dHNfY29sbGVjdG9y",
            "X3NvdXJjZRgCIAEoCzIwLmNsYXJpZmFpLmFwaS5BUElQb3N0TW9kZWxPdXRw",
            "dXRzQ29sbGVjdG9yU291cmNlIpkBCiJBUElQb3N0TW9kZWxPdXRwdXRzQ29s",
            "bGVjdG9yU291cmNlEhUKDW1vZGVsX3VzZXJfaWQYASABKAkSFAoMbW9kZWxf",
            "YXBwX2lkGAIgASgJEhAKCG1vZGVsX2lkGAMgASgJEhgKEG1vZGVsX3ZlcnNp",
            "b25faWQYBCABKAkSGgoScG9zdF9pbnB1dHNfa2V5X2lkGAUgASgJIlIKCVN0",
            "YXRWYWx1ZRIoCgR0aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBINCgV2YWx1ZRgCIAEoAhIMCgR0YWdzGAMgAygJIqYBChhTdGF0VmFs",
            "dWVBZ2dyZWdhdGVSZXN1bHQSPwoVc3RhdF92YWx1ZV9hZ2dyZWdhdGVzGAEg",
            "AygLMiAuY2xhcmlmYWkuYXBpLlN0YXRWYWx1ZUFnZ3JlZ2F0ZRJJChpzdGF0",
            "X3ZhbHVlX2FnZ3JlZ2F0ZV9xdWVyeRgCIAEoCzIlLmNsYXJpZmFpLmFwaS5T",
            "dGF0VmFsdWVBZ2dyZWdhdGVRdWVyeSJ0ChJTdGF0VmFsdWVBZ2dyZWdhdGUS",
            "KAoEdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFwoP",
            "YWdncmVnYXRlX3ZhbHVlGAIgASgCEg0KBWNvdW50GAMgASgEEgwKBHRhZ3MY",
            "BCADKAkikQIKF1N0YXRWYWx1ZUFnZ3JlZ2F0ZVF1ZXJ5EgwKBHRhZ3MYASAD",
            "KAkSEgoKdGFnX2dyb3VwcxgCIAMoCRI7ChNzdGF0X3ZhbHVlX2FnZ190eXBl",
            "GAMgASgOMh4uY2xhcmlmYWkuYXBpLlN0YXRWYWx1ZUFnZ1R5cGUSOQoSc3Rh",
            "dF90aW1lX2FnZ190eXBlGAQgASgOMh0uY2xhcmlmYWkuYXBpLlN0YXRUaW1l",
            "QWdnVHlwZRIuCgpzdGFydF90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBIsCghlbmRfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXAihwEKClZpc2liaWxpdHkSMwoIZ2V0dGFibGUYASABKA4y",
            "IS5jbGFyaWZhaS5hcGkuVmlzaWJpbGl0eS5HZXR0YWJsZSJECghHZXR0YWJs",
            "ZRIWChJVTktOT1dOX1ZJU0lCSUxJVFkQABILCgdQUklWQVRFEAoSBwoDT1JH",
            "EB4SCgoGUFVCTElDEDIiWAoOVHJlbmRpbmdNZXRyaWMSDwoHdXNlcl9pZBgB",
            "IAEoCRIOCgZhcHBfaWQYAiABKAkSEQoJb2JqZWN0X2lkGAMgASgJEhIKCnZp",
            "ZXdfY291bnQYBCABKAQiZgoLVGltZVNlZ21lbnQSCgoCaWQYASABKAkSIAoE",
            "ZGF0YRgCIAEoCzISLmNsYXJpZmFpLmFwaS5EYXRhEikKCXRpbWVfaW5mbxgD",
            "IAEoCzIWLmNsYXJpZmFpLmFwaS5UaW1lSW5mbyJECghUaW1lSW5mbxISCgpu",
            "dW1fZnJhbWVzGAEgASgNEhIKCmJlZ2luX3RpbWUYAiABKA0SEAoIZW5kX3Rp",
            "bWUYAyABKA0qSAoQRXhwaXJhdGlvbkFjdGlvbhIdChlFWFBJUkFUSU9OX0FD",
            "VElPTl9OT1RfU0VUEAASCQoFREVMQVkQARIKCgZFWFBJUlkQAipNCgxMaWNl",
            "bnNlU2NvcGUSGQoVTElDRU5TRV9TQ09QRV9OT1RfU0VUEAASCwoHUFJFRElD",
            "VBABEgkKBVRSQUlOEAISCgoGU0VBUkNIEAMqjwEKD1ZhbHVlQ29tcGFyYXRv",
            "chIdChlDT05DRVBUX1RIUkVTSE9MRF9OT1RfU0VUEAASEAoMR1JFQVRFUl9U",
            "SEFOEAESGQoVR1JFQVRFUl9USEFOX09SX0VRVUFMEAISDQoJTEVTU19USEFO",
            "EAMSFgoSTEVTU19USEFOX09SX0VRVUFMEAQSCQoFRVFVQUwQBSozCg5FdmFs",
            "dWF0aW9uVHlwZRISCg5DbGFzc2lmaWNhdGlvbhAAEg0KCURldGVjdGlvbhAB",
            "KmYKDEFQSUV2ZW50VHlwZRIaChZBUElfRVZFTlRfVFlQRV9OT1RfU0VUEAAS",
            "EwoPT05fUFJFTV9QUkVESUNUEAESEQoNT05fUFJFTV9UUkFJThACEhIKDk9O",
            "X1BSRU1fU0VBUkNIEAMqPAoRVXNhZ2VJbnRlcnZhbFR5cGUSCQoFdW5kZWYQ",
            "ABIHCgNkYXkQARIJCgVtb250aBACEggKBHllYXIQAyodCghSb2xlVHlwZRII",
            "CgRURUFNEAASBwoDT1JHEAEqJAoQU3RhdFZhbHVlQWdnVHlwZRIHCgNTVU0Q",
            "ABIHCgNBVkcQASpgCg9TdGF0VGltZUFnZ1R5cGUSDwoLTk9fVElNRV9BR0cQ",
            "ABIICgRZRUFSEAESCQoFTU9OVEgQAhIICgRXRUVLEAMSBwoDREFZEAQSCAoE",
            "SE9VUhAFEgoKBk1JTlVURRAGKmIKE1ZhbGlkYXRpb25FcnJvclR5cGUSIQod",
            "VkFMSURBVElPTl9FUlJPUl9UWVBFX05PVF9TRVQQABIOCgpSRVNUUklDVEVE",
            "EAESDAoIREFUQUJBU0UQAhIKCgZGT1JNQVQQA0JdChVjb20uY2xhcmlmYWku",
            "Z3JwYy5hcGlQAVo7Z2l0aHViLmNvbS9DbGFyaWZhaS9jbGFyaWZhaS1nby1n",
            "cnBjL3Byb3RvL2NsYXJpZmFpL2FwaS9hcGmiAgRDQUlQYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Clarifai.Api.Status.StatusReflection.Descriptor, global::Clarifai.Api.Utils.ExtensionsReflection.Descriptor, global::Clarifai.Auth.Util.ExtensionReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Clarifai.Api.ExpirationAction), typeof(global::Clarifai.Api.LicenseScope), typeof(global::Clarifai.Api.ValueComparator), typeof(global::Clarifai.Api.EvaluationType), typeof(global::Clarifai.Api.APIEventType), typeof(global::Clarifai.Api.UsageIntervalType), typeof(global::Clarifai.Api.RoleType), typeof(global::Clarifai.Api.StatValueAggType), typeof(global::Clarifai.Api.StatTimeAggType), typeof(global::Clarifai.Api.ValidationErrorType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Annotation), global::Clarifai.Api.Annotation.Parser, new[]{ "Id", "InputId", "Data", "AnnotationInfo", "UserId", "ModelVersionId", "EmbedModelVersionId", "Status", "CreatedAt", "ModifiedAt", "Trusted", "InputLevel", "ConsensusInfo", "TaskId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.App), global::Clarifai.Api.App.Parser, new[]{ "Id", "Name", "DefaultLanguage", "DefaultWorkflowId", "UserId", "CreatedAt", "ModifiedAt", "LegalConsentStatus", "Metadata", "Description", "SampleMs", "Visibility", "DataTierId", "IsStarred", "StarCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.AppQuery), global::Clarifai.Api.AppQuery.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Collaborator), global::Clarifai.Api.Collaborator.Parser, new[]{ "Id", "App", "User", "Scopes", "Endpoints", "CreatedAt", "ModifiedAt", "DeletedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Collaboration), global::Clarifai.Api.Collaboration.Parser, new[]{ "App", "AppOwner", "Scopes", "Endpoints", "CreatedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Audio), global::Clarifai.Api.Audio.Parser, new[]{ "Url", "Base64", "AllowDuplicateUrl", "Hosted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Track), global::Clarifai.Api.Track.Parser, new[]{ "Id", "Data", "TrackInfo", "TimeInfo" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Track.Types.TrackInfo), global::Clarifai.Api.Track.Types.TrackInfo.Parser, new[]{ "NumFrames", "BeginTime", "EndTime", "Quality" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Cluster), global::Clarifai.Api.Cluster.Parser, new[]{ "Id", "Count", "Score", "Hits", "Projection" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Color), global::Clarifai.Api.Color.Parser, new[]{ "RawHex", "W3C", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.W3C), global::Clarifai.Api.W3C.Parser, new[]{ "Hex", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.UserAppIDSet), global::Clarifai.Api.UserAppIDSet.Parser, new[]{ "UserId", "AppId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.PatchAction), global::Clarifai.Api.PatchAction.Parser, new[]{ "Op", "MergeConflictResolution", "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Concept), global::Clarifai.Api.Concept.Parser, new[]{ "Id", "Name", "Value", "CreatedAt", "Language", "AppId", "Definition", "VocabId", "Visibility", "UserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ConceptCount), global::Clarifai.Api.ConceptCount.Parser, new[]{ "Id", "Name", "ConceptTypeCount", "DetailConceptCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ConceptTypeCount), global::Clarifai.Api.ConceptTypeCount.Parser, new[]{ "Positive", "Negative" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.DetailConceptCount), global::Clarifai.Api.DetailConceptCount.Parser, new[]{ "Processed", "ToProcess", "Errors", "Processing" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ConceptQuery), global::Clarifai.Api.ConceptQuery.Parser, new[]{ "Name", "Language", "WorkflowId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ConceptRelation), global::Clarifai.Api.ConceptRelation.Parser, new[]{ "Id", "SubjectConcept", "ObjectConcept", "Predicate", "KnowledgeGraphId", "Visibility" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.KnowledgeGraph), global::Clarifai.Api.KnowledgeGraph.Parser, new[]{ "Id", "Name", "Description", "ExamplesAppId", "SampledExamplesAppId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ConceptMappingJob), global::Clarifai.Api.ConceptMappingJob.Parser, new[]{ "KnowledgeGraphId", "ConceptIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ConceptLanguage), global::Clarifai.Api.ConceptLanguage.Parser, new[]{ "Id", "Name", "Definition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Data), global::Clarifai.Api.Data.Parser, new[]{ "Image", "Video", "Concepts", "Metadata", "Geo", "Colors", "Clusters", "Embeddings", "Regions", "Frames", "Text", "Audio", "Tracks", "TimeSegments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Region), global::Clarifai.Api.Region.Parser, new[]{ "Id", "RegionInfo", "Data", "Value", "TrackId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.RegionInfo), global::Clarifai.Api.RegionInfo.Parser, new[]{ "BoundingBox", "Mask", "Polygon", "Point" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.BoundingBox), global::Clarifai.Api.BoundingBox.Parser, new[]{ "TopRow", "LeftCol", "BottomRow", "RightCol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.FrameInfo), global::Clarifai.Api.FrameInfo.Parser, new[]{ "Index", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Frame), global::Clarifai.Api.Frame.Parser, new[]{ "FrameInfo", "Data", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Mask), global::Clarifai.Api.Mask.Parser, new[]{ "Image" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Polygon), global::Clarifai.Api.Polygon.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Point), global::Clarifai.Api.Point.Parser, new[]{ "Row", "Col", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Embedding), global::Clarifai.Api.Embedding.Parser, new[]{ "Vector", "NumDimensions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.GeoPoint), global::Clarifai.Api.GeoPoint.Parser, new[]{ "Longitude", "Latitude" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.GeoLimit), global::Clarifai.Api.GeoLimit.Parser, new[]{ "Type", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.GeoBoxedPoint), global::Clarifai.Api.GeoBoxedPoint.Parser, new[]{ "GeoPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Geo), global::Clarifai.Api.Geo.Parser, new[]{ "GeoPoint", "GeoLimit", "GeoBox" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Image), global::Clarifai.Api.Image.Parser, new[]{ "Url", "Base64", "AllowDuplicateUrl", "Hosted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.HostedURL), global::Clarifai.Api.HostedURL.Parser, new[]{ "Prefix", "Suffix", "Sizes", "Crossorigin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Input), global::Clarifai.Api.Input.Parser, new[]{ "Id", "Data", "CreatedAt", "ModifiedAt", "Status", "DatasetIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.InputCount), global::Clarifai.Api.InputCount.Parser, new[]{ "Processed", "ToProcess", "Errors", "Processing", "Reindexed", "ToReindex", "ReindexErrors", "Reindexing" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.WorkflowResultsSimilarity), global::Clarifai.Api.WorkflowResultsSimilarity.Parser, new[]{ "ProbeInput", "PoolResults" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Key), global::Clarifai.Api.Key.Parser, new[]{ "Id", "Type", "Description", "Scopes", "Endpoints", "Apps", "CreatedAt", "ExpiresAt", "AuthorizedIdpIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Model), global::Clarifai.Api.Model.Parser, new[]{ "Id", "Name", "CreatedAt", "ModifiedAt", "AppId", "OutputInfo", "ModelVersion", "DisplayName", "UserId", "InputInfo", "TrainInfo", "ModelTypeId", "Visibility", "Description", "Metadata", "Notes", "Toolkits", "UseCases", "IsStarred", "StarCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ModelReference), global::Clarifai.Api.ModelReference.Parser, new[]{ "Id", "ModelId", "Url", "Name", "Metadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ModelVersionInputExample), global::Clarifai.Api.ModelVersionInputExample.Parser, new[]{ "Id", "ModelId", "ModelVersionId", "Data", "Name", "Description" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.OutputInfo), global::Clarifai.Api.OutputInfo.Parser, new[]{ "Data", "OutputConfig", "Message", "Type", "TypeExt", "FieldsMap", "Params" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.InputInfo), global::Clarifai.Api.InputInfo.Parser, new[]{ "FieldsMap", "Params" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TrainInfo), global::Clarifai.Api.TrainInfo.Parser, new[]{ "Params" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.OutputConfig), global::Clarifai.Api.OutputConfig.Parser, new[]{ "ConceptsMutuallyExclusive", "ClosedEnvironment", "ExistingModelId", "Language", "HyperParameters", "MaxConcepts", "MinValue", "SelectConcepts", "TrainingTimeout", "SampleMs", "HyperParams", "EmbedModelVersionId", "FailOnMissingPositiveExamples", "ModelMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ModelType), global::Clarifai.Api.ModelType.Parser, new[]{ "Id", "Title", "Description", "Type", "InputFields", "OutputFields", "Trainable", "Creatable", "InternalOnly", "ModelTypeFields", "RequiresSequentialFrames", "Evaluable", "ExpectedPretrainedInputFields", "ExpectedPretrainedOutputFields" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ModelTypeField), global::Clarifai.Api.ModelTypeField.Parser, new[]{ "Path", "FieldType", "DefaultValue", "Description", "Placeholder", "ModelTypeEnumOptions", "InternalOnly", "Required", "ModelTypeRangeInfo" }, null, new[]{ typeof(global::Clarifai.Api.ModelTypeField.Types.ModelTypeFieldType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ModelTypeRangeInfo), global::Clarifai.Api.ModelTypeRangeInfo.Parser, new[]{ "Min", "Max", "Step" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ModelTypeEnumOption), global::Clarifai.Api.ModelTypeEnumOption.Parser, new[]{ "Id", "Description", "ModelTypeFields", "InternalOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ModelQuery), global::Clarifai.Api.ModelQuery.Parser, new[]{ "Name", "Type", "ModelTypeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ModelVersion), global::Clarifai.Api.ModelVersion.Parser, new[]{ "Id", "CreatedAt", "Status", "ActiveConceptCount", "Metrics", "TotalInputCount", "CompletedAt", "Description", "Visibility", "AppId", "UserId", "ModifiedAt", "Metadata", "License" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.PretrainedModelConfig), global::Clarifai.Api.PretrainedModelConfig.Parser, new[]{ "Id", "Type", "InputFieldsMap", "OutputFieldsMap", "DataProviderParams", "ModelZipUrl", "Overwrite" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TrainStats), global::Clarifai.Api.TrainStats.Parser, new[]{ "LossCurve" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.LossCurveEntry), global::Clarifai.Api.LossCurveEntry.Parser, new[]{ "Epoch", "GlobalStep", "Cost" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.LabelCount), global::Clarifai.Api.LabelCount.Parser, new[]{ "ConceptName", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.LabelDistribution), global::Clarifai.Api.LabelDistribution.Parser, new[]{ "PositiveLabelCounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.CooccurrenceMatrixEntry), global::Clarifai.Api.CooccurrenceMatrixEntry.Parser, new[]{ "Row", "Col", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.CooccurrenceMatrix), global::Clarifai.Api.CooccurrenceMatrix.Parser, new[]{ "Matrix", "ConceptIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ConfusionMatrixEntry), global::Clarifai.Api.ConfusionMatrixEntry.Parser, new[]{ "Predicted", "Actual", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ConfusionMatrix), global::Clarifai.Api.ConfusionMatrix.Parser, new[]{ "Matrix", "ConceptIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ROC), global::Clarifai.Api.ROC.Parser, new[]{ "Fpr", "Tpr", "Thresholds", "FprPerImage", "FprPerObject" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.PrecisionRecallCurve), global::Clarifai.Api.PrecisionRecallCurve.Parser, new[]{ "Recall", "Precision", "Thresholds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.BinaryMetrics), global::Clarifai.Api.BinaryMetrics.Parser, new[]{ "NumPos", "NumNeg", "NumTot", "RocAuc", "F1", "Concept", "RocCurve", "PrecisionRecallCurve", "AvgPrecision", "AreaName", "AreaMin", "AreaMax", "Iou" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TrackerMetrics), global::Clarifai.Api.TrackerMetrics.Parser, new[]{ "MotMota", "MotNumSwitches", "MorseFrag", "AvgPrecision", "Aiid", "UniqueSwitchRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.EvalTestSetEntry), global::Clarifai.Api.EvalTestSetEntry.Parser, new[]{ "Id", "Url", "Input", "PredictedConcepts", "GroundTruthConcepts", "Annotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.LOPQEvalResult), global::Clarifai.Api.LOPQEvalResult.Parser, new[]{ "K", "RecallVsBruteForce", "KendallTauVsBruteForce", "MostFrequentCodePercent", "LopqNdcg", "BruteForceNdcg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.MetricsSummary), global::Clarifai.Api.MetricsSummary.Parser, new[]{ "Top1Accuracy", "Top5Accuracy", "MacroAvgRocAuc", "MacroStdRocAuc", "MacroAvgF1Score", "MacroStdF1Score", "MacroAvgPrecision", "MacroAvgRecall", "MeanAvgPrecisionIou50", "MeanAvgPrecisionIouRange", "LopqMetrics" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.EvalMetrics), global::Clarifai.Api.EvalMetrics.Parser, new[]{ "Status", "Id", "Summary", "ConfusionMatrix", "CooccurrenceMatrix", "LabelCounts", "BinaryMetrics", "TestSet", "MetricsByArea", "MetricsByClass", "TrackerMetrics" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.FieldsValue), global::Clarifai.Api.FieldsValue.Parser, new[]{ "ConfusionMatrix", "CooccurrenceMatrix", "LabelCounts", "BinaryMetrics", "TestSet", "MetricsByArea", "MetricsByClass" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Output), global::Clarifai.Api.Output.Parser, new[]{ "Id", "Status", "CreatedAt", "Model", "Input", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.ScopeDeps), global::Clarifai.Api.ScopeDeps.Parser, new[]{ "Scope", "DependingScopes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.EndpointDeps), global::Clarifai.Api.EndpointDeps.Parser, new[]{ "Endpoint", "DependingScopes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Hit), global::Clarifai.Api.Hit.Parser, new[]{ "Score", "Input", "Annotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.And), global::Clarifai.Api.And.Parser, new[]{ "Input", "Output", "Negate", "Annotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Query), global::Clarifai.Api.Query.Parser, new[]{ "Ands", "Language", "Filters", "Ranks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Search), global::Clarifai.Api.Search.Parser, new[]{ "Query", "Id", "ApplicationId", "Name", "AsOf", "GitHash", "CreatedAt", "ModifiedAt", "Algorithm", "Save", "MinValue", "Visibility" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Filter), global::Clarifai.Api.Filter.Parser, new[]{ "Negate", "Annotation", "Input", "LastUpdatedTimeRange" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TimeRange), global::Clarifai.Api.TimeRange.Parser, new[]{ "StartTime", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Rank), global::Clarifai.Api.Rank.Parser, new[]{ "Negate", "Annotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.AnnotationSearchMetrics), global::Clarifai.Api.AnnotationSearchMetrics.Parser, new[]{ "GroundTruth", "SearchToEval", "Metrics", "Data", "ActiveConceptCount", "Visibility" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Text), global::Clarifai.Api.Text.Parser, new[]{ "Raw", "Url", "AllowDuplicateUrl", "Hosted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.User), global::Clarifai.Api.User.Parser, new[]{ "Id", "PrimaryEmail", "FirstName", "LastName", "CompanyName", "JobTitle", "JobRole", "BillType", "CreatedAt", "DateGdprConsent", "DateTosConsent", "DateMarketingConsent", "Metadata", "EmailAddresses", "IsOrgAdmin", "TwoFactorAuthEnabled", "TeamsCount", "IsStarred", "StarCount", "Visibility", "UserDetail" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.UserDetail), global::Clarifai.Api.UserDetail.Parser, new[]{ "PrimaryEmail", "BillType", "DateGdprConsent", "DateTosConsent", "DateMarketingConsent", "Metadata", "EmailAddresses", "IsOrgAdmin", "TwoFactorAuthEnabled", "TeamsCount", "Country", "State" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.EmailAddress), global::Clarifai.Api.EmailAddress.Parser, new[]{ "Email", "Primary", "Verified" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Password), global::Clarifai.Api.Password.Parser, new[]{ "Plaintext" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.PasswordViolations), global::Clarifai.Api.PasswordViolations.Parser, new[]{ "MinimumLength", "MaximumLength", "UpperCaseNeeded", "LowerCaseNeeded", "NumericNeeded", "NonAlphanumericNeeded", "PasswordReuse", "ExcludeNames", "ExcludeEmail", "NoConfusingLetters", "NoSimplePasswords", "NoCommonVocabs", "NoOverlapWithOld", "PasswordLifespan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Video), global::Clarifai.Api.Video.Parser, new[]{ "Url", "Base64", "AllowDuplicateUrl", "ThumbnailUrl", "Hosted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Workflow), global::Clarifai.Api.Workflow.Parser, new[]{ "Id", "AppId", "CreatedAt", "Nodes", "Metadata", "Visibility", "UserId", "ModifiedAt", "Version", "IsStarred", "StarCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.WorkflowVersion), global::Clarifai.Api.WorkflowVersion.Parser, new[]{ "Id", "WorkflowId", "CreatedAt", "ModifiedAt", "Visibility", "Nodes", "Metadata", "AppId", "UserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.WorkflowNode), global::Clarifai.Api.WorkflowNode.Parser, new[]{ "Id", "Model", "NodeInputs", "SuppressOutput" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.NodeInput), global::Clarifai.Api.NodeInput.Parser, new[]{ "NodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.WorkflowResult), global::Clarifai.Api.WorkflowResult.Parser, new[]{ "Id", "Status", "CreatedAt", "Model", "Input", "Outputs", "SuppressOutput" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.WorkflowState), global::Clarifai.Api.WorkflowState.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.AppDuplication), global::Clarifai.Api.AppDuplication.Parser, new[]{ "Id", "NewAppId", "NewAppName", "Status", "CreatedAt", "LastModifiedAt", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.AppDuplicationFilters), global::Clarifai.Api.AppDuplicationFilters.Parser, new[]{ "CopyInputs", "CopyConcepts", "CopyAnnotations", "CopyModels", "CopyWorkflows" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Task), global::Clarifai.Api.Task.Parser, new[]{ "Id", "CreatedAt", "ModifiedAt", "Type", "Description", "Worker", "ConceptIds", "InputSource", "SampleMs", "AiAssistant", "Review", "Status", "Name", "AiAssistParams", "Visibility", "AppId", "UserId" }, null, new[]{ typeof(global::Clarifai.Api.Task.Types.TaskType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.AiAssistParameters), global::Clarifai.Api.AiAssistParameters.Parser, new[]{ "MinThreshold", "MaxThreshold", "ConceptRelationIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TaskWorker), global::Clarifai.Api.TaskWorker.Parser, new[]{ "Strategy", "UserIds", "PartitionedStrategyInfo" }, new[]{ "StrategyInfo" }, new[]{ typeof(global::Clarifai.Api.TaskWorker.Types.TaskWorkerStrategy) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo), global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo.Parser, new[]{ "Type", "WorkersPerInput", "Weights" }, null, new[]{ typeof(global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo.Types.TaskWorkerPartitionedStrategy) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TaskInputSource), global::Clarifai.Api.TaskInputSource.Parser, new[]{ "Type", "Id" }, null, new[]{ typeof(global::Clarifai.Api.TaskInputSource.Types.TaskInputSourceType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TaskReview), global::Clarifai.Api.TaskReview.Parser, new[]{ "Strategy", "UserIds", "ManualStrategyInfo", "ConsensusStrategyInfo" }, new[]{ "StrategyInfo" }, new[]{ typeof(global::Clarifai.Api.TaskReview.Types.TaskReviewStrategy) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TaskReviewManualStrategyInfo), global::Clarifai.Api.TaskReviewManualStrategyInfo.Parser, new[]{ "SamplePercentage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TaskReviewConsensusStrategyInfo), global::Clarifai.Api.TaskReviewConsensusStrategyInfo.Parser, new[]{ "ApprovalThreshold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TaskAIAssistant), global::Clarifai.Api.TaskAIAssistant.Parser, new[]{ "WorkflowId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TaskStatusCountPerUser), global::Clarifai.Api.TaskStatusCountPerUser.Parser, new[]{ "UserId", "Pending", "AwaitingReview", "Success", "ReviewDenied", "AwaitingConsensusReview" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Collector), global::Clarifai.Api.Collector.Parser, new[]{ "Id", "Description", "CreatedAt", "PreQueueWorkflowId", "PostQueueWorkflowId", "CollectorSource", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.CollectorSource), global::Clarifai.Api.CollectorSource.Parser, new[]{ "ApiPostModelOutputsCollectorSource" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.APIPostModelOutputsCollectorSource), global::Clarifai.Api.APIPostModelOutputsCollectorSource.Parser, new[]{ "ModelUserId", "ModelAppId", "ModelId", "ModelVersionId", "PostInputsKeyId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.StatValue), global::Clarifai.Api.StatValue.Parser, new[]{ "Time", "Value", "Tags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.StatValueAggregateResult), global::Clarifai.Api.StatValueAggregateResult.Parser, new[]{ "StatValueAggregates", "StatValueAggregateQuery" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.StatValueAggregate), global::Clarifai.Api.StatValueAggregate.Parser, new[]{ "Time", "AggregateValue", "Count", "Tags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.StatValueAggregateQuery), global::Clarifai.Api.StatValueAggregateQuery.Parser, new[]{ "Tags", "TagGroups", "StatValueAggType", "StatTimeAggType", "StartTime", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.Visibility), global::Clarifai.Api.Visibility.Parser, new[]{ "Gettable" }, null, new[]{ typeof(global::Clarifai.Api.Visibility.Types.Gettable) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TrendingMetric), global::Clarifai.Api.TrendingMetric.Parser, new[]{ "UserId", "AppId", "ObjectId", "ViewCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TimeSegment), global::Clarifai.Api.TimeSegment.Parser, new[]{ "Id", "Data", "TimeInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Api.TimeInfo), global::Clarifai.Api.TimeInfo.Parser, new[]{ "NumFrames", "BeginTime", "EndTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ExpirationAction {
    [pbr::OriginalName("EXPIRATION_ACTION_NOT_SET")] NotSet = 0,
    /// <summary>
    /// Progressively delay the execution of operations
    /// </summary>
    [pbr::OriginalName("DELAY")] Delay = 1,
    /// <summary>
    /// Cease functioning
    /// </summary>
    [pbr::OriginalName("EXPIRY")] Expiry = 2,
  }

  public enum LicenseScope {
    [pbr::OriginalName("LICENSE_SCOPE_NOT_SET")] NotSet = 0,
    [pbr::OriginalName("PREDICT")] Predict = 1,
    [pbr::OriginalName("TRAIN")] Train = 2,
    [pbr::OriginalName("SEARCH")] Search = 3,
  }

  public enum ValueComparator {
    [pbr::OriginalName("CONCEPT_THRESHOLD_NOT_SET")] ConceptThresholdNotSet = 0,
    /// <summary>
    /// input > value
    /// </summary>
    [pbr::OriginalName("GREATER_THAN")] GreaterThan = 1,
    /// <summary>
    /// input >= value
    /// </summary>
    [pbr::OriginalName("GREATER_THAN_OR_EQUAL")] GreaterThanOrEqual = 2,
    /// <summary>
    /// input &lt; value
    /// </summary>
    [pbr::OriginalName("LESS_THAN")] LessThan = 3,
    /// <summary>
    /// input &lt;= value
    /// </summary>
    [pbr::OriginalName("LESS_THAN_OR_EQUAL")] LessThanOrEqual = 4,
    /// <summary>
    /// input == value
    /// </summary>
    [pbr::OriginalName("EQUAL")] Equal = 5,
  }

  public enum EvaluationType {
    /// <summary>
    /// default
    /// </summary>
    [pbr::OriginalName("Classification")] Classification = 0,
    [pbr::OriginalName("Detection")] Detection = 1,
  }

  public enum APIEventType {
    [pbr::OriginalName("API_EVENT_TYPE_NOT_SET")] NotSet = 0,
    /// <summary>
    /// On Prem event types
    /// </summary>
    [pbr::OriginalName("ON_PREM_PREDICT")] OnPremPredict = 1,
    [pbr::OriginalName("ON_PREM_TRAIN")] OnPremTrain = 2,
    [pbr::OriginalName("ON_PREM_SEARCH")] OnPremSearch = 3,
  }

  public enum UsageIntervalType {
    /// <summary>
    /// undef UsageIntervalType is so that the interval field can be forced to be included
    /// </summary>
    [pbr::OriginalName("undef")] Undef = 0,
    [pbr::OriginalName("day")] Day = 1,
    [pbr::OriginalName("month")] Month = 2,
    [pbr::OriginalName("year")] Year = 3,
  }

  public enum RoleType {
    [pbr::OriginalName("TEAM")] Team = 0,
    [pbr::OriginalName("ORG")] Org = 1,
  }

  public enum StatValueAggType {
    [pbr::OriginalName("SUM")] Sum = 0,
    [pbr::OriginalName("AVG")] Avg = 1,
  }

  public enum StatTimeAggType {
    [pbr::OriginalName("NO_TIME_AGG")] NoTimeAgg = 0,
    [pbr::OriginalName("YEAR")] Year = 1,
    [pbr::OriginalName("MONTH")] Month = 2,
    [pbr::OriginalName("WEEK")] Week = 3,
    [pbr::OriginalName("DAY")] Day = 4,
    [pbr::OriginalName("HOUR")] Hour = 5,
    [pbr::OriginalName("MINUTE")] Minute = 6,
  }

  public enum ValidationErrorType {
    [pbr::OriginalName("VALIDATION_ERROR_TYPE_NOT_SET")] NotSet = 0,
    [pbr::OriginalName("RESTRICTED")] Restricted = 1,
    [pbr::OriginalName("DATABASE")] Database = 2,
    [pbr::OriginalName("FORMAT")] Format = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/annotation.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Annotation : pb::IMessage<Annotation> {
    private static readonly pb::MessageParser<Annotation> _parser = new pb::MessageParser<Annotation>(() => new Annotation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Annotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation(Annotation other) : this() {
      id_ = other.id_;
      inputId_ = other.inputId_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      annotationInfo_ = other.annotationInfo_ != null ? other.annotationInfo_.Clone() : null;
      userId_ = other.userId_;
      modelVersionId_ = other.modelVersionId_;
      embedModelVersionId_ = other.embedModelVersionId_;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      modifiedAt_ = other.modifiedAt_ != null ? other.modifiedAt_.Clone() : null;
      trusted_ = other.trusted_;
      inputLevel_ = other.inputLevel_;
      consensusInfo_ = other.consensusInfo_ != null ? other.consensusInfo_.Clone() : null;
      taskId_ = other.taskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation Clone() {
      return new Annotation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The ID for the annotation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_id" field.</summary>
    public const int InputIdFieldNumber = 2;
    private string inputId_ = "";
    /// <summary>
    /// ID of the input this annotation is tied to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InputId {
      get { return inputId_; }
      set {
        inputId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Clarifai.Api.Data data_;
    /// <summary>
    /// The data passed along in this annotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "annotation_info" field.</summary>
    public const int AnnotationInfoFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Struct annotationInfo_;
    /// <summary>
    /// task_id is deprecated in annotation_info. Use task_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct AnnotationInfo {
      get { return annotationInfo_; }
      set {
        annotationInfo_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 15;
    private string userId_ = "";
    /// <summary>
    /// ID of the user this annotation is created by
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_version_id" field.</summary>
    public const int ModelVersionIdFieldNumber = 16;
    private string modelVersionId_ = "";
    /// <summary>
    /// ID of the model version this annotation is created by
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelVersionId {
      get { return modelVersionId_; }
      set {
        modelVersionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "embed_model_version_id" field.</summary>
    public const int EmbedModelVersionIdFieldNumber = 14;
    private string embedModelVersionId_ = "";
    /// <summary>
    /// DEPRECATED.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmbedModelVersionId {
      get { return embedModelVersionId_; }
      set {
        embedModelVersionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::Clarifai.Api.Status.Status status_;
    /// <summary>
    /// Annotation Status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the annotation was created. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    /// the following from the API:
    /// "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "modified_at" field.</summary>
    public const int ModifiedAtFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedAt_;
    /// <summary>
    /// When the annotation was modified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedAt {
      get { return modifiedAt_; }
      set {
        modifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "trusted" field.</summary>
    public const int TrustedFieldNumber = 10;
    private bool trusted_;
    /// <summary>
    /// Whether or not this annotation is trusted
    /// Will be deprecated
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Trusted {
      get { return trusted_; }
      set {
        trusted_ = value;
      }
    }

    /// <summary>Field number for the "input_level" field.</summary>
    public const int InputLevelFieldNumber = 17;
    private bool inputLevel_;
    /// <summary>
    /// Is this the input level annotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InputLevel {
      get { return inputLevel_; }
      set {
        inputLevel_ = value;
      }
    }

    /// <summary>Field number for the "consensus_info" field.</summary>
    public const int ConsensusInfoFieldNumber = 18;
    private global::Google.Protobuf.WellKnownTypes.Struct consensusInfo_;
    /// <summary>
    /// Consensus review related information, e.g.
    /// * annotation group
    /// * id of annotation parent, in case the annotation was split from another annotation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct ConsensusInfo {
      get { return consensusInfo_; }
      set {
        consensusInfo_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 19;
    private string taskId_ = "";
    /// <summary>
    /// The id of the task annotation belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Annotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Annotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (InputId != other.InputId) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(AnnotationInfo, other.AnnotationInfo)) return false;
      if (UserId != other.UserId) return false;
      if (ModelVersionId != other.ModelVersionId) return false;
      if (EmbedModelVersionId != other.EmbedModelVersionId) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(ModifiedAt, other.ModifiedAt)) return false;
      if (Trusted != other.Trusted) return false;
      if (InputLevel != other.InputLevel) return false;
      if (!object.Equals(ConsensusInfo, other.ConsensusInfo)) return false;
      if (TaskId != other.TaskId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (InputId.Length != 0) hash ^= InputId.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (annotationInfo_ != null) hash ^= AnnotationInfo.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (ModelVersionId.Length != 0) hash ^= ModelVersionId.GetHashCode();
      if (EmbedModelVersionId.Length != 0) hash ^= EmbedModelVersionId.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (modifiedAt_ != null) hash ^= ModifiedAt.GetHashCode();
      if (Trusted != false) hash ^= Trusted.GetHashCode();
      if (InputLevel != false) hash ^= InputLevel.GetHashCode();
      if (consensusInfo_ != null) hash ^= ConsensusInfo.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (InputId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InputId);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      if (status_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Status);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreatedAt);
      }
      if (modifiedAt_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ModifiedAt);
      }
      if (Trusted != false) {
        output.WriteRawTag(80);
        output.WriteBool(Trusted);
      }
      if (annotationInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(AnnotationInfo);
      }
      if (EmbedModelVersionId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(EmbedModelVersionId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(UserId);
      }
      if (ModelVersionId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ModelVersionId);
      }
      if (InputLevel != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(InputLevel);
      }
      if (consensusInfo_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(ConsensusInfo);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(TaskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (InputId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InputId);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (annotationInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnnotationInfo);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (ModelVersionId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModelVersionId);
      }
      if (EmbedModelVersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EmbedModelVersionId);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (modifiedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifiedAt);
      }
      if (Trusted != false) {
        size += 1 + 1;
      }
      if (InputLevel != false) {
        size += 2 + 1;
      }
      if (consensusInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConsensusInfo);
      }
      if (TaskId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Annotation other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.InputId.Length != 0) {
        InputId = other.InputId;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Clarifai.Api.Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.annotationInfo_ != null) {
        if (annotationInfo_ == null) {
          AnnotationInfo = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        AnnotationInfo.MergeFrom(other.AnnotationInfo);
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.ModelVersionId.Length != 0) {
        ModelVersionId = other.ModelVersionId;
      }
      if (other.EmbedModelVersionId.Length != 0) {
        EmbedModelVersionId = other.EmbedModelVersionId;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Clarifai.Api.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.modifiedAt_ != null) {
        if (modifiedAt_ == null) {
          ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedAt.MergeFrom(other.ModifiedAt);
      }
      if (other.Trusted != false) {
        Trusted = other.Trusted;
      }
      if (other.InputLevel != false) {
        InputLevel = other.InputLevel;
      }
      if (other.consensusInfo_ != null) {
        if (consensusInfo_ == null) {
          ConsensusInfo = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        ConsensusInfo.MergeFrom(other.ConsensusInfo);
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            InputId = input.ReadString();
            break;
          }
          case 26: {
            if (data_ == null) {
              Data = new global::Clarifai.Api.Data();
            }
            input.ReadMessage(Data);
            break;
          }
          case 58: {
            if (status_ == null) {
              Status = new global::Clarifai.Api.Status.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 66: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 74: {
            if (modifiedAt_ == null) {
              ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedAt);
            break;
          }
          case 80: {
            Trusted = input.ReadBool();
            break;
          }
          case 106: {
            if (annotationInfo_ == null) {
              AnnotationInfo = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(AnnotationInfo);
            break;
          }
          case 114: {
            EmbedModelVersionId = input.ReadString();
            break;
          }
          case 122: {
            UserId = input.ReadString();
            break;
          }
          case 130: {
            ModelVersionId = input.ReadString();
            break;
          }
          case 136: {
            InputLevel = input.ReadBool();
            break;
          }
          case 146: {
            if (consensusInfo_ == null) {
              ConsensusInfo = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(ConsensusInfo);
            break;
          }
          case 154: {
            TaskId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/app.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class App : pb::IMessage<App> {
    private static readonly pb::MessageParser<App> _parser = new pb::MessageParser<App>(() => new App());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<App> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public App() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public App(App other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      defaultLanguage_ = other.defaultLanguage_;
      defaultWorkflowId_ = other.defaultWorkflowId_;
      userId_ = other.userId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      modifiedAt_ = other.modifiedAt_ != null ? other.modifiedAt_.Clone() : null;
      legalConsentStatus_ = other.legalConsentStatus_;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      description_ = other.description_;
      sampleMs_ = other.sampleMs_;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      dataTierId_ = other.dataTierId_;
      isStarred_ = other.isStarred_;
      starCount_ = other.starCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public App Clone() {
      return new App(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_language" field.</summary>
    public const int DefaultLanguageFieldNumber = 3;
    private string defaultLanguage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultLanguage {
      get { return defaultLanguage_; }
      set {
        defaultLanguage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_workflow_id" field.</summary>
    public const int DefaultWorkflowIdFieldNumber = 4;
    private string defaultWorkflowId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultWorkflowId {
      get { return defaultWorkflowId_; }
      set {
        defaultWorkflowId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 5;
    private string userId_ = "";
    /// <summary>
    ///why is user_id present here when this message type is used in PostApps but completely ignored there? PostApp already specifies the userid in path but doesn't even actually use neither of userids, it instead used the id from auth context.
    ///This creates a lot of ambiguity, should always have different message types for Post/Get endpoints so that the minimum interface for each op can be described
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the app was created. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    /// the following from the API:
    /// "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "modified_at" field.</summary>
    public const int ModifiedAtFieldNumber = 17;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedAt_;
    /// <summary>
    /// When the app was last modified
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedAt {
      get { return modifiedAt_; }
      set {
        modifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "legal_consent_status" field.</summary>
    public const int LegalConsentStatusFieldNumber = 7;
    private uint legalConsentStatus_;
    /// <summary>
    /// if user accept legal consent for face recognition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LegalConsentStatus {
      get { return legalConsentStatus_; }
      set {
        legalConsentStatus_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// To handle arbitrary json metadata you can use a struct field:
    /// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 14;
    private string description_ = "";
    /// <summary>
    /// short description about the app.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sample_ms" field.</summary>
    public const int SampleMsFieldNumber = 15;
    private uint sampleMs_;
    /// <summary>
    /// Default value for model predictions on video: Sample delay for video predicting (1 frame per N milliseconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SampleMs {
      get { return sampleMs_; }
      set {
        sampleMs_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 16;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "data_tier_id" field.</summary>
    public const int DataTierIdFieldNumber = 18;
    private string dataTierId_ = "";
    /// <summary>
    /// data tier id this app is using.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataTierId {
      get { return dataTierId_; }
      set {
        dataTierId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_starred" field.</summary>
    public const int IsStarredFieldNumber = 19;
    private bool isStarred_;
    /// <summary>
    /// Is starred by the requesting user (only showed on get/list requests)
    /// Please use PostAppStars/DeleteAppStars endpoints to star/unstar an app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStarred {
      get { return isStarred_; }
      set {
        isStarred_ = value;
      }
    }

    /// <summary>Field number for the "star_count" field.</summary>
    public const int StarCountFieldNumber = 20;
    private int starCount_;
    /// <summary>
    /// How many users have starred the app (only showed on get/list requests)
    /// Computed value, not editable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarCount {
      get { return starCount_; }
      set {
        starCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as App);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(App other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (DefaultLanguage != other.DefaultLanguage) return false;
      if (DefaultWorkflowId != other.DefaultWorkflowId) return false;
      if (UserId != other.UserId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(ModifiedAt, other.ModifiedAt)) return false;
      if (LegalConsentStatus != other.LegalConsentStatus) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (Description != other.Description) return false;
      if (SampleMs != other.SampleMs) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if (DataTierId != other.DataTierId) return false;
      if (IsStarred != other.IsStarred) return false;
      if (StarCount != other.StarCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DefaultLanguage.Length != 0) hash ^= DefaultLanguage.GetHashCode();
      if (DefaultWorkflowId.Length != 0) hash ^= DefaultWorkflowId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (modifiedAt_ != null) hash ^= ModifiedAt.GetHashCode();
      if (LegalConsentStatus != 0) hash ^= LegalConsentStatus.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (SampleMs != 0) hash ^= SampleMs.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (DataTierId.Length != 0) hash ^= DataTierId.GetHashCode();
      if (IsStarred != false) hash ^= IsStarred.GetHashCode();
      if (StarCount != 0) hash ^= StarCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (DefaultLanguage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DefaultLanguage);
      }
      if (DefaultWorkflowId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DefaultWorkflowId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreatedAt);
      }
      if (LegalConsentStatus != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LegalConsentStatus);
      }
      if (metadata_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Metadata);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Description);
      }
      if (SampleMs != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(SampleMs);
      }
      if (visibility_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Visibility);
      }
      if (modifiedAt_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ModifiedAt);
      }
      if (DataTierId.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(DataTierId);
      }
      if (IsStarred != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsStarred);
      }
      if (StarCount != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(StarCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DefaultLanguage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultLanguage);
      }
      if (DefaultWorkflowId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultWorkflowId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (modifiedAt_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModifiedAt);
      }
      if (LegalConsentStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LegalConsentStatus);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (SampleMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SampleMs);
      }
      if (visibility_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (DataTierId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DataTierId);
      }
      if (IsStarred != false) {
        size += 2 + 1;
      }
      if (StarCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StarCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(App other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DefaultLanguage.Length != 0) {
        DefaultLanguage = other.DefaultLanguage;
      }
      if (other.DefaultWorkflowId.Length != 0) {
        DefaultWorkflowId = other.DefaultWorkflowId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.modifiedAt_ != null) {
        if (modifiedAt_ == null) {
          ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedAt.MergeFrom(other.ModifiedAt);
      }
      if (other.LegalConsentStatus != 0) {
        LegalConsentStatus = other.LegalConsentStatus;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.SampleMs != 0) {
        SampleMs = other.SampleMs;
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      if (other.DataTierId.Length != 0) {
        DataTierId = other.DataTierId;
      }
      if (other.IsStarred != false) {
        IsStarred = other.IsStarred;
      }
      if (other.StarCount != 0) {
        StarCount = other.StarCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            DefaultLanguage = input.ReadString();
            break;
          }
          case 34: {
            DefaultWorkflowId = input.ReadString();
            break;
          }
          case 42: {
            UserId = input.ReadString();
            break;
          }
          case 50: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 56: {
            LegalConsentStatus = input.ReadUInt32();
            break;
          }
          case 106: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 114: {
            Description = input.ReadString();
            break;
          }
          case 120: {
            SampleMs = input.ReadUInt32();
            break;
          }
          case 130: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 138: {
            if (modifiedAt_ == null) {
              ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedAt);
            break;
          }
          case 146: {
            DataTierId = input.ReadString();
            break;
          }
          case 152: {
            IsStarred = input.ReadBool();
            break;
          }
          case 160: {
            StarCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppQuery : pb::IMessage<AppQuery> {
    private static readonly pb::MessageParser<AppQuery> _parser = new pb::MessageParser<AppQuery>(() => new AppQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppQuery(AppQuery other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppQuery Clone() {
      return new AppQuery(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Query by application name. This supports wildcard queries like "gen*" to match "general" as an example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppQuery other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/app_sharing.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Collaborator : pb::IMessage<Collaborator> {
    private static readonly pb::MessageParser<Collaborator> _parser = new pb::MessageParser<Collaborator>(() => new Collaborator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Collaborator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collaborator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collaborator(Collaborator other) : this() {
      id_ = other.id_;
      app_ = other.app_ != null ? other.app_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      scopes_ = other.scopes_.Clone();
      endpoints_ = other.endpoints_.Clone();
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      modifiedAt_ = other.modifiedAt_ != null ? other.modifiedAt_.Clone() : null;
      deletedAt_ = other.deletedAt_ != null ? other.deletedAt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collaborator Clone() {
      return new Collaborator(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///id of this collaborator
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 2;
    private global::Clarifai.Api.App app_;
    /// <summary>
    ///the app this collaborator has access to
    /// FIXME(zeiler): this should be in the user_app_id.app_id already from the endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.App App {
      get { return app_; }
      set {
        app_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 3;
    private global::Clarifai.Api.User user_;
    /// <summary>
    ///who is this collaborator
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "scopes" field.</summary>
    public const int ScopesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_scopes_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> scopes_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///the permission this collaborator
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Scopes {
      get { return scopes_; }
    }

    /// <summary>Field number for the "endpoints" field.</summary>
    public const int EndpointsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_endpoints_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> endpoints_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Endpoints {
      get { return endpoints_; }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the app was shared with. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    /// the following from the API:
    /// "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "modified_at" field.</summary>
    public const int ModifiedAtFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedAt_;
    /// <summary>
    /// When the collaborator was updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedAt {
      get { return modifiedAt_; }
      set {
        modifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "deleted_at" field.</summary>
    public const int DeletedAtFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deletedAt_;
    /// <summary>
    /// When the collaborator was removed from app.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DeletedAt {
      get { return deletedAt_; }
      set {
        deletedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Collaborator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Collaborator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(App, other.App)) return false;
      if (!object.Equals(User, other.User)) return false;
      if(!scopes_.Equals(other.scopes_)) return false;
      if(!endpoints_.Equals(other.endpoints_)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(ModifiedAt, other.ModifiedAt)) return false;
      if (!object.Equals(DeletedAt, other.DeletedAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (app_ != null) hash ^= App.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      hash ^= scopes_.GetHashCode();
      hash ^= endpoints_.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (modifiedAt_ != null) hash ^= ModifiedAt.GetHashCode();
      if (deletedAt_ != null) hash ^= DeletedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (app_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(App);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
      scopes_.WriteTo(output, _repeated_scopes_codec);
      endpoints_.WriteTo(output, _repeated_endpoints_codec);
      if (createdAt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreatedAt);
      }
      if (modifiedAt_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ModifiedAt);
      }
      if (deletedAt_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DeletedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (app_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(App);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      size += scopes_.CalculateSize(_repeated_scopes_codec);
      size += endpoints_.CalculateSize(_repeated_endpoints_codec);
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (modifiedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifiedAt);
      }
      if (deletedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeletedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Collaborator other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.app_ != null) {
        if (app_ == null) {
          App = new global::Clarifai.Api.App();
        }
        App.MergeFrom(other.App);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Clarifai.Api.User();
        }
        User.MergeFrom(other.User);
      }
      scopes_.Add(other.scopes_);
      endpoints_.Add(other.endpoints_);
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.modifiedAt_ != null) {
        if (modifiedAt_ == null) {
          ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedAt.MergeFrom(other.ModifiedAt);
      }
      if (other.deletedAt_ != null) {
        if (deletedAt_ == null) {
          DeletedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DeletedAt.MergeFrom(other.DeletedAt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (app_ == null) {
              App = new global::Clarifai.Api.App();
            }
            input.ReadMessage(App);
            break;
          }
          case 26: {
            if (user_ == null) {
              User = new global::Clarifai.Api.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 34: {
            scopes_.AddEntriesFrom(input, _repeated_scopes_codec);
            break;
          }
          case 42: {
            endpoints_.AddEntriesFrom(input, _repeated_endpoints_codec);
            break;
          }
          case 50: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 58: {
            if (modifiedAt_ == null) {
              ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedAt);
            break;
          }
          case 66: {
            if (deletedAt_ == null) {
              DeletedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeletedAt);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///collaboration includes an app you're invited to work on.
  /// </summary>
  public sealed partial class Collaboration : pb::IMessage<Collaboration> {
    private static readonly pb::MessageParser<Collaboration> _parser = new pb::MessageParser<Collaboration>(() => new Collaboration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Collaboration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collaboration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collaboration(Collaboration other) : this() {
      app_ = other.app_ != null ? other.app_.Clone() : null;
      appOwner_ = other.appOwner_ != null ? other.appOwner_.Clone() : null;
      scopes_ = other.scopes_.Clone();
      endpoints_ = other.endpoints_.Clone();
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collaboration Clone() {
      return new Collaboration(this);
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 1;
    private global::Clarifai.Api.App app_;
    /// <summary>
    ///the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.App App {
      get { return app_; }
      set {
        app_ = value;
      }
    }

    /// <summary>Field number for the "app_owner" field.</summary>
    public const int AppOwnerFieldNumber = 2;
    private global::Clarifai.Api.User appOwner_;
    /// <summary>
    ///the app owner's info(including user_unique_id, first_name, last_name, primary_email)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.User AppOwner {
      get { return appOwner_; }
      set {
        appOwner_ = value;
      }
    }

    /// <summary>Field number for the "scopes" field.</summary>
    public const int ScopesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_scopes_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> scopes_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///the low-level scope users are shared with for this collaboration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Scopes {
      get { return scopes_; }
    }

    /// <summary>Field number for the "endpoints" field.</summary>
    public const int EndpointsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_endpoints_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> endpoints_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///the endpoint-level scopes users are shared with for this collaboration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Endpoints {
      get { return endpoints_; }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    ///when is the collaboration created
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Collaboration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Collaboration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(App, other.App)) return false;
      if (!object.Equals(AppOwner, other.AppOwner)) return false;
      if(!scopes_.Equals(other.scopes_)) return false;
      if(!endpoints_.Equals(other.endpoints_)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (app_ != null) hash ^= App.GetHashCode();
      if (appOwner_ != null) hash ^= AppOwner.GetHashCode();
      hash ^= scopes_.GetHashCode();
      hash ^= endpoints_.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (app_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(App);
      }
      if (appOwner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AppOwner);
      }
      scopes_.WriteTo(output, _repeated_scopes_codec);
      endpoints_.WriteTo(output, _repeated_endpoints_codec);
      if (createdAt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (app_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(App);
      }
      if (appOwner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AppOwner);
      }
      size += scopes_.CalculateSize(_repeated_scopes_codec);
      size += endpoints_.CalculateSize(_repeated_endpoints_codec);
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Collaboration other) {
      if (other == null) {
        return;
      }
      if (other.app_ != null) {
        if (app_ == null) {
          App = new global::Clarifai.Api.App();
        }
        App.MergeFrom(other.App);
      }
      if (other.appOwner_ != null) {
        if (appOwner_ == null) {
          AppOwner = new global::Clarifai.Api.User();
        }
        AppOwner.MergeFrom(other.AppOwner);
      }
      scopes_.Add(other.scopes_);
      endpoints_.Add(other.endpoints_);
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (app_ == null) {
              App = new global::Clarifai.Api.App();
            }
            input.ReadMessage(App);
            break;
          }
          case 18: {
            if (appOwner_ == null) {
              AppOwner = new global::Clarifai.Api.User();
            }
            input.ReadMessage(AppOwner);
            break;
          }
          case 26: {
            scopes_.AddEntriesFrom(input, _repeated_scopes_codec);
            break;
          }
          case 34: {
            endpoints_.AddEntriesFrom(input, _repeated_endpoints_codec);
            break;
          }
          case 42: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/audio.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Audio : pb::IMessage<Audio> {
    private static readonly pb::MessageParser<Audio> _parser = new pb::MessageParser<Audio>(() => new Audio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Audio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Audio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Audio(Audio other) : this() {
      url_ = other.url_;
      base64_ = other.base64_;
      allowDuplicateUrl_ = other.allowDuplicateUrl_;
      hosted_ = other.hosted_ != null ? other.hosted_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Audio Clone() {
      return new Audio(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    /// This is a URL to a publicly accessible image file. The platform will download this file server
    /// side and then process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base64" field.</summary>
    public const int Base64FieldNumber = 2;
    private pb::ByteString base64_ = pb::ByteString.Empty;
    /// <summary>
    /// The base64 field is using image file bytes directly in the request.
    /// NOTE: if you're sending a json request, then this MUST be base64 encoded before sending (hence
    /// the name here).
    /// When using our grpc clients, you DO NOT need to base64 encode
    /// it yourself since the clients know how to do this for you automatically and will avoid the
    /// base64 encoding if they send a binary request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Base64 {
      get { return base64_; }
      set {
        base64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_duplicate_url" field.</summary>
    public const int AllowDuplicateUrlFieldNumber = 4;
    private bool allowDuplicateUrl_;
    /// <summary>
    /// If True then you will be allowed to have multiple urls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowDuplicateUrl {
      get { return allowDuplicateUrl_; }
      set {
        allowDuplicateUrl_ = value;
      }
    }

    /// <summary>Field number for the "hosted" field.</summary>
    public const int HostedFieldNumber = 5;
    private global::Clarifai.Api.HostedURL hosted_;
    /// <summary>
    /// The hosted field lists original audio hosted in Clarifai storage. This field is currently used
    /// only in response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.HostedURL Hosted {
      get { return hosted_; }
      set {
        hosted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Audio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Audio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (Base64 != other.Base64) return false;
      if (AllowDuplicateUrl != other.AllowDuplicateUrl) return false;
      if (!object.Equals(Hosted, other.Hosted)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Base64.Length != 0) hash ^= Base64.GetHashCode();
      if (AllowDuplicateUrl != false) hash ^= AllowDuplicateUrl.GetHashCode();
      if (hosted_ != null) hash ^= Hosted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (Base64.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Base64);
      }
      if (AllowDuplicateUrl != false) {
        output.WriteRawTag(32);
        output.WriteBool(AllowDuplicateUrl);
      }
      if (hosted_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Hosted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Base64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Base64);
      }
      if (AllowDuplicateUrl != false) {
        size += 1 + 1;
      }
      if (hosted_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hosted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Audio other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Base64.Length != 0) {
        Base64 = other.Base64;
      }
      if (other.AllowDuplicateUrl != false) {
        AllowDuplicateUrl = other.AllowDuplicateUrl;
      }
      if (other.hosted_ != null) {
        if (hosted_ == null) {
          Hosted = new global::Clarifai.Api.HostedURL();
        }
        Hosted.MergeFrom(other.Hosted);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            Base64 = input.ReadBytes();
            break;
          }
          case 32: {
            AllowDuplicateUrl = input.ReadBool();
            break;
          }
          case 42: {
            if (hosted_ == null) {
              Hosted = new global::Clarifai.Api.HostedURL();
            }
            input.ReadMessage(Hosted);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Track proto encodes information of a track over a number of frames
  /// </summary>
  public sealed partial class Track : pb::IMessage<Track> {
    private static readonly pb::MessageParser<Track> _parser = new pb::MessageParser<Track>(() => new Track());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Track> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Track() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Track(Track other) : this() {
      id_ = other.id_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      trackInfo_ = other.trackInfo_ != null ? other.trackInfo_.Clone() : null;
      timeInfo_ = other.timeInfo_ != null ? other.timeInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Track Clone() {
      return new Track(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// track id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Clarifai.Api.Data data_;
    /// <summary>
    /// This is a recursive definition which can contain all the concepts,
    /// embeddings, etc. that are computed within this track.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "track_info" field.</summary>
    public const int TrackInfoFieldNumber = 3;
    private global::Clarifai.Api.Track.Types.TrackInfo trackInfo_;
    /// <summary>
    /// The track information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Track.Types.TrackInfo TrackInfo {
      get { return trackInfo_; }
      set {
        trackInfo_ = value;
      }
    }

    /// <summary>Field number for the "time_info" field.</summary>
    public const int TimeInfoFieldNumber = 4;
    private global::Clarifai.Api.TimeInfo timeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TimeInfo TimeInfo {
      get { return timeInfo_; }
      set {
        timeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Track);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Track other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(TrackInfo, other.TrackInfo)) return false;
      if (!object.Equals(TimeInfo, other.TimeInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (trackInfo_ != null) hash ^= TrackInfo.GetHashCode();
      if (timeInfo_ != null) hash ^= TimeInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (trackInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TrackInfo);
      }
      if (timeInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TimeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (trackInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrackInfo);
      }
      if (timeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Track other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Clarifai.Api.Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.trackInfo_ != null) {
        if (trackInfo_ == null) {
          TrackInfo = new global::Clarifai.Api.Track.Types.TrackInfo();
        }
        TrackInfo.MergeFrom(other.TrackInfo);
      }
      if (other.timeInfo_ != null) {
        if (timeInfo_ == null) {
          TimeInfo = new global::Clarifai.Api.TimeInfo();
        }
        TimeInfo.MergeFrom(other.TimeInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::Clarifai.Api.Data();
            }
            input.ReadMessage(Data);
            break;
          }
          case 26: {
            if (trackInfo_ == null) {
              TrackInfo = new global::Clarifai.Api.Track.Types.TrackInfo();
            }
            input.ReadMessage(TrackInfo);
            break;
          }
          case 34: {
            if (timeInfo_ == null) {
              TimeInfo = new global::Clarifai.Api.TimeInfo();
            }
            input.ReadMessage(TimeInfo);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Track message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Here is where we store the track metadata.
      /// </summary>
      public sealed partial class TrackInfo : pb::IMessage<TrackInfo> {
        private static readonly pb::MessageParser<TrackInfo> _parser = new pb::MessageParser<TrackInfo>(() => new TrackInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TrackInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Clarifai.Api.Track.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrackInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrackInfo(TrackInfo other) : this() {
          numFrames_ = other.numFrames_;
          beginTime_ = other.beginTime_ != null ? other.beginTime_.Clone() : null;
          endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
          quality_ = other.quality_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrackInfo Clone() {
          return new TrackInfo(this);
        }

        /// <summary>Field number for the "num_frames" field.</summary>
        public const int NumFramesFieldNumber = 1;
        private uint numFrames_;
        /// <summary>
        /// Number of frames
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumFrames {
          get { return numFrames_; }
          set {
            numFrames_ = value;
          }
        }

        /// <summary>Field number for the "begin_time" field.</summary>
        public const int BeginTimeFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Timestamp beginTime_;
        /// <summary>
        /// Timestamp where track begins.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp BeginTime {
          get { return beginTime_; }
          set {
            beginTime_ = value;
          }
        }

        /// <summary>Field number for the "end_time" field.</summary>
        public const int EndTimeFieldNumber = 3;
        private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
        /// <summary>
        /// Timestamp where track ends.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        /// <summary>Field number for the "quality" field.</summary>
        public const int QualityFieldNumber = 4;
        private float quality_;
        /// <summary>
        /// Quality of the track.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Quality {
          get { return quality_; }
          set {
            quality_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TrackInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TrackInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NumFrames != other.NumFrames) return false;
          if (!object.Equals(BeginTime, other.BeginTime)) return false;
          if (!object.Equals(EndTime, other.EndTime)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Quality, other.Quality)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (NumFrames != 0) hash ^= NumFrames.GetHashCode();
          if (beginTime_ != null) hash ^= BeginTime.GetHashCode();
          if (endTime_ != null) hash ^= EndTime.GetHashCode();
          if (Quality != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Quality);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NumFrames != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(NumFrames);
          }
          if (beginTime_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(BeginTime);
          }
          if (endTime_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(EndTime);
          }
          if (Quality != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Quality);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NumFrames != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumFrames);
          }
          if (beginTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeginTime);
          }
          if (endTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
          }
          if (Quality != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TrackInfo other) {
          if (other == null) {
            return;
          }
          if (other.NumFrames != 0) {
            NumFrames = other.NumFrames;
          }
          if (other.beginTime_ != null) {
            if (beginTime_ == null) {
              BeginTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            BeginTime.MergeFrom(other.BeginTime);
          }
          if (other.endTime_ != null) {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            EndTime.MergeFrom(other.EndTime);
          }
          if (other.Quality != 0F) {
            Quality = other.Quality;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                NumFrames = input.ReadUInt32();
                break;
              }
              case 18: {
                if (beginTime_ == null) {
                  BeginTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(BeginTime);
                break;
              }
              case 26: {
                if (endTime_ == null) {
                  EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(EndTime);
                break;
              }
              case 37: {
                Quality = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/cluster.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Cluster : pb::IMessage<Cluster> {
    private static readonly pb::MessageParser<Cluster> _parser = new pb::MessageParser<Cluster>(() => new Cluster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cluster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster(Cluster other) : this() {
      id_ = other.id_;
      count_ = other.count_;
      score_ = other.score_;
      hits_ = other.hits_.Clone();
      projection_ = other.projection_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster Clone() {
      return new Cluster(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    /// Number of annotations tied to the cluster in the app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private float score_;
    /// <summary>
    /// The score assigned to this cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "hits" field.</summary>
    public const int HitsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Hit> _repeated_hits_codec
        = pb::FieldCodec.ForMessage(34, global::Clarifai.Api.Hit.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Hit> hits_ = new pbc::RepeatedField<global::Clarifai.Api.Hit>();
    /// <summary>
    /// Representative hits for cluster (for now we only return 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Hit> Hits {
      get { return hits_; }
    }

    /// <summary>Field number for the "projection" field.</summary>
    public const int ProjectionFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_projection_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> projection_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Projection {
      get { return projection_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cluster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cluster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Score, other.Score)) return false;
      if(!hits_.Equals(other.hits_)) return false;
      if(!projection_.Equals(other.projection_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Score);
      hash ^= hits_.GetHashCode();
      hash ^= projection_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (Score != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Score);
      }
      hits_.WriteTo(output, _repeated_hits_codec);
      projection_.WriteTo(output, _repeated_projection_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      size += hits_.CalculateSize(_repeated_hits_codec);
      size += projection_.CalculateSize(_repeated_projection_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cluster other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      hits_.Add(other.hits_);
      projection_.Add(other.projection_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 29: {
            Score = input.ReadFloat();
            break;
          }
          case 34: {
            hits_.AddEntriesFrom(input, _repeated_hits_codec);
            break;
          }
          case 42:
          case 45: {
            projection_.AddEntriesFrom(input, _repeated_projection_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/color.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      rawHex_ = other.rawHex_;
      w3C_ = other.w3C_ != null ? other.w3C_.Clone() : null;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "raw_hex" field.</summary>
    public const int RawHexFieldNumber = 1;
    private string rawHex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RawHex {
      get { return rawHex_; }
      set {
        rawHex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "w3c" field.</summary>
    public const int W3CFieldNumber = 2;
    private global::Clarifai.Api.W3C w3C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.W3C W3C {
      get { return w3C_; }
      set {
        w3C_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RawHex != other.RawHex) return false;
      if (!object.Equals(W3C, other.W3C)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RawHex.Length != 0) hash ^= RawHex.GetHashCode();
      if (w3C_ != null) hash ^= W3C.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RawHex.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RawHex);
      }
      if (w3C_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(W3C);
      }
      if (Value != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RawHex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RawHex);
      }
      if (w3C_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(W3C);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.RawHex.Length != 0) {
        RawHex = other.RawHex;
      }
      if (other.w3C_ != null) {
        if (w3C_ == null) {
          W3C = new global::Clarifai.Api.W3C();
        }
        W3C.MergeFrom(other.W3C);
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RawHex = input.ReadString();
            break;
          }
          case 18: {
            if (w3C_ == null) {
              W3C = new global::Clarifai.Api.W3C();
            }
            input.ReadMessage(W3C);
            break;
          }
          case 29: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class W3C : pb::IMessage<W3C> {
    private static readonly pb::MessageParser<W3C> _parser = new pb::MessageParser<W3C>(() => new W3C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<W3C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public W3C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public W3C(W3C other) : this() {
      hex_ = other.hex_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public W3C Clone() {
      return new W3C(this);
    }

    /// <summary>Field number for the "hex" field.</summary>
    public const int HexFieldNumber = 1;
    private string hex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hex {
      get { return hex_; }
      set {
        hex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as W3C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(W3C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hex != other.Hex) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hex.Length != 0) hash ^= Hex.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hex.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hex);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hex);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(W3C other) {
      if (other == null) {
        return;
      }
      if (other.Hex.Length != 0) {
        Hex = other.Hex;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hex = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/common.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// Common message to identify the app in a url endpoint.
  /// </summary>
  public sealed partial class UserAppIDSet : pb::IMessage<UserAppIDSet> {
    private static readonly pb::MessageParser<UserAppIDSet> _parser = new pb::MessageParser<UserAppIDSet>(() => new UserAppIDSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAppIDSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAppIDSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAppIDSet(UserAppIDSet other) : this() {
      userId_ = other.userId_;
      appId_ = other.appId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAppIDSet Clone() {
      return new UserAppIDSet(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    /// Note user_id 'me' is reserved - it is the alias for the id of authorized user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 2;
    private string appId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAppIDSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAppIDSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AppId != other.AppId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAppIDSet other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            AppId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PatchAction : pb::IMessage<PatchAction> {
    private static readonly pb::MessageParser<PatchAction> _parser = new pb::MessageParser<PatchAction>(() => new PatchAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PatchAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatchAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatchAction(PatchAction other) : this() {
      op_ = other.op_;
      mergeConflictResolution_ = other.mergeConflictResolution_;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatchAction Clone() {
      return new PatchAction(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private string op_ = "";
    /// <summary>
    /// The operation to perform on the patched metadata given a path
    /// For now only operations 'overwrite', 'delete, and 'merge' is supported
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Op {
      get { return op_; }
      set {
        op_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merge_conflict_resolution" field.</summary>
    public const int MergeConflictResolutionFieldNumber = 2;
    private string mergeConflictResolution_ = "";
    /// <summary>
    /// If the action is 'merge' and there is a conflict, how to resolve it.
    /// The options are
    /// 'overwrite_by_id', 'remove_by_id', 'merge_by_id','overwrite', 'append' and 'do_nothing'
    /// Note that for conflict resolutions '*_by_id' to work on a list, the list should contain
    /// objects with an 'id' field which will be used to uniquely identify each field. For example
    /// Patching existing json
    /// {
    ///   "tag": [
    ///     {
    ///       "id": "1",
    ///       "data": 1
    ///     },
    ///     {
    ///       "id": "2",
    ///       "data": 2
    ///     }
    ///   ]
    /// }
    /// with op 'merge' and merge_conflict_resolution 'overwrite_by_id'
    /// {
    ///   "tag": [
    ///     {
    ///       "id": "2",
    ///       "data": 3
    ///     }
    ///   ]
    /// }
    /// would produce
    /// {
    ///   "tag": [
    ///     {
    ///       "id": "1",
    ///       "data": 1
    ///     },
    ///     {
    ///       "id": "2",
    ///       "data": 3
    ///     }
    ///   ]
    /// }
    /// while with merge_conflict_resolution 'remove_by_id' it would produce
    /// {
    ///   "tag": [
    ///     {
    ///       "id": "1",
    ///       "data": 1
    ///     }
    ///   ]
    /// }
    ///
    /// Option 'append' will simply create a list on conflicts. For example in above example
    /// the final result would be
    /// {
    ///   "tag": [
    ///     {
    ///       "id": "1",
    ///       "data": 1
    ///     },
    ///     {
    ///       "id": "2",
    ///       "data": [2, 3]
    ///     }
    ///   ]
    /// }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MergeConflictResolution {
      get { return mergeConflictResolution_; }
      set {
        mergeConflictResolution_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    /// <summary>
    /// Path for the change. For example 'tag[1].data' is a valid path in above example.
    /// Default path is root level i.e. ''.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PatchAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PatchAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if (MergeConflictResolution != other.MergeConflictResolution) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Op.Length != 0) hash ^= Op.GetHashCode();
      if (MergeConflictResolution.Length != 0) hash ^= MergeConflictResolution.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Op);
      }
      if (MergeConflictResolution.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MergeConflictResolution);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Op);
      }
      if (MergeConflictResolution.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MergeConflictResolution);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PatchAction other) {
      if (other == null) {
        return;
      }
      if (other.Op.Length != 0) {
        Op = other.Op;
      }
      if (other.MergeConflictResolution.Length != 0) {
        MergeConflictResolution = other.MergeConflictResolution;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Op = input.ReadString();
            break;
          }
          case 18: {
            MergeConflictResolution = input.ReadString();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/concept.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Concept : pb::IMessage<Concept> {
    private static readonly pb::MessageParser<Concept> _parser = new pb::MessageParser<Concept>(() => new Concept());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Concept> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concept() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concept(Concept other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      value_ = other.value_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      language_ = other.language_;
      appId_ = other.appId_;
      definition_ = other.definition_;
      vocabId_ = other.vocabId_;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concept Clone() {
      return new Concept(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The concept's unique id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The name of the concept in the given language.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private float value_;
    /// <summary>
    /// Used to indicate presence (1.0) or not (0.0) of this concept when making a request.
    /// This is also the prediction probability when returning predictions from our API.
    /// For convenience we use the default of 1.0 when making requests so the concept you provide is
    /// is treated as a positive (1.0) and not a negative (which would be value == 0.0).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the concept was created. The format is https://www.ietf.org/rfc/rfc3339.txt .
    /// Example: "2006-01-02T15:04:05.999999Z". This field is used only in a response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 5;
    private string language_ = "";
    /// <summary>
    /// The language in which the concept name is in. This is *ONLY* used in the response and setting
    /// it in a request is ignored since the default language of your app is used when creating
    /// or patching a Concept. To set other languages for your concept use the ConceptLanguage object
    /// and its corresponding endpoints.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 6;
    private string appId_ = "";
    /// <summary>
    /// The application id that this concept is within. This can be ignored by most users.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "definition" field.</summary>
    public const int DefinitionFieldNumber = 7;
    private string definition_ = "";
    /// <summary>
    /// The definition for the concept. Similar to name. This can be ignored by most users.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Definition {
      get { return definition_; }
      set {
        definition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vocab_id" field.</summary>
    public const int VocabIdFieldNumber = 8;
    private string vocabId_ = "";
    /// <summary>
    /// The vocabulary that this concept belongs to. This is useful if you have different unique sets
    /// of concepts that you can separate out based on this field. For example "age_appearance" vs
    /// "gender_appearance" in a list of concept returned from the demographics model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VocabId {
      get { return vocabId_; }
      set {
        vocabId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 9;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 10;
    private string userId_ = "";
    /// <summary>
    /// The user the concept belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Concept);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Concept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Language != other.Language) return false;
      if (AppId != other.AppId) return false;
      if (Definition != other.Definition) return false;
      if (VocabId != other.VocabId) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (Definition.Length != 0) hash ^= Definition.GetHashCode();
      if (VocabId.Length != 0) hash ^= VocabId.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Value != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Value);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreatedAt);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Language);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AppId);
      }
      if (Definition.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Definition);
      }
      if (VocabId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VocabId);
      }
      if (visibility_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Visibility);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (Definition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Definition);
      }
      if (VocabId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VocabId);
      }
      if (visibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Concept other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.Definition.Length != 0) {
        Definition = other.Definition;
      }
      if (other.VocabId.Length != 0) {
        VocabId = other.VocabId;
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Value = input.ReadFloat();
            break;
          }
          case 34: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 42: {
            Language = input.ReadString();
            break;
          }
          case 50: {
            AppId = input.ReadString();
            break;
          }
          case 58: {
            Definition = input.ReadString();
            break;
          }
          case 66: {
            VocabId = input.ReadString();
            break;
          }
          case 74: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 82: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConceptCount : pb::IMessage<ConceptCount> {
    private static readonly pb::MessageParser<ConceptCount> _parser = new pb::MessageParser<ConceptCount>(() => new ConceptCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConceptCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptCount(ConceptCount other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      conceptTypeCount_ = other.conceptTypeCount_ != null ? other.conceptTypeCount_.Clone() : null;
      detailConceptCount_ = other.detailConceptCount_ != null ? other.detailConceptCount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptCount Clone() {
      return new ConceptCount(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The concept's unique id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The name of the concept.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "concept_type_count" field.</summary>
    public const int ConceptTypeCountFieldNumber = 3;
    private global::Clarifai.Api.ConceptTypeCount conceptTypeCount_;
    /// <summary>
    /// The total count for concepts labeled for all asset statues (processing, to_process, processed, error)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.ConceptTypeCount ConceptTypeCount {
      get { return conceptTypeCount_; }
      set {
        conceptTypeCount_ = value;
      }
    }

    /// <summary>Field number for the "detail_concept_count" field.</summary>
    public const int DetailConceptCountFieldNumber = 4;
    private global::Clarifai.Api.DetailConceptCount detailConceptCount_;
    /// <summary>
    /// The detail count for different assets status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.DetailConceptCount DetailConceptCount {
      get { return detailConceptCount_; }
      set {
        detailConceptCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConceptCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConceptCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(ConceptTypeCount, other.ConceptTypeCount)) return false;
      if (!object.Equals(DetailConceptCount, other.DetailConceptCount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (conceptTypeCount_ != null) hash ^= ConceptTypeCount.GetHashCode();
      if (detailConceptCount_ != null) hash ^= DetailConceptCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (conceptTypeCount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConceptTypeCount);
      }
      if (detailConceptCount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DetailConceptCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (conceptTypeCount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConceptTypeCount);
      }
      if (detailConceptCount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DetailConceptCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConceptCount other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.conceptTypeCount_ != null) {
        if (conceptTypeCount_ == null) {
          ConceptTypeCount = new global::Clarifai.Api.ConceptTypeCount();
        }
        ConceptTypeCount.MergeFrom(other.ConceptTypeCount);
      }
      if (other.detailConceptCount_ != null) {
        if (detailConceptCount_ == null) {
          DetailConceptCount = new global::Clarifai.Api.DetailConceptCount();
        }
        DetailConceptCount.MergeFrom(other.DetailConceptCount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (conceptTypeCount_ == null) {
              ConceptTypeCount = new global::Clarifai.Api.ConceptTypeCount();
            }
            input.ReadMessage(ConceptTypeCount);
            break;
          }
          case 34: {
            if (detailConceptCount_ == null) {
              DetailConceptCount = new global::Clarifai.Api.DetailConceptCount();
            }
            input.ReadMessage(DetailConceptCount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConceptTypeCount : pb::IMessage<ConceptTypeCount> {
    private static readonly pb::MessageParser<ConceptTypeCount> _parser = new pb::MessageParser<ConceptTypeCount>(() => new ConceptTypeCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConceptTypeCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptTypeCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptTypeCount(ConceptTypeCount other) : this() {
      positive_ = other.positive_;
      negative_ = other.negative_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptTypeCount Clone() {
      return new ConceptTypeCount(this);
    }

    /// <summary>Field number for the "positive" field.</summary>
    public const int PositiveFieldNumber = 1;
    private uint positive_;
    /// <summary>
    /// The number of inputs that have a concept with a value of 1.0 (indicating presence of the
    /// concept in an input).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Positive {
      get { return positive_; }
      set {
        positive_ = value;
      }
    }

    /// <summary>Field number for the "negative" field.</summary>
    public const int NegativeFieldNumber = 2;
    private uint negative_;
    /// <summary>
    /// The number of inputs that have a concept with a value of 0.0 (indicating absence of the
    /// concept in an input).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Negative {
      get { return negative_; }
      set {
        negative_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConceptTypeCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConceptTypeCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Positive != other.Positive) return false;
      if (Negative != other.Negative) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Positive != 0) hash ^= Positive.GetHashCode();
      if (Negative != 0) hash ^= Negative.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Positive != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Positive);
      }
      if (Negative != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Negative);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Positive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Positive);
      }
      if (Negative != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Negative);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConceptTypeCount other) {
      if (other == null) {
        return;
      }
      if (other.Positive != 0) {
        Positive = other.Positive;
      }
      if (other.Negative != 0) {
        Negative = other.Negative;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Positive = input.ReadUInt32();
            break;
          }
          case 16: {
            Negative = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DetailConceptCount : pb::IMessage<DetailConceptCount> {
    private static readonly pb::MessageParser<DetailConceptCount> _parser = new pb::MessageParser<DetailConceptCount>(() => new DetailConceptCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetailConceptCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailConceptCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailConceptCount(DetailConceptCount other) : this() {
      processed_ = other.processed_ != null ? other.processed_.Clone() : null;
      toProcess_ = other.toProcess_ != null ? other.toProcess_.Clone() : null;
      errors_ = other.errors_ != null ? other.errors_.Clone() : null;
      processing_ = other.processing_ != null ? other.processing_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailConceptCount Clone() {
      return new DetailConceptCount(this);
    }

    /// <summary>Field number for the "processed" field.</summary>
    public const int ProcessedFieldNumber = 1;
    private global::Clarifai.Api.ConceptTypeCount processed_;
    /// <summary>
    /// The concept count for processed assets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.ConceptTypeCount Processed {
      get { return processed_; }
      set {
        processed_ = value;
      }
    }

    /// <summary>Field number for the "to_process" field.</summary>
    public const int ToProcessFieldNumber = 2;
    private global::Clarifai.Api.ConceptTypeCount toProcess_;
    /// <summary>
    /// The concept count for to process assets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.ConceptTypeCount ToProcess {
      get { return toProcess_; }
      set {
        toProcess_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 3;
    private global::Clarifai.Api.ConceptTypeCount errors_;
    /// <summary>
    /// The concept count for assets with status error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.ConceptTypeCount Errors {
      get { return errors_; }
      set {
        errors_ = value;
      }
    }

    /// <summary>Field number for the "processing" field.</summary>
    public const int ProcessingFieldNumber = 4;
    private global::Clarifai.Api.ConceptTypeCount processing_;
    /// <summary>
    /// The concept count for processing assets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.ConceptTypeCount Processing {
      get { return processing_; }
      set {
        processing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetailConceptCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetailConceptCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Processed, other.Processed)) return false;
      if (!object.Equals(ToProcess, other.ToProcess)) return false;
      if (!object.Equals(Errors, other.Errors)) return false;
      if (!object.Equals(Processing, other.Processing)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (processed_ != null) hash ^= Processed.GetHashCode();
      if (toProcess_ != null) hash ^= ToProcess.GetHashCode();
      if (errors_ != null) hash ^= Errors.GetHashCode();
      if (processing_ != null) hash ^= Processing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (processed_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Processed);
      }
      if (toProcess_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ToProcess);
      }
      if (errors_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Errors);
      }
      if (processing_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Processing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (processed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Processed);
      }
      if (toProcess_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToProcess);
      }
      if (errors_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Errors);
      }
      if (processing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Processing);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetailConceptCount other) {
      if (other == null) {
        return;
      }
      if (other.processed_ != null) {
        if (processed_ == null) {
          Processed = new global::Clarifai.Api.ConceptTypeCount();
        }
        Processed.MergeFrom(other.Processed);
      }
      if (other.toProcess_ != null) {
        if (toProcess_ == null) {
          ToProcess = new global::Clarifai.Api.ConceptTypeCount();
        }
        ToProcess.MergeFrom(other.ToProcess);
      }
      if (other.errors_ != null) {
        if (errors_ == null) {
          Errors = new global::Clarifai.Api.ConceptTypeCount();
        }
        Errors.MergeFrom(other.Errors);
      }
      if (other.processing_ != null) {
        if (processing_ == null) {
          Processing = new global::Clarifai.Api.ConceptTypeCount();
        }
        Processing.MergeFrom(other.Processing);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (processed_ == null) {
              Processed = new global::Clarifai.Api.ConceptTypeCount();
            }
            input.ReadMessage(Processed);
            break;
          }
          case 18: {
            if (toProcess_ == null) {
              ToProcess = new global::Clarifai.Api.ConceptTypeCount();
            }
            input.ReadMessage(ToProcess);
            break;
          }
          case 26: {
            if (errors_ == null) {
              Errors = new global::Clarifai.Api.ConceptTypeCount();
            }
            input.ReadMessage(Errors);
            break;
          }
          case 34: {
            if (processing_ == null) {
              Processing = new global::Clarifai.Api.ConceptTypeCount();
            }
            input.ReadMessage(Processing);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConceptQuery : pb::IMessage<ConceptQuery> {
    private static readonly pb::MessageParser<ConceptQuery> _parser = new pb::MessageParser<ConceptQuery>(() => new ConceptQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConceptQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptQuery(ConceptQuery other) : this() {
      name_ = other.name_;
      language_ = other.language_;
      workflowId_ = other.workflowId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptQuery Clone() {
      return new ConceptQuery(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the concept to search.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private string language_ = "";
    /// <summary>
    /// (optional) The language of the concept name in a search. Defaults to English.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "workflow_id" field.</summary>
    public const int WorkflowIdFieldNumber = 3;
    private string workflowId_ = "";
    /// <summary>
    /// (optional) The id of workflow. If no id is provided, then application base workflow is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkflowId {
      get { return workflowId_; }
      set {
        workflowId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConceptQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConceptQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Language != other.Language) return false;
      if (WorkflowId != other.WorkflowId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (WorkflowId.Length != 0) hash ^= WorkflowId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
      if (WorkflowId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WorkflowId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (WorkflowId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkflowId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConceptQuery other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.WorkflowId.Length != 0) {
        WorkflowId = other.WorkflowId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
          case 26: {
            WorkflowId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/concept_graph.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// This represents a relation (i.e. edge) between the subject concept and the object concept
  /// </summary>
  public sealed partial class ConceptRelation : pb::IMessage<ConceptRelation> {
    private static readonly pb::MessageParser<ConceptRelation> _parser = new pb::MessageParser<ConceptRelation>(() => new ConceptRelation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConceptRelation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptRelation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptRelation(ConceptRelation other) : this() {
      id_ = other.id_;
      subjectConcept_ = other.subjectConcept_ != null ? other.subjectConcept_.Clone() : null;
      objectConcept_ = other.objectConcept_ != null ? other.objectConcept_.Clone() : null;
      predicate_ = other.predicate_;
      knowledgeGraphId_ = other.knowledgeGraphId_;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptRelation Clone() {
      return new ConceptRelation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the concept relation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subject_concept" field.</summary>
    public const int SubjectConceptFieldNumber = 2;
    private global::Clarifai.Api.Concept subjectConcept_;
    /// <summary>
    /// The subject concept (i.e. source) of the concept relation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Concept SubjectConcept {
      get { return subjectConcept_; }
      set {
        subjectConcept_ = value;
      }
    }

    /// <summary>Field number for the "object_concept" field.</summary>
    public const int ObjectConceptFieldNumber = 3;
    private global::Clarifai.Api.Concept objectConcept_;
    /// <summary>
    /// The subject concept (i.e. destination) of the concept relation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Concept ObjectConcept {
      get { return objectConcept_; }
      set {
        objectConcept_ = value;
      }
    }

    /// <summary>Field number for the "predicate" field.</summary>
    public const int PredicateFieldNumber = 4;
    private string predicate_ = "";
    /// <summary>
    /// The predicate (i.e. edge) linking the subject and the object
    /// Both subject_concept and object_concept are concepts.
    /// The predicate is the type of relationship.
    /// That predicate acts on the subject.
    ///
    /// There are three current types of predicates:
    /// 1) "hyponym"
    /// 2) "hypernym"
    /// 3) "synonym"
    ///
    /// 1) For example, 'hyponym' is a type of predicate which represents 'is_a_kind_of' relation so
    /// the following relationship:
    /// 'honey' (subject), 'hyponym' (predicate), 'food' (object)
    /// Can more easily be read as:
    /// 'honey' 'is a kind of' 'food'
    ///
    /// 2) The 'hypernym' relation is the opposite of 'hyponym' and when you add one of the
    /// relationships the opposite will automatically appear for you in queries.
    ///
    /// The 'hypernym' can be read as 'is a parent of' so:
    /// 'food' (subject), 'hypernym' (predicate), 'honey' (object)
    /// Can more easily be read as:
    /// 'food' is a parent of 'honey'
    ///
    /// 3) The 'synonym' relation defines two concepts that essential mean the same thing. This
    /// is more like a "is" relationship. So for example a 'synonym' relationship could be:
    /// "puppy" is "pup"
    /// The reverse is also true once the former is added so:
    /// "pup" is "puppy"
    /// will appear in queries as well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Predicate {
      get { return predicate_; }
      set {
        predicate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "knowledge_graph_id" field.</summary>
    public const int KnowledgeGraphIdFieldNumber = 5;
    private string knowledgeGraphId_ = "";
    /// <summary>
    /// The knowledge graph id that this edge belongs to. If using the app's global knowledge graph
    /// and not a specific one then this should be the empty string "".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KnowledgeGraphId {
      get { return knowledgeGraphId_; }
      set {
        knowledgeGraphId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 6;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConceptRelation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConceptRelation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(SubjectConcept, other.SubjectConcept)) return false;
      if (!object.Equals(ObjectConcept, other.ObjectConcept)) return false;
      if (Predicate != other.Predicate) return false;
      if (KnowledgeGraphId != other.KnowledgeGraphId) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (subjectConcept_ != null) hash ^= SubjectConcept.GetHashCode();
      if (objectConcept_ != null) hash ^= ObjectConcept.GetHashCode();
      if (Predicate.Length != 0) hash ^= Predicate.GetHashCode();
      if (KnowledgeGraphId.Length != 0) hash ^= KnowledgeGraphId.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (subjectConcept_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SubjectConcept);
      }
      if (objectConcept_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ObjectConcept);
      }
      if (Predicate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Predicate);
      }
      if (KnowledgeGraphId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(KnowledgeGraphId);
      }
      if (visibility_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Visibility);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (subjectConcept_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubjectConcept);
      }
      if (objectConcept_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectConcept);
      }
      if (Predicate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Predicate);
      }
      if (KnowledgeGraphId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KnowledgeGraphId);
      }
      if (visibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConceptRelation other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.subjectConcept_ != null) {
        if (subjectConcept_ == null) {
          SubjectConcept = new global::Clarifai.Api.Concept();
        }
        SubjectConcept.MergeFrom(other.SubjectConcept);
      }
      if (other.objectConcept_ != null) {
        if (objectConcept_ == null) {
          ObjectConcept = new global::Clarifai.Api.Concept();
        }
        ObjectConcept.MergeFrom(other.ObjectConcept);
      }
      if (other.Predicate.Length != 0) {
        Predicate = other.Predicate;
      }
      if (other.KnowledgeGraphId.Length != 0) {
        KnowledgeGraphId = other.KnowledgeGraphId;
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (subjectConcept_ == null) {
              SubjectConcept = new global::Clarifai.Api.Concept();
            }
            input.ReadMessage(SubjectConcept);
            break;
          }
          case 26: {
            if (objectConcept_ == null) {
              ObjectConcept = new global::Clarifai.Api.Concept();
            }
            input.ReadMessage(ObjectConcept);
            break;
          }
          case 34: {
            Predicate = input.ReadString();
            break;
          }
          case 42: {
            KnowledgeGraphId = input.ReadString();
            break;
          }
          case 50: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Knowledge Graph is a logical subsets of edges in the overall Concept Graph
  /// </summary>
  public sealed partial class KnowledgeGraph : pb::IMessage<KnowledgeGraph> {
    private static readonly pb::MessageParser<KnowledgeGraph> _parser = new pb::MessageParser<KnowledgeGraph>(() => new KnowledgeGraph());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KnowledgeGraph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KnowledgeGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KnowledgeGraph(KnowledgeGraph other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      examplesAppId_ = other.examplesAppId_;
      sampledExamplesAppId_ = other.sampledExamplesAppId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KnowledgeGraph Clone() {
      return new KnowledgeGraph(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the knowledge graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the knowledge graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Human readable description of the knowledge graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "examples_app_id" field.</summary>
    public const int ExamplesAppIdFieldNumber = 4;
    private string examplesAppId_ = "";
    /// <summary>
    /// The app that contains the images that correspond to the concepts in the knowledge graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExamplesAppId {
      get { return examplesAppId_; }
      set {
        examplesAppId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sampled_examples_app_id" field.</summary>
    public const int SampledExamplesAppIdFieldNumber = 5;
    private string sampledExamplesAppId_ = "";
    /// <summary>
    /// The app that contains the sample images that we want to show the customer for the concepts in the knowledge graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SampledExamplesAppId {
      get { return sampledExamplesAppId_; }
      set {
        sampledExamplesAppId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KnowledgeGraph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KnowledgeGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (ExamplesAppId != other.ExamplesAppId) return false;
      if (SampledExamplesAppId != other.SampledExamplesAppId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ExamplesAppId.Length != 0) hash ^= ExamplesAppId.GetHashCode();
      if (SampledExamplesAppId.Length != 0) hash ^= SampledExamplesAppId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (ExamplesAppId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ExamplesAppId);
      }
      if (SampledExamplesAppId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SampledExamplesAppId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ExamplesAppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExamplesAppId);
      }
      if (SampledExamplesAppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SampledExamplesAppId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KnowledgeGraph other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ExamplesAppId.Length != 0) {
        ExamplesAppId = other.ExamplesAppId;
      }
      if (other.SampledExamplesAppId.Length != 0) {
        SampledExamplesAppId = other.SampledExamplesAppId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ExamplesAppId = input.ReadString();
            break;
          }
          case 42: {
            SampledExamplesAppId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConceptMappingJob : pb::IMessage<ConceptMappingJob> {
    private static readonly pb::MessageParser<ConceptMappingJob> _parser = new pb::MessageParser<ConceptMappingJob>(() => new ConceptMappingJob());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConceptMappingJob> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptMappingJob() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptMappingJob(ConceptMappingJob other) : this() {
      knowledgeGraphId_ = other.knowledgeGraphId_;
      conceptIds_ = other.conceptIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptMappingJob Clone() {
      return new ConceptMappingJob(this);
    }

    /// <summary>Field number for the "knowledge_graph_id" field.</summary>
    public const int KnowledgeGraphIdFieldNumber = 1;
    private string knowledgeGraphId_ = "";
    /// <summary>
    /// The id of the knowledge graph being used for this concept mapping job
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KnowledgeGraphId {
      get { return knowledgeGraphId_; }
      set {
        knowledgeGraphId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "concept_ids" field.</summary>
    public const int ConceptIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_conceptIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> conceptIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The ids of the concepts being mapped
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ConceptIds {
      get { return conceptIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConceptMappingJob);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConceptMappingJob other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KnowledgeGraphId != other.KnowledgeGraphId) return false;
      if(!conceptIds_.Equals(other.conceptIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KnowledgeGraphId.Length != 0) hash ^= KnowledgeGraphId.GetHashCode();
      hash ^= conceptIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KnowledgeGraphId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KnowledgeGraphId);
      }
      conceptIds_.WriteTo(output, _repeated_conceptIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KnowledgeGraphId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KnowledgeGraphId);
      }
      size += conceptIds_.CalculateSize(_repeated_conceptIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConceptMappingJob other) {
      if (other == null) {
        return;
      }
      if (other.KnowledgeGraphId.Length != 0) {
        KnowledgeGraphId = other.KnowledgeGraphId;
      }
      conceptIds_.Add(other.conceptIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KnowledgeGraphId = input.ReadString();
            break;
          }
          case 18: {
            conceptIds_.AddEntriesFrom(input, _repeated_conceptIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/concept_language.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// This represents a link to an outside source for the given concept.
  /// The values from here are sticked into Concept message into the name and definition fields when
  /// returning from the API in your default language. The "id" field here becomes the "language"
  /// field of the Concept message which is a little weird.
  /// </summary>
  public sealed partial class ConceptLanguage : pb::IMessage<ConceptLanguage> {
    private static readonly pb::MessageParser<ConceptLanguage> _parser = new pb::MessageParser<ConceptLanguage>(() => new ConceptLanguage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConceptLanguage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptLanguage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptLanguage(ConceptLanguage other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      definition_ = other.definition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptLanguage Clone() {
      return new ConceptLanguage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// This is the language code for the language such as "en".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The type of the outside source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "definition" field.</summary>
    public const int DefinitionFieldNumber = 3;
    private string definition_ = "";
    /// <summary>
    /// The ID that is referenced in the source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Definition {
      get { return definition_; }
      set {
        definition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConceptLanguage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConceptLanguage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Definition != other.Definition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Definition.Length != 0) hash ^= Definition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Definition.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Definition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Definition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Definition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConceptLanguage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Definition.Length != 0) {
        Definition = other.Definition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Definition = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/data.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Data : pb::IMessage<Data> {
    private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data(Data other) : this() {
      image_ = other.image_ != null ? other.image_.Clone() : null;
      video_ = other.video_ != null ? other.video_.Clone() : null;
      concepts_ = other.concepts_.Clone();
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      geo_ = other.geo_ != null ? other.geo_.Clone() : null;
      colors_ = other.colors_.Clone();
      clusters_ = other.clusters_.Clone();
      embeddings_ = other.embeddings_.Clone();
      regions_ = other.regions_.Clone();
      frames_ = other.frames_.Clone();
      text_ = other.text_ != null ? other.text_.Clone() : null;
      audio_ = other.audio_ != null ? other.audio_.Clone() : null;
      tracks_ = other.tracks_.Clone();
      timeSegments_ = other.timeSegments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data Clone() {
      return new Data(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::Clarifai.Api.Image image_;
    /// <summary>
    /// Input and output images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "video" field.</summary>
    public const int VideoFieldNumber = 2;
    private global::Clarifai.Api.Video video_;
    /// <summary>
    /// Input and output videos.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Video Video {
      get { return video_; }
      set {
        video_ = value;
      }
    }

    /// <summary>Field number for the "concepts" field.</summary>
    public const int ConceptsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Concept> _repeated_concepts_codec
        = pb::FieldCodec.ForMessage(26, global::Clarifai.Api.Concept.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Concept> concepts_ = new pbc::RepeatedField<global::Clarifai.Api.Concept>();
    /// <summary>
    /// A list of concepts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Concept> Concepts {
      get { return concepts_; }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// To handle arbitrary json metadata you can use a struct field:
    /// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "geo" field.</summary>
    public const int GeoFieldNumber = 6;
    private global::Clarifai.Api.Geo geo_;
    /// <summary>
    /// Geography information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Geo Geo {
      get { return geo_; }
      set {
        geo_ = value;
      }
    }

    /// <summary>Field number for the "colors" field.</summary>
    public const int ColorsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Color> _repeated_colors_codec
        = pb::FieldCodec.ForMessage(58, global::Clarifai.Api.Color.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Color> colors_ = new pbc::RepeatedField<global::Clarifai.Api.Color>();
    /// <summary>
    /// The dominant colors within an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Color> Colors {
      get { return colors_; }
    }

    /// <summary>Field number for the "clusters" field.</summary>
    public const int ClustersFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Cluster> _repeated_clusters_codec
        = pb::FieldCodec.ForMessage(66, global::Clarifai.Api.Cluster.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Cluster> clusters_ = new pbc::RepeatedField<global::Clarifai.Api.Cluster>();
    /// <summary>
    /// Clustering centroids for inputs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Cluster> Clusters {
      get { return clusters_; }
    }

    /// <summary>Field number for the "embeddings" field.</summary>
    public const int EmbeddingsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Embedding> _repeated_embeddings_codec
        = pb::FieldCodec.ForMessage(74, global::Clarifai.Api.Embedding.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Embedding> embeddings_ = new pbc::RepeatedField<global::Clarifai.Api.Embedding>();
    /// <summary>
    /// Embedding vectors representing each input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Embedding> Embeddings {
      get { return embeddings_; }
    }

    /// <summary>Field number for the "regions" field.</summary>
    public const int RegionsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Region> _repeated_regions_codec
        = pb::FieldCodec.ForMessage(90, global::Clarifai.Api.Region.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Region> regions_ = new pbc::RepeatedField<global::Clarifai.Api.Region>();
    /// <summary>
    /// For recursing into localized regions of an input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Region> Regions {
      get { return regions_; }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Frame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(98, global::Clarifai.Api.Frame.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Frame> frames_ = new pbc::RepeatedField<global::Clarifai.Api.Frame>();
    /// <summary>
    /// For temporal content like video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Frame> Frames {
      get { return frames_; }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 13;
    private global::Clarifai.Api.Text text_;
    /// <summary>
    /// Input and output text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Text Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "audio" field.</summary>
    public const int AudioFieldNumber = 14;
    private global::Clarifai.Api.Audio audio_;
    /// <summary>
    /// Input and output audio.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Audio Audio {
      get { return audio_; }
      set {
        audio_ = value;
      }
    }

    /// <summary>Field number for the "tracks" field.</summary>
    public const int TracksFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Track> _repeated_tracks_codec
        = pb::FieldCodec.ForMessage(122, global::Clarifai.Api.Track.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Track> tracks_ = new pbc::RepeatedField<global::Clarifai.Api.Track>();
    /// <summary>
    /// Track information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Track> Tracks {
      get { return tracks_; }
    }

    /// <summary>Field number for the "time_segments" field.</summary>
    public const int TimeSegmentsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Clarifai.Api.TimeSegment> _repeated_timeSegments_codec
        = pb::FieldCodec.ForMessage(130, global::Clarifai.Api.TimeSegment.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.TimeSegment> timeSegments_ = new pbc::RepeatedField<global::Clarifai.Api.TimeSegment>();
    /// <summary>
    /// Time segments information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.TimeSegment> TimeSegments {
      get { return timeSegments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Video, other.Video)) return false;
      if(!concepts_.Equals(other.concepts_)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Geo, other.Geo)) return false;
      if(!colors_.Equals(other.colors_)) return false;
      if(!clusters_.Equals(other.clusters_)) return false;
      if(!embeddings_.Equals(other.embeddings_)) return false;
      if(!regions_.Equals(other.regions_)) return false;
      if(!frames_.Equals(other.frames_)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(Audio, other.Audio)) return false;
      if(!tracks_.Equals(other.tracks_)) return false;
      if(!timeSegments_.Equals(other.timeSegments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (video_ != null) hash ^= Video.GetHashCode();
      hash ^= concepts_.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (geo_ != null) hash ^= Geo.GetHashCode();
      hash ^= colors_.GetHashCode();
      hash ^= clusters_.GetHashCode();
      hash ^= embeddings_.GetHashCode();
      hash ^= regions_.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (audio_ != null) hash ^= Audio.GetHashCode();
      hash ^= tracks_.GetHashCode();
      hash ^= timeSegments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      if (video_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Video);
      }
      concepts_.WriteTo(output, _repeated_concepts_codec);
      if (metadata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Metadata);
      }
      if (geo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Geo);
      }
      colors_.WriteTo(output, _repeated_colors_codec);
      clusters_.WriteTo(output, _repeated_clusters_codec);
      embeddings_.WriteTo(output, _repeated_embeddings_codec);
      regions_.WriteTo(output, _repeated_regions_codec);
      frames_.WriteTo(output, _repeated_frames_codec);
      if (text_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Text);
      }
      if (audio_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Audio);
      }
      tracks_.WriteTo(output, _repeated_tracks_codec);
      timeSegments_.WriteTo(output, _repeated_timeSegments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (video_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Video);
      }
      size += concepts_.CalculateSize(_repeated_concepts_codec);
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (geo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Geo);
      }
      size += colors_.CalculateSize(_repeated_colors_codec);
      size += clusters_.CalculateSize(_repeated_clusters_codec);
      size += embeddings_.CalculateSize(_repeated_embeddings_codec);
      size += regions_.CalculateSize(_repeated_regions_codec);
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (audio_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Audio);
      }
      size += tracks_.CalculateSize(_repeated_tracks_codec);
      size += timeSegments_.CalculateSize(_repeated_timeSegments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Data other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Clarifai.Api.Image();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.video_ != null) {
        if (video_ == null) {
          Video = new global::Clarifai.Api.Video();
        }
        Video.MergeFrom(other.Video);
      }
      concepts_.Add(other.concepts_);
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.geo_ != null) {
        if (geo_ == null) {
          Geo = new global::Clarifai.Api.Geo();
        }
        Geo.MergeFrom(other.Geo);
      }
      colors_.Add(other.colors_);
      clusters_.Add(other.clusters_);
      embeddings_.Add(other.embeddings_);
      regions_.Add(other.regions_);
      frames_.Add(other.frames_);
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Clarifai.Api.Text();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.audio_ != null) {
        if (audio_ == null) {
          Audio = new global::Clarifai.Api.Audio();
        }
        Audio.MergeFrom(other.Audio);
      }
      tracks_.Add(other.tracks_);
      timeSegments_.Add(other.timeSegments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (image_ == null) {
              Image = new global::Clarifai.Api.Image();
            }
            input.ReadMessage(Image);
            break;
          }
          case 18: {
            if (video_ == null) {
              Video = new global::Clarifai.Api.Video();
            }
            input.ReadMessage(Video);
            break;
          }
          case 26: {
            concepts_.AddEntriesFrom(input, _repeated_concepts_codec);
            break;
          }
          case 42: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 50: {
            if (geo_ == null) {
              Geo = new global::Clarifai.Api.Geo();
            }
            input.ReadMessage(Geo);
            break;
          }
          case 58: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
          case 66: {
            clusters_.AddEntriesFrom(input, _repeated_clusters_codec);
            break;
          }
          case 74: {
            embeddings_.AddEntriesFrom(input, _repeated_embeddings_codec);
            break;
          }
          case 90: {
            regions_.AddEntriesFrom(input, _repeated_regions_codec);
            break;
          }
          case 98: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
          case 106: {
            if (text_ == null) {
              Text = new global::Clarifai.Api.Text();
            }
            input.ReadMessage(Text);
            break;
          }
          case 114: {
            if (audio_ == null) {
              Audio = new global::Clarifai.Api.Audio();
            }
            input.ReadMessage(Audio);
            break;
          }
          case 122: {
            tracks_.AddEntriesFrom(input, _repeated_tracks_codec);
            break;
          }
          case 130: {
            timeSegments_.AddEntriesFrom(input, _repeated_timeSegments_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A region within the data.
  /// </summary>
  public sealed partial class Region : pb::IMessage<Region> {
    private static readonly pb::MessageParser<Region> _parser = new pb::MessageParser<Region>(() => new Region());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Region> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region(Region other) : this() {
      id_ = other.id_;
      regionInfo_ = other.regionInfo_ != null ? other.regionInfo_.Clone() : null;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      value_ = other.value_;
      trackId_ = other.trackId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region Clone() {
      return new Region(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A unique id for the region.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region_info" field.</summary>
    public const int RegionInfoFieldNumber = 2;
    private global::Clarifai.Api.RegionInfo regionInfo_;
    /// <summary>
    /// The details about the location of the region.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.RegionInfo RegionInfo {
      get { return regionInfo_; }
      set {
        regionInfo_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Clarifai.Api.Data data_;
    /// <summary>
    /// A recursive definition of the data within the Region. For example, this will contain
    /// data.concepts if the region also has annotations or predictions of concepts within it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private float value_;
    /// <summary>
    /// This is the confidence score of the overall Region.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "track_id" field.</summary>
    public const int TrackIdFieldNumber = 5;
    private string trackId_ = "";
    /// <summary>
    /// For tracking algorithsm and annotations we tie regions together with this track id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TrackId {
      get { return trackId_; }
      set {
        trackId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Region);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Region other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(RegionInfo, other.RegionInfo)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (TrackId != other.TrackId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (regionInfo_ != null) hash ^= RegionInfo.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (TrackId.Length != 0) hash ^= TrackId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (regionInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RegionInfo);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      if (Value != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Value);
      }
      if (TrackId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TrackId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (regionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegionInfo);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (TrackId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TrackId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Region other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.regionInfo_ != null) {
        if (regionInfo_ == null) {
          RegionInfo = new global::Clarifai.Api.RegionInfo();
        }
        RegionInfo.MergeFrom(other.RegionInfo);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Clarifai.Api.Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.TrackId.Length != 0) {
        TrackId = other.TrackId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (regionInfo_ == null) {
              RegionInfo = new global::Clarifai.Api.RegionInfo();
            }
            input.ReadMessage(RegionInfo);
            break;
          }
          case 26: {
            if (data_ == null) {
              Data = new global::Clarifai.Api.Data();
            }
            input.ReadMessage(Data);
            break;
          }
          case 37: {
            Value = input.ReadFloat();
            break;
          }
          case 42: {
            TrackId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The information of the location of the Region.
  /// </summary>
  public sealed partial class RegionInfo : pb::IMessage<RegionInfo> {
    private static readonly pb::MessageParser<RegionInfo> _parser = new pb::MessageParser<RegionInfo>(() => new RegionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionInfo(RegionInfo other) : this() {
      boundingBox_ = other.boundingBox_ != null ? other.boundingBox_.Clone() : null;
      mask_ = other.mask_ != null ? other.mask_.Clone() : null;
      polygon_ = other.polygon_ != null ? other.polygon_.Clone() : null;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionInfo Clone() {
      return new RegionInfo(this);
    }

    /// <summary>Field number for the "bounding_box" field.</summary>
    public const int BoundingBoxFieldNumber = 1;
    private global::Clarifai.Api.BoundingBox boundingBox_;
    /// <summary>
    /// Details of the region's rectangular bounding box.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.BoundingBox BoundingBox {
      get { return boundingBox_; }
      set {
        boundingBox_ = value;
      }
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 4;
    private global::Clarifai.Api.Mask mask_;
    /// <summary>
    /// Details of the region's segmentation mask.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Mask Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 5;
    private global::Clarifai.Api.Polygon polygon_;
    /// <summary>
    /// A polygon of points.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Polygon Polygon {
      get { return polygon_; }
      set {
        polygon_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 6;
    private global::Clarifai.Api.Point point_;
    /// <summary>
    /// A landmark point location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Point Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BoundingBox, other.BoundingBox)) return false;
      if (!object.Equals(Mask, other.Mask)) return false;
      if (!object.Equals(Polygon, other.Polygon)) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (boundingBox_ != null) hash ^= BoundingBox.GetHashCode();
      if (mask_ != null) hash ^= Mask.GetHashCode();
      if (polygon_ != null) hash ^= Polygon.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (boundingBox_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BoundingBox);
      }
      if (mask_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mask);
      }
      if (polygon_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Polygon);
      }
      if (point_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (boundingBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBox);
      }
      if (mask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mask);
      }
      if (polygon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionInfo other) {
      if (other == null) {
        return;
      }
      if (other.boundingBox_ != null) {
        if (boundingBox_ == null) {
          BoundingBox = new global::Clarifai.Api.BoundingBox();
        }
        BoundingBox.MergeFrom(other.BoundingBox);
      }
      if (other.mask_ != null) {
        if (mask_ == null) {
          Mask = new global::Clarifai.Api.Mask();
        }
        Mask.MergeFrom(other.Mask);
      }
      if (other.polygon_ != null) {
        if (polygon_ == null) {
          Polygon = new global::Clarifai.Api.Polygon();
        }
        Polygon.MergeFrom(other.Polygon);
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::Clarifai.Api.Point();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (boundingBox_ == null) {
              BoundingBox = new global::Clarifai.Api.BoundingBox();
            }
            input.ReadMessage(BoundingBox);
            break;
          }
          case 34: {
            if (mask_ == null) {
              Mask = new global::Clarifai.Api.Mask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 42: {
            if (polygon_ == null) {
              Polygon = new global::Clarifai.Api.Polygon();
            }
            input.ReadMessage(Polygon);
            break;
          }
          case 50: {
            if (point_ == null) {
              Point = new global::Clarifai.Api.Point();
            }
            input.ReadMessage(Point);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Rectangular bounding box for a region.
  /// </summary>
  public sealed partial class BoundingBox : pb::IMessage<BoundingBox> {
    private static readonly pb::MessageParser<BoundingBox> _parser = new pb::MessageParser<BoundingBox>(() => new BoundingBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoundingBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingBox(BoundingBox other) : this() {
      topRow_ = other.topRow_;
      leftCol_ = other.leftCol_;
      bottomRow_ = other.bottomRow_;
      rightCol_ = other.rightCol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingBox Clone() {
      return new BoundingBox(this);
    }

    /// <summary>Field number for the "top_row" field.</summary>
    public const int TopRowFieldNumber = 1;
    private float topRow_;
    /// <summary>
    /// The top left of the bounding box normalized to the data dimension to be within [0-1.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TopRow {
      get { return topRow_; }
      set {
        topRow_ = value;
      }
    }

    /// <summary>Field number for the "left_col" field.</summary>
    public const int LeftColFieldNumber = 2;
    private float leftCol_;
    /// <summary>
    /// The left column of the bounding box normalized to the data dimension to be within [0-1.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftCol {
      get { return leftCol_; }
      set {
        leftCol_ = value;
      }
    }

    /// <summary>Field number for the "bottom_row" field.</summary>
    public const int BottomRowFieldNumber = 3;
    private float bottomRow_;
    /// <summary>
    /// The bottom row of the bounding box normalized to the data dimension to be within [0-1.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BottomRow {
      get { return bottomRow_; }
      set {
        bottomRow_ = value;
      }
    }

    /// <summary>Field number for the "right_col" field.</summary>
    public const int RightColFieldNumber = 4;
    private float rightCol_;
    /// <summary>
    /// The right col of the bounding box normalized to the data dimension to be within [0-1.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightCol {
      get { return rightCol_; }
      set {
        rightCol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoundingBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoundingBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TopRow, other.TopRow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftCol, other.LeftCol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BottomRow, other.BottomRow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightCol, other.RightCol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TopRow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TopRow);
      if (LeftCol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftCol);
      if (BottomRow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BottomRow);
      if (RightCol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightCol);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopRow != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(TopRow);
      }
      if (LeftCol != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(LeftCol);
      }
      if (BottomRow != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BottomRow);
      }
      if (RightCol != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RightCol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopRow != 0F) {
        size += 1 + 4;
      }
      if (LeftCol != 0F) {
        size += 1 + 4;
      }
      if (BottomRow != 0F) {
        size += 1 + 4;
      }
      if (RightCol != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoundingBox other) {
      if (other == null) {
        return;
      }
      if (other.TopRow != 0F) {
        TopRow = other.TopRow;
      }
      if (other.LeftCol != 0F) {
        LeftCol = other.LeftCol;
      }
      if (other.BottomRow != 0F) {
        BottomRow = other.BottomRow;
      }
      if (other.RightCol != 0F) {
        RightCol = other.RightCol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            TopRow = input.ReadFloat();
            break;
          }
          case 21: {
            LeftCol = input.ReadFloat();
            break;
          }
          case 29: {
            BottomRow = input.ReadFloat();
            break;
          }
          case 37: {
            RightCol = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The information of the location of the Frame.
  /// </summary>
  public sealed partial class FrameInfo : pb::IMessage<FrameInfo> {
    private static readonly pb::MessageParser<FrameInfo> _parser = new pb::MessageParser<FrameInfo>(() => new FrameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameInfo(FrameInfo other) : this() {
      index_ = other.index_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameInfo Clone() {
      return new FrameInfo(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    /// The index of the frame. Keep in mind that this depends on the sampling rate used during
    /// processing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    /// time in the video in milliseconds. This is independent of the sampling rates used during
    /// processing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameInfo other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Frame of time-series Data such as a Video.
  /// </summary>
  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      frameInfo_ = other.frameInfo_ != null ? other.frameInfo_.Clone() : null;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "frame_info" field.</summary>
    public const int FrameInfoFieldNumber = 1;
    private global::Clarifai.Api.FrameInfo frameInfo_;
    /// <summary>
    /// Information aboue frame such as number and time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.FrameInfo FrameInfo {
      get { return frameInfo_; }
      set {
        frameInfo_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Clarifai.Api.Data data_;
    /// <summary>
    /// A recursive definition of the data within the Frame. For example, this will contain
    /// data.concepts if the Frame also has annotations or predictions of concepts within it.
    /// This can also have data.regions for annotation or predictions of detection regions, which can
    /// then recursively have their data field filled in as well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    /// <summary>
    /// An ID for the frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FrameInfo, other.FrameInfo)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (frameInfo_ != null) hash ^= FrameInfo.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (frameInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FrameInfo);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (frameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameInfo);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.frameInfo_ != null) {
        if (frameInfo_ == null) {
          FrameInfo = new global::Clarifai.Api.FrameInfo();
        }
        FrameInfo.MergeFrom(other.FrameInfo);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Clarifai.Api.Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (frameInfo_ == null) {
              FrameInfo = new global::Clarifai.Api.FrameInfo();
            }
            input.ReadMessage(FrameInfo);
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::Clarifai.Api.Data();
            }
            input.ReadMessage(Data);
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Segmentation mask.
  /// </summary>
  public sealed partial class Mask : pb::IMessage<Mask> {
    private static readonly pb::MessageParser<Mask> _parser = new pb::MessageParser<Mask>(() => new Mask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mask(Mask other) : this() {
      image_ = other.image_ != null ? other.image_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mask Clone() {
      return new Mask(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 2;
    private global::Clarifai.Api.Image image_;
    /// <summary>
    /// The image of the mask in a non-raster format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mask other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Clarifai.Api.Image();
        }
        Image.MergeFrom(other.Image);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (image_ == null) {
              Image = new global::Clarifai.Api.Image();
            }
            input.ReadMessage(Image);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Polygon : pb::IMessage<Polygon> {
    private static readonly pb::MessageParser<Polygon> _parser = new pb::MessageParser<Polygon>(() => new Polygon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Polygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon(Polygon other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon Clone() {
      return new Polygon(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Point> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Clarifai.Api.Point.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Point> points_ = new pbc::RepeatedField<global::Clarifai.Api.Point>();
    /// <summary>
    /// A list of points connected together to form the polygon.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Point> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Polygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Polygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Polygon other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point(Point other) : this() {
      row_ = other.row_;
      col_ = other.col_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private float row_;
    /// <summary>
    /// The row location of the point. This has a [0.0-1.0] range with 0.0 being top row and 1.0
    /// being the bottom row.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private float col_;
    /// <summary>
    /// The column location of the point. This has a [0.0-1.0] range with 0.0 being left col and 1.0
    /// being the right col.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    /// <summary>
    /// Depth if applicable for the point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Row, other.Row)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Col, other.Col)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Row != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Row);
      if (Col != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Col);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Row);
      }
      if (Col != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Col);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row != 0F) {
        size += 1 + 4;
      }
      if (Col != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.Row != 0F) {
        Row = other.Row;
      }
      if (other.Col != 0F) {
        Col = other.Col;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Row = input.ReadFloat();
            break;
          }
          case 21: {
            Col = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/embedding.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Embedding : pb::IMessage<Embedding> {
    private static readonly pb::MessageParser<Embedding> _parser = new pb::MessageParser<Embedding>(() => new Embedding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Embedding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Embedding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Embedding(Embedding other) : this() {
      vector_ = other.vector_.Clone();
      numDimensions_ = other.numDimensions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Embedding Clone() {
      return new Embedding(this);
    }

    /// <summary>Field number for the "vector" field.</summary>
    public const int VectorFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_vector_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> vector_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Vector {
      get { return vector_; }
    }

    /// <summary>Field number for the "num_dimensions" field.</summary>
    public const int NumDimensionsFieldNumber = 2;
    private uint numDimensions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumDimensions {
      get { return numDimensions_; }
      set {
        numDimensions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Embedding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Embedding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vector_.Equals(other.vector_)) return false;
      if (NumDimensions != other.NumDimensions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vector_.GetHashCode();
      if (NumDimensions != 0) hash ^= NumDimensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vector_.WriteTo(output, _repeated_vector_codec);
      if (NumDimensions != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumDimensions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vector_.CalculateSize(_repeated_vector_codec);
      if (NumDimensions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumDimensions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Embedding other) {
      if (other == null) {
        return;
      }
      vector_.Add(other.vector_);
      if (other.NumDimensions != 0) {
        NumDimensions = other.NumDimensions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            vector_.AddEntriesFrom(input, _repeated_vector_codec);
            break;
          }
          case 16: {
            NumDimensions = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/geo.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class GeoPoint : pb::IMessage<GeoPoint> {
    private static readonly pb::MessageParser<GeoPoint> _parser = new pb::MessageParser<GeoPoint>(() => new GeoPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoPoint(GeoPoint other) : this() {
      longitude_ = other.longitude_;
      latitude_ = other.latitude_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoPoint Clone() {
      return new GeoPoint(this);
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 1;
    private float longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private float latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Longitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Longitude);
      if (Latitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Latitude);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Longitude != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Longitude);
      }
      if (Latitude != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Latitude);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Longitude != 0F) {
        size += 1 + 4;
      }
      if (Latitude != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoPoint other) {
      if (other == null) {
        return;
      }
      if (other.Longitude != 0F) {
        Longitude = other.Longitude;
      }
      if (other.Latitude != 0F) {
        Latitude = other.Latitude;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Longitude = input.ReadFloat();
            break;
          }
          case 21: {
            Latitude = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoLimit : pb::IMessage<GeoLimit> {
    private static readonly pb::MessageParser<GeoLimit> _parser = new pb::MessageParser<GeoLimit>(() => new GeoLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoLimit(GeoLimit other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoLimit Clone() {
      return new GeoLimit(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoLimit other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoBoxedPoint : pb::IMessage<GeoBoxedPoint> {
    private static readonly pb::MessageParser<GeoBoxedPoint> _parser = new pb::MessageParser<GeoBoxedPoint>(() => new GeoBoxedPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoBoxedPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoBoxedPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoBoxedPoint(GeoBoxedPoint other) : this() {
      geoPoint_ = other.geoPoint_ != null ? other.geoPoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoBoxedPoint Clone() {
      return new GeoBoxedPoint(this);
    }

    /// <summary>Field number for the "geo_point" field.</summary>
    public const int GeoPointFieldNumber = 1;
    private global::Clarifai.Api.GeoPoint geoPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.GeoPoint GeoPoint {
      get { return geoPoint_; }
      set {
        geoPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoBoxedPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoBoxedPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GeoPoint, other.GeoPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (geoPoint_ != null) hash ^= GeoPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (geoPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GeoPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (geoPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeoPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoBoxedPoint other) {
      if (other == null) {
        return;
      }
      if (other.geoPoint_ != null) {
        if (geoPoint_ == null) {
          GeoPoint = new global::Clarifai.Api.GeoPoint();
        }
        GeoPoint.MergeFrom(other.GeoPoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (geoPoint_ == null) {
              GeoPoint = new global::Clarifai.Api.GeoPoint();
            }
            input.ReadMessage(GeoPoint);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Geo : pb::IMessage<Geo> {
    private static readonly pb::MessageParser<Geo> _parser = new pb::MessageParser<Geo>(() => new Geo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Geo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Geo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Geo(Geo other) : this() {
      geoPoint_ = other.geoPoint_ != null ? other.geoPoint_.Clone() : null;
      geoLimit_ = other.geoLimit_ != null ? other.geoLimit_.Clone() : null;
      geoBox_ = other.geoBox_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Geo Clone() {
      return new Geo(this);
    }

    /// <summary>Field number for the "geo_point" field.</summary>
    public const int GeoPointFieldNumber = 1;
    private global::Clarifai.Api.GeoPoint geoPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.GeoPoint GeoPoint {
      get { return geoPoint_; }
      set {
        geoPoint_ = value;
      }
    }

    /// <summary>Field number for the "geo_limit" field.</summary>
    public const int GeoLimitFieldNumber = 2;
    private global::Clarifai.Api.GeoLimit geoLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.GeoLimit GeoLimit {
      get { return geoLimit_; }
      set {
        geoLimit_ = value;
      }
    }

    /// <summary>Field number for the "geo_box" field.</summary>
    public const int GeoBoxFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Clarifai.Api.GeoBoxedPoint> _repeated_geoBox_codec
        = pb::FieldCodec.ForMessage(26, global::Clarifai.Api.GeoBoxedPoint.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.GeoBoxedPoint> geoBox_ = new pbc::RepeatedField<global::Clarifai.Api.GeoBoxedPoint>();
    /// <summary>
    /// NOTE: inconsistency: should have been geo_boxed_points
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.GeoBoxedPoint> GeoBox {
      get { return geoBox_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Geo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Geo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GeoPoint, other.GeoPoint)) return false;
      if (!object.Equals(GeoLimit, other.GeoLimit)) return false;
      if(!geoBox_.Equals(other.geoBox_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (geoPoint_ != null) hash ^= GeoPoint.GetHashCode();
      if (geoLimit_ != null) hash ^= GeoLimit.GetHashCode();
      hash ^= geoBox_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (geoPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GeoPoint);
      }
      if (geoLimit_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GeoLimit);
      }
      geoBox_.WriteTo(output, _repeated_geoBox_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (geoPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeoPoint);
      }
      if (geoLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeoLimit);
      }
      size += geoBox_.CalculateSize(_repeated_geoBox_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Geo other) {
      if (other == null) {
        return;
      }
      if (other.geoPoint_ != null) {
        if (geoPoint_ == null) {
          GeoPoint = new global::Clarifai.Api.GeoPoint();
        }
        GeoPoint.MergeFrom(other.GeoPoint);
      }
      if (other.geoLimit_ != null) {
        if (geoLimit_ == null) {
          GeoLimit = new global::Clarifai.Api.GeoLimit();
        }
        GeoLimit.MergeFrom(other.GeoLimit);
      }
      geoBox_.Add(other.geoBox_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (geoPoint_ == null) {
              GeoPoint = new global::Clarifai.Api.GeoPoint();
            }
            input.ReadMessage(GeoPoint);
            break;
          }
          case 18: {
            if (geoLimit_ == null) {
              GeoLimit = new global::Clarifai.Api.GeoLimit();
            }
            input.ReadMessage(GeoLimit);
            break;
          }
          case 26: {
            geoBox_.AddEntriesFrom(input, _repeated_geoBox_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/image.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      url_ = other.url_;
      base64_ = other.base64_;
      allowDuplicateUrl_ = other.allowDuplicateUrl_;
      hosted_ = other.hosted_ != null ? other.hosted_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    /// This is a URL to a publicly accessible image file. The platform will download this file server
    /// side and then process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base64" field.</summary>
    public const int Base64FieldNumber = 2;
    private pb::ByteString base64_ = pb::ByteString.Empty;
    /// <summary>
    /// The base64 field is using image file bytes directly in the request.
    /// NOTE: if you're sending a json request, then this MUST be base64 encoded before sending (hence
    /// the name here).
    /// When using our grpc clients, you DO NOT need to base64 encode
    /// it yourself since the clients know how to do this for you automatically and will avoid the
    /// base64 encoding if they send a binary request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Base64 {
      get { return base64_; }
      set {
        base64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_duplicate_url" field.</summary>
    public const int AllowDuplicateUrlFieldNumber = 4;
    private bool allowDuplicateUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowDuplicateUrl {
      get { return allowDuplicateUrl_; }
      set {
        allowDuplicateUrl_ = value;
      }
    }

    /// <summary>Field number for the "hosted" field.</summary>
    public const int HostedFieldNumber = 5;
    private global::Clarifai.Api.HostedURL hosted_;
    /// <summary>
    /// The hosted field lists images in different sizes hosted in Clarifai storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.HostedURL Hosted {
      get { return hosted_; }
      set {
        hosted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (Base64 != other.Base64) return false;
      if (AllowDuplicateUrl != other.AllowDuplicateUrl) return false;
      if (!object.Equals(Hosted, other.Hosted)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Base64.Length != 0) hash ^= Base64.GetHashCode();
      if (AllowDuplicateUrl != false) hash ^= AllowDuplicateUrl.GetHashCode();
      if (hosted_ != null) hash ^= Hosted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (Base64.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Base64);
      }
      if (AllowDuplicateUrl != false) {
        output.WriteRawTag(32);
        output.WriteBool(AllowDuplicateUrl);
      }
      if (hosted_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Hosted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Base64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Base64);
      }
      if (AllowDuplicateUrl != false) {
        size += 1 + 1;
      }
      if (hosted_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hosted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Base64.Length != 0) {
        Base64 = other.Base64;
      }
      if (other.AllowDuplicateUrl != false) {
        AllowDuplicateUrl = other.AllowDuplicateUrl;
      }
      if (other.hosted_ != null) {
        if (hosted_ == null) {
          Hosted = new global::Clarifai.Api.HostedURL();
        }
        Hosted.MergeFrom(other.Hosted);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            Base64 = input.ReadBytes();
            break;
          }
          case 32: {
            AllowDuplicateUrl = input.ReadBool();
            break;
          }
          case 42: {
            if (hosted_ == null) {
              Hosted = new global::Clarifai.Api.HostedURL();
            }
            input.ReadMessage(Hosted);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HostedURL : pb::IMessage<HostedURL> {
    private static readonly pb::MessageParser<HostedURL> _parser = new pb::MessageParser<HostedURL>(() => new HostedURL());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostedURL> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedURL() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedURL(HostedURL other) : this() {
      prefix_ = other.prefix_;
      suffix_ = other.suffix_;
      sizes_ = other.sizes_.Clone();
      crossorigin_ = other.crossorigin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedURL Clone() {
      return new HostedURL(this);
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 1;
    private string prefix_ = "";
    /// <summary>
    /// Prefix of the URL of every hosted image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prefix {
      get { return prefix_; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 2;
    private string suffix_ = "";
    /// <summary>
    /// Suffix of an image stored in different sizes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Suffix {
      get { return suffix_; }
      set {
        suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sizes" field.</summary>
    public const int SizesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_sizes_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> sizes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The sizes field lists which images of the different sizes are hosted in our storage. The URL
    /// of each hosted image can be obtained by joining the prefix, one of the sizes and suffix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sizes {
      get { return sizes_; }
    }

    /// <summary>Field number for the "crossorigin" field.</summary>
    public const int CrossoriginFieldNumber = 4;
    private string crossorigin_ = "";
    /// <summary>
    /// The crossorigin property of html media tag
    /// For Secure Data Hosting this needs to be set to 'use-credentials'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Crossorigin {
      get { return crossorigin_; }
      set {
        crossorigin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostedURL);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostedURL other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Prefix != other.Prefix) return false;
      if (Suffix != other.Suffix) return false;
      if(!sizes_.Equals(other.sizes_)) return false;
      if (Crossorigin != other.Crossorigin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Prefix.Length != 0) hash ^= Prefix.GetHashCode();
      if (Suffix.Length != 0) hash ^= Suffix.GetHashCode();
      hash ^= sizes_.GetHashCode();
      if (Crossorigin.Length != 0) hash ^= Crossorigin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Prefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Prefix);
      }
      if (Suffix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Suffix);
      }
      sizes_.WriteTo(output, _repeated_sizes_codec);
      if (Crossorigin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Crossorigin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Prefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
      }
      if (Suffix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Suffix);
      }
      size += sizes_.CalculateSize(_repeated_sizes_codec);
      if (Crossorigin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Crossorigin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostedURL other) {
      if (other == null) {
        return;
      }
      if (other.Prefix.Length != 0) {
        Prefix = other.Prefix;
      }
      if (other.Suffix.Length != 0) {
        Suffix = other.Suffix;
      }
      sizes_.Add(other.sizes_);
      if (other.Crossorigin.Length != 0) {
        Crossorigin = other.Crossorigin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Prefix = input.ReadString();
            break;
          }
          case 18: {
            Suffix = input.ReadString();
            break;
          }
          case 26: {
            sizes_.AddEntriesFrom(input, _repeated_sizes_codec);
            break;
          }
          case 34: {
            Crossorigin = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/input.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Input : pb::IMessage<Input> {
    private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Input> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input(Input other) : this() {
      id_ = other.id_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      modifiedAt_ = other.modifiedAt_ != null ? other.modifiedAt_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      datasetIds_ = other.datasetIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input Clone() {
      return new Input(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The ID for the input
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Clarifai.Api.Data data_;
    /// <summary>
    /// The data passed along in this input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the input was created. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    /// the following from the API:
    /// "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "modified_at" field.</summary>
    public const int ModifiedAtFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedAt_;
    /// <summary>
    /// When the input was modified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedAt {
      get { return modifiedAt_; }
      set {
        modifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private global::Clarifai.Api.Status.Status status_;
    /// <summary>
    /// This is the status at a per Input level which allows for
    /// partial failures.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "dataset_ids" field.</summary>
    public const int DatasetIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_datasetIds_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> datasetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of dataset IDs that this input is part of
    /// Currently, this field is ONLY used in search.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DatasetIds {
      get { return datasetIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Input);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Input other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(ModifiedAt, other.ModifiedAt)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if(!datasetIds_.Equals(other.datasetIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (modifiedAt_ != null) hash ^= ModifiedAt.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= datasetIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreatedAt);
      }
      if (modifiedAt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ModifiedAt);
      }
      if (status_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Status);
      }
      datasetIds_.WriteTo(output, _repeated_datasetIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (modifiedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifiedAt);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += datasetIds_.CalculateSize(_repeated_datasetIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Input other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Clarifai.Api.Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.modifiedAt_ != null) {
        if (modifiedAt_ == null) {
          ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedAt.MergeFrom(other.ModifiedAt);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Clarifai.Api.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      datasetIds_.Add(other.datasetIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::Clarifai.Api.Data();
            }
            input.ReadMessage(Data);
            break;
          }
          case 34: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 42: {
            if (modifiedAt_ == null) {
              ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedAt);
            break;
          }
          case 50: {
            if (status_ == null) {
              Status = new global::Clarifai.Api.Status.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 58: {
            datasetIds_.AddEntriesFrom(input, _repeated_datasetIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// NOTE: inconsistency: this is weird mix of plural and singular words.
  /// </summary>
  public sealed partial class InputCount : pb::IMessage<InputCount> {
    private static readonly pb::MessageParser<InputCount> _parser = new pb::MessageParser<InputCount>(() => new InputCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputCount(InputCount other) : this() {
      processed_ = other.processed_;
      toProcess_ = other.toProcess_;
      errors_ = other.errors_;
      processing_ = other.processing_;
      reindexed_ = other.reindexed_;
      toReindex_ = other.toReindex_;
      reindexErrors_ = other.reindexErrors_;
      reindexing_ = other.reindexing_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputCount Clone() {
      return new InputCount(this);
    }

    /// <summary>Field number for the "processed" field.</summary>
    public const int ProcessedFieldNumber = 1;
    private uint processed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Processed {
      get { return processed_; }
      set {
        processed_ = value;
      }
    }

    /// <summary>Field number for the "to_process" field.</summary>
    public const int ToProcessFieldNumber = 2;
    private uint toProcess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToProcess {
      get { return toProcess_; }
      set {
        toProcess_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 3;
    private uint errors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Errors {
      get { return errors_; }
      set {
        errors_ = value;
      }
    }

    /// <summary>Field number for the "processing" field.</summary>
    public const int ProcessingFieldNumber = 4;
    private uint processing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Processing {
      get { return processing_; }
      set {
        processing_ = value;
      }
    }

    /// <summary>Field number for the "reindexed" field.</summary>
    public const int ReindexedFieldNumber = 5;
    private uint reindexed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reindexed {
      get { return reindexed_; }
      set {
        reindexed_ = value;
      }
    }

    /// <summary>Field number for the "to_reindex" field.</summary>
    public const int ToReindexFieldNumber = 6;
    private uint toReindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToReindex {
      get { return toReindex_; }
      set {
        toReindex_ = value;
      }
    }

    /// <summary>Field number for the "reindex_errors" field.</summary>
    public const int ReindexErrorsFieldNumber = 7;
    private uint reindexErrors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReindexErrors {
      get { return reindexErrors_; }
      set {
        reindexErrors_ = value;
      }
    }

    /// <summary>Field number for the "reindexing" field.</summary>
    public const int ReindexingFieldNumber = 8;
    private uint reindexing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reindexing {
      get { return reindexing_; }
      set {
        reindexing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Processed != other.Processed) return false;
      if (ToProcess != other.ToProcess) return false;
      if (Errors != other.Errors) return false;
      if (Processing != other.Processing) return false;
      if (Reindexed != other.Reindexed) return false;
      if (ToReindex != other.ToReindex) return false;
      if (ReindexErrors != other.ReindexErrors) return false;
      if (Reindexing != other.Reindexing) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Processed != 0) hash ^= Processed.GetHashCode();
      if (ToProcess != 0) hash ^= ToProcess.GetHashCode();
      if (Errors != 0) hash ^= Errors.GetHashCode();
      if (Processing != 0) hash ^= Processing.GetHashCode();
      if (Reindexed != 0) hash ^= Reindexed.GetHashCode();
      if (ToReindex != 0) hash ^= ToReindex.GetHashCode();
      if (ReindexErrors != 0) hash ^= ReindexErrors.GetHashCode();
      if (Reindexing != 0) hash ^= Reindexing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Processed != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Processed);
      }
      if (ToProcess != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToProcess);
      }
      if (Errors != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Errors);
      }
      if (Processing != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Processing);
      }
      if (Reindexed != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Reindexed);
      }
      if (ToReindex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ToReindex);
      }
      if (ReindexErrors != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ReindexErrors);
      }
      if (Reindexing != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Reindexing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Processed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Processed);
      }
      if (ToProcess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToProcess);
      }
      if (Errors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Errors);
      }
      if (Processing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Processing);
      }
      if (Reindexed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reindexed);
      }
      if (ToReindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToReindex);
      }
      if (ReindexErrors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReindexErrors);
      }
      if (Reindexing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reindexing);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputCount other) {
      if (other == null) {
        return;
      }
      if (other.Processed != 0) {
        Processed = other.Processed;
      }
      if (other.ToProcess != 0) {
        ToProcess = other.ToProcess;
      }
      if (other.Errors != 0) {
        Errors = other.Errors;
      }
      if (other.Processing != 0) {
        Processing = other.Processing;
      }
      if (other.Reindexed != 0) {
        Reindexed = other.Reindexed;
      }
      if (other.ToReindex != 0) {
        ToReindex = other.ToReindex;
      }
      if (other.ReindexErrors != 0) {
        ReindexErrors = other.ReindexErrors;
      }
      if (other.Reindexing != 0) {
        Reindexing = other.Reindexing;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Processed = input.ReadUInt32();
            break;
          }
          case 16: {
            ToProcess = input.ReadUInt32();
            break;
          }
          case 24: {
            Errors = input.ReadUInt32();
            break;
          }
          case 32: {
            Processing = input.ReadUInt32();
            break;
          }
          case 40: {
            Reindexed = input.ReadUInt32();
            break;
          }
          case 48: {
            ToReindex = input.ReadUInt32();
            break;
          }
          case 56: {
            ReindexErrors = input.ReadUInt32();
            break;
          }
          case 64: {
            Reindexing = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkflowResultsSimilarity : pb::IMessage<WorkflowResultsSimilarity> {
    private static readonly pb::MessageParser<WorkflowResultsSimilarity> _parser = new pb::MessageParser<WorkflowResultsSimilarity>(() => new WorkflowResultsSimilarity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkflowResultsSimilarity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowResultsSimilarity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowResultsSimilarity(WorkflowResultsSimilarity other) : this() {
      probeInput_ = other.probeInput_ != null ? other.probeInput_.Clone() : null;
      poolResults_ = other.poolResults_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowResultsSimilarity Clone() {
      return new WorkflowResultsSimilarity(this);
    }

    /// <summary>Field number for the "probe_input" field.</summary>
    public const int ProbeInputFieldNumber = 1;
    private global::Clarifai.Api.Input probeInput_;
    /// <summary>
    /// The input with the specific data compare against all pool results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Input ProbeInput {
      get { return probeInput_; }
      set {
        probeInput_ = value;
      }
    }

    /// <summary>Field number for the "pool_results" field.</summary>
    public const int PoolResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Hit> _repeated_poolResults_codec
        = pb::FieldCodec.ForMessage(18, global::Clarifai.Api.Hit.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Hit> poolResults_ = new pbc::RepeatedField<global::Clarifai.Api.Hit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Hit> PoolResults {
      get { return poolResults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkflowResultsSimilarity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkflowResultsSimilarity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProbeInput, other.ProbeInput)) return false;
      if(!poolResults_.Equals(other.poolResults_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (probeInput_ != null) hash ^= ProbeInput.GetHashCode();
      hash ^= poolResults_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (probeInput_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProbeInput);
      }
      poolResults_.WriteTo(output, _repeated_poolResults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (probeInput_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProbeInput);
      }
      size += poolResults_.CalculateSize(_repeated_poolResults_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkflowResultsSimilarity other) {
      if (other == null) {
        return;
      }
      if (other.probeInput_ != null) {
        if (probeInput_ == null) {
          ProbeInput = new global::Clarifai.Api.Input();
        }
        ProbeInput.MergeFrom(other.ProbeInput);
      }
      poolResults_.Add(other.poolResults_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (probeInput_ == null) {
              ProbeInput = new global::Clarifai.Api.Input();
            }
            input.ReadMessage(ProbeInput);
            break;
          }
          case 18: {
            poolResults_.AddEntriesFrom(input, _repeated_poolResults_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/key.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Key : pb::IMessage<Key> {
    private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Key> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key(Key other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      description_ = other.description_;
      scopes_ = other.scopes_.Clone();
      endpoints_ = other.endpoints_.Clone();
      apps_ = other.apps_.Clone();
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      expiresAt_ = other.expiresAt_ != null ? other.expiresAt_.Clone() : null;
      authorizedIdpIds_ = other.authorizedIdpIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key Clone() {
      return new Key(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The id of this key, it is used for authorization.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private string type_ = "";
    /// <summary>
    /// The type of key, it can be api_key or personal_access_token, the default value is api_key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// The description
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scopes" field.</summary>
    public const int ScopesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_scopes_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> scopes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The low-level scopes this key has
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Scopes {
      get { return scopes_; }
    }

    /// <summary>Field number for the "endpoints" field.</summary>
    public const int EndpointsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_endpoints_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> endpoints_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The endpoint-level scopes this key has
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Endpoints {
      get { return endpoints_; }
    }

    /// <summary>Field number for the "apps" field.</summary>
    public const int AppsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Clarifai.Api.App> _repeated_apps_codec
        = pb::FieldCodec.ForMessage(34, global::Clarifai.Api.App.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.App> apps_ = new pbc::RepeatedField<global::Clarifai.Api.App>();
    /// <summary>
    /// The apps that this key give you access to, it is empty if this key is personal_access_token
    /// API key can only give you access to a single app.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.App> Apps {
      get { return apps_; }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the key was created. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    /// the following from the API:
    /// "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiresAt_;
    /// <summary>
    /// When does the key expires, the key won't expire if this is empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "authorized_idp_ids" field.</summary>
    public const int AuthorizedIdpIdsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_authorizedIdpIds_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> authorizedIdpIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// list of idp ids at which key is currently authorized
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AuthorizedIdpIds {
      get { return authorizedIdpIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Key);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Key other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Description != other.Description) return false;
      if(!scopes_.Equals(other.scopes_)) return false;
      if(!endpoints_.Equals(other.endpoints_)) return false;
      if(!apps_.Equals(other.apps_)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(ExpiresAt, other.ExpiresAt)) return false;
      if(!authorizedIdpIds_.Equals(other.authorizedIdpIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= scopes_.GetHashCode();
      hash ^= endpoints_.GetHashCode();
      hash ^= apps_.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (expiresAt_ != null) hash ^= ExpiresAt.GetHashCode();
      hash ^= authorizedIdpIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      scopes_.WriteTo(output, _repeated_scopes_codec);
      apps_.WriteTo(output, _repeated_apps_codec);
      if (createdAt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CreatedAt);
      }
      if (expiresAt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ExpiresAt);
      }
      endpoints_.WriteTo(output, _repeated_endpoints_codec);
      if (Type.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Type);
      }
      authorizedIdpIds_.WriteTo(output, _repeated_authorizedIdpIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += scopes_.CalculateSize(_repeated_scopes_codec);
      size += endpoints_.CalculateSize(_repeated_endpoints_codec);
      size += apps_.CalculateSize(_repeated_apps_codec);
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (expiresAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpiresAt);
      }
      size += authorizedIdpIds_.CalculateSize(_repeated_authorizedIdpIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Key other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      scopes_.Add(other.scopes_);
      endpoints_.Add(other.endpoints_);
      apps_.Add(other.apps_);
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.expiresAt_ != null) {
        if (expiresAt_ == null) {
          ExpiresAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiresAt.MergeFrom(other.ExpiresAt);
      }
      authorizedIdpIds_.Add(other.authorizedIdpIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            scopes_.AddEntriesFrom(input, _repeated_scopes_codec);
            break;
          }
          case 34: {
            apps_.AddEntriesFrom(input, _repeated_apps_codec);
            break;
          }
          case 42: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 50: {
            if (expiresAt_ == null) {
              ExpiresAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiresAt);
            break;
          }
          case 58: {
            endpoints_.AddEntriesFrom(input, _repeated_endpoints_codec);
            break;
          }
          case 66: {
            Type = input.ReadString();
            break;
          }
          case 74: {
            authorizedIdpIds_.AddEntriesFrom(input, _repeated_authorizedIdpIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/model.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// This is the Model object which represents a created model in the platform.
  /// Each model has a particular type denoted by the model_type_id.
  /// When creating a Model with PostModels the following happens:
  ///  - if the ModelType is trainable, then a new ModelVersion is created that is
  ///    - UNTRAINED status by default
  ///    - TRAINED status if a ModelVersion was included with PretrainedModelConfig in PostModels
  ///  - if the ModelType is not trainable, then a new ModelVersion is created with TRAINED status.
  /// To modify config settings like OutputInfo for the Model you an use PatchModels. This will
  /// also create a new ModelVersion, potentially UNTRAINED following the same rules as above.
  /// The fields that are patchable include Model.name, Model.display_name and Model.output_info
  /// (except the Model.output_info.type and Model.output_info.type_ext).
  /// </summary>
  public sealed partial class Model : pb::IMessage<Model> {
    private static readonly pb::MessageParser<Model> _parser = new pb::MessageParser<Model>(() => new Model());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Model> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model(Model other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      modifiedAt_ = other.modifiedAt_ != null ? other.modifiedAt_.Clone() : null;
      appId_ = other.appId_;
      outputInfo_ = other.outputInfo_ != null ? other.outputInfo_.Clone() : null;
      modelVersion_ = other.modelVersion_ != null ? other.modelVersion_.Clone() : null;
      displayName_ = other.displayName_;
      userId_ = other.userId_;
      inputInfo_ = other.inputInfo_ != null ? other.inputInfo_.Clone() : null;
      trainInfo_ = other.trainInfo_ != null ? other.trainInfo_.Clone() : null;
      modelTypeId_ = other.modelTypeId_;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      description_ = other.description_;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      notes_ = other.notes_;
      toolkits_ = other.toolkits_.Clone();
      useCases_ = other.useCases_.Clone();
      isStarred_ = other.isStarred_;
      starCount_ = other.starCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model Clone() {
      return new Model(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The model's ID. Must be unique within a particular app and URL-friendly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// A nicer-to-read name for the model. Can have spaces and special characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the model was created. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    ///  the following from the API:
    ///  "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "modified_at" field.</summary>
    public const int ModifiedAtFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedAt_;
    /// <summary>
    /// When was the most recent model version created at
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedAt {
      get { return modifiedAt_; }
      set {
        modifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 4;
    private string appId_ = "";
    /// <summary>
    /// The app the model belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_info" field.</summary>
    public const int OutputInfoFieldNumber = 5;
    private global::Clarifai.Api.OutputInfo outputInfo_;
    /// <summary>
    /// Info about the model's output and configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.OutputInfo OutputInfo {
      get { return outputInfo_; }
      set {
        outputInfo_ = value;
      }
    }

    /// <summary>Field number for the "model_version" field.</summary>
    public const int ModelVersionFieldNumber = 6;
    private global::Clarifai.Api.ModelVersion modelVersion_;
    /// <summary>
    /// A particular version of the model, e.g., to specify the version when creating a workflow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.ModelVersion ModelVersion {
      get { return modelVersion_; }
      set {
        modelVersion_ = value;
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 7;
    private string displayName_ = "";
    /// <summary>
    /// An even nicer-to-read name for public Clarifai models where we're not happy with the name but
    /// need a temporary workaround while we check what depends on these names.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 9;
    private string userId_ = "";
    /// <summary>
    /// The user id that the model belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_info" field.</summary>
    public const int InputInfoFieldNumber = 12;
    private global::Clarifai.Api.InputInfo inputInfo_;
    /// <summary>
    /// Info about the models' input and configuration of them.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.InputInfo InputInfo {
      get { return inputInfo_; }
      set {
        inputInfo_ = value;
      }
    }

    /// <summary>Field number for the "train_info" field.</summary>
    public const int TrainInfoFieldNumber = 13;
    private global::Clarifai.Api.TrainInfo trainInfo_;
    /// <summary>
    /// Configuration for the training process of this model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TrainInfo TrainInfo {
      get { return trainInfo_; }
      set {
        trainInfo_ = value;
      }
    }

    /// <summary>Field number for the "model_type_id" field.</summary>
    public const int ModelTypeIdFieldNumber = 14;
    private string modelTypeId_ = "";
    /// <summary>
    /// The ModelType.Id that is used for this model. This is used for all versions and you cannot
    /// change model_type_id between versions of the same model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelTypeId {
      get { return modelTypeId_; }
      set {
        modelTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 15;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 16;
    private string description_ = "";
    /// <summary>
    /// Short description about this model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 17;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// To handle arbitrary json metadata you can use a struct field:
    /// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 18;
    private string notes_ = "";
    /// <summary>
    /// Notes about a model (should support markdown)
    /// This field should be used for in-depth notes about
    /// about a model and supports up to 64Kbs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notes {
      get { return notes_; }
      set {
        notes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toolkits" field.</summary>
    public const int ToolkitsFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _repeated_toolkits_codec
        = pb::FieldCodec.ForString(162);
    private readonly pbc::RepeatedField<string> toolkits_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Tags from toolkits category
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Toolkits {
      get { return toolkits_; }
    }

    /// <summary>Field number for the "use_cases" field.</summary>
    public const int UseCasesFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _repeated_useCases_codec
        = pb::FieldCodec.ForString(170);
    private readonly pbc::RepeatedField<string> useCases_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Tags from use_cases category
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UseCases {
      get { return useCases_; }
    }

    /// <summary>Field number for the "is_starred" field.</summary>
    public const int IsStarredFieldNumber = 22;
    private bool isStarred_;
    /// <summary>
    /// Is starred by the requesting user (only showed on get/list requests)
    /// Please use PostModelStars/DeleteModelStars endpoints to star/unstar a model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStarred {
      get { return isStarred_; }
      set {
        isStarred_ = value;
      }
    }

    /// <summary>Field number for the "star_count" field.</summary>
    public const int StarCountFieldNumber = 23;
    private int starCount_;
    /// <summary>
    /// How many users have starred the model (only showed on get/list requests)
    /// Computed value, not editable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarCount {
      get { return starCount_; }
      set {
        starCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Model);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Model other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(ModifiedAt, other.ModifiedAt)) return false;
      if (AppId != other.AppId) return false;
      if (!object.Equals(OutputInfo, other.OutputInfo)) return false;
      if (!object.Equals(ModelVersion, other.ModelVersion)) return false;
      if (DisplayName != other.DisplayName) return false;
      if (UserId != other.UserId) return false;
      if (!object.Equals(InputInfo, other.InputInfo)) return false;
      if (!object.Equals(TrainInfo, other.TrainInfo)) return false;
      if (ModelTypeId != other.ModelTypeId) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (Notes != other.Notes) return false;
      if(!toolkits_.Equals(other.toolkits_)) return false;
      if(!useCases_.Equals(other.useCases_)) return false;
      if (IsStarred != other.IsStarred) return false;
      if (StarCount != other.StarCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (modifiedAt_ != null) hash ^= ModifiedAt.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (outputInfo_ != null) hash ^= OutputInfo.GetHashCode();
      if (modelVersion_ != null) hash ^= ModelVersion.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (inputInfo_ != null) hash ^= InputInfo.GetHashCode();
      if (trainInfo_ != null) hash ^= TrainInfo.GetHashCode();
      if (ModelTypeId.Length != 0) hash ^= ModelTypeId.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (Notes.Length != 0) hash ^= Notes.GetHashCode();
      hash ^= toolkits_.GetHashCode();
      hash ^= useCases_.GetHashCode();
      if (IsStarred != false) hash ^= IsStarred.GetHashCode();
      if (StarCount != 0) hash ^= StarCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AppId);
      }
      if (outputInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(OutputInfo);
      }
      if (modelVersion_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ModelVersion);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DisplayName);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UserId);
      }
      if (inputInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(InputInfo);
      }
      if (trainInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(TrainInfo);
      }
      if (ModelTypeId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ModelTypeId);
      }
      if (visibility_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Visibility);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Description);
      }
      if (metadata_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Metadata);
      }
      if (Notes.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Notes);
      }
      if (modifiedAt_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ModifiedAt);
      }
      toolkits_.WriteTo(output, _repeated_toolkits_codec);
      useCases_.WriteTo(output, _repeated_useCases_codec);
      if (IsStarred != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsStarred);
      }
      if (StarCount != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(StarCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (modifiedAt_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModifiedAt);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (outputInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputInfo);
      }
      if (modelVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelVersion);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (inputInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputInfo);
      }
      if (trainInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainInfo);
      }
      if (ModelTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelTypeId);
      }
      if (visibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (metadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (Notes.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Notes);
      }
      size += toolkits_.CalculateSize(_repeated_toolkits_codec);
      size += useCases_.CalculateSize(_repeated_useCases_codec);
      if (IsStarred != false) {
        size += 2 + 1;
      }
      if (StarCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StarCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Model other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.modifiedAt_ != null) {
        if (modifiedAt_ == null) {
          ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedAt.MergeFrom(other.ModifiedAt);
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.outputInfo_ != null) {
        if (outputInfo_ == null) {
          OutputInfo = new global::Clarifai.Api.OutputInfo();
        }
        OutputInfo.MergeFrom(other.OutputInfo);
      }
      if (other.modelVersion_ != null) {
        if (modelVersion_ == null) {
          ModelVersion = new global::Clarifai.Api.ModelVersion();
        }
        ModelVersion.MergeFrom(other.ModelVersion);
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.inputInfo_ != null) {
        if (inputInfo_ == null) {
          InputInfo = new global::Clarifai.Api.InputInfo();
        }
        InputInfo.MergeFrom(other.InputInfo);
      }
      if (other.trainInfo_ != null) {
        if (trainInfo_ == null) {
          TrainInfo = new global::Clarifai.Api.TrainInfo();
        }
        TrainInfo.MergeFrom(other.TrainInfo);
      }
      if (other.ModelTypeId.Length != 0) {
        ModelTypeId = other.ModelTypeId;
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.Notes.Length != 0) {
        Notes = other.Notes;
      }
      toolkits_.Add(other.toolkits_);
      useCases_.Add(other.useCases_);
      if (other.IsStarred != false) {
        IsStarred = other.IsStarred;
      }
      if (other.StarCount != 0) {
        StarCount = other.StarCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            AppId = input.ReadString();
            break;
          }
          case 42: {
            if (outputInfo_ == null) {
              OutputInfo = new global::Clarifai.Api.OutputInfo();
            }
            input.ReadMessage(OutputInfo);
            break;
          }
          case 50: {
            if (modelVersion_ == null) {
              ModelVersion = new global::Clarifai.Api.ModelVersion();
            }
            input.ReadMessage(ModelVersion);
            break;
          }
          case 58: {
            DisplayName = input.ReadString();
            break;
          }
          case 74: {
            UserId = input.ReadString();
            break;
          }
          case 98: {
            if (inputInfo_ == null) {
              InputInfo = new global::Clarifai.Api.InputInfo();
            }
            input.ReadMessage(InputInfo);
            break;
          }
          case 106: {
            if (trainInfo_ == null) {
              TrainInfo = new global::Clarifai.Api.TrainInfo();
            }
            input.ReadMessage(TrainInfo);
            break;
          }
          case 114: {
            ModelTypeId = input.ReadString();
            break;
          }
          case 122: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 130: {
            Description = input.ReadString();
            break;
          }
          case 138: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 146: {
            Notes = input.ReadString();
            break;
          }
          case 154: {
            if (modifiedAt_ == null) {
              ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedAt);
            break;
          }
          case 162: {
            toolkits_.AddEntriesFrom(input, _repeated_toolkits_codec);
            break;
          }
          case 170: {
            useCases_.AddEntriesFrom(input, _repeated_useCases_codec);
            break;
          }
          case 176: {
            IsStarred = input.ReadBool();
            break;
          }
          case 184: {
            StarCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A link to a html/markdown/text file that stores reference material
  /// tied to a model.
  /// </summary>
  public sealed partial class ModelReference : pb::IMessage<ModelReference> {
    private static readonly pb::MessageParser<ModelReference> _parser = new pb::MessageParser<ModelReference>(() => new ModelReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelReference(ModelReference other) : this() {
      id_ = other.id_;
      modelId_ = other.modelId_;
      url_ = other.url_;
      name_ = other.name_;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelReference Clone() {
      return new ModelReference(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Id of the reference
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private string modelId_ = "";
    /// <summary>
    /// The id of the model this Model reference is tied to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 3;
    private string url_ = "";
    /// <summary>
    /// address of resource
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// name of link
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// To handle arbitrary json metadata:
    /// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ModelId != other.ModelId) return false;
      if (Url != other.Url) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelId);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Url);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (metadata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelReference other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ModelId = input.ReadString();
            break;
          }
          case 26: {
            Url = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Metadata);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelVersionInputExample : pb::IMessage<ModelVersionInputExample> {
    private static readonly pb::MessageParser<ModelVersionInputExample> _parser = new pb::MessageParser<ModelVersionInputExample>(() => new ModelVersionInputExample());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelVersionInputExample> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelVersionInputExample() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelVersionInputExample(ModelVersionInputExample other) : this() {
      id_ = other.id_;
      modelId_ = other.modelId_;
      modelVersionId_ = other.modelVersionId_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelVersionInputExample Clone() {
      return new ModelVersionInputExample(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// user unique id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private string modelId_ = "";
    /// <summary>
    /// external id of model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_version_id" field.</summary>
    public const int ModelVersionIdFieldNumber = 3;
    private string modelVersionId_ = "";
    /// <summary>
    /// external id of model version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelVersionId {
      get { return modelVersionId_; }
      set {
        modelVersionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private global::Clarifai.Api.Data data_;
    /// <summary>
    /// data to store as example input for model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// name of link for display
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    /// <summary>
    /// description of link contents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelVersionInputExample);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelVersionInputExample other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ModelId != other.ModelId) return false;
      if (ModelVersionId != other.ModelVersionId) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (ModelVersionId.Length != 0) hash ^= ModelVersionId.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelId);
      }
      if (ModelVersionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelVersionId);
      }
      if (data_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Data);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (ModelVersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelVersionId);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelVersionInputExample other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      if (other.ModelVersionId.Length != 0) {
        ModelVersionId = other.ModelVersionId;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Clarifai.Api.Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ModelId = input.ReadString();
            break;
          }
          case 26: {
            ModelVersionId = input.ReadString();
            break;
          }
          case 34: {
            if (data_ == null) {
              Data = new global::Clarifai.Api.Data();
            }
            input.ReadMessage(Data);
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OutputInfo defines some of the settings for each model version that PatchModels can effect. These
  /// parameters control some of the training or inference operations that this model can do.
  /// As the number of parameters continued to grow when we launched more ModelTypes we decided to move
  /// to using the OutputInfo.params field which is a Struct (or JSON object if you're using
  /// our JSON REST APIs). This allows each ModelType to define the set of fields, their default values
  /// and description of each field so that we can display those in Portal and make the creation of
  /// Model's very extensible. The OutputConfig object will eventually go away in favor of
  /// infer_params struct.
  /// </summary>
  public sealed partial class OutputInfo : pb::IMessage<OutputInfo> {
    private static readonly pb::MessageParser<OutputInfo> _parser = new pb::MessageParser<OutputInfo>(() => new OutputInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputInfo(OutputInfo other) : this() {
      data_ = other.data_ != null ? other.data_.Clone() : null;
      outputConfig_ = other.outputConfig_ != null ? other.outputConfig_.Clone() : null;
      message_ = other.message_;
      type_ = other.type_;
      typeExt_ = other.typeExt_;
      fieldsMap_ = other.fieldsMap_ != null ? other.fieldsMap_.Clone() : null;
      params_ = other.params_ != null ? other.params_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputInfo Clone() {
      return new OutputInfo(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Clarifai.Api.Data data_;
    /// <summary>
    /// List of concepts or other output related data for the model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "output_config" field.</summary>
    public const int OutputConfigFieldNumber = 2;
    private global::Clarifai.Api.OutputConfig outputConfig_;
    /// <summary>
    /// Model configuration...going away in favor of infer_params and train_params over time.
    /// TO BE DEPRECATED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.OutputConfig OutputConfig {
      get { return outputConfig_; }
      set {
        outputConfig_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// For returning where to look for the Output info if not returning it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    /// <summary>
    /// To help clients know what type of Data to expect out of the model.
    /// TO BE DEPRECATED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type_ext" field.</summary>
    public const int TypeExtFieldNumber = 5;
    private string typeExt_ = "";
    /// <summary>
    /// Extra metadata about the Type data.
    /// TO BE DEPRECATED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeExt {
      get { return typeExt_; }
      set {
        typeExt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fields_map" field.</summary>
    public const int FieldsMapFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Struct fieldsMap_;
    /// <summary>
    /// Map from the api.Data field names to the underlying model graph's outputs. When using a
    /// PretrainedModelConfig the values in this map need to match the Triton config.pbtxt output names.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct FieldsMap {
      get { return fieldsMap_; }
      set {
        fieldsMap_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Struct params_;
    /// <summary>
    /// For predicting with the various ModelType's we accept a Struct (JSON object) worth of args
    /// that the ModelTypeField defines. During inference, the settings contained within are sent
    /// to the model predictor to alter predictions from this Model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(OutputConfig, other.OutputConfig)) return false;
      if (Message != other.Message) return false;
      if (Type != other.Type) return false;
      if (TypeExt != other.TypeExt) return false;
      if (!object.Equals(FieldsMap, other.FieldsMap)) return false;
      if (!object.Equals(Params, other.Params)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (outputConfig_ != null) hash ^= OutputConfig.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (TypeExt.Length != 0) hash ^= TypeExt.GetHashCode();
      if (fieldsMap_ != null) hash ^= FieldsMap.GetHashCode();
      if (params_ != null) hash ^= Params.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (outputConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OutputConfig);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (TypeExt.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TypeExt);
      }
      if (fieldsMap_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FieldsMap);
      }
      if (params_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Params);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (outputConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputConfig);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (TypeExt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeExt);
      }
      if (fieldsMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldsMap);
      }
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputInfo other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Clarifai.Api.Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.outputConfig_ != null) {
        if (outputConfig_ == null) {
          OutputConfig = new global::Clarifai.Api.OutputConfig();
        }
        OutputConfig.MergeFrom(other.OutputConfig);
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.TypeExt.Length != 0) {
        TypeExt = other.TypeExt;
      }
      if (other.fieldsMap_ != null) {
        if (fieldsMap_ == null) {
          FieldsMap = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        FieldsMap.MergeFrom(other.FieldsMap);
      }
      if (other.params_ != null) {
        if (params_ == null) {
          Params = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Params.MergeFrom(other.Params);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (data_ == null) {
              Data = new global::Clarifai.Api.Data();
            }
            input.ReadMessage(Data);
            break;
          }
          case 18: {
            if (outputConfig_ == null) {
              OutputConfig = new global::Clarifai.Api.OutputConfig();
            }
            input.ReadMessage(OutputConfig);
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            TypeExt = input.ReadString();
            break;
          }
          case 50: {
            if (fieldsMap_ == null) {
              FieldsMap = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(FieldsMap);
            break;
          }
          case 58: {
            if (params_ == null) {
              Params = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Params);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputInfo : pb::IMessage<InputInfo> {
    private static readonly pb::MessageParser<InputInfo> _parser = new pb::MessageParser<InputInfo>(() => new InputInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputInfo(InputInfo other) : this() {
      fieldsMap_ = other.fieldsMap_ != null ? other.fieldsMap_.Clone() : null;
      params_ = other.params_ != null ? other.params_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputInfo Clone() {
      return new InputInfo(this);
    }

    /// <summary>Field number for the "fields_map" field.</summary>
    public const int FieldsMapFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Struct fieldsMap_;
    /// <summary>
    /// Map from the api.Data field names to the underlying model graph's inputs. When using a
    /// PretrainedModelConfig the values in this map need to match the Triton config.pbtxt input names.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct FieldsMap {
      get { return fieldsMap_; }
      set {
        fieldsMap_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Struct params_;
    /// <summary>
    /// To control the inputs to the given model we allow a list of parameters
    /// defined for each ModelType as a Struct (JSON object) here. During training or inference, the
    /// settings contained within are sent to the training processor to alter the training process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FieldsMap, other.FieldsMap)) return false;
      if (!object.Equals(Params, other.Params)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fieldsMap_ != null) hash ^= FieldsMap.GetHashCode();
      if (params_ != null) hash ^= Params.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fieldsMap_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FieldsMap);
      }
      if (params_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Params);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fieldsMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldsMap);
      }
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputInfo other) {
      if (other == null) {
        return;
      }
      if (other.fieldsMap_ != null) {
        if (fieldsMap_ == null) {
          FieldsMap = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        FieldsMap.MergeFrom(other.FieldsMap);
      }
      if (other.params_ != null) {
        if (params_ == null) {
          Params = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Params.MergeFrom(other.Params);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fieldsMap_ == null) {
              FieldsMap = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(FieldsMap);
            break;
          }
          case 18: {
            if (params_ == null) {
              Params = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Params);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrainInfo : pb::IMessage<TrainInfo> {
    private static readonly pb::MessageParser<TrainInfo> _parser = new pb::MessageParser<TrainInfo>(() => new TrainInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainInfo(TrainInfo other) : this() {
      params_ = other.params_ != null ? other.params_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainInfo Clone() {
      return new TrainInfo(this);
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Struct params_;
    /// <summary>
    /// To control the training process when PostModelVersions is used we allow a list of parameters
    /// defined for each ModelType as a Struct (JSON object) here. During training, the settings
    /// contained within are sent to the training processor to alter the training process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Params, other.Params)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (params_ != null) hash ^= Params.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (params_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Params);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainInfo other) {
      if (other == null) {
        return;
      }
      if (other.params_ != null) {
        if (params_ == null) {
          Params = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Params.MergeFrom(other.Params);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (params_ == null) {
              Params = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Params);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OutputConfig is a collection of parameters controlling either inference or training settings for
  /// the given Model. This message will be deprecated over time in favor or infer_params and
  /// train_params in OutputInfo which are cleaner and more extensible for many ModelTypes.
  /// </summary>
  public sealed partial class OutputConfig : pb::IMessage<OutputConfig> {
    private static readonly pb::MessageParser<OutputConfig> _parser = new pb::MessageParser<OutputConfig>(() => new OutputConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputConfig(OutputConfig other) : this() {
      conceptsMutuallyExclusive_ = other.conceptsMutuallyExclusive_;
      closedEnvironment_ = other.closedEnvironment_;
      existingModelId_ = other.existingModelId_;
      language_ = other.language_;
      hyperParameters_ = other.hyperParameters_;
      maxConcepts_ = other.maxConcepts_;
      minValue_ = other.minValue_;
      selectConcepts_ = other.selectConcepts_.Clone();
      trainingTimeout_ = other.trainingTimeout_;
      sampleMs_ = other.sampleMs_;
      hyperParams_ = other.hyperParams_ != null ? other.hyperParams_.Clone() : null;
      embedModelVersionId_ = other.embedModelVersionId_;
      failOnMissingPositiveExamples_ = other.failOnMissingPositiveExamples_;
      modelMetadata_ = other.modelMetadata_ != null ? other.modelMetadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputConfig Clone() {
      return new OutputConfig(this);
    }

    /// <summary>Field number for the "concepts_mutually_exclusive" field.</summary>
    public const int ConceptsMutuallyExclusiveFieldNumber = 1;
    private bool conceptsMutuallyExclusive_;
    /// <summary>
    /// For custom concept model training: whether the concept predictions must sum to 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConceptsMutuallyExclusive {
      get { return conceptsMutuallyExclusive_; }
      set {
        conceptsMutuallyExclusive_ = value;
      }
    }

    /// <summary>Field number for the "closed_environment" field.</summary>
    public const int ClosedEnvironmentFieldNumber = 2;
    private bool closedEnvironment_;
    /// <summary>
    /// For custom concept model training: Whether negatives should only be sampled from within the app during
    /// training, for custom models.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClosedEnvironment {
      get { return closedEnvironment_; }
      set {
        closedEnvironment_ = value;
      }
    }

    /// <summary>Field number for the "existing_model_id" field.</summary>
    public const int ExistingModelIdFieldNumber = 3;
    private string existingModelId_ = "";
    /// <summary>
    /// DEPRECATED: For custom models, this is the base model to use for image embeddings.
    /// Default is general model.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExistingModelId {
      get { return existingModelId_; }
      set {
        existingModelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 4;
    private string language_ = "";
    /// <summary>
    /// For concept model predictions: Overrides the default_language for the app in a predict call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hyper_parameters" field.</summary>
    public const int HyperParametersFieldNumber = 5;
    private string hyperParameters_ = "";
    /// <summary>
    /// DEPRECATED: Hyper-parameters for custom training.
    /// Use new hyper_params field instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HyperParameters {
      get { return hyperParameters_; }
      set {
        hyperParameters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_concepts" field.</summary>
    public const int MaxConceptsFieldNumber = 6;
    private uint maxConcepts_;
    /// <summary>
    /// For concept model predictions:  Maximum number of concepts in result. Defaults to 0 which under
    /// the hood will return default of 20. We do a server side default in order to control this
    /// feature in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxConcepts {
      get { return maxConcepts_; }
      set {
        maxConcepts_ = value;
      }
    }

    /// <summary>Field number for the "min_value" field.</summary>
    public const int MinValueFieldNumber = 7;
    private float minValue_;
    /// <summary>
    /// For concept model predictions: Minimum value of concept's probability score in result.
    /// Defaults to 0.0 which means we won't do any thresholding as all probabilities will
    /// likely be > 0.0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "select_concepts" field.</summary>
    public const int SelectConceptsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Concept> _repeated_selectConcepts_codec
        = pb::FieldCodec.ForMessage(66, global::Clarifai.Api.Concept.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Concept> selectConcepts_ = new pbc::RepeatedField<global::Clarifai.Api.Concept>();
    /// <summary>
    /// For concept model predictions: Select concepts in result by name or by id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Concept> SelectConcepts {
      get { return selectConcepts_; }
    }

    /// <summary>Field number for the "training_timeout" field.</summary>
    public const int TrainingTimeoutFieldNumber = 9;
    private uint trainingTimeout_;
    /// <summary>
    /// For custom concept model training: Training timeout of the model (in seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrainingTimeout {
      get { return trainingTimeout_; }
      set {
        trainingTimeout_ = value;
      }
    }

    /// <summary>Field number for the "sample_ms" field.</summary>
    public const int SampleMsFieldNumber = 10;
    private uint sampleMs_;
    /// <summary>
    /// For model predictions on video: Sample delay for video predicting (1 frame per N milliseconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SampleMs {
      get { return sampleMs_; }
      set {
        sampleMs_ = value;
      }
    }

    /// <summary>Field number for the "hyper_params" field.</summary>
    public const int HyperParamsFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Struct hyperParams_;
    /// <summary>
    /// For custom model training: Hyperparameters for custom training
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct HyperParams {
      get { return hyperParams_; }
      set {
        hyperParams_ = value;
      }
    }

    /// <summary>Field number for the "embed_model_version_id" field.</summary>
    public const int EmbedModelVersionIdFieldNumber = 14;
    private string embedModelVersionId_ = "";
    /// <summary>
    /// For custom model training: this is the base model version to use for image embeddings.
    /// This has to be one of the embed models in the app workflow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmbedModelVersionId {
      get { return embedModelVersionId_; }
      set {
        embedModelVersionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fail_on_missing_positive_examples" field.</summary>
    public const int FailOnMissingPositiveExamplesFieldNumber = 15;
    private bool failOnMissingPositiveExamples_;
    /// <summary>
    /// For custom model training: Use this flag to fail on missing positive examples
    /// By default we fill in the missing with random examples
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FailOnMissingPositiveExamples {
      get { return failOnMissingPositiveExamples_; }
      set {
        failOnMissingPositiveExamples_ = value;
      }
    }

    /// <summary>Field number for the "model_metadata" field.</summary>
    public const int ModelMetadataFieldNumber = 17;
    private global::Google.Protobuf.WellKnownTypes.Struct modelMetadata_;
    /// <summary>
    /// For custom model training: This is any additional metadata as a JSON object that we want
    /// want to persist in the model's output config. This is a useful quick way to set fields for
    /// introducing fields for new model types so we don't have to add a new proto field and DB field
    /// each time. Please refer to the documentation or model implementation internally for more
    /// details on what fields are supported for which models.
    /// TODO(zeiler): remove this field after Portal is updated.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct ModelMetadata {
      get { return modelMetadata_; }
      set {
        modelMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConceptsMutuallyExclusive != other.ConceptsMutuallyExclusive) return false;
      if (ClosedEnvironment != other.ClosedEnvironment) return false;
      if (ExistingModelId != other.ExistingModelId) return false;
      if (Language != other.Language) return false;
      if (HyperParameters != other.HyperParameters) return false;
      if (MaxConcepts != other.MaxConcepts) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinValue, other.MinValue)) return false;
      if(!selectConcepts_.Equals(other.selectConcepts_)) return false;
      if (TrainingTimeout != other.TrainingTimeout) return false;
      if (SampleMs != other.SampleMs) return false;
      if (!object.Equals(HyperParams, other.HyperParams)) return false;
      if (EmbedModelVersionId != other.EmbedModelVersionId) return false;
      if (FailOnMissingPositiveExamples != other.FailOnMissingPositiveExamples) return false;
      if (!object.Equals(ModelMetadata, other.ModelMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConceptsMutuallyExclusive != false) hash ^= ConceptsMutuallyExclusive.GetHashCode();
      if (ClosedEnvironment != false) hash ^= ClosedEnvironment.GetHashCode();
      if (ExistingModelId.Length != 0) hash ^= ExistingModelId.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (HyperParameters.Length != 0) hash ^= HyperParameters.GetHashCode();
      if (MaxConcepts != 0) hash ^= MaxConcepts.GetHashCode();
      if (MinValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinValue);
      hash ^= selectConcepts_.GetHashCode();
      if (TrainingTimeout != 0) hash ^= TrainingTimeout.GetHashCode();
      if (SampleMs != 0) hash ^= SampleMs.GetHashCode();
      if (hyperParams_ != null) hash ^= HyperParams.GetHashCode();
      if (EmbedModelVersionId.Length != 0) hash ^= EmbedModelVersionId.GetHashCode();
      if (FailOnMissingPositiveExamples != false) hash ^= FailOnMissingPositiveExamples.GetHashCode();
      if (modelMetadata_ != null) hash ^= ModelMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConceptsMutuallyExclusive != false) {
        output.WriteRawTag(8);
        output.WriteBool(ConceptsMutuallyExclusive);
      }
      if (ClosedEnvironment != false) {
        output.WriteRawTag(16);
        output.WriteBool(ClosedEnvironment);
      }
      if (ExistingModelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExistingModelId);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Language);
      }
      if (HyperParameters.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HyperParameters);
      }
      if (MaxConcepts != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaxConcepts);
      }
      if (MinValue != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MinValue);
      }
      selectConcepts_.WriteTo(output, _repeated_selectConcepts_codec);
      if (TrainingTimeout != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TrainingTimeout);
      }
      if (SampleMs != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SampleMs);
      }
      if (hyperParams_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(HyperParams);
      }
      if (EmbedModelVersionId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(EmbedModelVersionId);
      }
      if (FailOnMissingPositiveExamples != false) {
        output.WriteRawTag(120);
        output.WriteBool(FailOnMissingPositiveExamples);
      }
      if (modelMetadata_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ModelMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConceptsMutuallyExclusive != false) {
        size += 1 + 1;
      }
      if (ClosedEnvironment != false) {
        size += 1 + 1;
      }
      if (ExistingModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExistingModelId);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (HyperParameters.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HyperParameters);
      }
      if (MaxConcepts != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxConcepts);
      }
      if (MinValue != 0F) {
        size += 1 + 4;
      }
      size += selectConcepts_.CalculateSize(_repeated_selectConcepts_codec);
      if (TrainingTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrainingTimeout);
      }
      if (SampleMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SampleMs);
      }
      if (hyperParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HyperParams);
      }
      if (EmbedModelVersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EmbedModelVersionId);
      }
      if (FailOnMissingPositiveExamples != false) {
        size += 1 + 1;
      }
      if (modelMetadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModelMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputConfig other) {
      if (other == null) {
        return;
      }
      if (other.ConceptsMutuallyExclusive != false) {
        ConceptsMutuallyExclusive = other.ConceptsMutuallyExclusive;
      }
      if (other.ClosedEnvironment != false) {
        ClosedEnvironment = other.ClosedEnvironment;
      }
      if (other.ExistingModelId.Length != 0) {
        ExistingModelId = other.ExistingModelId;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.HyperParameters.Length != 0) {
        HyperParameters = other.HyperParameters;
      }
      if (other.MaxConcepts != 0) {
        MaxConcepts = other.MaxConcepts;
      }
      if (other.MinValue != 0F) {
        MinValue = other.MinValue;
      }
      selectConcepts_.Add(other.selectConcepts_);
      if (other.TrainingTimeout != 0) {
        TrainingTimeout = other.TrainingTimeout;
      }
      if (other.SampleMs != 0) {
        SampleMs = other.SampleMs;
      }
      if (other.hyperParams_ != null) {
        if (hyperParams_ == null) {
          HyperParams = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        HyperParams.MergeFrom(other.HyperParams);
      }
      if (other.EmbedModelVersionId.Length != 0) {
        EmbedModelVersionId = other.EmbedModelVersionId;
      }
      if (other.FailOnMissingPositiveExamples != false) {
        FailOnMissingPositiveExamples = other.FailOnMissingPositiveExamples;
      }
      if (other.modelMetadata_ != null) {
        if (modelMetadata_ == null) {
          ModelMetadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        ModelMetadata.MergeFrom(other.ModelMetadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConceptsMutuallyExclusive = input.ReadBool();
            break;
          }
          case 16: {
            ClosedEnvironment = input.ReadBool();
            break;
          }
          case 26: {
            ExistingModelId = input.ReadString();
            break;
          }
          case 34: {
            Language = input.ReadString();
            break;
          }
          case 42: {
            HyperParameters = input.ReadString();
            break;
          }
          case 48: {
            MaxConcepts = input.ReadUInt32();
            break;
          }
          case 61: {
            MinValue = input.ReadFloat();
            break;
          }
          case 66: {
            selectConcepts_.AddEntriesFrom(input, _repeated_selectConcepts_codec);
            break;
          }
          case 72: {
            TrainingTimeout = input.ReadUInt32();
            break;
          }
          case 80: {
            SampleMs = input.ReadUInt32();
            break;
          }
          case 106: {
            if (hyperParams_ == null) {
              HyperParams = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(HyperParams);
            break;
          }
          case 114: {
            EmbedModelVersionId = input.ReadString();
            break;
          }
          case 120: {
            FailOnMissingPositiveExamples = input.ReadBool();
            break;
          }
          case 138: {
            if (modelMetadata_ == null) {
              ModelMetadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(ModelMetadata);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ModelSpec is a definition of a Model type. This is used in model mode of portal
  /// to list out the possible models that can be created and can be used to understand more about
  /// the possible models in our platform.
  /// </summary>
  public sealed partial class ModelType : pb::IMessage<ModelType> {
    private static readonly pb::MessageParser<ModelType> _parser = new pb::MessageParser<ModelType>(() => new ModelType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelType(ModelType other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      description_ = other.description_;
      type_ = other.type_;
      inputFields_ = other.inputFields_.Clone();
      outputFields_ = other.outputFields_.Clone();
      trainable_ = other.trainable_;
      creatable_ = other.creatable_;
      internalOnly_ = other.internalOnly_;
      modelTypeFields_ = other.modelTypeFields_.Clone();
      requiresSequentialFrames_ = other.requiresSequentialFrames_;
      evaluable_ = other.evaluable_;
      expectedPretrainedInputFields_ = other.expectedPretrainedInputFields_ != null ? other.expectedPretrainedInputFields_.Clone() : null;
      expectedPretrainedOutputFields_ = other.expectedPretrainedOutputFields_ != null ? other.expectedPretrainedOutputFields_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelType Clone() {
      return new ModelType(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A unique identifies for this model type. This is differnt than the 'type' field below because
    /// the 'type' can be re-used for differnet input and output combinations whereas 'id' is always
    /// unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    /// <summary>
    /// title for this model in model gallery
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of this model type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    /// <summary>
    /// The type of the model to create. This is currently stored in output_info.type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_fields" field.</summary>
    public const int InputFieldsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_inputFields_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> inputFields_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of input fields that this model accepts. These are the keys of the Model's
    /// InputInfo.fields_map
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InputFields {
      get { return inputFields_; }
    }

    /// <summary>Field number for the "output_fields" field.</summary>
    public const int OutputFieldsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_outputFields_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> outputFields_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of output fields that this model accepts. These are the keys of the Model's
    /// OutputInfo.fields_map
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OutputFields {
      get { return outputFields_; }
    }

    /// <summary>Field number for the "trainable" field.</summary>
    public const int TrainableFieldNumber = 8;
    private bool trainable_;
    /// <summary>
    /// Is this model trainable in our platform.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Trainable {
      get { return trainable_; }
      set {
        trainable_ = value;
      }
    }

    /// <summary>Field number for the "creatable" field.</summary>
    public const int CreatableFieldNumber = 9;
    private bool creatable_;
    /// <summary>
    /// Is this model creatable. We have some pre-trained model types that users cannot create yet in
    /// model mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Creatable {
      get { return creatable_; }
      set {
        creatable_ = value;
      }
    }

    /// <summary>Field number for the "internal_only" field.</summary>
    public const int InternalOnlyFieldNumber = 10;
    private bool internalOnly_;
    /// <summary>
    /// Is this model type only for internal users at this time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InternalOnly {
      get { return internalOnly_; }
      set {
        internalOnly_ = value;
      }
    }

    /// <summary>Field number for the "model_type_fields" field.</summary>
    public const int ModelTypeFieldsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Clarifai.Api.ModelTypeField> _repeated_modelTypeFields_codec
        = pb::FieldCodec.ForMessage(90, global::Clarifai.Api.ModelTypeField.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.ModelTypeField> modelTypeFields_ = new pbc::RepeatedField<global::Clarifai.Api.ModelTypeField>();
    /// <summary>
    /// The remaining fields are definitions of the configurable fields that exist.
    /// Each field has path into the Model object such as "name" as a top level or "output_info.data"
    /// if it's the Data object within the OutputInfo object. We decided to not break these up
    /// into input_info, train_info and output_info related parameters and instead use the path
    /// so that they are most flexible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.ModelTypeField> ModelTypeFields {
      get { return modelTypeFields_; }
    }

    /// <summary>Field number for the "requires_sequential_frames" field.</summary>
    public const int RequiresSequentialFramesFieldNumber = 12;
    private bool requiresSequentialFrames_;
    /// <summary>
    /// For sequence models we need to know when processing that they require temporal time frames
    /// in sequential order. This will be true for model types like trackers as an example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequiresSequentialFrames {
      get { return requiresSequentialFrames_; }
      set {
        requiresSequentialFrames_ = value;
      }
    }

    /// <summary>Field number for the "evaluable" field.</summary>
    public const int EvaluableFieldNumber = 13;
    private bool evaluable_;
    /// <summary>
    /// Can this model be evaluated?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Evaluable {
      get { return evaluable_; }
      set {
        evaluable_ = value;
      }
    }

    /// <summary>Field number for the "expected_pretrained_input_fields" field.</summary>
    public const int ExpectedPretrainedInputFieldsFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Struct expectedPretrainedInputFields_;
    /// <summary>
    /// Maps input_fields to the more granular data fields needed to parse a triton models inputs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct ExpectedPretrainedInputFields {
      get { return expectedPretrainedInputFields_; }
      set {
        expectedPretrainedInputFields_ = value;
      }
    }

    /// <summary>Field number for the "expected_pretrained_output_fields" field.</summary>
    public const int ExpectedPretrainedOutputFieldsFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Struct expectedPretrainedOutputFields_;
    /// <summary>
    /// Maps output_fields to the more granular data fields needed to parse a triton models outputs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct ExpectedPretrainedOutputFields {
      get { return expectedPretrainedOutputFields_; }
      set {
        expectedPretrainedOutputFields_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if(!inputFields_.Equals(other.inputFields_)) return false;
      if(!outputFields_.Equals(other.outputFields_)) return false;
      if (Trainable != other.Trainable) return false;
      if (Creatable != other.Creatable) return false;
      if (InternalOnly != other.InternalOnly) return false;
      if(!modelTypeFields_.Equals(other.modelTypeFields_)) return false;
      if (RequiresSequentialFrames != other.RequiresSequentialFrames) return false;
      if (Evaluable != other.Evaluable) return false;
      if (!object.Equals(ExpectedPretrainedInputFields, other.ExpectedPretrainedInputFields)) return false;
      if (!object.Equals(ExpectedPretrainedOutputFields, other.ExpectedPretrainedOutputFields)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= inputFields_.GetHashCode();
      hash ^= outputFields_.GetHashCode();
      if (Trainable != false) hash ^= Trainable.GetHashCode();
      if (Creatable != false) hash ^= Creatable.GetHashCode();
      if (InternalOnly != false) hash ^= InternalOnly.GetHashCode();
      hash ^= modelTypeFields_.GetHashCode();
      if (RequiresSequentialFrames != false) hash ^= RequiresSequentialFrames.GetHashCode();
      if (Evaluable != false) hash ^= Evaluable.GetHashCode();
      if (expectedPretrainedInputFields_ != null) hash ^= ExpectedPretrainedInputFields.GetHashCode();
      if (expectedPretrainedOutputFields_ != null) hash ^= ExpectedPretrainedOutputFields.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      inputFields_.WriteTo(output, _repeated_inputFields_codec);
      outputFields_.WriteTo(output, _repeated_outputFields_codec);
      if (Trainable != false) {
        output.WriteRawTag(64);
        output.WriteBool(Trainable);
      }
      if (Creatable != false) {
        output.WriteRawTag(72);
        output.WriteBool(Creatable);
      }
      if (InternalOnly != false) {
        output.WriteRawTag(80);
        output.WriteBool(InternalOnly);
      }
      modelTypeFields_.WriteTo(output, _repeated_modelTypeFields_codec);
      if (RequiresSequentialFrames != false) {
        output.WriteRawTag(96);
        output.WriteBool(RequiresSequentialFrames);
      }
      if (Evaluable != false) {
        output.WriteRawTag(104);
        output.WriteBool(Evaluable);
      }
      if (expectedPretrainedInputFields_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExpectedPretrainedInputFields);
      }
      if (expectedPretrainedOutputFields_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ExpectedPretrainedOutputFields);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += inputFields_.CalculateSize(_repeated_inputFields_codec);
      size += outputFields_.CalculateSize(_repeated_outputFields_codec);
      if (Trainable != false) {
        size += 1 + 1;
      }
      if (Creatable != false) {
        size += 1 + 1;
      }
      if (InternalOnly != false) {
        size += 1 + 1;
      }
      size += modelTypeFields_.CalculateSize(_repeated_modelTypeFields_codec);
      if (RequiresSequentialFrames != false) {
        size += 1 + 1;
      }
      if (Evaluable != false) {
        size += 1 + 1;
      }
      if (expectedPretrainedInputFields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpectedPretrainedInputFields);
      }
      if (expectedPretrainedOutputFields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpectedPretrainedOutputFields);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelType other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      inputFields_.Add(other.inputFields_);
      outputFields_.Add(other.outputFields_);
      if (other.Trainable != false) {
        Trainable = other.Trainable;
      }
      if (other.Creatable != false) {
        Creatable = other.Creatable;
      }
      if (other.InternalOnly != false) {
        InternalOnly = other.InternalOnly;
      }
      modelTypeFields_.Add(other.modelTypeFields_);
      if (other.RequiresSequentialFrames != false) {
        RequiresSequentialFrames = other.RequiresSequentialFrames;
      }
      if (other.Evaluable != false) {
        Evaluable = other.Evaluable;
      }
      if (other.expectedPretrainedInputFields_ != null) {
        if (expectedPretrainedInputFields_ == null) {
          ExpectedPretrainedInputFields = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        ExpectedPretrainedInputFields.MergeFrom(other.ExpectedPretrainedInputFields);
      }
      if (other.expectedPretrainedOutputFields_ != null) {
        if (expectedPretrainedOutputFields_ == null) {
          ExpectedPretrainedOutputFields = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        ExpectedPretrainedOutputFields.MergeFrom(other.ExpectedPretrainedOutputFields);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            inputFields_.AddEntriesFrom(input, _repeated_inputFields_codec);
            break;
          }
          case 50: {
            outputFields_.AddEntriesFrom(input, _repeated_outputFields_codec);
            break;
          }
          case 64: {
            Trainable = input.ReadBool();
            break;
          }
          case 72: {
            Creatable = input.ReadBool();
            break;
          }
          case 80: {
            InternalOnly = input.ReadBool();
            break;
          }
          case 90: {
            modelTypeFields_.AddEntriesFrom(input, _repeated_modelTypeFields_codec);
            break;
          }
          case 96: {
            RequiresSequentialFrames = input.ReadBool();
            break;
          }
          case 104: {
            Evaluable = input.ReadBool();
            break;
          }
          case 114: {
            if (expectedPretrainedInputFields_ == null) {
              ExpectedPretrainedInputFields = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(ExpectedPretrainedInputFields);
            break;
          }
          case 122: {
            if (expectedPretrainedOutputFields_ == null) {
              ExpectedPretrainedOutputFields = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(ExpectedPretrainedOutputFields);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ModelTypeField stores a field value of a configurable type.
  /// </summary>
  public sealed partial class ModelTypeField : pb::IMessage<ModelTypeField> {
    private static readonly pb::MessageParser<ModelTypeField> _parser = new pb::MessageParser<ModelTypeField>(() => new ModelTypeField());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelTypeField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeField(ModelTypeField other) : this() {
      path_ = other.path_;
      fieldType_ = other.fieldType_;
      defaultValue_ = other.defaultValue_ != null ? other.defaultValue_.Clone() : null;
      description_ = other.description_;
      placeholder_ = other.placeholder_;
      modelTypeEnumOptions_ = other.modelTypeEnumOptions_.Clone();
      internalOnly_ = other.internalOnly_;
      required_ = other.required_;
      modelTypeRangeInfo_ = other.modelTypeRangeInfo_ != null ? other.modelTypeRangeInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeField Clone() {
      return new ModelTypeField(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// The path where the value of the field will be stored.
    /// Example:
    /// "output_info.data" would be the Data message in the OutputInfo message.
    /// "output_info.output_config.language" is in the OutputConfig message within OutputInfo
    /// "input_info.params" is in the params struct within InputInfo.
    /// "output_info.params" is in the params struct within OutputInfo.
    /// "train_info.params" is in the params struct within TrainInfo.
    /// and so on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field_type" field.</summary>
    public const int FieldTypeFieldNumber = 2;
    private global::Clarifai.Api.ModelTypeField.Types.ModelTypeFieldType fieldType_ = global::Clarifai.Api.ModelTypeField.Types.ModelTypeFieldType.InvalidModelTypeFieldType;
    /// <summary>
    /// The field for this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.ModelTypeField.Types.ModelTypeFieldType FieldType {
      get { return fieldType_; }
      set {
        fieldType_ = value;
      }
    }

    /// <summary>Field number for the "default_value" field.</summary>
    public const int DefaultValueFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Value defaultValue_;
    /// <summary>
    /// A default value. We use the Value field because we want to have structured data (just like
    /// google.protobuf.Struct but this is just a single value).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// Description for this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "placeholder" field.</summary>
    public const int PlaceholderFieldNumber = 5;
    private string placeholder_ = "";
    /// <summary>
    /// Placeholder text for the UI element.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Placeholder {
      get { return placeholder_; }
      set {
        placeholder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_type_enum_options" field.</summary>
    public const int ModelTypeEnumOptionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Clarifai.Api.ModelTypeEnumOption> _repeated_modelTypeEnumOptions_codec
        = pb::FieldCodec.ForMessage(50, global::Clarifai.Api.ModelTypeEnumOption.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.ModelTypeEnumOption> modelTypeEnumOptions_ = new pbc::RepeatedField<global::Clarifai.Api.ModelTypeEnumOption>();
    /// <summary>
    /// List of options of the ENUM type and potentially additional fields they bring with them.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.ModelTypeEnumOption> ModelTypeEnumOptions {
      get { return modelTypeEnumOptions_; }
    }

    /// <summary>Field number for the "internal_only" field.</summary>
    public const int InternalOnlyFieldNumber = 7;
    private bool internalOnly_;
    /// <summary>
    /// If this field should appear for internal users only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InternalOnly {
      get { return internalOnly_; }
      set {
        internalOnly_ = value;
      }
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 8;
    private bool required_;
    /// <summary>
    /// If this field is a required field. If True then during validation you won't be able to create
    /// a model of this type with providing a value for this field. When False, the ModelType's
    /// default_value will be used for this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Required {
      get { return required_; }
      set {
        required_ = value;
      }
    }

    /// <summary>Field number for the "model_type_range_info" field.</summary>
    public const int ModelTypeRangeInfoFieldNumber = 9;
    private global::Clarifai.Api.ModelTypeRangeInfo modelTypeRangeInfo_;
    /// <summary>
    /// If the field_type is RANGE, this must be filled in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.ModelTypeRangeInfo ModelTypeRangeInfo {
      get { return modelTypeRangeInfo_; }
      set {
        modelTypeRangeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelTypeField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelTypeField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (FieldType != other.FieldType) return false;
      if (!object.Equals(DefaultValue, other.DefaultValue)) return false;
      if (Description != other.Description) return false;
      if (Placeholder != other.Placeholder) return false;
      if(!modelTypeEnumOptions_.Equals(other.modelTypeEnumOptions_)) return false;
      if (InternalOnly != other.InternalOnly) return false;
      if (Required != other.Required) return false;
      if (!object.Equals(ModelTypeRangeInfo, other.ModelTypeRangeInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (FieldType != global::Clarifai.Api.ModelTypeField.Types.ModelTypeFieldType.InvalidModelTypeFieldType) hash ^= FieldType.GetHashCode();
      if (defaultValue_ != null) hash ^= DefaultValue.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Placeholder.Length != 0) hash ^= Placeholder.GetHashCode();
      hash ^= modelTypeEnumOptions_.GetHashCode();
      if (InternalOnly != false) hash ^= InternalOnly.GetHashCode();
      if (Required != false) hash ^= Required.GetHashCode();
      if (modelTypeRangeInfo_ != null) hash ^= ModelTypeRangeInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (FieldType != global::Clarifai.Api.ModelTypeField.Types.ModelTypeFieldType.InvalidModelTypeFieldType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FieldType);
      }
      if (defaultValue_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultValue);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Placeholder.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Placeholder);
      }
      modelTypeEnumOptions_.WriteTo(output, _repeated_modelTypeEnumOptions_codec);
      if (InternalOnly != false) {
        output.WriteRawTag(56);
        output.WriteBool(InternalOnly);
      }
      if (Required != false) {
        output.WriteRawTag(64);
        output.WriteBool(Required);
      }
      if (modelTypeRangeInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ModelTypeRangeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (FieldType != global::Clarifai.Api.ModelTypeField.Types.ModelTypeFieldType.InvalidModelTypeFieldType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FieldType);
      }
      if (defaultValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultValue);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Placeholder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Placeholder);
      }
      size += modelTypeEnumOptions_.CalculateSize(_repeated_modelTypeEnumOptions_codec);
      if (InternalOnly != false) {
        size += 1 + 1;
      }
      if (Required != false) {
        size += 1 + 1;
      }
      if (modelTypeRangeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelTypeRangeInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelTypeField other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.FieldType != global::Clarifai.Api.ModelTypeField.Types.ModelTypeFieldType.InvalidModelTypeFieldType) {
        FieldType = other.FieldType;
      }
      if (other.defaultValue_ != null) {
        if (defaultValue_ == null) {
          DefaultValue = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        DefaultValue.MergeFrom(other.DefaultValue);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Placeholder.Length != 0) {
        Placeholder = other.Placeholder;
      }
      modelTypeEnumOptions_.Add(other.modelTypeEnumOptions_);
      if (other.InternalOnly != false) {
        InternalOnly = other.InternalOnly;
      }
      if (other.Required != false) {
        Required = other.Required;
      }
      if (other.modelTypeRangeInfo_ != null) {
        if (modelTypeRangeInfo_ == null) {
          ModelTypeRangeInfo = new global::Clarifai.Api.ModelTypeRangeInfo();
        }
        ModelTypeRangeInfo.MergeFrom(other.ModelTypeRangeInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 16: {
            FieldType = (global::Clarifai.Api.ModelTypeField.Types.ModelTypeFieldType) input.ReadEnum();
            break;
          }
          case 26: {
            if (defaultValue_ == null) {
              DefaultValue = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(DefaultValue);
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            Placeholder = input.ReadString();
            break;
          }
          case 50: {
            modelTypeEnumOptions_.AddEntriesFrom(input, _repeated_modelTypeEnumOptions_codec);
            break;
          }
          case 56: {
            InternalOnly = input.ReadBool();
            break;
          }
          case 64: {
            Required = input.ReadBool();
            break;
          }
          case 74: {
            if (modelTypeRangeInfo_ == null) {
              ModelTypeRangeInfo = new global::Clarifai.Api.ModelTypeRangeInfo();
            }
            input.ReadMessage(ModelTypeRangeInfo);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ModelTypeField message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// These are various types of fields that we have UIs for.
      /// </summary>
      public enum ModelTypeFieldType {
        [pbr::OriginalName("INVALID_MODEL_TYPE_FIELD_TYPE")] InvalidModelTypeFieldType = 0,
        [pbr::OriginalName("BOOLEAN")] Boolean = 1,
        [pbr::OriginalName("STRING")] String = 2,
        [pbr::OriginalName("NUMBER")] Number = 3,
        /// <summary>
        /// For auto-completing to concepts in the app. This goes into an data.concepts field.
        /// </summary>
        [pbr::OriginalName("ARRAY_OF_CONCEPTS")] ArrayOfConcepts = 4,
        /// <summary>
        /// For auto-completing to concepts in the app. This goes into an data.concepts field.
        /// </summary>
        [pbr::OriginalName("ARRAY_OF_CONCEPTS_WITH_THRESHOLD")] ArrayOfConceptsWithThreshold = 5,
        /// <summary>
        /// A range for a float value.
        /// </summary>
        [pbr::OriginalName("RANGE")] Range = 7,
        /// <summary>
        /// If ENUM is used then the "enum_options" field should also be filled in with the respective ID and description
        /// for the different ENUM options.
        /// </summary>
        [pbr::OriginalName("ENUM")] Enum = 8,
        /// <summary>
        /// For listing collaborators of the app. The field is a string of the collaborator's user_id.
        /// </summary>
        [pbr::OriginalName("COLLABORATORS")] Collaborators = 9,
        /// <summary>
        /// For arbitrary json object: "{...}"
        /// </summary>
        [pbr::OriginalName("JSON")] Json = 10,
        /// <summary>
        /// Such as [1.0, 2.0, 3.5]
        /// </summary>
        [pbr::OriginalName("ARRAY_OF_NUMBERS")] ArrayOfNumbers = 11,
        /// <summary>
        /// For selecting the embed_model_version_id for context based models.
        /// This is a string type in the API request.
        /// </summary>
        [pbr::OriginalName("WORKFLOW_EMBED_MODELS")] WorkflowEmbedModels = 12,
        /// <summary>
        /// Such as ['a', 'b', 'cantaloupe']
        /// </summary>
        [pbr::OriginalName("ARRAY_OF_STRINGS")] ArrayOfStrings = 13,
        /// <summary>
        /// If RECURSIVE_ENUM is used then the "enum_options" field should also be filled in with the respective ID and description
        /// for the different RECURSIVE_ENUM options, as well as model_type_fields for each enum choice.
        /// </summary>
        [pbr::OriginalName("RECURSIVE_ENUM")] RecursiveEnum = 14,
      }

    }
    #endregion

  }

  public sealed partial class ModelTypeRangeInfo : pb::IMessage<ModelTypeRangeInfo> {
    private static readonly pb::MessageParser<ModelTypeRangeInfo> _parser = new pb::MessageParser<ModelTypeRangeInfo>(() => new ModelTypeRangeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelTypeRangeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeRangeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeRangeInfo(ModelTypeRangeInfo other) : this() {
      min_ = other.min_;
      max_ = other.max_;
      step_ = other.step_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeRangeInfo Clone() {
      return new ModelTypeRangeInfo(this);
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 1;
    private float min_;
    /// <summary>
    /// The start of the range as a float.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private float max_;
    /// <summary>
    /// The end of the range as a float.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 3;
    private float step_;
    /// <summary>
    /// An optional step size for the range. If provided then only values at that step size will be
    /// rounded to. For example if step is 0.02 then 0.0245 will round to 0.02.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelTypeRangeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelTypeRangeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Min, other.Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Max, other.Max)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Step, other.Step)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Min != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Min);
      if (Max != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Max);
      if (Step != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Step);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Min != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Min);
      }
      if (Max != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Max);
      }
      if (Step != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Step);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Min != 0F) {
        size += 1 + 4;
      }
      if (Max != 0F) {
        size += 1 + 4;
      }
      if (Step != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelTypeRangeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Min != 0F) {
        Min = other.Min;
      }
      if (other.Max != 0F) {
        Max = other.Max;
      }
      if (other.Step != 0F) {
        Step = other.Step;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Min = input.ReadFloat();
            break;
          }
          case 21: {
            Max = input.ReadFloat();
            break;
          }
          case 29: {
            Step = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelTypeEnumOption : pb::IMessage<ModelTypeEnumOption> {
    private static readonly pb::MessageParser<ModelTypeEnumOption> _parser = new pb::MessageParser<ModelTypeEnumOption>(() => new ModelTypeEnumOption());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelTypeEnumOption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeEnumOption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeEnumOption(ModelTypeEnumOption other) : this() {
      id_ = other.id_;
      description_ = other.description_;
      modelTypeFields_ = other.modelTypeFields_.Clone();
      internalOnly_ = other.internalOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelTypeEnumOption Clone() {
      return new ModelTypeEnumOption(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The unique value of the enum option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Optional description for this enum option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_type_fields" field.</summary>
    public const int ModelTypeFieldsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Clarifai.Api.ModelTypeField> _repeated_modelTypeFields_codec
        = pb::FieldCodec.ForMessage(26, global::Clarifai.Api.ModelTypeField.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.ModelTypeField> modelTypeFields_ = new pbc::RepeatedField<global::Clarifai.Api.ModelTypeField>();
    /// <summary>
    /// These are additional fields that are specific to this enum choice. This allows
    /// us to use enums to control configuration settings as well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.ModelTypeField> ModelTypeFields {
      get { return modelTypeFields_; }
    }

    /// <summary>Field number for the "internal_only" field.</summary>
    public const int InternalOnlyFieldNumber = 4;
    private bool internalOnly_;
    /// <summary>
    /// If this enum option should be internal only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InternalOnly {
      get { return internalOnly_; }
      set {
        internalOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelTypeEnumOption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelTypeEnumOption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Description != other.Description) return false;
      if(!modelTypeFields_.Equals(other.modelTypeFields_)) return false;
      if (InternalOnly != other.InternalOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= modelTypeFields_.GetHashCode();
      if (InternalOnly != false) hash ^= InternalOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      modelTypeFields_.WriteTo(output, _repeated_modelTypeFields_codec);
      if (InternalOnly != false) {
        output.WriteRawTag(32);
        output.WriteBool(InternalOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += modelTypeFields_.CalculateSize(_repeated_modelTypeFields_codec);
      if (InternalOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelTypeEnumOption other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      modelTypeFields_.Add(other.modelTypeFields_);
      if (other.InternalOnly != false) {
        InternalOnly = other.InternalOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            modelTypeFields_.AddEntriesFrom(input, _repeated_modelTypeFields_codec);
            break;
          }
          case 32: {
            InternalOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelQuery : pb::IMessage<ModelQuery> {
    private static readonly pb::MessageParser<ModelQuery> _parser = new pb::MessageParser<ModelQuery>(() => new ModelQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelQuery(ModelQuery other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      modelTypeId_ = other.modelTypeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelQuery Clone() {
      return new ModelQuery(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name ofthe field. This supports wilcard queries like "gen*" to match "general" as an example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// This is the legacy model type. Do not use, only kept for support in old API clients.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_type_id" field.</summary>
    public const int ModelTypeIdFieldNumber = 3;
    private string modelTypeId_ = "";
    /// <summary>
    /// Filter models by the specific model_type_id. See ListModelTypes for the list of ModelType.Id's
    /// supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelTypeId {
      get { return modelTypeId_; }
      set {
        modelTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (ModelTypeId != other.ModelTypeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (ModelTypeId.Length != 0) hash ^= ModelTypeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (ModelTypeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelTypeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (ModelTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelTypeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelQuery other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.ModelTypeId.Length != 0) {
        ModelTypeId = other.ModelTypeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            ModelTypeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/model_version.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class ModelVersion : pb::IMessage<ModelVersion> {
    private static readonly pb::MessageParser<ModelVersion> _parser = new pb::MessageParser<ModelVersion>(() => new ModelVersion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelVersion(ModelVersion other) : this() {
      id_ = other.id_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      activeConceptCount_ = other.activeConceptCount_;
      metrics_ = other.metrics_ != null ? other.metrics_.Clone() : null;
      totalInputCount_ = other.totalInputCount_;
      completedAt_ = other.completedAt_ != null ? other.completedAt_.Clone() : null;
      description_ = other.description_;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      appId_ = other.appId_;
      userId_ = other.userId_;
      modifiedAt_ = other.modifiedAt_ != null ? other.modifiedAt_.Clone() : null;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      license_ = other.license_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelVersion Clone() {
      return new ModelVersion(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the version was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Clarifai.Api.Status.Status status_;
    /// <summary>
    /// The status of the version (whether it's untrained, training, trained, etc.).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "active_concept_count" field.</summary>
    public const int ActiveConceptCountFieldNumber = 4;
    private uint activeConceptCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveConceptCount {
      get { return activeConceptCount_; }
      set {
        activeConceptCount_ = value;
      }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 5;
    private global::Clarifai.Api.EvalMetrics metrics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.EvalMetrics Metrics {
      get { return metrics_; }
      set {
        metrics_ = value;
      }
    }

    /// <summary>Field number for the "total_input_count" field.</summary>
    public const int TotalInputCountFieldNumber = 6;
    private uint totalInputCount_;
    /// <summary>
    /// number of inputs in the model version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalInputCount {
      get { return totalInputCount_; }
      set {
        totalInputCount_ = value;
      }
    }

    /// <summary>Field number for the "completed_at" field.</summary>
    public const int CompletedAtFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp completedAt_;
    /// <summary>
    /// When training of this version was completed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CompletedAt {
      get { return completedAt_; }
      set {
        completedAt_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 11;
    private string description_ = "";
    /// <summary>
    /// Description about this version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 12;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 13;
    private string appId_ = "";
    /// <summary>
    /// The app the model version belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 14;
    private string userId_ = "";
    /// <summary>
    /// The user the model version belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_at" field.</summary>
    public const int ModifiedAtFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedAt_;
    /// <summary>
    /// When this model version was last modified
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedAt {
      get { return modifiedAt_; }
      set {
        modifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// To handle arbitrary json metadata you can use a struct field:
    /// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "license" field.</summary>
    public const int LicenseFieldNumber = 17;
    private string license_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string License {
      get { return license_; }
      set {
        license_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (ActiveConceptCount != other.ActiveConceptCount) return false;
      if (!object.Equals(Metrics, other.Metrics)) return false;
      if (TotalInputCount != other.TotalInputCount) return false;
      if (!object.Equals(CompletedAt, other.CompletedAt)) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if (AppId != other.AppId) return false;
      if (UserId != other.UserId) return false;
      if (!object.Equals(ModifiedAt, other.ModifiedAt)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (License != other.License) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (ActiveConceptCount != 0) hash ^= ActiveConceptCount.GetHashCode();
      if (metrics_ != null) hash ^= Metrics.GetHashCode();
      if (TotalInputCount != 0) hash ^= TotalInputCount.GetHashCode();
      if (completedAt_ != null) hash ^= CompletedAt.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (modifiedAt_ != null) hash ^= ModifiedAt.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (License.Length != 0) hash ^= License.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreatedAt);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (ActiveConceptCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ActiveConceptCount);
      }
      if (metrics_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Metrics);
      }
      if (TotalInputCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalInputCount);
      }
      if (completedAt_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CompletedAt);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Description);
      }
      if (visibility_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Visibility);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(AppId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(UserId);
      }
      if (modifiedAt_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ModifiedAt);
      }
      if (metadata_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Metadata);
      }
      if (License.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(License);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (ActiveConceptCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveConceptCount);
      }
      if (metrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metrics);
      }
      if (TotalInputCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalInputCount);
      }
      if (completedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompletedAt);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (visibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (modifiedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifiedAt);
      }
      if (metadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (License.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(License);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelVersion other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Clarifai.Api.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.ActiveConceptCount != 0) {
        ActiveConceptCount = other.ActiveConceptCount;
      }
      if (other.metrics_ != null) {
        if (metrics_ == null) {
          Metrics = new global::Clarifai.Api.EvalMetrics();
        }
        Metrics.MergeFrom(other.Metrics);
      }
      if (other.TotalInputCount != 0) {
        TotalInputCount = other.TotalInputCount;
      }
      if (other.completedAt_ != null) {
        if (completedAt_ == null) {
          CompletedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CompletedAt.MergeFrom(other.CompletedAt);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.modifiedAt_ != null) {
        if (modifiedAt_ == null) {
          ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedAt.MergeFrom(other.ModifiedAt);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.License.Length != 0) {
        License = other.License;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 26: {
            if (status_ == null) {
              Status = new global::Clarifai.Api.Status.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 32: {
            ActiveConceptCount = input.ReadUInt32();
            break;
          }
          case 42: {
            if (metrics_ == null) {
              Metrics = new global::Clarifai.Api.EvalMetrics();
            }
            input.ReadMessage(Metrics);
            break;
          }
          case 48: {
            TotalInputCount = input.ReadUInt32();
            break;
          }
          case 82: {
            if (completedAt_ == null) {
              CompletedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CompletedAt);
            break;
          }
          case 90: {
            Description = input.ReadString();
            break;
          }
          case 98: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 106: {
            AppId = input.ReadString();
            break;
          }
          case 114: {
            UserId = input.ReadString();
            break;
          }
          case 122: {
            if (modifiedAt_ == null) {
              ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedAt);
            break;
          }
          case 130: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 138: {
            License = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PretrainedModelConfig : pb::IMessage<PretrainedModelConfig> {
    private static readonly pb::MessageParser<PretrainedModelConfig> _parser = new pb::MessageParser<PretrainedModelConfig>(() => new PretrainedModelConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PretrainedModelConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PretrainedModelConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PretrainedModelConfig(PretrainedModelConfig other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      inputFieldsMap_ = other.inputFieldsMap_ != null ? other.inputFieldsMap_.Clone() : null;
      outputFieldsMap_ = other.outputFieldsMap_ != null ? other.outputFieldsMap_.Clone() : null;
      dataProviderParams_ = other.dataProviderParams_;
      modelZipUrl_ = other.modelZipUrl_;
      overwrite_ = other.overwrite_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PretrainedModelConfig Clone() {
      return new PretrainedModelConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// This is the internal id of the pretrained model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// This is the internal type of the pretrained model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_fields_map" field.</summary>
    public const int InputFieldsMapFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Struct inputFieldsMap_;
    /// <summary>
    /// Map from the api.Data field names to the Triton config.pbtxt input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct InputFieldsMap {
      get { return inputFieldsMap_; }
      set {
        inputFieldsMap_ = value;
      }
    }

    /// <summary>Field number for the "output_fields_map" field.</summary>
    public const int OutputFieldsMapFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Struct outputFieldsMap_;
    /// <summary>
    /// Map from the api.Data field names to the Triton config.pbtxt output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct OutputFieldsMap {
      get { return outputFieldsMap_; }
      set {
        outputFieldsMap_ = value;
      }
    }

    /// <summary>Field number for the "data_provider_params" field.</summary>
    public const int DataProviderParamsFieldNumber = 5;
    private string dataProviderParams_ = "";
    /// <summary>
    /// Preprocessing steps for the model as a json string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataProviderParams {
      get { return dataProviderParams_; }
      set {
        dataProviderParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_zip_url" field.</summary>
    public const int ModelZipUrlFieldNumber = 6;
    private string modelZipUrl_ = "";
    /// <summary>
    /// Url to a zipped up model in triton format with only version 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelZipUrl {
      get { return modelZipUrl_; }
      set {
        modelZipUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "overwrite" field.</summary>
    public const int OverwriteFieldNumber = 7;
    private bool overwrite_;
    /// <summary>
    /// Whether to overwrite the model for the existing internal id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Overwrite {
      get { return overwrite_; }
      set {
        overwrite_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PretrainedModelConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PretrainedModelConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(InputFieldsMap, other.InputFieldsMap)) return false;
      if (!object.Equals(OutputFieldsMap, other.OutputFieldsMap)) return false;
      if (DataProviderParams != other.DataProviderParams) return false;
      if (ModelZipUrl != other.ModelZipUrl) return false;
      if (Overwrite != other.Overwrite) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (inputFieldsMap_ != null) hash ^= InputFieldsMap.GetHashCode();
      if (outputFieldsMap_ != null) hash ^= OutputFieldsMap.GetHashCode();
      if (DataProviderParams.Length != 0) hash ^= DataProviderParams.GetHashCode();
      if (ModelZipUrl.Length != 0) hash ^= ModelZipUrl.GetHashCode();
      if (Overwrite != false) hash ^= Overwrite.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (inputFieldsMap_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InputFieldsMap);
      }
      if (outputFieldsMap_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OutputFieldsMap);
      }
      if (DataProviderParams.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DataProviderParams);
      }
      if (ModelZipUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ModelZipUrl);
      }
      if (Overwrite != false) {
        output.WriteRawTag(56);
        output.WriteBool(Overwrite);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (inputFieldsMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputFieldsMap);
      }
      if (outputFieldsMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputFieldsMap);
      }
      if (DataProviderParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataProviderParams);
      }
      if (ModelZipUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelZipUrl);
      }
      if (Overwrite != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PretrainedModelConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.inputFieldsMap_ != null) {
        if (inputFieldsMap_ == null) {
          InputFieldsMap = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        InputFieldsMap.MergeFrom(other.InputFieldsMap);
      }
      if (other.outputFieldsMap_ != null) {
        if (outputFieldsMap_ == null) {
          OutputFieldsMap = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        OutputFieldsMap.MergeFrom(other.OutputFieldsMap);
      }
      if (other.DataProviderParams.Length != 0) {
        DataProviderParams = other.DataProviderParams;
      }
      if (other.ModelZipUrl.Length != 0) {
        ModelZipUrl = other.ModelZipUrl;
      }
      if (other.Overwrite != false) {
        Overwrite = other.Overwrite;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            if (inputFieldsMap_ == null) {
              InputFieldsMap = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(InputFieldsMap);
            break;
          }
          case 34: {
            if (outputFieldsMap_ == null) {
              OutputFieldsMap = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(OutputFieldsMap);
            break;
          }
          case 42: {
            DataProviderParams = input.ReadString();
            break;
          }
          case 50: {
            ModelZipUrl = input.ReadString();
            break;
          }
          case 56: {
            Overwrite = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrainStats : pb::IMessage<TrainStats> {
    private static readonly pb::MessageParser<TrainStats> _parser = new pb::MessageParser<TrainStats>(() => new TrainStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainStats(TrainStats other) : this() {
      lossCurve_ = other.lossCurve_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainStats Clone() {
      return new TrainStats(this);
    }

    /// <summary>Field number for the "loss_curve" field.</summary>
    public const int LossCurveFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Clarifai.Api.LossCurveEntry> _repeated_lossCurve_codec
        = pb::FieldCodec.ForMessage(10, global::Clarifai.Api.LossCurveEntry.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.LossCurveEntry> lossCurve_ = new pbc::RepeatedField<global::Clarifai.Api.LossCurveEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.LossCurveEntry> LossCurve {
      get { return lossCurve_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lossCurve_.Equals(other.lossCurve_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lossCurve_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lossCurve_.WriteTo(output, _repeated_lossCurve_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lossCurve_.CalculateSize(_repeated_lossCurve_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainStats other) {
      if (other == null) {
        return;
      }
      lossCurve_.Add(other.lossCurve_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lossCurve_.AddEntriesFrom(input, _repeated_lossCurve_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LossCurveEntry : pb::IMessage<LossCurveEntry> {
    private static readonly pb::MessageParser<LossCurveEntry> _parser = new pb::MessageParser<LossCurveEntry>(() => new LossCurveEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LossCurveEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LossCurveEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LossCurveEntry(LossCurveEntry other) : this() {
      epoch_ = other.epoch_;
      globalStep_ = other.globalStep_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LossCurveEntry Clone() {
      return new LossCurveEntry(this);
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 1;
    private uint epoch_;
    /// <summary>
    /// current epoch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Epoch {
      get { return epoch_; }
      set {
        epoch_ = value;
      }
    }

    /// <summary>Field number for the "global_step" field.</summary>
    public const int GlobalStepFieldNumber = 2;
    private uint globalStep_;
    /// <summary>
    /// current global step
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GlobalStep {
      get { return globalStep_; }
      set {
        globalStep_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private float cost_;
    /// <summary>
    /// current cost
    /// FIXME(rigel): this should be loss instead of cost.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LossCurveEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LossCurveEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Epoch != other.Epoch) return false;
      if (GlobalStep != other.GlobalStep) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cost, other.Cost)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Epoch != 0) hash ^= Epoch.GetHashCode();
      if (GlobalStep != 0) hash ^= GlobalStep.GetHashCode();
      if (Cost != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cost);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Epoch != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Epoch);
      }
      if (GlobalStep != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GlobalStep);
      }
      if (Cost != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Epoch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Epoch);
      }
      if (GlobalStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlobalStep);
      }
      if (Cost != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LossCurveEntry other) {
      if (other == null) {
        return;
      }
      if (other.Epoch != 0) {
        Epoch = other.Epoch;
      }
      if (other.GlobalStep != 0) {
        GlobalStep = other.GlobalStep;
      }
      if (other.Cost != 0F) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Epoch = input.ReadUInt32();
            break;
          }
          case 16: {
            GlobalStep = input.ReadUInt32();
            break;
          }
          case 29: {
            Cost = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LabelCount : pb::IMessage<LabelCount> {
    private static readonly pb::MessageParser<LabelCount> _parser = new pb::MessageParser<LabelCount>(() => new LabelCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelCount(LabelCount other) : this() {
      conceptName_ = other.conceptName_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelCount Clone() {
      return new LabelCount(this);
    }

    /// <summary>Field number for the "concept_name" field.</summary>
    public const int ConceptNameFieldNumber = 1;
    private string conceptName_ = "";
    /// <summary>
    /// FIXME: should move to Concept object and return the whole thing (including name and id)
    /// otherwise if two concepts have same name then you won't tell them apart in confusion matrix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConceptName {
      get { return conceptName_; }
      set {
        conceptName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConceptName != other.ConceptName) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConceptName.Length != 0) hash ^= ConceptName.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConceptName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConceptName);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConceptName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConceptName);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelCount other) {
      if (other == null) {
        return;
      }
      if (other.ConceptName.Length != 0) {
        ConceptName = other.ConceptName;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConceptName = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LabelDistribution : pb::IMessage<LabelDistribution> {
    private static readonly pb::MessageParser<LabelDistribution> _parser = new pb::MessageParser<LabelDistribution>(() => new LabelDistribution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelDistribution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelDistribution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelDistribution(LabelDistribution other) : this() {
      positiveLabelCounts_ = other.positiveLabelCounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelDistribution Clone() {
      return new LabelDistribution(this);
    }

    /// <summary>Field number for the "positive_label_counts" field.</summary>
    public const int PositiveLabelCountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Clarifai.Api.LabelCount> _repeated_positiveLabelCounts_codec
        = pb::FieldCodec.ForMessage(10, global::Clarifai.Api.LabelCount.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.LabelCount> positiveLabelCounts_ = new pbc::RepeatedField<global::Clarifai.Api.LabelCount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.LabelCount> PositiveLabelCounts {
      get { return positiveLabelCounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelDistribution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelDistribution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!positiveLabelCounts_.Equals(other.positiveLabelCounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= positiveLabelCounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      positiveLabelCounts_.WriteTo(output, _repeated_positiveLabelCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += positiveLabelCounts_.CalculateSize(_repeated_positiveLabelCounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelDistribution other) {
      if (other == null) {
        return;
      }
      positiveLabelCounts_.Add(other.positiveLabelCounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            positiveLabelCounts_.AddEntriesFrom(input, _repeated_positiveLabelCounts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// NOTE: this is inefficient, should just have the order of the rows/cols
  /// </summary>
  public sealed partial class CooccurrenceMatrixEntry : pb::IMessage<CooccurrenceMatrixEntry> {
    private static readonly pb::MessageParser<CooccurrenceMatrixEntry> _parser = new pb::MessageParser<CooccurrenceMatrixEntry>(() => new CooccurrenceMatrixEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CooccurrenceMatrixEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrixEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrixEntry(CooccurrenceMatrixEntry other) : this() {
      row_ = other.row_;
      col_ = other.col_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrixEntry Clone() {
      return new CooccurrenceMatrixEntry(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private string row_ = "";
    /// <summary>
    /// concept_id for the row
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Row {
      get { return row_; }
      set {
        row_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private string col_ = "";
    /// <summary>
    /// concept_id for the col
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Col {
      get { return col_; }
      set {
        col_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CooccurrenceMatrixEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CooccurrenceMatrixEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Row.Length != 0) hash ^= Row.GetHashCode();
      if (Col.Length != 0) hash ^= Col.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Row);
      }
      if (Col.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Col);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Row);
      }
      if (Col.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Col);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CooccurrenceMatrixEntry other) {
      if (other == null) {
        return;
      }
      if (other.Row.Length != 0) {
        Row = other.Row;
      }
      if (other.Col.Length != 0) {
        Col = other.Col;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Row = input.ReadString();
            break;
          }
          case 18: {
            Col = input.ReadString();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CooccurrenceMatrix : pb::IMessage<CooccurrenceMatrix> {
    private static readonly pb::MessageParser<CooccurrenceMatrix> _parser = new pb::MessageParser<CooccurrenceMatrix>(() => new CooccurrenceMatrix());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CooccurrenceMatrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrix(CooccurrenceMatrix other) : this() {
      matrix_ = other.matrix_.Clone();
      conceptIds_ = other.conceptIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrix Clone() {
      return new CooccurrenceMatrix(this);
    }

    /// <summary>Field number for the "matrix" field.</summary>
    public const int MatrixFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Clarifai.Api.CooccurrenceMatrixEntry> _repeated_matrix_codec
        = pb::FieldCodec.ForMessage(10, global::Clarifai.Api.CooccurrenceMatrixEntry.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.CooccurrenceMatrixEntry> matrix_ = new pbc::RepeatedField<global::Clarifai.Api.CooccurrenceMatrixEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.CooccurrenceMatrixEntry> Matrix {
      get { return matrix_; }
    }

    /// <summary>Field number for the "concept_ids" field.</summary>
    public const int ConceptIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_conceptIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> conceptIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// These concept_ids are ordered by the strength of the diagonal in the ConfusionMatrix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ConceptIds {
      get { return conceptIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CooccurrenceMatrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CooccurrenceMatrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matrix_.Equals(other.matrix_)) return false;
      if(!conceptIds_.Equals(other.conceptIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matrix_.GetHashCode();
      hash ^= conceptIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matrix_.WriteTo(output, _repeated_matrix_codec);
      conceptIds_.WriteTo(output, _repeated_conceptIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matrix_.CalculateSize(_repeated_matrix_codec);
      size += conceptIds_.CalculateSize(_repeated_conceptIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CooccurrenceMatrix other) {
      if (other == null) {
        return;
      }
      matrix_.Add(other.matrix_);
      conceptIds_.Add(other.conceptIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matrix_.AddEntriesFrom(input, _repeated_matrix_codec);
            break;
          }
          case 18: {
            conceptIds_.AddEntriesFrom(input, _repeated_conceptIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfusionMatrixEntry : pb::IMessage<ConfusionMatrixEntry> {
    private static readonly pb::MessageParser<ConfusionMatrixEntry> _parser = new pb::MessageParser<ConfusionMatrixEntry>(() => new ConfusionMatrixEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfusionMatrixEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrixEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrixEntry(ConfusionMatrixEntry other) : this() {
      predicted_ = other.predicted_;
      actual_ = other.actual_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrixEntry Clone() {
      return new ConfusionMatrixEntry(this);
    }

    /// <summary>Field number for the "predicted" field.</summary>
    public const int PredictedFieldNumber = 1;
    private string predicted_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Predicted {
      get { return predicted_; }
      set {
        predicted_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actual" field.</summary>
    public const int ActualFieldNumber = 2;
    private string actual_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Actual {
      get { return actual_; }
      set {
        actual_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfusionMatrixEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfusionMatrixEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Predicted != other.Predicted) return false;
      if (Actual != other.Actual) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Predicted.Length != 0) hash ^= Predicted.GetHashCode();
      if (Actual.Length != 0) hash ^= Actual.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Predicted.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Predicted);
      }
      if (Actual.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Actual);
      }
      if (Value != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Predicted.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Predicted);
      }
      if (Actual.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Actual);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfusionMatrixEntry other) {
      if (other == null) {
        return;
      }
      if (other.Predicted.Length != 0) {
        Predicted = other.Predicted;
      }
      if (other.Actual.Length != 0) {
        Actual = other.Actual;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Predicted = input.ReadString();
            break;
          }
          case 18: {
            Actual = input.ReadString();
            break;
          }
          case 37: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfusionMatrix : pb::IMessage<ConfusionMatrix> {
    private static readonly pb::MessageParser<ConfusionMatrix> _parser = new pb::MessageParser<ConfusionMatrix>(() => new ConfusionMatrix());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfusionMatrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrix(ConfusionMatrix other) : this() {
      matrix_ = other.matrix_.Clone();
      conceptIds_ = other.conceptIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrix Clone() {
      return new ConfusionMatrix(this);
    }

    /// <summary>Field number for the "matrix" field.</summary>
    public const int MatrixFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Clarifai.Api.ConfusionMatrixEntry> _repeated_matrix_codec
        = pb::FieldCodec.ForMessage(10, global::Clarifai.Api.ConfusionMatrixEntry.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.ConfusionMatrixEntry> matrix_ = new pbc::RepeatedField<global::Clarifai.Api.ConfusionMatrixEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.ConfusionMatrixEntry> Matrix {
      get { return matrix_; }
    }

    /// <summary>Field number for the "concept_ids" field.</summary>
    public const int ConceptIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_conceptIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> conceptIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// These concept_ids are ordered by the strength of the diagonal in the ConfusionMatrix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ConceptIds {
      get { return conceptIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfusionMatrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfusionMatrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matrix_.Equals(other.matrix_)) return false;
      if(!conceptIds_.Equals(other.conceptIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matrix_.GetHashCode();
      hash ^= conceptIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matrix_.WriteTo(output, _repeated_matrix_codec);
      conceptIds_.WriteTo(output, _repeated_conceptIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matrix_.CalculateSize(_repeated_matrix_codec);
      size += conceptIds_.CalculateSize(_repeated_conceptIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfusionMatrix other) {
      if (other == null) {
        return;
      }
      matrix_.Add(other.matrix_);
      conceptIds_.Add(other.conceptIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matrix_.AddEntriesFrom(input, _repeated_matrix_codec);
            break;
          }
          case 18: {
            conceptIds_.AddEntriesFrom(input, _repeated_conceptIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ROC : pb::IMessage<ROC> {
    private static readonly pb::MessageParser<ROC> _parser = new pb::MessageParser<ROC>(() => new ROC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ROC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROC(ROC other) : this() {
      fpr_ = other.fpr_.Clone();
      tpr_ = other.tpr_.Clone();
      thresholds_ = other.thresholds_.Clone();
      fprPerImage_ = other.fprPerImage_.Clone();
      fprPerObject_ = other.fprPerObject_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROC Clone() {
      return new ROC(this);
    }

    /// <summary>Field number for the "fpr" field.</summary>
    public const int FprFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_fpr_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> fpr_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Fpr {
      get { return fpr_; }
    }

    /// <summary>Field number for the "tpr" field.</summary>
    public const int TprFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_tpr_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> tpr_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Tpr {
      get { return tpr_; }
    }

    /// <summary>Field number for the "thresholds" field.</summary>
    public const int ThresholdsFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_thresholds_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> thresholds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Thresholds {
      get { return thresholds_; }
    }

    /// <summary>Field number for the "fpr_per_image" field.</summary>
    public const int FprPerImageFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_fprPerImage_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> fprPerImage_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FprPerImage {
      get { return fprPerImage_; }
    }

    /// <summary>Field number for the "fpr_per_object" field.</summary>
    public const int FprPerObjectFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_fprPerObject_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> fprPerObject_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FprPerObject {
      get { return fprPerObject_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ROC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ROC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fpr_.Equals(other.fpr_)) return false;
      if(!tpr_.Equals(other.tpr_)) return false;
      if(!thresholds_.Equals(other.thresholds_)) return false;
      if(!fprPerImage_.Equals(other.fprPerImage_)) return false;
      if(!fprPerObject_.Equals(other.fprPerObject_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fpr_.GetHashCode();
      hash ^= tpr_.GetHashCode();
      hash ^= thresholds_.GetHashCode();
      hash ^= fprPerImage_.GetHashCode();
      hash ^= fprPerObject_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fpr_.WriteTo(output, _repeated_fpr_codec);
      tpr_.WriteTo(output, _repeated_tpr_codec);
      thresholds_.WriteTo(output, _repeated_thresholds_codec);
      fprPerImage_.WriteTo(output, _repeated_fprPerImage_codec);
      fprPerObject_.WriteTo(output, _repeated_fprPerObject_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fpr_.CalculateSize(_repeated_fpr_codec);
      size += tpr_.CalculateSize(_repeated_tpr_codec);
      size += thresholds_.CalculateSize(_repeated_thresholds_codec);
      size += fprPerImage_.CalculateSize(_repeated_fprPerImage_codec);
      size += fprPerObject_.CalculateSize(_repeated_fprPerObject_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ROC other) {
      if (other == null) {
        return;
      }
      fpr_.Add(other.fpr_);
      tpr_.Add(other.tpr_);
      thresholds_.Add(other.thresholds_);
      fprPerImage_.Add(other.fprPerImage_);
      fprPerObject_.Add(other.fprPerObject_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            fpr_.AddEntriesFrom(input, _repeated_fpr_codec);
            break;
          }
          case 18:
          case 21: {
            tpr_.AddEntriesFrom(input, _repeated_tpr_codec);
            break;
          }
          case 26:
          case 29: {
            thresholds_.AddEntriesFrom(input, _repeated_thresholds_codec);
            break;
          }
          case 34:
          case 37: {
            fprPerImage_.AddEntriesFrom(input, _repeated_fprPerImage_codec);
            break;
          }
          case 42:
          case 45: {
            fprPerObject_.AddEntriesFrom(input, _repeated_fprPerObject_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrecisionRecallCurve : pb::IMessage<PrecisionRecallCurve> {
    private static readonly pb::MessageParser<PrecisionRecallCurve> _parser = new pb::MessageParser<PrecisionRecallCurve>(() => new PrecisionRecallCurve());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrecisionRecallCurve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrecisionRecallCurve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrecisionRecallCurve(PrecisionRecallCurve other) : this() {
      recall_ = other.recall_.Clone();
      precision_ = other.precision_.Clone();
      thresholds_ = other.thresholds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrecisionRecallCurve Clone() {
      return new PrecisionRecallCurve(this);
    }

    /// <summary>Field number for the "recall" field.</summary>
    public const int RecallFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_recall_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> recall_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Recall {
      get { return recall_; }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_precision_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> precision_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Precision {
      get { return precision_; }
    }

    /// <summary>Field number for the "thresholds" field.</summary>
    public const int ThresholdsFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_thresholds_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> thresholds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Thresholds {
      get { return thresholds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrecisionRecallCurve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrecisionRecallCurve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recall_.Equals(other.recall_)) return false;
      if(!precision_.Equals(other.precision_)) return false;
      if(!thresholds_.Equals(other.thresholds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recall_.GetHashCode();
      hash ^= precision_.GetHashCode();
      hash ^= thresholds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recall_.WriteTo(output, _repeated_recall_codec);
      precision_.WriteTo(output, _repeated_precision_codec);
      thresholds_.WriteTo(output, _repeated_thresholds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recall_.CalculateSize(_repeated_recall_codec);
      size += precision_.CalculateSize(_repeated_precision_codec);
      size += thresholds_.CalculateSize(_repeated_thresholds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrecisionRecallCurve other) {
      if (other == null) {
        return;
      }
      recall_.Add(other.recall_);
      precision_.Add(other.precision_);
      thresholds_.Add(other.thresholds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            recall_.AddEntriesFrom(input, _repeated_recall_codec);
            break;
          }
          case 18:
          case 21: {
            precision_.AddEntriesFrom(input, _repeated_precision_codec);
            break;
          }
          case 26:
          case 29: {
            thresholds_.AddEntriesFrom(input, _repeated_thresholds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BinaryMetrics : pb::IMessage<BinaryMetrics> {
    private static readonly pb::MessageParser<BinaryMetrics> _parser = new pb::MessageParser<BinaryMetrics>(() => new BinaryMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinaryMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMetrics(BinaryMetrics other) : this() {
      numPos_ = other.numPos_;
      numNeg_ = other.numNeg_;
      numTot_ = other.numTot_;
      rocAuc_ = other.rocAuc_;
      f1_ = other.f1_;
      concept_ = other.concept_ != null ? other.concept_.Clone() : null;
      rocCurve_ = other.rocCurve_ != null ? other.rocCurve_.Clone() : null;
      precisionRecallCurve_ = other.precisionRecallCurve_ != null ? other.precisionRecallCurve_.Clone() : null;
      avgPrecision_ = other.avgPrecision_;
      areaName_ = other.areaName_;
      areaMin_ = other.areaMin_;
      areaMax_ = other.areaMax_;
      iou_ = other.iou_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMetrics Clone() {
      return new BinaryMetrics(this);
    }

    /// <summary>Field number for the "num_pos" field.</summary>
    public const int NumPosFieldNumber = 1;
    private uint numPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumPos {
      get { return numPos_; }
      set {
        numPos_ = value;
      }
    }

    /// <summary>Field number for the "num_neg" field.</summary>
    public const int NumNegFieldNumber = 2;
    private uint numNeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumNeg {
      get { return numNeg_; }
      set {
        numNeg_ = value;
      }
    }

    /// <summary>Field number for the "num_tot" field.</summary>
    public const int NumTotFieldNumber = 3;
    private uint numTot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumTot {
      get { return numTot_; }
      set {
        numTot_ = value;
      }
    }

    /// <summary>Field number for the "roc_auc" field.</summary>
    public const int RocAucFieldNumber = 4;
    private float rocAuc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RocAuc {
      get { return rocAuc_; }
      set {
        rocAuc_ = value;
      }
    }

    /// <summary>Field number for the "f1" field.</summary>
    public const int F1FieldNumber = 5;
    private float f1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float F1 {
      get { return f1_; }
      set {
        f1_ = value;
      }
    }

    /// <summary>Field number for the "concept" field.</summary>
    public const int ConceptFieldNumber = 6;
    private global::Clarifai.Api.Concept concept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Concept Concept {
      get { return concept_; }
      set {
        concept_ = value;
      }
    }

    /// <summary>Field number for the "roc_curve" field.</summary>
    public const int RocCurveFieldNumber = 7;
    private global::Clarifai.Api.ROC rocCurve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.ROC RocCurve {
      get { return rocCurve_; }
      set {
        rocCurve_ = value;
      }
    }

    /// <summary>Field number for the "precision_recall_curve" field.</summary>
    public const int PrecisionRecallCurveFieldNumber = 8;
    private global::Clarifai.Api.PrecisionRecallCurve precisionRecallCurve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.PrecisionRecallCurve PrecisionRecallCurve {
      get { return precisionRecallCurve_; }
      set {
        precisionRecallCurve_ = value;
      }
    }

    /// <summary>Field number for the "avg_precision" field.</summary>
    public const int AvgPrecisionFieldNumber = 9;
    private float avgPrecision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AvgPrecision {
      get { return avgPrecision_; }
      set {
        avgPrecision_ = value;
      }
    }

    /// <summary>Field number for the "area_name" field.</summary>
    public const int AreaNameFieldNumber = 10;
    private string areaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AreaName {
      get { return areaName_; }
      set {
        areaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "area_min" field.</summary>
    public const int AreaMinFieldNumber = 11;
    private double areaMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AreaMin {
      get { return areaMin_; }
      set {
        areaMin_ = value;
      }
    }

    /// <summary>Field number for the "area_max" field.</summary>
    public const int AreaMaxFieldNumber = 12;
    private double areaMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AreaMax {
      get { return areaMax_; }
      set {
        areaMax_ = value;
      }
    }

    /// <summary>Field number for the "iou" field.</summary>
    public const int IouFieldNumber = 13;
    private float iou_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Iou {
      get { return iou_; }
      set {
        iou_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinaryMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinaryMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumPos != other.NumPos) return false;
      if (NumNeg != other.NumNeg) return false;
      if (NumTot != other.NumTot) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RocAuc, other.RocAuc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(F1, other.F1)) return false;
      if (!object.Equals(Concept, other.Concept)) return false;
      if (!object.Equals(RocCurve, other.RocCurve)) return false;
      if (!object.Equals(PrecisionRecallCurve, other.PrecisionRecallCurve)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgPrecision, other.AvgPrecision)) return false;
      if (AreaName != other.AreaName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AreaMin, other.AreaMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AreaMax, other.AreaMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Iou, other.Iou)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumPos != 0) hash ^= NumPos.GetHashCode();
      if (NumNeg != 0) hash ^= NumNeg.GetHashCode();
      if (NumTot != 0) hash ^= NumTot.GetHashCode();
      if (RocAuc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RocAuc);
      if (F1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(F1);
      if (concept_ != null) hash ^= Concept.GetHashCode();
      if (rocCurve_ != null) hash ^= RocCurve.GetHashCode();
      if (precisionRecallCurve_ != null) hash ^= PrecisionRecallCurve.GetHashCode();
      if (AvgPrecision != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgPrecision);
      if (AreaName.Length != 0) hash ^= AreaName.GetHashCode();
      if (AreaMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AreaMin);
      if (AreaMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AreaMax);
      if (Iou != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Iou);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumPos != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumPos);
      }
      if (NumNeg != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumNeg);
      }
      if (NumTot != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumTot);
      }
      if (RocAuc != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RocAuc);
      }
      if (F1 != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(F1);
      }
      if (concept_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Concept);
      }
      if (rocCurve_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RocCurve);
      }
      if (precisionRecallCurve_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PrecisionRecallCurve);
      }
      if (AvgPrecision != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(AvgPrecision);
      }
      if (AreaName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(AreaName);
      }
      if (AreaMin != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AreaMin);
      }
      if (AreaMax != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(AreaMax);
      }
      if (Iou != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Iou);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPos);
      }
      if (NumNeg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumNeg);
      }
      if (NumTot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTot);
      }
      if (RocAuc != 0F) {
        size += 1 + 4;
      }
      if (F1 != 0F) {
        size += 1 + 4;
      }
      if (concept_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Concept);
      }
      if (rocCurve_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RocCurve);
      }
      if (precisionRecallCurve_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrecisionRecallCurve);
      }
      if (AvgPrecision != 0F) {
        size += 1 + 4;
      }
      if (AreaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AreaName);
      }
      if (AreaMin != 0D) {
        size += 1 + 8;
      }
      if (AreaMax != 0D) {
        size += 1 + 8;
      }
      if (Iou != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinaryMetrics other) {
      if (other == null) {
        return;
      }
      if (other.NumPos != 0) {
        NumPos = other.NumPos;
      }
      if (other.NumNeg != 0) {
        NumNeg = other.NumNeg;
      }
      if (other.NumTot != 0) {
        NumTot = other.NumTot;
      }
      if (other.RocAuc != 0F) {
        RocAuc = other.RocAuc;
      }
      if (other.F1 != 0F) {
        F1 = other.F1;
      }
      if (other.concept_ != null) {
        if (concept_ == null) {
          Concept = new global::Clarifai.Api.Concept();
        }
        Concept.MergeFrom(other.Concept);
      }
      if (other.rocCurve_ != null) {
        if (rocCurve_ == null) {
          RocCurve = new global::Clarifai.Api.ROC();
        }
        RocCurve.MergeFrom(other.RocCurve);
      }
      if (other.precisionRecallCurve_ != null) {
        if (precisionRecallCurve_ == null) {
          PrecisionRecallCurve = new global::Clarifai.Api.PrecisionRecallCurve();
        }
        PrecisionRecallCurve.MergeFrom(other.PrecisionRecallCurve);
      }
      if (other.AvgPrecision != 0F) {
        AvgPrecision = other.AvgPrecision;
      }
      if (other.AreaName.Length != 0) {
        AreaName = other.AreaName;
      }
      if (other.AreaMin != 0D) {
        AreaMin = other.AreaMin;
      }
      if (other.AreaMax != 0D) {
        AreaMax = other.AreaMax;
      }
      if (other.Iou != 0F) {
        Iou = other.Iou;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumPos = input.ReadUInt32();
            break;
          }
          case 16: {
            NumNeg = input.ReadUInt32();
            break;
          }
          case 24: {
            NumTot = input.ReadUInt32();
            break;
          }
          case 37: {
            RocAuc = input.ReadFloat();
            break;
          }
          case 45: {
            F1 = input.ReadFloat();
            break;
          }
          case 50: {
            if (concept_ == null) {
              Concept = new global::Clarifai.Api.Concept();
            }
            input.ReadMessage(Concept);
            break;
          }
          case 58: {
            if (rocCurve_ == null) {
              RocCurve = new global::Clarifai.Api.ROC();
            }
            input.ReadMessage(RocCurve);
            break;
          }
          case 66: {
            if (precisionRecallCurve_ == null) {
              PrecisionRecallCurve = new global::Clarifai.Api.PrecisionRecallCurve();
            }
            input.ReadMessage(PrecisionRecallCurve);
            break;
          }
          case 77: {
            AvgPrecision = input.ReadFloat();
            break;
          }
          case 82: {
            AreaName = input.ReadString();
            break;
          }
          case 89: {
            AreaMin = input.ReadDouble();
            break;
          }
          case 97: {
            AreaMax = input.ReadDouble();
            break;
          }
          case 109: {
            Iou = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackerMetrics : pb::IMessage<TrackerMetrics> {
    private static readonly pb::MessageParser<TrackerMetrics> _parser = new pb::MessageParser<TrackerMetrics>(() => new TrackerMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackerMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackerMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackerMetrics(TrackerMetrics other) : this() {
      motMota_ = other.motMota_;
      motNumSwitches_ = other.motNumSwitches_;
      morseFrag_ = other.morseFrag_;
      avgPrecision_ = other.avgPrecision_;
      aiid_ = other.aiid_;
      uniqueSwitchRate_ = other.uniqueSwitchRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackerMetrics Clone() {
      return new TrackerMetrics(this);
    }

    /// <summary>Field number for the "mot_mota" field.</summary>
    public const int MotMotaFieldNumber = 1;
    private float motMota_;
    /// <summary>
    /// Multiple object tracking accuracy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MotMota {
      get { return motMota_; }
      set {
        motMota_ = value;
      }
    }

    /// <summary>Field number for the "mot_num_switches" field.</summary>
    public const int MotNumSwitchesFieldNumber = 2;
    private int motNumSwitches_;
    /// <summary>
    /// Number of switches between tracks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MotNumSwitches {
      get { return motNumSwitches_; }
      set {
        motNumSwitches_ = value;
      }
    }

    /// <summary>Field number for the "morse_frag" field.</summary>
    public const int MorseFragFieldNumber = 3;
    private float morseFrag_;
    /// <summary>
    /// MORSE fragmentation rate (a.k.a unique switch rate, only calculated in public sector)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MorseFrag {
      get { return morseFrag_; }
      set {
        morseFrag_ = value;
      }
    }

    /// <summary>Field number for the "avg_precision" field.</summary>
    public const int AvgPrecisionFieldNumber = 4;
    private float avgPrecision_;
    /// <summary>
    /// Average precision calculated from all processed frames
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AvgPrecision {
      get { return avgPrecision_; }
      set {
        avgPrecision_ = value;
      }
    }

    /// <summary>Field number for the "aiid" field.</summary>
    public const int AiidFieldNumber = 5;
    private string aiid_ = "";
    /// <summary>
    /// The concept that we are evaluating the tracker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Aiid {
      get { return aiid_; }
      set {
        aiid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique_switch_rate" field.</summary>
    public const int UniqueSwitchRateFieldNumber = 6;
    private float uniqueSwitchRate_;
    /// <summary>
    /// Same as morse_frag but calculated using MOT mapping/metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UniqueSwitchRate {
      get { return uniqueSwitchRate_; }
      set {
        uniqueSwitchRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackerMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackerMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MotMota, other.MotMota)) return false;
      if (MotNumSwitches != other.MotNumSwitches) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MorseFrag, other.MorseFrag)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgPrecision, other.AvgPrecision)) return false;
      if (Aiid != other.Aiid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UniqueSwitchRate, other.UniqueSwitchRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MotMota != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MotMota);
      if (MotNumSwitches != 0) hash ^= MotNumSwitches.GetHashCode();
      if (MorseFrag != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MorseFrag);
      if (AvgPrecision != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgPrecision);
      if (Aiid.Length != 0) hash ^= Aiid.GetHashCode();
      if (UniqueSwitchRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UniqueSwitchRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MotMota != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MotMota);
      }
      if (MotNumSwitches != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MotNumSwitches);
      }
      if (MorseFrag != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MorseFrag);
      }
      if (AvgPrecision != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AvgPrecision);
      }
      if (Aiid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Aiid);
      }
      if (UniqueSwitchRate != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(UniqueSwitchRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MotMota != 0F) {
        size += 1 + 4;
      }
      if (MotNumSwitches != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MotNumSwitches);
      }
      if (MorseFrag != 0F) {
        size += 1 + 4;
      }
      if (AvgPrecision != 0F) {
        size += 1 + 4;
      }
      if (Aiid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Aiid);
      }
      if (UniqueSwitchRate != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackerMetrics other) {
      if (other == null) {
        return;
      }
      if (other.MotMota != 0F) {
        MotMota = other.MotMota;
      }
      if (other.MotNumSwitches != 0) {
        MotNumSwitches = other.MotNumSwitches;
      }
      if (other.MorseFrag != 0F) {
        MorseFrag = other.MorseFrag;
      }
      if (other.AvgPrecision != 0F) {
        AvgPrecision = other.AvgPrecision;
      }
      if (other.Aiid.Length != 0) {
        Aiid = other.Aiid;
      }
      if (other.UniqueSwitchRate != 0F) {
        UniqueSwitchRate = other.UniqueSwitchRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            MotMota = input.ReadFloat();
            break;
          }
          case 16: {
            MotNumSwitches = input.ReadInt32();
            break;
          }
          case 29: {
            MorseFrag = input.ReadFloat();
            break;
          }
          case 37: {
            AvgPrecision = input.ReadFloat();
            break;
          }
          case 42: {
            Aiid = input.ReadString();
            break;
          }
          case 53: {
            UniqueSwitchRate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EvalTestSetEntry : pb::IMessage<EvalTestSetEntry> {
    private static readonly pb::MessageParser<EvalTestSetEntry> _parser = new pb::MessageParser<EvalTestSetEntry>(() => new EvalTestSetEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvalTestSetEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalTestSetEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalTestSetEntry(EvalTestSetEntry other) : this() {
      id_ = other.id_;
      url_ = other.url_;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      predictedConcepts_ = other.predictedConcepts_.Clone();
      groundTruthConcepts_ = other.groundTruthConcepts_.Clone();
      annotation_ = other.annotation_ != null ? other.annotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalTestSetEntry Clone() {
      return new EvalTestSetEntry(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Input CFID
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 2;
    private string url_ = "";
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 6;
    private global::Clarifai.Api.Input input_;
    /// <summary>
    /// the input information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Input Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "predicted_concepts" field.</summary>
    public const int PredictedConceptsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Concept> _repeated_predictedConcepts_codec
        = pb::FieldCodec.ForMessage(26, global::Clarifai.Api.Concept.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Concept> predictedConcepts_ = new pbc::RepeatedField<global::Clarifai.Api.Concept>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Concept> PredictedConcepts {
      get { return predictedConcepts_; }
    }

    /// <summary>Field number for the "ground_truth_concepts" field.</summary>
    public const int GroundTruthConceptsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Concept> _repeated_groundTruthConcepts_codec
        = pb::FieldCodec.ForMessage(34, global::Clarifai.Api.Concept.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Concept> groundTruthConcepts_ = new pbc::RepeatedField<global::Clarifai.Api.Concept>();
    /// <summary>
    /// All the ground truth concepts will be show on the top level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Concept> GroundTruthConcepts {
      get { return groundTruthConcepts_; }
    }

    /// <summary>Field number for the "annotation" field.</summary>
    public const int AnnotationFieldNumber = 5;
    private global::Clarifai.Api.Annotation annotation_;
    /// <summary>
    /// Only region-based/frame-based app contains this annotation
    /// Each annotation only contains one region
    /// And the concepts is in ground_truth_concepts instead of this annotation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Annotation Annotation {
      get { return annotation_; }
      set {
        annotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvalTestSetEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvalTestSetEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Url != other.Url) return false;
      if (!object.Equals(Input, other.Input)) return false;
      if(!predictedConcepts_.Equals(other.predictedConcepts_)) return false;
      if(!groundTruthConcepts_.Equals(other.groundTruthConcepts_)) return false;
      if (!object.Equals(Annotation, other.Annotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= predictedConcepts_.GetHashCode();
      hash ^= groundTruthConcepts_.GetHashCode();
      if (annotation_ != null) hash ^= Annotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      predictedConcepts_.WriteTo(output, _repeated_predictedConcepts_codec);
      groundTruthConcepts_.WriteTo(output, _repeated_groundTruthConcepts_codec);
      if (annotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Annotation);
      }
      if (input_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Input);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += predictedConcepts_.CalculateSize(_repeated_predictedConcepts_codec);
      size += groundTruthConcepts_.CalculateSize(_repeated_groundTruthConcepts_codec);
      if (annotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Annotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvalTestSetEntry other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Clarifai.Api.Input();
        }
        Input.MergeFrom(other.Input);
      }
      predictedConcepts_.Add(other.predictedConcepts_);
      groundTruthConcepts_.Add(other.groundTruthConcepts_);
      if (other.annotation_ != null) {
        if (annotation_ == null) {
          Annotation = new global::Clarifai.Api.Annotation();
        }
        Annotation.MergeFrom(other.Annotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 26: {
            predictedConcepts_.AddEntriesFrom(input, _repeated_predictedConcepts_codec);
            break;
          }
          case 34: {
            groundTruthConcepts_.AddEntriesFrom(input, _repeated_groundTruthConcepts_codec);
            break;
          }
          case 42: {
            if (annotation_ == null) {
              Annotation = new global::Clarifai.Api.Annotation();
            }
            input.ReadMessage(Annotation);
            break;
          }
          case 50: {
            if (input_ == null) {
              Input = new global::Clarifai.Api.Input();
            }
            input.ReadMessage(Input);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// NOTE(Janvier): We copy this from proto/utils/lopq_service.proto instead of importing it because
  /// we should not import internal protos in public protos.
  /// </summary>
  public sealed partial class LOPQEvalResult : pb::IMessage<LOPQEvalResult> {
    private static readonly pb::MessageParser<LOPQEvalResult> _parser = new pb::MessageParser<LOPQEvalResult>(() => new LOPQEvalResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LOPQEvalResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LOPQEvalResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LOPQEvalResult(LOPQEvalResult other) : this() {
      k_ = other.k_;
      recallVsBruteForce_ = other.recallVsBruteForce_;
      kendallTauVsBruteForce_ = other.kendallTauVsBruteForce_;
      mostFrequentCodePercent_ = other.mostFrequentCodePercent_;
      lopqNdcg_ = other.lopqNdcg_;
      bruteForceNdcg_ = other.bruteForceNdcg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LOPQEvalResult Clone() {
      return new LOPQEvalResult(this);
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 1;
    private int k_;
    /// <summary>
    /// Rank k for which all metrics are reported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "recall_vs_brute_force" field.</summary>
    public const int RecallVsBruteForceFieldNumber = 2;
    private float recallVsBruteForce_;
    /// <summary>
    /// Recall @ k assuming the brute force search is the ground truth.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecallVsBruteForce {
      get { return recallVsBruteForce_; }
      set {
        recallVsBruteForce_ = value;
      }
    }

    /// <summary>Field number for the "kendall_tau_vs_brute_force" field.</summary>
    public const int KendallTauVsBruteForceFieldNumber = 3;
    private float kendallTauVsBruteForce_;
    /// <summary>
    /// Kendall's tau correlation @ k assuming the brute force search is the ground truth.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KendallTauVsBruteForce {
      get { return kendallTauVsBruteForce_; }
      set {
        kendallTauVsBruteForce_ = value;
      }
    }

    /// <summary>Field number for the "most_frequent_code_percent" field.</summary>
    public const int MostFrequentCodePercentFieldNumber = 4;
    private float mostFrequentCodePercent_;
    /// <summary>
    /// The percentage of the most frequent code in the indexed part of evaluation data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MostFrequentCodePercent {
      get { return mostFrequentCodePercent_; }
      set {
        mostFrequentCodePercent_ = value;
      }
    }

    /// <summary>Field number for the "lopq_ndcg" field.</summary>
    public const int LopqNdcgFieldNumber = 5;
    private float lopqNdcg_;
    /// <summary>
    /// Normalized Discounted Cumulative Gain (NDCG) @ k with a ground truth inferred from annotations
    /// and/or prediction for this evaluation LOPQ model.
    /// NDCG uses individual relevance scores of each returned image to evaluate the usefulness, or
    /// gain, of a document based on its position in the result list. The premise of DCG is that
    /// highly relevant documents appearing lower in a search result list should be penalized as the
    /// graded relevance value is reduced logarithmically proportional to the position of the result.
    /// See: https://en.wikipedia.org/wiki/Information_retrieval#Discounted_cumulative_gain
    ///
    /// To compute the relevance score between two images we consider two cases:
    /// 1) Only one label for each image
    /// An image is relevant to an image query iff they are labeled the same (score 1), and
    /// not relevant otherwise (score 0)
    /// 2) Multiple labels for each image
    /// Here an image relevancy with respect to a single image query is measured by f-beta score
    /// assuming the query image list of labels as ground truth and comparing them with that of
    /// the search result. These labels can come from image annotations or if substitute_annotation_misses
    /// is set, predictions of base classifier where any prediction with prob &lt; prob_threshold are
    /// discarded. To quantify the relevancy score of a single search result we opt to compute precision
    /// and recall @ k for simplicity, and combine them with f-beta score to obtain a single number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LopqNdcg {
      get { return lopqNdcg_; }
      set {
        lopqNdcg_ = value;
      }
    }

    /// <summary>Field number for the "brute_force_ndcg" field.</summary>
    public const int BruteForceNdcgFieldNumber = 6;
    private float bruteForceNdcg_;
    /// <summary>
    /// Brute force NDCG which gives a baseline to compare to and is a measure of how good
    /// the embeddings are.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BruteForceNdcg {
      get { return bruteForceNdcg_; }
      set {
        bruteForceNdcg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LOPQEvalResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LOPQEvalResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (K != other.K) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecallVsBruteForce, other.RecallVsBruteForce)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KendallTauVsBruteForce, other.KendallTauVsBruteForce)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MostFrequentCodePercent, other.MostFrequentCodePercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LopqNdcg, other.LopqNdcg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BruteForceNdcg, other.BruteForceNdcg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (K != 0) hash ^= K.GetHashCode();
      if (RecallVsBruteForce != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecallVsBruteForce);
      if (KendallTauVsBruteForce != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KendallTauVsBruteForce);
      if (MostFrequentCodePercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MostFrequentCodePercent);
      if (LopqNdcg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LopqNdcg);
      if (BruteForceNdcg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BruteForceNdcg);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (K != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(K);
      }
      if (RecallVsBruteForce != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RecallVsBruteForce);
      }
      if (KendallTauVsBruteForce != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(KendallTauVsBruteForce);
      }
      if (MostFrequentCodePercent != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MostFrequentCodePercent);
      }
      if (LopqNdcg != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(LopqNdcg);
      }
      if (BruteForceNdcg != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BruteForceNdcg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (RecallVsBruteForce != 0F) {
        size += 1 + 4;
      }
      if (KendallTauVsBruteForce != 0F) {
        size += 1 + 4;
      }
      if (MostFrequentCodePercent != 0F) {
        size += 1 + 4;
      }
      if (LopqNdcg != 0F) {
        size += 1 + 4;
      }
      if (BruteForceNdcg != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LOPQEvalResult other) {
      if (other == null) {
        return;
      }
      if (other.K != 0) {
        K = other.K;
      }
      if (other.RecallVsBruteForce != 0F) {
        RecallVsBruteForce = other.RecallVsBruteForce;
      }
      if (other.KendallTauVsBruteForce != 0F) {
        KendallTauVsBruteForce = other.KendallTauVsBruteForce;
      }
      if (other.MostFrequentCodePercent != 0F) {
        MostFrequentCodePercent = other.MostFrequentCodePercent;
      }
      if (other.LopqNdcg != 0F) {
        LopqNdcg = other.LopqNdcg;
      }
      if (other.BruteForceNdcg != 0F) {
        BruteForceNdcg = other.BruteForceNdcg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            K = input.ReadInt32();
            break;
          }
          case 21: {
            RecallVsBruteForce = input.ReadFloat();
            break;
          }
          case 29: {
            KendallTauVsBruteForce = input.ReadFloat();
            break;
          }
          case 37: {
            MostFrequentCodePercent = input.ReadFloat();
            break;
          }
          case 45: {
            LopqNdcg = input.ReadFloat();
            break;
          }
          case 53: {
            BruteForceNdcg = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// FIXME: copy this into an internal proto since it is stored in DB and field names can't change.
  /// </summary>
  public sealed partial class MetricsSummary : pb::IMessage<MetricsSummary> {
    private static readonly pb::MessageParser<MetricsSummary> _parser = new pb::MessageParser<MetricsSummary>(() => new MetricsSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetricsSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsSummary(MetricsSummary other) : this() {
      top1Accuracy_ = other.top1Accuracy_;
      top5Accuracy_ = other.top5Accuracy_;
      macroAvgRocAuc_ = other.macroAvgRocAuc_;
      macroStdRocAuc_ = other.macroStdRocAuc_;
      macroAvgF1Score_ = other.macroAvgF1Score_;
      macroStdF1Score_ = other.macroStdF1Score_;
      macroAvgPrecision_ = other.macroAvgPrecision_;
      macroAvgRecall_ = other.macroAvgRecall_;
      meanAvgPrecisionIou50_ = other.meanAvgPrecisionIou50_;
      meanAvgPrecisionIouRange_ = other.meanAvgPrecisionIouRange_;
      lopqMetrics_ = other.lopqMetrics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsSummary Clone() {
      return new MetricsSummary(this);
    }

    /// <summary>Field number for the "top1_accuracy" field.</summary>
    public const int Top1AccuracyFieldNumber = 1;
    private float top1Accuracy_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Top1Accuracy {
      get { return top1Accuracy_; }
      set {
        top1Accuracy_ = value;
      }
    }

    /// <summary>Field number for the "top5_accuracy" field.</summary>
    public const int Top5AccuracyFieldNumber = 2;
    private float top5Accuracy_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Top5Accuracy {
      get { return top5Accuracy_; }
      set {
        top5Accuracy_ = value;
      }
    }

    /// <summary>Field number for the "macro_avg_roc_auc" field.</summary>
    public const int MacroAvgRocAucFieldNumber = 3;
    private float macroAvgRocAuc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroAvgRocAuc {
      get { return macroAvgRocAuc_; }
      set {
        macroAvgRocAuc_ = value;
      }
    }

    /// <summary>Field number for the "macro_std_roc_auc" field.</summary>
    public const int MacroStdRocAucFieldNumber = 4;
    private float macroStdRocAuc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroStdRocAuc {
      get { return macroStdRocAuc_; }
      set {
        macroStdRocAuc_ = value;
      }
    }

    /// <summary>Field number for the "macro_avg_f1_score" field.</summary>
    public const int MacroAvgF1ScoreFieldNumber = 5;
    private float macroAvgF1Score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroAvgF1Score {
      get { return macroAvgF1Score_; }
      set {
        macroAvgF1Score_ = value;
      }
    }

    /// <summary>Field number for the "macro_std_f1_score" field.</summary>
    public const int MacroStdF1ScoreFieldNumber = 6;
    private float macroStdF1Score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroStdF1Score {
      get { return macroStdF1Score_; }
      set {
        macroStdF1Score_ = value;
      }
    }

    /// <summary>Field number for the "macro_avg_precision" field.</summary>
    public const int MacroAvgPrecisionFieldNumber = 7;
    private float macroAvgPrecision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroAvgPrecision {
      get { return macroAvgPrecision_; }
      set {
        macroAvgPrecision_ = value;
      }
    }

    /// <summary>Field number for the "macro_avg_recall" field.</summary>
    public const int MacroAvgRecallFieldNumber = 8;
    private float macroAvgRecall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroAvgRecall {
      get { return macroAvgRecall_; }
      set {
        macroAvgRecall_ = value;
      }
    }

    /// <summary>Field number for the "mean_avg_precision_iou_50" field.</summary>
    public const int MeanAvgPrecisionIou50FieldNumber = 10;
    private float meanAvgPrecisionIou50_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanAvgPrecisionIou50 {
      get { return meanAvgPrecisionIou50_; }
      set {
        meanAvgPrecisionIou50_ = value;
      }
    }

    /// <summary>Field number for the "mean_avg_precision_iou_range" field.</summary>
    public const int MeanAvgPrecisionIouRangeFieldNumber = 11;
    private float meanAvgPrecisionIouRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanAvgPrecisionIouRange {
      get { return meanAvgPrecisionIouRange_; }
      set {
        meanAvgPrecisionIouRange_ = value;
      }
    }

    /// <summary>Field number for the "lopq_metrics" field.</summary>
    public const int LopqMetricsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Clarifai.Api.LOPQEvalResult> _repeated_lopqMetrics_codec
        = pb::FieldCodec.ForMessage(74, global::Clarifai.Api.LOPQEvalResult.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.LOPQEvalResult> lopqMetrics_ = new pbc::RepeatedField<global::Clarifai.Api.LOPQEvalResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.LOPQEvalResult> LopqMetrics {
      get { return lopqMetrics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetricsSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetricsSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Top1Accuracy, other.Top1Accuracy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Top5Accuracy, other.Top5Accuracy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroAvgRocAuc, other.MacroAvgRocAuc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroStdRocAuc, other.MacroStdRocAuc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroAvgF1Score, other.MacroAvgF1Score)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroStdF1Score, other.MacroStdF1Score)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroAvgPrecision, other.MacroAvgPrecision)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroAvgRecall, other.MacroAvgRecall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeanAvgPrecisionIou50, other.MeanAvgPrecisionIou50)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeanAvgPrecisionIouRange, other.MeanAvgPrecisionIouRange)) return false;
      if(!lopqMetrics_.Equals(other.lopqMetrics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Top1Accuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Top1Accuracy);
      if (Top5Accuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Top5Accuracy);
      if (MacroAvgRocAuc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroAvgRocAuc);
      if (MacroStdRocAuc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroStdRocAuc);
      if (MacroAvgF1Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroAvgF1Score);
      if (MacroStdF1Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroStdF1Score);
      if (MacroAvgPrecision != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroAvgPrecision);
      if (MacroAvgRecall != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroAvgRecall);
      if (MeanAvgPrecisionIou50 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeanAvgPrecisionIou50);
      if (MeanAvgPrecisionIouRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeanAvgPrecisionIouRange);
      hash ^= lopqMetrics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Top1Accuracy != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Top1Accuracy);
      }
      if (Top5Accuracy != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Top5Accuracy);
      }
      if (MacroAvgRocAuc != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MacroAvgRocAuc);
      }
      if (MacroStdRocAuc != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MacroStdRocAuc);
      }
      if (MacroAvgF1Score != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MacroAvgF1Score);
      }
      if (MacroStdF1Score != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MacroStdF1Score);
      }
      if (MacroAvgPrecision != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MacroAvgPrecision);
      }
      if (MacroAvgRecall != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MacroAvgRecall);
      }
      lopqMetrics_.WriteTo(output, _repeated_lopqMetrics_codec);
      if (MeanAvgPrecisionIou50 != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MeanAvgPrecisionIou50);
      }
      if (MeanAvgPrecisionIouRange != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MeanAvgPrecisionIouRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Top1Accuracy != 0F) {
        size += 1 + 4;
      }
      if (Top5Accuracy != 0F) {
        size += 1 + 4;
      }
      if (MacroAvgRocAuc != 0F) {
        size += 1 + 4;
      }
      if (MacroStdRocAuc != 0F) {
        size += 1 + 4;
      }
      if (MacroAvgF1Score != 0F) {
        size += 1 + 4;
      }
      if (MacroStdF1Score != 0F) {
        size += 1 + 4;
      }
      if (MacroAvgPrecision != 0F) {
        size += 1 + 4;
      }
      if (MacroAvgRecall != 0F) {
        size += 1 + 4;
      }
      if (MeanAvgPrecisionIou50 != 0F) {
        size += 1 + 4;
      }
      if (MeanAvgPrecisionIouRange != 0F) {
        size += 1 + 4;
      }
      size += lopqMetrics_.CalculateSize(_repeated_lopqMetrics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetricsSummary other) {
      if (other == null) {
        return;
      }
      if (other.Top1Accuracy != 0F) {
        Top1Accuracy = other.Top1Accuracy;
      }
      if (other.Top5Accuracy != 0F) {
        Top5Accuracy = other.Top5Accuracy;
      }
      if (other.MacroAvgRocAuc != 0F) {
        MacroAvgRocAuc = other.MacroAvgRocAuc;
      }
      if (other.MacroStdRocAuc != 0F) {
        MacroStdRocAuc = other.MacroStdRocAuc;
      }
      if (other.MacroAvgF1Score != 0F) {
        MacroAvgF1Score = other.MacroAvgF1Score;
      }
      if (other.MacroStdF1Score != 0F) {
        MacroStdF1Score = other.MacroStdF1Score;
      }
      if (other.MacroAvgPrecision != 0F) {
        MacroAvgPrecision = other.MacroAvgPrecision;
      }
      if (other.MacroAvgRecall != 0F) {
        MacroAvgRecall = other.MacroAvgRecall;
      }
      if (other.MeanAvgPrecisionIou50 != 0F) {
        MeanAvgPrecisionIou50 = other.MeanAvgPrecisionIou50;
      }
      if (other.MeanAvgPrecisionIouRange != 0F) {
        MeanAvgPrecisionIouRange = other.MeanAvgPrecisionIouRange;
      }
      lopqMetrics_.Add(other.lopqMetrics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Top1Accuracy = input.ReadFloat();
            break;
          }
          case 21: {
            Top5Accuracy = input.ReadFloat();
            break;
          }
          case 29: {
            MacroAvgRocAuc = input.ReadFloat();
            break;
          }
          case 37: {
            MacroStdRocAuc = input.ReadFloat();
            break;
          }
          case 45: {
            MacroAvgF1Score = input.ReadFloat();
            break;
          }
          case 53: {
            MacroStdF1Score = input.ReadFloat();
            break;
          }
          case 61: {
            MacroAvgPrecision = input.ReadFloat();
            break;
          }
          case 69: {
            MacroAvgRecall = input.ReadFloat();
            break;
          }
          case 74: {
            lopqMetrics_.AddEntriesFrom(input, _repeated_lopqMetrics_codec);
            break;
          }
          case 85: {
            MeanAvgPrecisionIou50 = input.ReadFloat();
            break;
          }
          case 93: {
            MeanAvgPrecisionIouRange = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EvalMetrics : pb::IMessage<EvalMetrics> {
    private static readonly pb::MessageParser<EvalMetrics> _parser = new pb::MessageParser<EvalMetrics>(() => new EvalMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvalMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalMetrics(EvalMetrics other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      id_ = other.id_;
      summary_ = other.summary_ != null ? other.summary_.Clone() : null;
      confusionMatrix_ = other.confusionMatrix_ != null ? other.confusionMatrix_.Clone() : null;
      cooccurrenceMatrix_ = other.cooccurrenceMatrix_ != null ? other.cooccurrenceMatrix_.Clone() : null;
      labelCounts_ = other.labelCounts_ != null ? other.labelCounts_.Clone() : null;
      binaryMetrics_ = other.binaryMetrics_.Clone();
      testSet_ = other.testSet_.Clone();
      metricsByArea_ = other.metricsByArea_.Clone();
      metricsByClass_ = other.metricsByClass_.Clone();
      trackerMetrics_ = other.trackerMetrics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalMetrics Clone() {
      return new EvalMetrics(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Clarifai.Api.Status.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 10;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 2;
    private global::Clarifai.Api.MetricsSummary summary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.MetricsSummary Summary {
      get { return summary_; }
      set {
        summary_ = value;
      }
    }

    /// <summary>Field number for the "confusion_matrix" field.</summary>
    public const int ConfusionMatrixFieldNumber = 3;
    private global::Clarifai.Api.ConfusionMatrix confusionMatrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.ConfusionMatrix ConfusionMatrix {
      get { return confusionMatrix_; }
      set {
        confusionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "cooccurrence_matrix" field.</summary>
    public const int CooccurrenceMatrixFieldNumber = 4;
    private global::Clarifai.Api.CooccurrenceMatrix cooccurrenceMatrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.CooccurrenceMatrix CooccurrenceMatrix {
      get { return cooccurrenceMatrix_; }
      set {
        cooccurrenceMatrix_ = value;
      }
    }

    /// <summary>Field number for the "label_counts" field.</summary>
    public const int LabelCountsFieldNumber = 5;
    private global::Clarifai.Api.LabelDistribution labelCounts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.LabelDistribution LabelCounts {
      get { return labelCounts_; }
      set {
        labelCounts_ = value;
      }
    }

    /// <summary>Field number for the "binary_metrics" field.</summary>
    public const int BinaryMetricsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Clarifai.Api.BinaryMetrics> _repeated_binaryMetrics_codec
        = pb::FieldCodec.ForMessage(50, global::Clarifai.Api.BinaryMetrics.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.BinaryMetrics> binaryMetrics_ = new pbc::RepeatedField<global::Clarifai.Api.BinaryMetrics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.BinaryMetrics> BinaryMetrics {
      get { return binaryMetrics_; }
    }

    /// <summary>Field number for the "test_set" field.</summary>
    public const int TestSetFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Clarifai.Api.EvalTestSetEntry> _repeated_testSet_codec
        = pb::FieldCodec.ForMessage(58, global::Clarifai.Api.EvalTestSetEntry.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.EvalTestSetEntry> testSet_ = new pbc::RepeatedField<global::Clarifai.Api.EvalTestSetEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.EvalTestSetEntry> TestSet {
      get { return testSet_; }
    }

    /// <summary>Field number for the "metrics_by_area" field.</summary>
    public const int MetricsByAreaFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Clarifai.Api.BinaryMetrics> _repeated_metricsByArea_codec
        = pb::FieldCodec.ForMessage(66, global::Clarifai.Api.BinaryMetrics.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.BinaryMetrics> metricsByArea_ = new pbc::RepeatedField<global::Clarifai.Api.BinaryMetrics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.BinaryMetrics> MetricsByArea {
      get { return metricsByArea_; }
    }

    /// <summary>Field number for the "metrics_by_class" field.</summary>
    public const int MetricsByClassFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Clarifai.Api.BinaryMetrics> _repeated_metricsByClass_codec
        = pb::FieldCodec.ForMessage(74, global::Clarifai.Api.BinaryMetrics.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.BinaryMetrics> metricsByClass_ = new pbc::RepeatedField<global::Clarifai.Api.BinaryMetrics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.BinaryMetrics> MetricsByClass {
      get { return metricsByClass_; }
    }

    /// <summary>Field number for the "tracker_metrics" field.</summary>
    public const int TrackerMetricsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Clarifai.Api.TrackerMetrics> _repeated_trackerMetrics_codec
        = pb::FieldCodec.ForMessage(90, global::Clarifai.Api.TrackerMetrics.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.TrackerMetrics> trackerMetrics_ = new pbc::RepeatedField<global::Clarifai.Api.TrackerMetrics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.TrackerMetrics> TrackerMetrics {
      get { return trackerMetrics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvalMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvalMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(Summary, other.Summary)) return false;
      if (!object.Equals(ConfusionMatrix, other.ConfusionMatrix)) return false;
      if (!object.Equals(CooccurrenceMatrix, other.CooccurrenceMatrix)) return false;
      if (!object.Equals(LabelCounts, other.LabelCounts)) return false;
      if(!binaryMetrics_.Equals(other.binaryMetrics_)) return false;
      if(!testSet_.Equals(other.testSet_)) return false;
      if(!metricsByArea_.Equals(other.metricsByArea_)) return false;
      if(!metricsByClass_.Equals(other.metricsByClass_)) return false;
      if(!trackerMetrics_.Equals(other.trackerMetrics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (summary_ != null) hash ^= Summary.GetHashCode();
      if (confusionMatrix_ != null) hash ^= ConfusionMatrix.GetHashCode();
      if (cooccurrenceMatrix_ != null) hash ^= CooccurrenceMatrix.GetHashCode();
      if (labelCounts_ != null) hash ^= LabelCounts.GetHashCode();
      hash ^= binaryMetrics_.GetHashCode();
      hash ^= testSet_.GetHashCode();
      hash ^= metricsByArea_.GetHashCode();
      hash ^= metricsByClass_.GetHashCode();
      hash ^= trackerMetrics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (summary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Summary);
      }
      if (confusionMatrix_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConfusionMatrix);
      }
      if (cooccurrenceMatrix_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CooccurrenceMatrix);
      }
      if (labelCounts_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LabelCounts);
      }
      binaryMetrics_.WriteTo(output, _repeated_binaryMetrics_codec);
      testSet_.WriteTo(output, _repeated_testSet_codec);
      metricsByArea_.WriteTo(output, _repeated_metricsByArea_codec);
      metricsByClass_.WriteTo(output, _repeated_metricsByClass_codec);
      if (Id.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Id);
      }
      trackerMetrics_.WriteTo(output, _repeated_trackerMetrics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (summary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Summary);
      }
      if (confusionMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfusionMatrix);
      }
      if (cooccurrenceMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CooccurrenceMatrix);
      }
      if (labelCounts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LabelCounts);
      }
      size += binaryMetrics_.CalculateSize(_repeated_binaryMetrics_codec);
      size += testSet_.CalculateSize(_repeated_testSet_codec);
      size += metricsByArea_.CalculateSize(_repeated_metricsByArea_codec);
      size += metricsByClass_.CalculateSize(_repeated_metricsByClass_codec);
      size += trackerMetrics_.CalculateSize(_repeated_trackerMetrics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvalMetrics other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Clarifai.Api.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.summary_ != null) {
        if (summary_ == null) {
          Summary = new global::Clarifai.Api.MetricsSummary();
        }
        Summary.MergeFrom(other.Summary);
      }
      if (other.confusionMatrix_ != null) {
        if (confusionMatrix_ == null) {
          ConfusionMatrix = new global::Clarifai.Api.ConfusionMatrix();
        }
        ConfusionMatrix.MergeFrom(other.ConfusionMatrix);
      }
      if (other.cooccurrenceMatrix_ != null) {
        if (cooccurrenceMatrix_ == null) {
          CooccurrenceMatrix = new global::Clarifai.Api.CooccurrenceMatrix();
        }
        CooccurrenceMatrix.MergeFrom(other.CooccurrenceMatrix);
      }
      if (other.labelCounts_ != null) {
        if (labelCounts_ == null) {
          LabelCounts = new global::Clarifai.Api.LabelDistribution();
        }
        LabelCounts.MergeFrom(other.LabelCounts);
      }
      binaryMetrics_.Add(other.binaryMetrics_);
      testSet_.Add(other.testSet_);
      metricsByArea_.Add(other.metricsByArea_);
      metricsByClass_.Add(other.metricsByClass_);
      trackerMetrics_.Add(other.trackerMetrics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Clarifai.Api.Status.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            if (summary_ == null) {
              Summary = new global::Clarifai.Api.MetricsSummary();
            }
            input.ReadMessage(Summary);
            break;
          }
          case 26: {
            if (confusionMatrix_ == null) {
              ConfusionMatrix = new global::Clarifai.Api.ConfusionMatrix();
            }
            input.ReadMessage(ConfusionMatrix);
            break;
          }
          case 34: {
            if (cooccurrenceMatrix_ == null) {
              CooccurrenceMatrix = new global::Clarifai.Api.CooccurrenceMatrix();
            }
            input.ReadMessage(CooccurrenceMatrix);
            break;
          }
          case 42: {
            if (labelCounts_ == null) {
              LabelCounts = new global::Clarifai.Api.LabelDistribution();
            }
            input.ReadMessage(LabelCounts);
            break;
          }
          case 50: {
            binaryMetrics_.AddEntriesFrom(input, _repeated_binaryMetrics_codec);
            break;
          }
          case 58: {
            testSet_.AddEntriesFrom(input, _repeated_testSet_codec);
            break;
          }
          case 66: {
            metricsByArea_.AddEntriesFrom(input, _repeated_metricsByArea_codec);
            break;
          }
          case 74: {
            metricsByClass_.AddEntriesFrom(input, _repeated_metricsByClass_codec);
            break;
          }
          case 82: {
            Id = input.ReadString();
            break;
          }
          case 90: {
            trackerMetrics_.AddEntriesFrom(input, _repeated_trackerMetrics_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FieldsValue : pb::IMessage<FieldsValue> {
    private static readonly pb::MessageParser<FieldsValue> _parser = new pb::MessageParser<FieldsValue>(() => new FieldsValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldsValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldsValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldsValue(FieldsValue other) : this() {
      confusionMatrix_ = other.confusionMatrix_;
      cooccurrenceMatrix_ = other.cooccurrenceMatrix_;
      labelCounts_ = other.labelCounts_;
      binaryMetrics_ = other.binaryMetrics_;
      testSet_ = other.testSet_;
      metricsByArea_ = other.metricsByArea_;
      metricsByClass_ = other.metricsByClass_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldsValue Clone() {
      return new FieldsValue(this);
    }

    /// <summary>Field number for the "confusion_matrix" field.</summary>
    public const int ConfusionMatrixFieldNumber = 1;
    private bool confusionMatrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConfusionMatrix {
      get { return confusionMatrix_; }
      set {
        confusionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "cooccurrence_matrix" field.</summary>
    public const int CooccurrenceMatrixFieldNumber = 2;
    private bool cooccurrenceMatrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CooccurrenceMatrix {
      get { return cooccurrenceMatrix_; }
      set {
        cooccurrenceMatrix_ = value;
      }
    }

    /// <summary>Field number for the "label_counts" field.</summary>
    public const int LabelCountsFieldNumber = 3;
    private bool labelCounts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LabelCounts {
      get { return labelCounts_; }
      set {
        labelCounts_ = value;
      }
    }

    /// <summary>Field number for the "binary_metrics" field.</summary>
    public const int BinaryMetricsFieldNumber = 4;
    private bool binaryMetrics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BinaryMetrics {
      get { return binaryMetrics_; }
      set {
        binaryMetrics_ = value;
      }
    }

    /// <summary>Field number for the "test_set" field.</summary>
    public const int TestSetFieldNumber = 5;
    private bool testSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TestSet {
      get { return testSet_; }
      set {
        testSet_ = value;
      }
    }

    /// <summary>Field number for the "metrics_by_area" field.</summary>
    public const int MetricsByAreaFieldNumber = 6;
    private bool metricsByArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MetricsByArea {
      get { return metricsByArea_; }
      set {
        metricsByArea_ = value;
      }
    }

    /// <summary>Field number for the "metrics_by_class" field.</summary>
    public const int MetricsByClassFieldNumber = 7;
    private bool metricsByClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MetricsByClass {
      get { return metricsByClass_; }
      set {
        metricsByClass_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldsValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldsValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfusionMatrix != other.ConfusionMatrix) return false;
      if (CooccurrenceMatrix != other.CooccurrenceMatrix) return false;
      if (LabelCounts != other.LabelCounts) return false;
      if (BinaryMetrics != other.BinaryMetrics) return false;
      if (TestSet != other.TestSet) return false;
      if (MetricsByArea != other.MetricsByArea) return false;
      if (MetricsByClass != other.MetricsByClass) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfusionMatrix != false) hash ^= ConfusionMatrix.GetHashCode();
      if (CooccurrenceMatrix != false) hash ^= CooccurrenceMatrix.GetHashCode();
      if (LabelCounts != false) hash ^= LabelCounts.GetHashCode();
      if (BinaryMetrics != false) hash ^= BinaryMetrics.GetHashCode();
      if (TestSet != false) hash ^= TestSet.GetHashCode();
      if (MetricsByArea != false) hash ^= MetricsByArea.GetHashCode();
      if (MetricsByClass != false) hash ^= MetricsByClass.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfusionMatrix != false) {
        output.WriteRawTag(8);
        output.WriteBool(ConfusionMatrix);
      }
      if (CooccurrenceMatrix != false) {
        output.WriteRawTag(16);
        output.WriteBool(CooccurrenceMatrix);
      }
      if (LabelCounts != false) {
        output.WriteRawTag(24);
        output.WriteBool(LabelCounts);
      }
      if (BinaryMetrics != false) {
        output.WriteRawTag(32);
        output.WriteBool(BinaryMetrics);
      }
      if (TestSet != false) {
        output.WriteRawTag(40);
        output.WriteBool(TestSet);
      }
      if (MetricsByArea != false) {
        output.WriteRawTag(48);
        output.WriteBool(MetricsByArea);
      }
      if (MetricsByClass != false) {
        output.WriteRawTag(56);
        output.WriteBool(MetricsByClass);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfusionMatrix != false) {
        size += 1 + 1;
      }
      if (CooccurrenceMatrix != false) {
        size += 1 + 1;
      }
      if (LabelCounts != false) {
        size += 1 + 1;
      }
      if (BinaryMetrics != false) {
        size += 1 + 1;
      }
      if (TestSet != false) {
        size += 1 + 1;
      }
      if (MetricsByArea != false) {
        size += 1 + 1;
      }
      if (MetricsByClass != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldsValue other) {
      if (other == null) {
        return;
      }
      if (other.ConfusionMatrix != false) {
        ConfusionMatrix = other.ConfusionMatrix;
      }
      if (other.CooccurrenceMatrix != false) {
        CooccurrenceMatrix = other.CooccurrenceMatrix;
      }
      if (other.LabelCounts != false) {
        LabelCounts = other.LabelCounts;
      }
      if (other.BinaryMetrics != false) {
        BinaryMetrics = other.BinaryMetrics;
      }
      if (other.TestSet != false) {
        TestSet = other.TestSet;
      }
      if (other.MetricsByArea != false) {
        MetricsByArea = other.MetricsByArea;
      }
      if (other.MetricsByClass != false) {
        MetricsByClass = other.MetricsByClass;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConfusionMatrix = input.ReadBool();
            break;
          }
          case 16: {
            CooccurrenceMatrix = input.ReadBool();
            break;
          }
          case 24: {
            LabelCounts = input.ReadBool();
            break;
          }
          case 32: {
            BinaryMetrics = input.ReadBool();
            break;
          }
          case 40: {
            TestSet = input.ReadBool();
            break;
          }
          case 48: {
            MetricsByArea = input.ReadBool();
            break;
          }
          case 56: {
            MetricsByClass = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/output.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Output : pb::IMessage<Output> {
    private static readonly pb::MessageParser<Output> _parser = new pb::MessageParser<Output>(() => new Output());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Output> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output(Output other) : this() {
      id_ = other.id_;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      model_ = other.model_ != null ? other.model_.Clone() : null;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output Clone() {
      return new Output(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// One of these outputs per Input
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Clarifai.Api.Status.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the object was created. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    /// the following from the API:
    /// "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 4;
    private global::Clarifai.Api.Model model_;
    /// <summary>
    /// The model that created this Output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Model Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 5;
    private global::Clarifai.Api.Input input_;
    /// <summary>
    /// The input that was passed to the model to create this Output. For example if we have an image
    /// model then it will take as input here an Input object with Image filled in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Input Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 6;
    private global::Clarifai.Api.Data data_;
    /// <summary>
    /// The output data for this Output. For example if we have a concept model then the predicted
    /// concepts will appear here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Output);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Output other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(Model, other.Model)) return false;
      if (!object.Equals(Input, other.Input)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (model_ != null) hash ^= Model.GetHashCode();
      if (input_ != null) hash ^= Input.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (status_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Status);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (model_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Model);
      }
      if (input_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Input);
      }
      if (data_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (model_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Model);
      }
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Output other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Clarifai.Api.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.model_ != null) {
        if (model_ == null) {
          Model = new global::Clarifai.Api.Model();
        }
        Model.MergeFrom(other.Model);
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Clarifai.Api.Input();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Clarifai.Api.Data();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (status_ == null) {
              Status = new global::Clarifai.Api.Status.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            if (model_ == null) {
              Model = new global::Clarifai.Api.Model();
            }
            input.ReadMessage(Model);
            break;
          }
          case 42: {
            if (input_ == null) {
              Input = new global::Clarifai.Api.Input();
            }
            input.ReadMessage(Input);
            break;
          }
          case 50: {
            if (data_ == null) {
              Data = new global::Clarifai.Api.Data();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/scope.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class ScopeDeps : pb::IMessage<ScopeDeps> {
    private static readonly pb::MessageParser<ScopeDeps> _parser = new pb::MessageParser<ScopeDeps>(() => new ScopeDeps());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScopeDeps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopeDeps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopeDeps(ScopeDeps other) : this() {
      scope_ = other.scope_;
      dependingScopes_ = other.dependingScopes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopeDeps Clone() {
      return new ScopeDeps(this);
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 1;
    private string scope_ = "";
    /// <summary>
    /// The scope
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scope {
      get { return scope_; }
      set {
        scope_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "depending_scopes" field.</summary>
    public const int DependingScopesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_dependingScopes_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> dependingScopes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Other scopes that are required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DependingScopes {
      get { return dependingScopes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScopeDeps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScopeDeps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Scope != other.Scope) return false;
      if(!dependingScopes_.Equals(other.dependingScopes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Scope.Length != 0) hash ^= Scope.GetHashCode();
      hash ^= dependingScopes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Scope.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Scope);
      }
      dependingScopes_.WriteTo(output, _repeated_dependingScopes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Scope.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scope);
      }
      size += dependingScopes_.CalculateSize(_repeated_dependingScopes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScopeDeps other) {
      if (other == null) {
        return;
      }
      if (other.Scope.Length != 0) {
        Scope = other.Scope;
      }
      dependingScopes_.Add(other.dependingScopes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Scope = input.ReadString();
            break;
          }
          case 18: {
            dependingScopes_.AddEntriesFrom(input, _repeated_dependingScopes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndpointDeps : pb::IMessage<EndpointDeps> {
    private static readonly pb::MessageParser<EndpointDeps> _parser = new pb::MessageParser<EndpointDeps>(() => new EndpointDeps());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndpointDeps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndpointDeps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndpointDeps(EndpointDeps other) : this() {
      endpoint_ = other.endpoint_;
      dependingScopes_ = other.dependingScopes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndpointDeps Clone() {
      return new EndpointDeps(this);
    }

    /// <summary>Field number for the "endpoint" field.</summary>
    public const int EndpointFieldNumber = 1;
    private string endpoint_ = "";
    /// <summary>
    /// The fully qualified endpoint to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Endpoint {
      get { return endpoint_; }
      set {
        endpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "depending_scopes" field.</summary>
    public const int DependingScopesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_dependingScopes_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> dependingScopes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Other scopes that are required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DependingScopes {
      get { return dependingScopes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndpointDeps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndpointDeps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Endpoint != other.Endpoint) return false;
      if(!dependingScopes_.Equals(other.dependingScopes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Endpoint.Length != 0) hash ^= Endpoint.GetHashCode();
      hash ^= dependingScopes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Endpoint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Endpoint);
      }
      dependingScopes_.WriteTo(output, _repeated_dependingScopes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Endpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Endpoint);
      }
      size += dependingScopes_.CalculateSize(_repeated_dependingScopes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndpointDeps other) {
      if (other == null) {
        return;
      }
      if (other.Endpoint.Length != 0) {
        Endpoint = other.Endpoint;
      }
      dependingScopes_.Add(other.dependingScopes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Endpoint = input.ReadString();
            break;
          }
          case 18: {
            dependingScopes_.AddEntriesFrom(input, _repeated_dependingScopes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/search.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Hit : pb::IMessage<Hit> {
    private static readonly pb::MessageParser<Hit> _parser = new pb::MessageParser<Hit>(() => new Hit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit(Hit other) : this() {
      score_ = other.score_;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      annotation_ = other.annotation_ != null ? other.annotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit Clone() {
      return new Hit(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private float score_;
    /// <summary>
    /// This is the score for the ranked Hit results of the search query. This score is a number
    /// between 0.0 and 1.0 as it represents a confidence in the search Hit. For example, if you search
    /// for "car" and get a close matching Hit, the score should be close to 1.0. If you get a score
    /// of close to 0.0 that means it's very disimilar to your query, in this case NOT a "car". There
    /// is a special intermediate score of 0.5 that means that the Hit is not really correlated with
    /// your search query (ie. not similar or dissimlar to the query) which is a common occurrence
    /// when using negate queries.
    /// Note: some queries that are just filtering down your app of inputs may just return a score of
    /// 1.0 for all Hits.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 2;
    private global::Clarifai.Api.Input input_;
    /// <summary>
    /// This is the matched input returned from the search query. This will contain information about
    /// the Input such as the url, created_at time and trusted annotation information (for backwards
    /// compatibility with apps that existed before Annotations were introduced.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Input Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "annotation" field.</summary>
    public const int AnnotationFieldNumber = 3;
    private global::Clarifai.Api.Annotation annotation_;
    /// <summary>
    /// We also provide back the specific matched annotation for the above input. We do this in order
    /// to support more complex Annotation queries in the And message below. For example if we match
    /// the search results to a region in your input, or a frame in a video input, this annotation
    /// field will be that matched annotation info and the input will be the image/video that the user
    /// originally added which contains those regions / frames.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Annotation Annotation {
      get { return annotation_; }
      set {
        annotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Score, other.Score)) return false;
      if (!object.Equals(Input, other.Input)) return false;
      if (!object.Equals(Annotation, other.Annotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Score);
      if (input_ != null) hash ^= Input.GetHashCode();
      if (annotation_ != null) hash ^= Annotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Score);
      }
      if (input_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Input);
      }
      if (annotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Annotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (annotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Annotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hit other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Clarifai.Api.Input();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.annotation_ != null) {
        if (annotation_ == null) {
          Annotation = new global::Clarifai.Api.Annotation();
        }
        Annotation.MergeFrom(other.Annotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Score = input.ReadFloat();
            break;
          }
          case 18: {
            if (input_ == null) {
              Input = new global::Clarifai.Api.Input();
            }
            input.ReadMessage(Input);
            break;
          }
          case 26: {
            if (annotation_ == null) {
              Annotation = new global::Clarifai.Api.Annotation();
            }
            input.ReadMessage(Annotation);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This is the common building block of a query which is a sequence of And messages ANDed together.
  /// Note that some fields are used too RANK results (affect the scores) and some are used to FILTER
  /// results (unordered subset of your app's contents). In general, FILTER operations are more
  /// efficient queries at scale and when combined with RANK operations can speed up search performance
  /// as you effectively operate on a smaller sub-set of your entire app.
  /// </summary>
  public sealed partial class And : pb::IMessage<And> {
    private static readonly pb::MessageParser<And> _parser = new pb::MessageParser<And>(() => new And());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<And> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public And() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public And(And other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      output_ = other.output_ != null ? other.output_.Clone() : null;
      negate_ = other.negate_;
      annotation_ = other.annotation_ != null ? other.annotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public And Clone() {
      return new And(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Clarifai.Api.Input input_;
    /// <summary>
    /// FILTER by input.data... information.
    /// This can include human provided concepts, geo location info, metadata, etc.
    /// This is effectively searching over only the trusted annotation attached to an input in your
    /// app. To search by more specific annotation fields use the Annotation object here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Input Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 2;
    private global::Clarifai.Api.Output output_;
    /// <summary>
    /// RANK based predicted outputs from models such as custom trained models, pre-trained models,
    /// etc. This is also where you enter the image url for a visual search because what we're asking
    /// the system to do is find output embedding most visually similar to the provided input (that
    /// input being in And.output.input.data.image.url for example). This will return the Hits
    /// sorted by visual similarity (1.0 being very similar or exact match and 0.0 being very
    /// dissimlar). For a search by Output concept, this means we're asking the system to rank
    /// the Hits by confidence of our model's predicted Outputs. So for example if the model
    /// predicts an image is 0.95 likely there is a "dog" present, that should related directly
    /// to the score returned if you search for Output concept "dog" in your query. This provides
    /// a natural ranking to search results based on confidence of predictions from the models and
    /// is used when ANDing multiple of these types of RANK by Output queries together as well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Output Output {
      get { return output_; }
      set {
        output_ = value;
      }
    }

    /// <summary>Field number for the "negate" field.</summary>
    public const int NegateFieldNumber = 3;
    private bool negate_;
    /// <summary>
    /// If True then this will flip the meaning of this part of the
    /// query. This allow for queries such as dog AND ! metadata=={"blah":"value"}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Negate {
      get { return negate_; }
      set {
        negate_ = value;
      }
    }

    /// <summary>Field number for the "annotation" field.</summary>
    public const int AnnotationFieldNumber = 4;
    private global::Clarifai.Api.Annotation annotation_;
    /// <summary>
    /// FILTER by annotation information. This is more flexible than just filtering by
    /// Input information because in the general case each input can have several annotations.
    /// Some example use cases for filtering by annotations:
    /// 1) find all the inputs annotated "dog" by worker_id = "XYZ"
    /// 2) find all the annotations associated with embed_model_version_id = "123"
    /// 3) find all the annotations that are trusted, etc.
    ///
    /// Since all the annotations under the hood are joined to the embedding model's annotation
    /// using worker_id's of other models like cluster models or concept models should be
    /// combinable with queries like visual search (a query with Output filled in).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Annotation Annotation {
      get { return annotation_; }
      set {
        annotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as And);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(And other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (!object.Equals(Output, other.Output)) return false;
      if (Negate != other.Negate) return false;
      if (!object.Equals(Annotation, other.Annotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (output_ != null) hash ^= Output.GetHashCode();
      if (Negate != false) hash ^= Negate.GetHashCode();
      if (annotation_ != null) hash ^= Annotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (output_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Output);
      }
      if (Negate != false) {
        output.WriteRawTag(24);
        output.WriteBool(Negate);
      }
      if (annotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Annotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (output_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Output);
      }
      if (Negate != false) {
        size += 1 + 1;
      }
      if (annotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Annotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(And other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Clarifai.Api.Input();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.output_ != null) {
        if (output_ == null) {
          Output = new global::Clarifai.Api.Output();
        }
        Output.MergeFrom(other.Output);
      }
      if (other.Negate != false) {
        Negate = other.Negate;
      }
      if (other.annotation_ != null) {
        if (annotation_ == null) {
          Annotation = new global::Clarifai.Api.Annotation();
        }
        Annotation.MergeFrom(other.Annotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Clarifai.Api.Input();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            if (output_ == null) {
              Output = new global::Clarifai.Api.Output();
            }
            input.ReadMessage(Output);
            break;
          }
          case 24: {
            Negate = input.ReadBool();
            break;
          }
          case 34: {
            if (annotation_ == null) {
              Annotation = new global::Clarifai.Api.Annotation();
            }
            input.ReadMessage(Annotation);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This is the search query used in /searches, model training requests, bulk data exports, etc.
  /// </summary>
  public sealed partial class Query : pb::IMessage<Query> {
    private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Query> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query(Query other) : this() {
      ands_ = other.ands_.Clone();
      language_ = other.language_;
      filters_ = other.filters_.Clone();
      ranks_ = other.ranks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query Clone() {
      return new Query(this);
    }

    /// <summary>Field number for the "ands" field.</summary>
    public const int AndsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Clarifai.Api.And> _repeated_ands_codec
        = pb::FieldCodec.ForMessage(10, global::Clarifai.Api.And.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.And> ands_ = new pbc::RepeatedField<global::Clarifai.Api.And>();
    /// <summary>
    /// The query syntax is simply a list of And operatiosn that will be ANDed together to fetch
    /// results which are returned to the user as Hit messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.And> Ands {
      get { return ands_; }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private string language_ = "";
    /// <summary>
    /// This allows the query to override any default language the app was setup in when doing Concept
    /// based searches. This currently only affects public Models Output searches when those public
    /// Models have translations for their Concepts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Filter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(26, global::Clarifai.Api.Filter.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Filter> filters_ = new pbc::RepeatedField<global::Clarifai.Api.Filter>();
    /// <summary>
    /// filters in this query
    /// e.q. only fetch annotations that have certain metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Filter> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "ranks" field.</summary>
    public const int RanksFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Rank> _repeated_ranks_codec
        = pb::FieldCodec.ForMessage(34, global::Clarifai.Api.Rank.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Rank> ranks_ = new pbc::RepeatedField<global::Clarifai.Api.Rank>();
    /// <summary>
    /// rankings in this query
    /// e.g. visual search by a url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Rank> Ranks {
      get { return ranks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Query);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Query other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ands_.Equals(other.ands_)) return false;
      if (Language != other.Language) return false;
      if(!filters_.Equals(other.filters_)) return false;
      if(!ranks_.Equals(other.ranks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ands_.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      hash ^= filters_.GetHashCode();
      hash ^= ranks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ands_.WriteTo(output, _repeated_ands_codec);
      if (Language.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      ranks_.WriteTo(output, _repeated_ranks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ands_.CalculateSize(_repeated_ands_codec);
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      size += ranks_.CalculateSize(_repeated_ranks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Query other) {
      if (other == null) {
        return;
      }
      ands_.Add(other.ands_);
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      filters_.Add(other.filters_);
      ranks_.Add(other.ranks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ands_.AddEntriesFrom(input, _repeated_ands_codec);
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
          case 26: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 34: {
            ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This is the new Search object used in saved searches.
  /// </summary>
  public sealed partial class Search : pb::IMessage<Search> {
    private static readonly pb::MessageParser<Search> _parser = new pb::MessageParser<Search>(() => new Search());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Search> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Search() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Search(Search other) : this() {
      query_ = other.query_ != null ? other.query_.Clone() : null;
      id_ = other.id_;
      applicationId_ = other.applicationId_;
      name_ = other.name_;
      asOf_ = other.asOf_ != null ? other.asOf_.Clone() : null;
      gitHash_ = other.gitHash_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      modifiedAt_ = other.modifiedAt_ != null ? other.modifiedAt_.Clone() : null;
      algorithm_ = other.algorithm_;
      save_ = other.save_;
      minValue_ = other.minValue_;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Search Clone() {
      return new Search(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private global::Clarifai.Api.Query query_;
    /// <summary>
    /// Search query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Query Query {
      get { return query_; }
      set {
        query_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// Customer facing, external ID for search to be saved. Provided by the user, e.g. "saved-search-1.
    /// It is unique per application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "application_id" field.</summary>
    public const int ApplicationIdFieldNumber = 3;
    private string applicationId_ = "";
    /// <summary>
    /// Application that owns this saved search.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Human readable display name of the saved search.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "as_of" field.</summary>
    public const int AsOfFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp asOf_;
    /// <summary>
    /// "As of" timestamp, indicating a time in the past as of which we want to
    /// retrieve the annotations satisfying the query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AsOf {
      get { return asOf_; }
      set {
        asOf_ = value;
      }
    }

    /// <summary>Field number for the "git_hash" field.</summary>
    public const int GitHashFieldNumber = 6;
    private string gitHash_ = "";
    /// <summary>
    /// Git hash of the code that ran the filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GitHash {
      get { return gitHash_; }
      set {
        gitHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the saved search was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "modified_at" field.</summary>
    public const int ModifiedAtFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedAt_;
    /// <summary>
    /// When the saved search was updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedAt {
      get { return modifiedAt_; }
      set {
        modifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 9;
    private string algorithm_ = "";
    /// <summary>
    /// The search algorithm to be used.
    /// Options are are 'nearest_neighbor', 'brute_force', and 'avg_concept_brute_force'
    /// The last two perform a brute force search visual search instead of a more scalable distributed
    /// nearest neighbor search and should be used by advanced users only.
    /// If not specified we default to nearest neighbor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Algorithm {
      get { return algorithm_; }
      set {
        algorithm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "save" field.</summary>
    public const int SaveFieldNumber = 10;
    private bool save_;
    /// <summary>
    /// If true, save this search, and exit without executing the search.
    /// If false execute the query
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Save {
      get { return save_; }
      set {
        save_ = value;
      }
    }

    /// <summary>Field number for the "min_value" field.</summary>
    public const int MinValueFieldNumber = 11;
    private float minValue_;
    /// <summary>
    /// Minimum value of confidence threshold score in result.
    /// Defaults to 0.0 which means we won't do any thresholding as all probabilities will
    /// likely be > 0.0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 12;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Search);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Search other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Query, other.Query)) return false;
      if (Id != other.Id) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(AsOf, other.AsOf)) return false;
      if (GitHash != other.GitHash) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(ModifiedAt, other.ModifiedAt)) return false;
      if (Algorithm != other.Algorithm) return false;
      if (Save != other.Save) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinValue, other.MinValue)) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (query_ != null) hash ^= Query.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ApplicationId.Length != 0) hash ^= ApplicationId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (asOf_ != null) hash ^= AsOf.GetHashCode();
      if (GitHash.Length != 0) hash ^= GitHash.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (modifiedAt_ != null) hash ^= ModifiedAt.GetHashCode();
      if (Algorithm.Length != 0) hash ^= Algorithm.GetHashCode();
      if (Save != false) hash ^= Save.GetHashCode();
      if (MinValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinValue);
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (query_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Query);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (ApplicationId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ApplicationId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (asOf_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AsOf);
      }
      if (GitHash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GitHash);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreatedAt);
      }
      if (modifiedAt_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ModifiedAt);
      }
      if (Algorithm.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Algorithm);
      }
      if (Save != false) {
        output.WriteRawTag(80);
        output.WriteBool(Save);
      }
      if (MinValue != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MinValue);
      }
      if (visibility_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Visibility);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (query_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ApplicationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApplicationId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (asOf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AsOf);
      }
      if (GitHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GitHash);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (modifiedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifiedAt);
      }
      if (Algorithm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Algorithm);
      }
      if (Save != false) {
        size += 1 + 1;
      }
      if (MinValue != 0F) {
        size += 1 + 4;
      }
      if (visibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Search other) {
      if (other == null) {
        return;
      }
      if (other.query_ != null) {
        if (query_ == null) {
          Query = new global::Clarifai.Api.Query();
        }
        Query.MergeFrom(other.Query);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ApplicationId.Length != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.asOf_ != null) {
        if (asOf_ == null) {
          AsOf = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AsOf.MergeFrom(other.AsOf);
      }
      if (other.GitHash.Length != 0) {
        GitHash = other.GitHash;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.modifiedAt_ != null) {
        if (modifiedAt_ == null) {
          ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedAt.MergeFrom(other.ModifiedAt);
      }
      if (other.Algorithm.Length != 0) {
        Algorithm = other.Algorithm;
      }
      if (other.Save != false) {
        Save = other.Save;
      }
      if (other.MinValue != 0F) {
        MinValue = other.MinValue;
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (query_ == null) {
              Query = new global::Clarifai.Api.Query();
            }
            input.ReadMessage(Query);
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            ApplicationId = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            if (asOf_ == null) {
              AsOf = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AsOf);
            break;
          }
          case 50: {
            GitHash = input.ReadString();
            break;
          }
          case 58: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 66: {
            if (modifiedAt_ == null) {
              ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedAt);
            break;
          }
          case 74: {
            Algorithm = input.ReadString();
            break;
          }
          case 80: {
            Save = input.ReadBool();
            break;
          }
          case 93: {
            MinValue = input.ReadFloat();
            break;
          }
          case 98: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
      negate_ = other.negate_;
      annotation_ = other.annotation_ != null ? other.annotation_.Clone() : null;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      lastUpdatedTimeRange_ = other.lastUpdatedTimeRange_ != null ? other.lastUpdatedTimeRange_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "negate" field.</summary>
    public const int NegateFieldNumber = 3;
    private bool negate_;
    /// <summary>
    /// If True then this will flip the meaning of this part of the
    /// query. This allow for queries such as dog AND ! metadata=={"blah":"value"}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Negate {
      get { return negate_; }
      set {
        negate_ = value;
      }
    }

    /// <summary>Field number for the "annotation" field.</summary>
    public const int AnnotationFieldNumber = 4;
    private global::Clarifai.Api.Annotation annotation_;
    /// <summary>
    /// FILTER by annotation information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Annotation Annotation {
      get { return annotation_; }
      set {
        annotation_ = value;
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 5;
    private global::Clarifai.Api.Input input_;
    /// <summary>
    /// FILTER by input information.
    /// For example you can filter inputs by status,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Input Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "last_updated_time_range" field.</summary>
    public const int LastUpdatedTimeRangeFieldNumber = 6;
    private global::Clarifai.Api.TimeRange lastUpdatedTimeRange_;
    /// <summary>
    /// Filter by annotation last updated time range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TimeRange LastUpdatedTimeRange {
      get { return lastUpdatedTimeRange_; }
      set {
        lastUpdatedTimeRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Negate != other.Negate) return false;
      if (!object.Equals(Annotation, other.Annotation)) return false;
      if (!object.Equals(Input, other.Input)) return false;
      if (!object.Equals(LastUpdatedTimeRange, other.LastUpdatedTimeRange)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Negate != false) hash ^= Negate.GetHashCode();
      if (annotation_ != null) hash ^= Annotation.GetHashCode();
      if (input_ != null) hash ^= Input.GetHashCode();
      if (lastUpdatedTimeRange_ != null) hash ^= LastUpdatedTimeRange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Negate != false) {
        output.WriteRawTag(24);
        output.WriteBool(Negate);
      }
      if (annotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Annotation);
      }
      if (input_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Input);
      }
      if (lastUpdatedTimeRange_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LastUpdatedTimeRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Negate != false) {
        size += 1 + 1;
      }
      if (annotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Annotation);
      }
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (lastUpdatedTimeRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastUpdatedTimeRange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      if (other.Negate != false) {
        Negate = other.Negate;
      }
      if (other.annotation_ != null) {
        if (annotation_ == null) {
          Annotation = new global::Clarifai.Api.Annotation();
        }
        Annotation.MergeFrom(other.Annotation);
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Clarifai.Api.Input();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.lastUpdatedTimeRange_ != null) {
        if (lastUpdatedTimeRange_ == null) {
          LastUpdatedTimeRange = new global::Clarifai.Api.TimeRange();
        }
        LastUpdatedTimeRange.MergeFrom(other.LastUpdatedTimeRange);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            Negate = input.ReadBool();
            break;
          }
          case 34: {
            if (annotation_ == null) {
              Annotation = new global::Clarifai.Api.Annotation();
            }
            input.ReadMessage(Annotation);
            break;
          }
          case 42: {
            if (input_ == null) {
              Input = new global::Clarifai.Api.Input();
            }
            input.ReadMessage(Input);
            break;
          }
          case 50: {
            if (lastUpdatedTimeRange_ == null) {
              LastUpdatedTimeRange = new global::Clarifai.Api.TimeRange();
            }
            input.ReadMessage(LastUpdatedTimeRange);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeRange : pb::IMessage<TimeRange> {
    private static readonly pb::MessageParser<TimeRange> _parser = new pb::MessageParser<TimeRange>(() => new TimeRange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRange(TimeRange other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeRange Clone() {
      return new TimeRange(this);
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// Begin of the time range, optional, inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// End of the time range, optional, inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeRange other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rank : pb::IMessage<Rank> {
    private static readonly pb::MessageParser<Rank> _parser = new pb::MessageParser<Rank>(() => new Rank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank(Rank other) : this() {
      negate_ = other.negate_;
      annotation_ = other.annotation_ != null ? other.annotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank Clone() {
      return new Rank(this);
    }

    /// <summary>Field number for the "negate" field.</summary>
    public const int NegateFieldNumber = 3;
    private bool negate_;
    /// <summary>
    /// If True then this will flip the meaning of this part of the
    /// query. This allow for queries such as !dog
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Negate {
      get { return negate_; }
      set {
        negate_ = value;
      }
    }

    /// <summary>Field number for the "annotation" field.</summary>
    public const int AnnotationFieldNumber = 4;
    private global::Clarifai.Api.Annotation annotation_;
    /// <summary>
    /// RANK by annotation information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Annotation Annotation {
      get { return annotation_; }
      set {
        annotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Negate != other.Negate) return false;
      if (!object.Equals(Annotation, other.Annotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Negate != false) hash ^= Negate.GetHashCode();
      if (annotation_ != null) hash ^= Annotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Negate != false) {
        output.WriteRawTag(24);
        output.WriteBool(Negate);
      }
      if (annotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Annotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Negate != false) {
        size += 1 + 1;
      }
      if (annotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Annotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rank other) {
      if (other == null) {
        return;
      }
      if (other.Negate != false) {
        Negate = other.Negate;
      }
      if (other.annotation_ != null) {
        if (annotation_ == null) {
          Annotation = new global::Clarifai.Api.Annotation();
        }
        Annotation.MergeFrom(other.Annotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            Negate = input.ReadBool();
            break;
          }
          case 34: {
            if (annotation_ == null) {
              Annotation = new global::Clarifai.Api.Annotation();
            }
            input.ReadMessage(Annotation);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnnotationSearchMetrics : pb::IMessage<AnnotationSearchMetrics> {
    private static readonly pb::MessageParser<AnnotationSearchMetrics> _parser = new pb::MessageParser<AnnotationSearchMetrics>(() => new AnnotationSearchMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotationSearchMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotationSearchMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotationSearchMetrics(AnnotationSearchMetrics other) : this() {
      groundTruth_ = other.groundTruth_ != null ? other.groundTruth_.Clone() : null;
      searchToEval_ = other.searchToEval_ != null ? other.searchToEval_.Clone() : null;
      metrics_ = other.metrics_ != null ? other.metrics_.Clone() : null;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      activeConceptCount_ = other.activeConceptCount_;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotationSearchMetrics Clone() {
      return new AnnotationSearchMetrics(this);
    }

    /// <summary>Field number for the "ground_truth" field.</summary>
    public const int GroundTruthFieldNumber = 1;
    private global::Clarifai.Api.Search groundTruth_;
    /// <summary>
    /// The ground truth we are evaluating against
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Search GroundTruth {
      get { return groundTruth_; }
      set {
        groundTruth_ = value;
      }
    }

    /// <summary>Field number for the "search_to_eval" field.</summary>
    public const int SearchToEvalFieldNumber = 2;
    private global::Clarifai.Api.Search searchToEval_;
    /// <summary>
    /// The set we are evaluating
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Search SearchToEval {
      get { return searchToEval_; }
      set {
        searchToEval_ = value;
      }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 3;
    private global::Clarifai.Api.EvalMetrics metrics_;
    /// <summary>
    /// The metric result
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.EvalMetrics Metrics {
      get { return metrics_; }
      set {
        metrics_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private global::Clarifai.Api.Data data_;
    /// <summary>
    /// data is filled out with the concepts used for this evaluation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "active_concept_count" field.</summary>
    public const int ActiveConceptCountFieldNumber = 5;
    private uint activeConceptCount_;
    /// <summary>
    /// active_concept_count is the number of concepts for this evaluation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveConceptCount {
      get { return activeConceptCount_; }
      set {
        activeConceptCount_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 6;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotationSearchMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotationSearchMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroundTruth, other.GroundTruth)) return false;
      if (!object.Equals(SearchToEval, other.SearchToEval)) return false;
      if (!object.Equals(Metrics, other.Metrics)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (ActiveConceptCount != other.ActiveConceptCount) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groundTruth_ != null) hash ^= GroundTruth.GetHashCode();
      if (searchToEval_ != null) hash ^= SearchToEval.GetHashCode();
      if (metrics_ != null) hash ^= Metrics.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (ActiveConceptCount != 0) hash ^= ActiveConceptCount.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groundTruth_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroundTruth);
      }
      if (searchToEval_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SearchToEval);
      }
      if (metrics_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metrics);
      }
      if (data_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Data);
      }
      if (ActiveConceptCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ActiveConceptCount);
      }
      if (visibility_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Visibility);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groundTruth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroundTruth);
      }
      if (searchToEval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchToEval);
      }
      if (metrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metrics);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (ActiveConceptCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveConceptCount);
      }
      if (visibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotationSearchMetrics other) {
      if (other == null) {
        return;
      }
      if (other.groundTruth_ != null) {
        if (groundTruth_ == null) {
          GroundTruth = new global::Clarifai.Api.Search();
        }
        GroundTruth.MergeFrom(other.GroundTruth);
      }
      if (other.searchToEval_ != null) {
        if (searchToEval_ == null) {
          SearchToEval = new global::Clarifai.Api.Search();
        }
        SearchToEval.MergeFrom(other.SearchToEval);
      }
      if (other.metrics_ != null) {
        if (metrics_ == null) {
          Metrics = new global::Clarifai.Api.EvalMetrics();
        }
        Metrics.MergeFrom(other.Metrics);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Clarifai.Api.Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.ActiveConceptCount != 0) {
        ActiveConceptCount = other.ActiveConceptCount;
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groundTruth_ == null) {
              GroundTruth = new global::Clarifai.Api.Search();
            }
            input.ReadMessage(GroundTruth);
            break;
          }
          case 18: {
            if (searchToEval_ == null) {
              SearchToEval = new global::Clarifai.Api.Search();
            }
            input.ReadMessage(SearchToEval);
            break;
          }
          case 26: {
            if (metrics_ == null) {
              Metrics = new global::Clarifai.Api.EvalMetrics();
            }
            input.ReadMessage(Metrics);
            break;
          }
          case 34: {
            if (data_ == null) {
              Data = new global::Clarifai.Api.Data();
            }
            input.ReadMessage(Data);
            break;
          }
          case 40: {
            ActiveConceptCount = input.ReadUInt32();
            break;
          }
          case 50: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/text.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Text : pb::IMessage<Text> {
    private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Text> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text(Text other) : this() {
      raw_ = other.raw_;
      url_ = other.url_;
      allowDuplicateUrl_ = other.allowDuplicateUrl_;
      hosted_ = other.hosted_ != null ? other.hosted_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text Clone() {
      return new Text(this);
    }

    /// <summary>Field number for the "raw" field.</summary>
    public const int RawFieldNumber = 1;
    private string raw_ = "";
    /// <summary>
    /// This is a raw text string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Raw {
      get { return raw_; }
      set {
        raw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 2;
    private string url_ = "";
    /// <summary>
    /// Url to a text file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_duplicate_url" field.</summary>
    public const int AllowDuplicateUrlFieldNumber = 3;
    private bool allowDuplicateUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowDuplicateUrl {
      get { return allowDuplicateUrl_; }
      set {
        allowDuplicateUrl_ = value;
      }
    }

    /// <summary>Field number for the "hosted" field.</summary>
    public const int HostedFieldNumber = 4;
    private global::Clarifai.Api.HostedURL hosted_;
    /// <summary>
    /// The hosted field lists original text hosted in Clarifai storage. This field is currently used
    /// only in response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.HostedURL Hosted {
      get { return hosted_; }
      set {
        hosted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Text);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Text other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Raw != other.Raw) return false;
      if (Url != other.Url) return false;
      if (AllowDuplicateUrl != other.AllowDuplicateUrl) return false;
      if (!object.Equals(Hosted, other.Hosted)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Raw.Length != 0) hash ^= Raw.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (AllowDuplicateUrl != false) hash ^= AllowDuplicateUrl.GetHashCode();
      if (hosted_ != null) hash ^= Hosted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Raw.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Raw);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      if (AllowDuplicateUrl != false) {
        output.WriteRawTag(24);
        output.WriteBool(AllowDuplicateUrl);
      }
      if (hosted_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Hosted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Raw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Raw);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (AllowDuplicateUrl != false) {
        size += 1 + 1;
      }
      if (hosted_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hosted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Text other) {
      if (other == null) {
        return;
      }
      if (other.Raw.Length != 0) {
        Raw = other.Raw;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.AllowDuplicateUrl != false) {
        AllowDuplicateUrl = other.AllowDuplicateUrl;
      }
      if (other.hosted_ != null) {
        if (hosted_ == null) {
          Hosted = new global::Clarifai.Api.HostedURL();
        }
        Hosted.MergeFrom(other.Hosted);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Raw = input.ReadString();
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 24: {
            AllowDuplicateUrl = input.ReadBool();
            break;
          }
          case 34: {
            if (hosted_ == null) {
              Hosted = new global::Clarifai.Api.HostedURL();
            }
            input.ReadMessage(Hosted);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/user.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      primaryEmail_ = other.primaryEmail_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      companyName_ = other.companyName_;
      jobTitle_ = other.jobTitle_;
      jobRole_ = other.jobRole_;
      billType_ = other.billType_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      dateGdprConsent_ = other.dateGdprConsent_ != null ? other.dateGdprConsent_.Clone() : null;
      dateTosConsent_ = other.dateTosConsent_ != null ? other.dateTosConsent_.Clone() : null;
      dateMarketingConsent_ = other.dateMarketingConsent_ != null ? other.dateMarketingConsent_.Clone() : null;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      emailAddresses_ = other.emailAddresses_.Clone();
      isOrgAdmin_ = other.isOrgAdmin_;
      twoFactorAuthEnabled_ = other.twoFactorAuthEnabled_;
      teamsCount_ = other.teamsCount_;
      isStarred_ = other.isStarred_;
      starCount_ = other.starCount_;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      userDetail_ = other.userDetail_ != null ? other.userDetail_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_email" field.</summary>
    public const int PrimaryEmailFieldNumber = 2;
    private string primaryEmail_ = "";
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrimaryEmail {
      get { return primaryEmail_; }
      set {
        primaryEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_name" field.</summary>
    public const int FirstNameFieldNumber = 3;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_name" field.</summary>
    public const int LastNameFieldNumber = 4;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "company_name" field.</summary>
    public const int CompanyNameFieldNumber = 5;
    private string companyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompanyName {
      get { return companyName_; }
      set {
        companyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "job_title" field.</summary>
    public const int JobTitleFieldNumber = 19;
    private string jobTitle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobTitle {
      get { return jobTitle_; }
      set {
        jobTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "job_role" field.</summary>
    public const int JobRoleFieldNumber = 20;
    private string jobRole_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobRole {
      get { return jobRole_; }
      set {
        jobRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bill_type" field.</summary>
    public const int BillTypeFieldNumber = 7;
    private string billType_ = "";
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BillType {
      get { return billType_; }
      set {
        billType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the user was created. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    /// the following from the API:
    /// "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "date_gdpr_consent" field.</summary>
    public const int DateGdprConsentFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp dateGdprConsent_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DateGdprConsent {
      get { return dateGdprConsent_; }
      set {
        dateGdprConsent_ = value;
      }
    }

    /// <summary>Field number for the "date_tos_consent" field.</summary>
    public const int DateTosConsentFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp dateTosConsent_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DateTosConsent {
      get { return dateTosConsent_; }
      set {
        dateTosConsent_ = value;
      }
    }

    /// <summary>Field number for the "date_marketing_consent" field.</summary>
    public const int DateMarketingConsentFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp dateMarketingConsent_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DateMarketingConsent {
      get { return dateMarketingConsent_; }
      set {
        dateMarketingConsent_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// To handle arbitrary json metadata you can use a struct field:
    /// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "email_addresses" field.</summary>
    public const int EmailAddressesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Clarifai.Api.EmailAddress> _repeated_emailAddresses_codec
        = pb::FieldCodec.ForMessage(98, global::Clarifai.Api.EmailAddress.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.EmailAddress> emailAddresses_ = new pbc::RepeatedField<global::Clarifai.Api.EmailAddress>();
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.EmailAddress> EmailAddresses {
      get { return emailAddresses_; }
    }

    /// <summary>Field number for the "is_org_admin" field.</summary>
    public const int IsOrgAdminFieldNumber = 14;
    private bool isOrgAdmin_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOrgAdmin {
      get { return isOrgAdmin_; }
      set {
        isOrgAdmin_ = value;
      }
    }

    /// <summary>Field number for the "two_factor_auth_enabled" field.</summary>
    public const int TwoFactorAuthEnabledFieldNumber = 15;
    private bool twoFactorAuthEnabled_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TwoFactorAuthEnabled {
      get { return twoFactorAuthEnabled_; }
      set {
        twoFactorAuthEnabled_ = value;
      }
    }

    /// <summary>Field number for the "teams_count" field.</summary>
    public const int TeamsCountFieldNumber = 16;
    private uint teamsCount_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamsCount {
      get { return teamsCount_; }
      set {
        teamsCount_ = value;
      }
    }

    /// <summary>Field number for the "is_starred" field.</summary>
    public const int IsStarredFieldNumber = 21;
    private bool isStarred_;
    /// <summary>
    /// Is starred by the requesting user (only showed on get/list requests)
    /// Please use PostUserStars/DeleteUserStars endpoints to star/unstar an user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStarred {
      get { return isStarred_; }
      set {
        isStarred_ = value;
      }
    }

    /// <summary>Field number for the "star_count" field.</summary>
    public const int StarCountFieldNumber = 22;
    private int starCount_;
    /// <summary>
    /// How many users have starred the user (only showed on get/list requests)
    /// Computed value, not editable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarCount {
      get { return starCount_; }
      set {
        starCount_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 17;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "user_detail" field.</summary>
    public const int UserDetailFieldNumber = 18;
    private global::Clarifai.Api.UserDetail userDetail_;
    /// <summary>
    /// This is all the personal information of a user. GetUser/ListUsers will not return this
    /// information unless the caller has the UserAccounts_Get scope on their key or is the user
    /// themselves.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.UserDetail UserDetail {
      get { return userDetail_; }
      set {
        userDetail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PrimaryEmail != other.PrimaryEmail) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (CompanyName != other.CompanyName) return false;
      if (JobTitle != other.JobTitle) return false;
      if (JobRole != other.JobRole) return false;
      if (BillType != other.BillType) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(DateGdprConsent, other.DateGdprConsent)) return false;
      if (!object.Equals(DateTosConsent, other.DateTosConsent)) return false;
      if (!object.Equals(DateMarketingConsent, other.DateMarketingConsent)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!emailAddresses_.Equals(other.emailAddresses_)) return false;
      if (IsOrgAdmin != other.IsOrgAdmin) return false;
      if (TwoFactorAuthEnabled != other.TwoFactorAuthEnabled) return false;
      if (TeamsCount != other.TeamsCount) return false;
      if (IsStarred != other.IsStarred) return false;
      if (StarCount != other.StarCount) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if (!object.Equals(UserDetail, other.UserDetail)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (PrimaryEmail.Length != 0) hash ^= PrimaryEmail.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (CompanyName.Length != 0) hash ^= CompanyName.GetHashCode();
      if (JobTitle.Length != 0) hash ^= JobTitle.GetHashCode();
      if (JobRole.Length != 0) hash ^= JobRole.GetHashCode();
      if (BillType.Length != 0) hash ^= BillType.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (dateGdprConsent_ != null) hash ^= DateGdprConsent.GetHashCode();
      if (dateTosConsent_ != null) hash ^= DateTosConsent.GetHashCode();
      if (dateMarketingConsent_ != null) hash ^= DateMarketingConsent.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= emailAddresses_.GetHashCode();
      if (IsOrgAdmin != false) hash ^= IsOrgAdmin.GetHashCode();
      if (TwoFactorAuthEnabled != false) hash ^= TwoFactorAuthEnabled.GetHashCode();
      if (TeamsCount != 0) hash ^= TeamsCount.GetHashCode();
      if (IsStarred != false) hash ^= IsStarred.GetHashCode();
      if (StarCount != 0) hash ^= StarCount.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (userDetail_ != null) hash ^= UserDetail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (PrimaryEmail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PrimaryEmail);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LastName);
      }
      if (CompanyName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CompanyName);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreatedAt);
      }
      if (BillType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BillType);
      }
      if (dateGdprConsent_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DateGdprConsent);
      }
      if (dateTosConsent_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(DateTosConsent);
      }
      if (dateMarketingConsent_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DateMarketingConsent);
      }
      if (metadata_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Metadata);
      }
      emailAddresses_.WriteTo(output, _repeated_emailAddresses_codec);
      if (IsOrgAdmin != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsOrgAdmin);
      }
      if (TwoFactorAuthEnabled != false) {
        output.WriteRawTag(120);
        output.WriteBool(TwoFactorAuthEnabled);
      }
      if (TeamsCount != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(TeamsCount);
      }
      if (visibility_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Visibility);
      }
      if (userDetail_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(UserDetail);
      }
      if (JobTitle.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(JobTitle);
      }
      if (JobRole.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(JobRole);
      }
      if (IsStarred != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsStarred);
      }
      if (StarCount != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(StarCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (PrimaryEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryEmail);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (CompanyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyName);
      }
      if (JobTitle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(JobTitle);
      }
      if (JobRole.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(JobRole);
      }
      if (BillType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BillType);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (dateGdprConsent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateGdprConsent);
      }
      if (dateTosConsent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateTosConsent);
      }
      if (dateMarketingConsent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateMarketingConsent);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += emailAddresses_.CalculateSize(_repeated_emailAddresses_codec);
      if (IsOrgAdmin != false) {
        size += 1 + 1;
      }
      if (TwoFactorAuthEnabled != false) {
        size += 1 + 1;
      }
      if (TeamsCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeamsCount);
      }
      if (IsStarred != false) {
        size += 2 + 1;
      }
      if (StarCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StarCount);
      }
      if (visibility_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (userDetail_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserDetail);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.PrimaryEmail.Length != 0) {
        PrimaryEmail = other.PrimaryEmail;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.CompanyName.Length != 0) {
        CompanyName = other.CompanyName;
      }
      if (other.JobTitle.Length != 0) {
        JobTitle = other.JobTitle;
      }
      if (other.JobRole.Length != 0) {
        JobRole = other.JobRole;
      }
      if (other.BillType.Length != 0) {
        BillType = other.BillType;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.dateGdprConsent_ != null) {
        if (dateGdprConsent_ == null) {
          DateGdprConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DateGdprConsent.MergeFrom(other.DateGdprConsent);
      }
      if (other.dateTosConsent_ != null) {
        if (dateTosConsent_ == null) {
          DateTosConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DateTosConsent.MergeFrom(other.DateTosConsent);
      }
      if (other.dateMarketingConsent_ != null) {
        if (dateMarketingConsent_ == null) {
          DateMarketingConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DateMarketingConsent.MergeFrom(other.DateMarketingConsent);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      emailAddresses_.Add(other.emailAddresses_);
      if (other.IsOrgAdmin != false) {
        IsOrgAdmin = other.IsOrgAdmin;
      }
      if (other.TwoFactorAuthEnabled != false) {
        TwoFactorAuthEnabled = other.TwoFactorAuthEnabled;
      }
      if (other.TeamsCount != 0) {
        TeamsCount = other.TeamsCount;
      }
      if (other.IsStarred != false) {
        IsStarred = other.IsStarred;
      }
      if (other.StarCount != 0) {
        StarCount = other.StarCount;
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      if (other.userDetail_ != null) {
        if (userDetail_ == null) {
          UserDetail = new global::Clarifai.Api.UserDetail();
        }
        UserDetail.MergeFrom(other.UserDetail);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            PrimaryEmail = input.ReadString();
            break;
          }
          case 26: {
            FirstName = input.ReadString();
            break;
          }
          case 34: {
            LastName = input.ReadString();
            break;
          }
          case 42: {
            CompanyName = input.ReadString();
            break;
          }
          case 50: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 58: {
            BillType = input.ReadString();
            break;
          }
          case 66: {
            if (dateGdprConsent_ == null) {
              DateGdprConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DateGdprConsent);
            break;
          }
          case 74: {
            if (dateTosConsent_ == null) {
              DateTosConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DateTosConsent);
            break;
          }
          case 82: {
            if (dateMarketingConsent_ == null) {
              DateMarketingConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DateMarketingConsent);
            break;
          }
          case 90: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 98: {
            emailAddresses_.AddEntriesFrom(input, _repeated_emailAddresses_codec);
            break;
          }
          case 112: {
            IsOrgAdmin = input.ReadBool();
            break;
          }
          case 120: {
            TwoFactorAuthEnabled = input.ReadBool();
            break;
          }
          case 128: {
            TeamsCount = input.ReadUInt32();
            break;
          }
          case 138: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 146: {
            if (userDetail_ == null) {
              UserDetail = new global::Clarifai.Api.UserDetail();
            }
            input.ReadMessage(UserDetail);
            break;
          }
          case 154: {
            JobTitle = input.ReadString();
            break;
          }
          case 162: {
            JobRole = input.ReadString();
            break;
          }
          case 168: {
            IsStarred = input.ReadBool();
            break;
          }
          case 176: {
            StarCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message holds the confidential information from the User object that we don't want to expose
  /// to other users. It will be accessible only from /users/{user_id}/account and with the User scopes.
  /// </summary>
  public sealed partial class UserDetail : pb::IMessage<UserDetail> {
    private static readonly pb::MessageParser<UserDetail> _parser = new pb::MessageParser<UserDetail>(() => new UserDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDetail(UserDetail other) : this() {
      primaryEmail_ = other.primaryEmail_;
      billType_ = other.billType_;
      dateGdprConsent_ = other.dateGdprConsent_ != null ? other.dateGdprConsent_.Clone() : null;
      dateTosConsent_ = other.dateTosConsent_ != null ? other.dateTosConsent_.Clone() : null;
      dateMarketingConsent_ = other.dateMarketingConsent_ != null ? other.dateMarketingConsent_.Clone() : null;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      emailAddresses_ = other.emailAddresses_.Clone();
      isOrgAdmin_ = other.isOrgAdmin_;
      twoFactorAuthEnabled_ = other.twoFactorAuthEnabled_;
      teamsCount_ = other.teamsCount_;
      country_ = other.country_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDetail Clone() {
      return new UserDetail(this);
    }

    /// <summary>Field number for the "primary_email" field.</summary>
    public const int PrimaryEmailFieldNumber = 1;
    private string primaryEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrimaryEmail {
      get { return primaryEmail_; }
      set {
        primaryEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bill_type" field.</summary>
    public const int BillTypeFieldNumber = 2;
    private string billType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BillType {
      get { return billType_; }
      set {
        billType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date_gdpr_consent" field.</summary>
    public const int DateGdprConsentFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp dateGdprConsent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DateGdprConsent {
      get { return dateGdprConsent_; }
      set {
        dateGdprConsent_ = value;
      }
    }

    /// <summary>Field number for the "date_tos_consent" field.</summary>
    public const int DateTosConsentFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp dateTosConsent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DateTosConsent {
      get { return dateTosConsent_; }
      set {
        dateTosConsent_ = value;
      }
    }

    /// <summary>Field number for the "date_marketing_consent" field.</summary>
    public const int DateMarketingConsentFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp dateMarketingConsent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DateMarketingConsent {
      get { return dateMarketingConsent_; }
      set {
        dateMarketingConsent_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// To handle arbitrary json metadata you can use a struct field:
    /// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "email_addresses" field.</summary>
    public const int EmailAddressesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Clarifai.Api.EmailAddress> _repeated_emailAddresses_codec
        = pb::FieldCodec.ForMessage(58, global::Clarifai.Api.EmailAddress.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.EmailAddress> emailAddresses_ = new pbc::RepeatedField<global::Clarifai.Api.EmailAddress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.EmailAddress> EmailAddresses {
      get { return emailAddresses_; }
    }

    /// <summary>Field number for the "is_org_admin" field.</summary>
    public const int IsOrgAdminFieldNumber = 8;
    private bool isOrgAdmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOrgAdmin {
      get { return isOrgAdmin_; }
      set {
        isOrgAdmin_ = value;
      }
    }

    /// <summary>Field number for the "two_factor_auth_enabled" field.</summary>
    public const int TwoFactorAuthEnabledFieldNumber = 9;
    private bool twoFactorAuthEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TwoFactorAuthEnabled {
      get { return twoFactorAuthEnabled_; }
      set {
        twoFactorAuthEnabled_ = value;
      }
    }

    /// <summary>Field number for the "teams_count" field.</summary>
    public const int TeamsCountFieldNumber = 10;
    private uint teamsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamsCount {
      get { return teamsCount_; }
      set {
        teamsCount_ = value;
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 11;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 12;
    private string state_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrimaryEmail != other.PrimaryEmail) return false;
      if (BillType != other.BillType) return false;
      if (!object.Equals(DateGdprConsent, other.DateGdprConsent)) return false;
      if (!object.Equals(DateTosConsent, other.DateTosConsent)) return false;
      if (!object.Equals(DateMarketingConsent, other.DateMarketingConsent)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!emailAddresses_.Equals(other.emailAddresses_)) return false;
      if (IsOrgAdmin != other.IsOrgAdmin) return false;
      if (TwoFactorAuthEnabled != other.TwoFactorAuthEnabled) return false;
      if (TeamsCount != other.TeamsCount) return false;
      if (Country != other.Country) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrimaryEmail.Length != 0) hash ^= PrimaryEmail.GetHashCode();
      if (BillType.Length != 0) hash ^= BillType.GetHashCode();
      if (dateGdprConsent_ != null) hash ^= DateGdprConsent.GetHashCode();
      if (dateTosConsent_ != null) hash ^= DateTosConsent.GetHashCode();
      if (dateMarketingConsent_ != null) hash ^= DateMarketingConsent.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= emailAddresses_.GetHashCode();
      if (IsOrgAdmin != false) hash ^= IsOrgAdmin.GetHashCode();
      if (TwoFactorAuthEnabled != false) hash ^= TwoFactorAuthEnabled.GetHashCode();
      if (TeamsCount != 0) hash ^= TeamsCount.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrimaryEmail.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PrimaryEmail);
      }
      if (BillType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BillType);
      }
      if (dateGdprConsent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DateGdprConsent);
      }
      if (dateTosConsent_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DateTosConsent);
      }
      if (dateMarketingConsent_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DateMarketingConsent);
      }
      if (metadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Metadata);
      }
      emailAddresses_.WriteTo(output, _repeated_emailAddresses_codec);
      if (IsOrgAdmin != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsOrgAdmin);
      }
      if (TwoFactorAuthEnabled != false) {
        output.WriteRawTag(72);
        output.WriteBool(TwoFactorAuthEnabled);
      }
      if (TeamsCount != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(TeamsCount);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Country);
      }
      if (State.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrimaryEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryEmail);
      }
      if (BillType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BillType);
      }
      if (dateGdprConsent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateGdprConsent);
      }
      if (dateTosConsent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateTosConsent);
      }
      if (dateMarketingConsent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateMarketingConsent);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += emailAddresses_.CalculateSize(_repeated_emailAddresses_codec);
      if (IsOrgAdmin != false) {
        size += 1 + 1;
      }
      if (TwoFactorAuthEnabled != false) {
        size += 1 + 1;
      }
      if (TeamsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamsCount);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserDetail other) {
      if (other == null) {
        return;
      }
      if (other.PrimaryEmail.Length != 0) {
        PrimaryEmail = other.PrimaryEmail;
      }
      if (other.BillType.Length != 0) {
        BillType = other.BillType;
      }
      if (other.dateGdprConsent_ != null) {
        if (dateGdprConsent_ == null) {
          DateGdprConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DateGdprConsent.MergeFrom(other.DateGdprConsent);
      }
      if (other.dateTosConsent_ != null) {
        if (dateTosConsent_ == null) {
          DateTosConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DateTosConsent.MergeFrom(other.DateTosConsent);
      }
      if (other.dateMarketingConsent_ != null) {
        if (dateMarketingConsent_ == null) {
          DateMarketingConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DateMarketingConsent.MergeFrom(other.DateMarketingConsent);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      emailAddresses_.Add(other.emailAddresses_);
      if (other.IsOrgAdmin != false) {
        IsOrgAdmin = other.IsOrgAdmin;
      }
      if (other.TwoFactorAuthEnabled != false) {
        TwoFactorAuthEnabled = other.TwoFactorAuthEnabled;
      }
      if (other.TeamsCount != 0) {
        TeamsCount = other.TeamsCount;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PrimaryEmail = input.ReadString();
            break;
          }
          case 18: {
            BillType = input.ReadString();
            break;
          }
          case 26: {
            if (dateGdprConsent_ == null) {
              DateGdprConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DateGdprConsent);
            break;
          }
          case 34: {
            if (dateTosConsent_ == null) {
              DateTosConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DateTosConsent);
            break;
          }
          case 42: {
            if (dateMarketingConsent_ == null) {
              DateMarketingConsent = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DateMarketingConsent);
            break;
          }
          case 50: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 58: {
            emailAddresses_.AddEntriesFrom(input, _repeated_emailAddresses_codec);
            break;
          }
          case 64: {
            IsOrgAdmin = input.ReadBool();
            break;
          }
          case 72: {
            TwoFactorAuthEnabled = input.ReadBool();
            break;
          }
          case 80: {
            TeamsCount = input.ReadUInt32();
            break;
          }
          case 90: {
            Country = input.ReadString();
            break;
          }
          case 98: {
            State = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmailAddress : pb::IMessage<EmailAddress> {
    private static readonly pb::MessageParser<EmailAddress> _parser = new pb::MessageParser<EmailAddress>(() => new EmailAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmailAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmailAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmailAddress(EmailAddress other) : this() {
      email_ = other.email_;
      primary_ = other.primary_;
      verified_ = other.verified_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmailAddress Clone() {
      return new EmailAddress(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary" field.</summary>
    public const int PrimaryFieldNumber = 2;
    private bool primary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Primary {
      get { return primary_; }
      set {
        primary_ = value;
      }
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 3;
    private bool verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmailAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmailAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (Primary != other.Primary) return false;
      if (Verified != other.Verified) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Primary != false) hash ^= Primary.GetHashCode();
      if (Verified != false) hash ^= Verified.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Primary != false) {
        output.WriteRawTag(16);
        output.WriteBool(Primary);
      }
      if (Verified != false) {
        output.WriteRawTag(24);
        output.WriteBool(Verified);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Primary != false) {
        size += 1 + 1;
      }
      if (Verified != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmailAddress other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Primary != false) {
        Primary = other.Primary;
      }
      if (other.Verified != false) {
        Verified = other.Verified;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 16: {
            Primary = input.ReadBool();
            break;
          }
          case 24: {
            Verified = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Password : pb::IMessage<Password> {
    private static readonly pb::MessageParser<Password> _parser = new pb::MessageParser<Password>(() => new Password());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Password> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Password() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Password(Password other) : this() {
      plaintext_ = other.plaintext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Password Clone() {
      return new Password(this);
    }

    /// <summary>Field number for the "plaintext" field.</summary>
    public const int PlaintextFieldNumber = 1;
    private string plaintext_ = "";
    /// <summary>
    /// TODO(lawrence): merge this with message UserPassword above
    /// unencrypted password string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Plaintext {
      get { return plaintext_; }
      set {
        plaintext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Password);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Password other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Plaintext != other.Plaintext) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Plaintext.Length != 0) hash ^= Plaintext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Plaintext.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Plaintext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Plaintext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Plaintext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Password other) {
      if (other == null) {
        return;
      }
      if (other.Plaintext.Length != 0) {
        Plaintext = other.Plaintext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Plaintext = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PasswordViolations : pb::IMessage<PasswordViolations> {
    private static readonly pb::MessageParser<PasswordViolations> _parser = new pb::MessageParser<PasswordViolations>(() => new PasswordViolations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PasswordViolations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasswordViolations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasswordViolations(PasswordViolations other) : this() {
      minimumLength_ = other.minimumLength_;
      maximumLength_ = other.maximumLength_;
      upperCaseNeeded_ = other.upperCaseNeeded_;
      lowerCaseNeeded_ = other.lowerCaseNeeded_;
      numericNeeded_ = other.numericNeeded_;
      nonAlphanumericNeeded_ = other.nonAlphanumericNeeded_;
      passwordReuse_ = other.passwordReuse_;
      excludeNames_ = other.excludeNames_;
      excludeEmail_ = other.excludeEmail_;
      noConfusingLetters_ = other.noConfusingLetters_;
      noSimplePasswords_ = other.noSimplePasswords_;
      noCommonVocabs_ = other.noCommonVocabs_;
      noOverlapWithOld_ = other.noOverlapWithOld_;
      passwordLifespan_ = other.passwordLifespan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasswordViolations Clone() {
      return new PasswordViolations(this);
    }

    /// <summary>Field number for the "minimum_length" field.</summary>
    public const int MinimumLengthFieldNumber = 1;
    private bool minimumLength_;
    /// <summary>
    /// when new password length is shorter than minimum length set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MinimumLength {
      get { return minimumLength_; }
      set {
        minimumLength_ = value;
      }
    }

    /// <summary>Field number for the "maximum_length" field.</summary>
    public const int MaximumLengthFieldNumber = 2;
    private bool maximumLength_;
    /// <summary>
    /// when new password length is longer than maximum length set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MaximumLength {
      get { return maximumLength_; }
      set {
        maximumLength_ = value;
      }
    }

    /// <summary>Field number for the "upper_case_needed" field.</summary>
    public const int UpperCaseNeededFieldNumber = 3;
    private bool upperCaseNeeded_;
    /// <summary>
    /// there is no upper case letter in the new password when there should be at least one
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpperCaseNeeded {
      get { return upperCaseNeeded_; }
      set {
        upperCaseNeeded_ = value;
      }
    }

    /// <summary>Field number for the "lower_case_needed" field.</summary>
    public const int LowerCaseNeededFieldNumber = 4;
    private bool lowerCaseNeeded_;
    /// <summary>
    /// there is no lower case letter in the new password when there should be at least one
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LowerCaseNeeded {
      get { return lowerCaseNeeded_; }
      set {
        lowerCaseNeeded_ = value;
      }
    }

    /// <summary>Field number for the "numeric_needed" field.</summary>
    public const int NumericNeededFieldNumber = 5;
    private bool numericNeeded_;
    /// <summary>
    /// there is no numerics in the new password when there should be at least one
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NumericNeeded {
      get { return numericNeeded_; }
      set {
        numericNeeded_ = value;
      }
    }

    /// <summary>Field number for the "non_alphanumeric_needed" field.</summary>
    public const int NonAlphanumericNeededFieldNumber = 6;
    private bool nonAlphanumericNeeded_;
    /// <summary>
    /// there is no special character in the new password when there should be at least one
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NonAlphanumericNeeded {
      get { return nonAlphanumericNeeded_; }
      set {
        nonAlphanumericNeeded_ = value;
      }
    }

    /// <summary>Field number for the "password_reuse" field.</summary>
    public const int PasswordReuseFieldNumber = 7;
    private bool passwordReuse_;
    /// <summary>
    /// when one of the N most recent old password is reused, N is specified by password_reuse_epoch in db.password_policies
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PasswordReuse {
      get { return passwordReuse_; }
      set {
        passwordReuse_ = value;
      }
    }

    /// <summary>Field number for the "exclude_names" field.</summary>
    public const int ExcludeNamesFieldNumber = 8;
    private bool excludeNames_;
    /// <summary>
    /// when either user's first, middle or last name is used in the new password
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExcludeNames {
      get { return excludeNames_; }
      set {
        excludeNames_ = value;
      }
    }

    /// <summary>Field number for the "exclude_email" field.</summary>
    public const int ExcludeEmailFieldNumber = 9;
    private bool excludeEmail_;
    /// <summary>
    /// when first part of user's email (exact string or after removing special characters) is used in the new password
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExcludeEmail {
      get { return excludeEmail_; }
      set {
        excludeEmail_ = value;
      }
    }

    /// <summary>Field number for the "no_confusing_letters" field.</summary>
    public const int NoConfusingLettersFieldNumber = 10;
    private bool noConfusingLetters_;
    /// <summary>
    /// when there are confusing letters in the new password, such as o (first character of 'omega') vs 0 (zero)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoConfusingLetters {
      get { return noConfusingLetters_; }
      set {
        noConfusingLetters_ = value;
      }
    }

    /// <summary>Field number for the "no_simple_passwords" field.</summary>
    public const int NoSimplePasswordsFieldNumber = 11;
    private bool noSimplePasswords_;
    /// <summary>
    /// when there are simple password patterns used, such as 12345678 or aaaaaaa1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoSimplePasswords {
      get { return noSimplePasswords_; }
      set {
        noSimplePasswords_ = value;
      }
    }

    /// <summary>Field number for the "no_common_vocabs" field.</summary>
    public const int NoCommonVocabsFieldNumber = 12;
    private bool noCommonVocabs_;
    /// <summary>
    /// when there are common vocabs from the common vocab list used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoCommonVocabs {
      get { return noCommonVocabs_; }
      set {
        noCommonVocabs_ = value;
      }
    }

    /// <summary>Field number for the "no_overlap_with_old" field.</summary>
    public const int NoOverlapWithOldFieldNumber = 13;
    private bool noOverlapWithOld_;
    /// <summary>
    /// when the current password is contained in the new password or vice versa
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoOverlapWithOld {
      get { return noOverlapWithOld_; }
      set {
        noOverlapWithOld_ = value;
      }
    }

    /// <summary>Field number for the "password_lifespan" field.</summary>
    public const int PasswordLifespanFieldNumber = 14;
    private bool passwordLifespan_;
    /// <summary>
    /// when password has to be changed becauase it's too old
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PasswordLifespan {
      get { return passwordLifespan_; }
      set {
        passwordLifespan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PasswordViolations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PasswordViolations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinimumLength != other.MinimumLength) return false;
      if (MaximumLength != other.MaximumLength) return false;
      if (UpperCaseNeeded != other.UpperCaseNeeded) return false;
      if (LowerCaseNeeded != other.LowerCaseNeeded) return false;
      if (NumericNeeded != other.NumericNeeded) return false;
      if (NonAlphanumericNeeded != other.NonAlphanumericNeeded) return false;
      if (PasswordReuse != other.PasswordReuse) return false;
      if (ExcludeNames != other.ExcludeNames) return false;
      if (ExcludeEmail != other.ExcludeEmail) return false;
      if (NoConfusingLetters != other.NoConfusingLetters) return false;
      if (NoSimplePasswords != other.NoSimplePasswords) return false;
      if (NoCommonVocabs != other.NoCommonVocabs) return false;
      if (NoOverlapWithOld != other.NoOverlapWithOld) return false;
      if (PasswordLifespan != other.PasswordLifespan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinimumLength != false) hash ^= MinimumLength.GetHashCode();
      if (MaximumLength != false) hash ^= MaximumLength.GetHashCode();
      if (UpperCaseNeeded != false) hash ^= UpperCaseNeeded.GetHashCode();
      if (LowerCaseNeeded != false) hash ^= LowerCaseNeeded.GetHashCode();
      if (NumericNeeded != false) hash ^= NumericNeeded.GetHashCode();
      if (NonAlphanumericNeeded != false) hash ^= NonAlphanumericNeeded.GetHashCode();
      if (PasswordReuse != false) hash ^= PasswordReuse.GetHashCode();
      if (ExcludeNames != false) hash ^= ExcludeNames.GetHashCode();
      if (ExcludeEmail != false) hash ^= ExcludeEmail.GetHashCode();
      if (NoConfusingLetters != false) hash ^= NoConfusingLetters.GetHashCode();
      if (NoSimplePasswords != false) hash ^= NoSimplePasswords.GetHashCode();
      if (NoCommonVocabs != false) hash ^= NoCommonVocabs.GetHashCode();
      if (NoOverlapWithOld != false) hash ^= NoOverlapWithOld.GetHashCode();
      if (PasswordLifespan != false) hash ^= PasswordLifespan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinimumLength != false) {
        output.WriteRawTag(8);
        output.WriteBool(MinimumLength);
      }
      if (MaximumLength != false) {
        output.WriteRawTag(16);
        output.WriteBool(MaximumLength);
      }
      if (UpperCaseNeeded != false) {
        output.WriteRawTag(24);
        output.WriteBool(UpperCaseNeeded);
      }
      if (LowerCaseNeeded != false) {
        output.WriteRawTag(32);
        output.WriteBool(LowerCaseNeeded);
      }
      if (NumericNeeded != false) {
        output.WriteRawTag(40);
        output.WriteBool(NumericNeeded);
      }
      if (NonAlphanumericNeeded != false) {
        output.WriteRawTag(48);
        output.WriteBool(NonAlphanumericNeeded);
      }
      if (PasswordReuse != false) {
        output.WriteRawTag(56);
        output.WriteBool(PasswordReuse);
      }
      if (ExcludeNames != false) {
        output.WriteRawTag(64);
        output.WriteBool(ExcludeNames);
      }
      if (ExcludeEmail != false) {
        output.WriteRawTag(72);
        output.WriteBool(ExcludeEmail);
      }
      if (NoConfusingLetters != false) {
        output.WriteRawTag(80);
        output.WriteBool(NoConfusingLetters);
      }
      if (NoSimplePasswords != false) {
        output.WriteRawTag(88);
        output.WriteBool(NoSimplePasswords);
      }
      if (NoCommonVocabs != false) {
        output.WriteRawTag(96);
        output.WriteBool(NoCommonVocabs);
      }
      if (NoOverlapWithOld != false) {
        output.WriteRawTag(104);
        output.WriteBool(NoOverlapWithOld);
      }
      if (PasswordLifespan != false) {
        output.WriteRawTag(112);
        output.WriteBool(PasswordLifespan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinimumLength != false) {
        size += 1 + 1;
      }
      if (MaximumLength != false) {
        size += 1 + 1;
      }
      if (UpperCaseNeeded != false) {
        size += 1 + 1;
      }
      if (LowerCaseNeeded != false) {
        size += 1 + 1;
      }
      if (NumericNeeded != false) {
        size += 1 + 1;
      }
      if (NonAlphanumericNeeded != false) {
        size += 1 + 1;
      }
      if (PasswordReuse != false) {
        size += 1 + 1;
      }
      if (ExcludeNames != false) {
        size += 1 + 1;
      }
      if (ExcludeEmail != false) {
        size += 1 + 1;
      }
      if (NoConfusingLetters != false) {
        size += 1 + 1;
      }
      if (NoSimplePasswords != false) {
        size += 1 + 1;
      }
      if (NoCommonVocabs != false) {
        size += 1 + 1;
      }
      if (NoOverlapWithOld != false) {
        size += 1 + 1;
      }
      if (PasswordLifespan != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PasswordViolations other) {
      if (other == null) {
        return;
      }
      if (other.MinimumLength != false) {
        MinimumLength = other.MinimumLength;
      }
      if (other.MaximumLength != false) {
        MaximumLength = other.MaximumLength;
      }
      if (other.UpperCaseNeeded != false) {
        UpperCaseNeeded = other.UpperCaseNeeded;
      }
      if (other.LowerCaseNeeded != false) {
        LowerCaseNeeded = other.LowerCaseNeeded;
      }
      if (other.NumericNeeded != false) {
        NumericNeeded = other.NumericNeeded;
      }
      if (other.NonAlphanumericNeeded != false) {
        NonAlphanumericNeeded = other.NonAlphanumericNeeded;
      }
      if (other.PasswordReuse != false) {
        PasswordReuse = other.PasswordReuse;
      }
      if (other.ExcludeNames != false) {
        ExcludeNames = other.ExcludeNames;
      }
      if (other.ExcludeEmail != false) {
        ExcludeEmail = other.ExcludeEmail;
      }
      if (other.NoConfusingLetters != false) {
        NoConfusingLetters = other.NoConfusingLetters;
      }
      if (other.NoSimplePasswords != false) {
        NoSimplePasswords = other.NoSimplePasswords;
      }
      if (other.NoCommonVocabs != false) {
        NoCommonVocabs = other.NoCommonVocabs;
      }
      if (other.NoOverlapWithOld != false) {
        NoOverlapWithOld = other.NoOverlapWithOld;
      }
      if (other.PasswordLifespan != false) {
        PasswordLifespan = other.PasswordLifespan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinimumLength = input.ReadBool();
            break;
          }
          case 16: {
            MaximumLength = input.ReadBool();
            break;
          }
          case 24: {
            UpperCaseNeeded = input.ReadBool();
            break;
          }
          case 32: {
            LowerCaseNeeded = input.ReadBool();
            break;
          }
          case 40: {
            NumericNeeded = input.ReadBool();
            break;
          }
          case 48: {
            NonAlphanumericNeeded = input.ReadBool();
            break;
          }
          case 56: {
            PasswordReuse = input.ReadBool();
            break;
          }
          case 64: {
            ExcludeNames = input.ReadBool();
            break;
          }
          case 72: {
            ExcludeEmail = input.ReadBool();
            break;
          }
          case 80: {
            NoConfusingLetters = input.ReadBool();
            break;
          }
          case 88: {
            NoSimplePasswords = input.ReadBool();
            break;
          }
          case 96: {
            NoCommonVocabs = input.ReadBool();
            break;
          }
          case 104: {
            NoOverlapWithOld = input.ReadBool();
            break;
          }
          case 112: {
            PasswordLifespan = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/video.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Video : pb::IMessage<Video> {
    private static readonly pb::MessageParser<Video> _parser = new pb::MessageParser<Video>(() => new Video());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Video> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Video() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Video(Video other) : this() {
      url_ = other.url_;
      base64_ = other.base64_;
      allowDuplicateUrl_ = other.allowDuplicateUrl_;
      thumbnailUrl_ = other.thumbnailUrl_;
      hosted_ = other.hosted_ != null ? other.hosted_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Video Clone() {
      return new Video(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    /// This is a URL to a publicly accessible video file. The platform will download this file server
    /// side and then process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base64" field.</summary>
    public const int Base64FieldNumber = 2;
    private pb::ByteString base64_ = pb::ByteString.Empty;
    /// <summary>
    /// The base64 field is using video file bytes directly in the request.
    /// NOTE: if you're sending a json request, then this MUST be base64 encoded before sending (hence
    /// the name here).
    /// When using our grpc clients, you DO NOT need to base64 encode
    /// it yourself since the clients know how to do this for you automatically and will avoid the
    /// base64 encoding if they send a binary request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Base64 {
      get { return base64_; }
      set {
        base64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_duplicate_url" field.</summary>
    public const int AllowDuplicateUrlFieldNumber = 4;
    private bool allowDuplicateUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowDuplicateUrl {
      get { return allowDuplicateUrl_; }
      set {
        allowDuplicateUrl_ = value;
      }
    }

    /// <summary>Field number for the "thumbnail_url" field.</summary>
    public const int ThumbnailUrlFieldNumber = 5;
    private string thumbnailUrl_ = "";
    /// <summary>
    /// URL of thumbnail image, which is currently frame at position of 1s. This field is currently
    /// used only in response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThumbnailUrl {
      get { return thumbnailUrl_; }
      set {
        thumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hosted" field.</summary>
    public const int HostedFieldNumber = 6;
    private global::Clarifai.Api.HostedURL hosted_;
    /// <summary>
    /// The hosted field lists original video hosted in Clarifai storage. This field is currently used
    /// only in response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.HostedURL Hosted {
      get { return hosted_; }
      set {
        hosted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Video);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Video other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (Base64 != other.Base64) return false;
      if (AllowDuplicateUrl != other.AllowDuplicateUrl) return false;
      if (ThumbnailUrl != other.ThumbnailUrl) return false;
      if (!object.Equals(Hosted, other.Hosted)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Base64.Length != 0) hash ^= Base64.GetHashCode();
      if (AllowDuplicateUrl != false) hash ^= AllowDuplicateUrl.GetHashCode();
      if (ThumbnailUrl.Length != 0) hash ^= ThumbnailUrl.GetHashCode();
      if (hosted_ != null) hash ^= Hosted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (Base64.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Base64);
      }
      if (AllowDuplicateUrl != false) {
        output.WriteRawTag(32);
        output.WriteBool(AllowDuplicateUrl);
      }
      if (ThumbnailUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ThumbnailUrl);
      }
      if (hosted_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Hosted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Base64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Base64);
      }
      if (AllowDuplicateUrl != false) {
        size += 1 + 1;
      }
      if (ThumbnailUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThumbnailUrl);
      }
      if (hosted_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hosted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Video other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Base64.Length != 0) {
        Base64 = other.Base64;
      }
      if (other.AllowDuplicateUrl != false) {
        AllowDuplicateUrl = other.AllowDuplicateUrl;
      }
      if (other.ThumbnailUrl.Length != 0) {
        ThumbnailUrl = other.ThumbnailUrl;
      }
      if (other.hosted_ != null) {
        if (hosted_ == null) {
          Hosted = new global::Clarifai.Api.HostedURL();
        }
        Hosted.MergeFrom(other.Hosted);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            Base64 = input.ReadBytes();
            break;
          }
          case 32: {
            AllowDuplicateUrl = input.ReadBool();
            break;
          }
          case 42: {
            ThumbnailUrl = input.ReadString();
            break;
          }
          case 50: {
            if (hosted_ == null) {
              Hosted = new global::Clarifai.Api.HostedURL();
            }
            input.ReadMessage(Hosted);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Messages from /proto/clarifai/api/workflow.proto
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class Workflow : pb::IMessage<Workflow> {
    private static readonly pb::MessageParser<Workflow> _parser = new pb::MessageParser<Workflow>(() => new Workflow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Workflow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Workflow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Workflow(Workflow other) : this() {
      id_ = other.id_;
      appId_ = other.appId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      nodes_ = other.nodes_.Clone();
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      userId_ = other.userId_;
      modifiedAt_ = other.modifiedAt_ != null ? other.modifiedAt_.Clone() : null;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      isStarred_ = other.isStarred_;
      starCount_ = other.starCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Workflow Clone() {
      return new Workflow(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The workflows's unique id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 2;
    private string appId_ = "";
    /// <summary>
    /// The app the workflow belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the workflow was created. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    /// the following from the API:
    /// "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Clarifai.Api.WorkflowNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(34, global::Clarifai.Api.WorkflowNode.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.WorkflowNode> nodes_ = new pbc::RepeatedField<global::Clarifai.Api.WorkflowNode>();
    /// <summary>
    /// The list of nodes retrieved from latest workflow version.
    /// Each node can specify an input node that it connects to in order to define the graph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.WorkflowNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// To handle arbitrary json metadata you can use a struct field:
    /// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 6;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 7;
    private string userId_ = "";
    /// <summary>
    /// The user the workflow belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modified_at" field.</summary>
    public const int ModifiedAtFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedAt_;
    /// <summary>
    /// When the workflow was last modified
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedAt {
      get { return modifiedAt_; }
      set {
        modifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 9;
    private global::Clarifai.Api.WorkflowVersion version_;
    /// <summary>
    /// Info about the workflow version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.WorkflowVersion Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "is_starred" field.</summary>
    public const int IsStarredFieldNumber = 10;
    private bool isStarred_;
    /// <summary>
    /// Is starred by the requesting user (only showed on get/list requests)
    /// Please use PostWorkflowStars/DeleteWorkflowStars endpoints to star/unstar a workflow
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStarred {
      get { return isStarred_; }
      set {
        isStarred_ = value;
      }
    }

    /// <summary>Field number for the "star_count" field.</summary>
    public const int StarCountFieldNumber = 11;
    private int starCount_;
    /// <summary>
    /// How many users have starred the workflow (only showed on get/list requests)
    /// Computed value, not editable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarCount {
      get { return starCount_; }
      set {
        starCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Workflow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Workflow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AppId != other.AppId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if (UserId != other.UserId) return false;
      if (!object.Equals(ModifiedAt, other.ModifiedAt)) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (IsStarred != other.IsStarred) return false;
      if (StarCount != other.StarCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      hash ^= nodes_.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (modifiedAt_ != null) hash ^= ModifiedAt.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (IsStarred != false) hash ^= IsStarred.GetHashCode();
      if (StarCount != 0) hash ^= StarCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (metadata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Metadata);
      }
      if (visibility_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Visibility);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserId);
      }
      if (modifiedAt_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ModifiedAt);
      }
      if (version_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Version);
      }
      if (IsStarred != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsStarred);
      }
      if (StarCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(StarCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (visibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (modifiedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifiedAt);
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (IsStarred != false) {
        size += 1 + 1;
      }
      if (StarCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Workflow other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      nodes_.Add(other.nodes_);
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.modifiedAt_ != null) {
        if (modifiedAt_ == null) {
          ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedAt.MergeFrom(other.ModifiedAt);
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::Clarifai.Api.WorkflowVersion();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.IsStarred != false) {
        IsStarred = other.IsStarred;
      }
      if (other.StarCount != 0) {
        StarCount = other.StarCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            AppId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 42: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 50: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 58: {
            UserId = input.ReadString();
            break;
          }
          case 66: {
            if (modifiedAt_ == null) {
              ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedAt);
            break;
          }
          case 74: {
            if (version_ == null) {
              Version = new global::Clarifai.Api.WorkflowVersion();
            }
            input.ReadMessage(Version);
            break;
          }
          case 80: {
            IsStarred = input.ReadBool();
            break;
          }
          case 88: {
            StarCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkflowVersion : pb::IMessage<WorkflowVersion> {
    private static readonly pb::MessageParser<WorkflowVersion> _parser = new pb::MessageParser<WorkflowVersion>(() => new WorkflowVersion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkflowVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowVersion(WorkflowVersion other) : this() {
      id_ = other.id_;
      workflowId_ = other.workflowId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      modifiedAt_ = other.modifiedAt_ != null ? other.modifiedAt_.Clone() : null;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      nodes_ = other.nodes_.Clone();
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      appId_ = other.appId_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowVersion Clone() {
      return new WorkflowVersion(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Id of this version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "workflow_id" field.</summary>
    public const int WorkflowIdFieldNumber = 2;
    private string workflowId_ = "";
    /// <summary>
    /// Workflow id for this version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkflowId {
      get { return workflowId_; }
      set {
        workflowId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the version was created.
    /// The format is https://www.ietf.org/rfc/rfc3339.txt.
    /// Example: "2006-01-02T15:04:05.999999Z".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "modified_at" field.</summary>
    public const int ModifiedAtFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedAt_;
    /// <summary>
    /// Most recent time when the version was updated.
    /// The format is https://www.ietf.org/rfc/rfc3339.txt.
    /// Example: "2006-01-02T15:04:05.999999Z".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedAt {
      get { return modifiedAt_; }
      set {
        modifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 5;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Clarifai.Api.WorkflowNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(50, global::Clarifai.Api.WorkflowNode.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.WorkflowNode> nodes_ = new pbc::RepeatedField<global::Clarifai.Api.WorkflowNode>();
    /// <summary>
    /// The list of nodes that make up the workflow version. Each node can specify an input node
    /// that it connects to in order to define the graph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.WorkflowNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// To handle arbitrary json metadata you can use a struct field:
    /// https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 8;
    private string appId_ = "";
    /// <summary>
    /// The app the workflow version belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 9;
    private string userId_ = "";
    /// <summary>
    /// The user the workflow version belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkflowVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkflowVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (WorkflowId != other.WorkflowId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(ModifiedAt, other.ModifiedAt)) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (AppId != other.AppId) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (WorkflowId.Length != 0) hash ^= WorkflowId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (modifiedAt_ != null) hash ^= ModifiedAt.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      hash ^= nodes_.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (WorkflowId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WorkflowId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (modifiedAt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ModifiedAt);
      }
      if (visibility_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Visibility);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (metadata_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Metadata);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AppId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (WorkflowId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkflowId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (modifiedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifiedAt);
      }
      if (visibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkflowVersion other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.WorkflowId.Length != 0) {
        WorkflowId = other.WorkflowId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.modifiedAt_ != null) {
        if (modifiedAt_ == null) {
          ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedAt.MergeFrom(other.ModifiedAt);
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      nodes_.Add(other.nodes_);
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            WorkflowId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            if (modifiedAt_ == null) {
              ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedAt);
            break;
          }
          case 42: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 50: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 58: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 66: {
            AppId = input.ReadString();
            break;
          }
          case 74: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkflowNode : pb::IMessage<WorkflowNode> {
    private static readonly pb::MessageParser<WorkflowNode> _parser = new pb::MessageParser<WorkflowNode>(() => new WorkflowNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkflowNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowNode(WorkflowNode other) : this() {
      id_ = other.id_;
      model_ = other.model_ != null ? other.model_.Clone() : null;
      nodeInputs_ = other.nodeInputs_.Clone();
      suppressOutput_ = other.suppressOutput_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowNode Clone() {
      return new WorkflowNode(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// An identifier for this node in the graph. This is used when connecting NodeInputs
    /// together.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 2;
    private global::Clarifai.Api.Model model_;
    /// <summary>
    /// The model that will do the processing at this node. We only vlidate the model.id and
    /// model.model_version.id fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Model Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "node_inputs" field.</summary>
    public const int NodeInputsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Clarifai.Api.NodeInput> _repeated_nodeInputs_codec
        = pb::FieldCodec.ForMessage(26, global::Clarifai.Api.NodeInput.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.NodeInput> nodeInputs_ = new pbc::RepeatedField<global::Clarifai.Api.NodeInput>();
    /// <summary>
    /// Each WorkflowNode can connect to multiple input nodes so that we can handle multi-model data
    /// and more complex workflow operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.NodeInput> NodeInputs {
      get { return nodeInputs_; }
    }

    /// <summary>Field number for the "suppress_output" field.</summary>
    public const int SuppressOutputFieldNumber = 4;
    private bool suppressOutput_;
    /// <summary>
    /// suppress the output for workflow prediction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SuppressOutput {
      get { return suppressOutput_; }
      set {
        suppressOutput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkflowNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkflowNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Model, other.Model)) return false;
      if(!nodeInputs_.Equals(other.nodeInputs_)) return false;
      if (SuppressOutput != other.SuppressOutput) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (model_ != null) hash ^= Model.GetHashCode();
      hash ^= nodeInputs_.GetHashCode();
      if (SuppressOutput != false) hash ^= SuppressOutput.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (model_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Model);
      }
      nodeInputs_.WriteTo(output, _repeated_nodeInputs_codec);
      if (SuppressOutput != false) {
        output.WriteRawTag(32);
        output.WriteBool(SuppressOutput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (model_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Model);
      }
      size += nodeInputs_.CalculateSize(_repeated_nodeInputs_codec);
      if (SuppressOutput != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkflowNode other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.model_ != null) {
        if (model_ == null) {
          Model = new global::Clarifai.Api.Model();
        }
        Model.MergeFrom(other.Model);
      }
      nodeInputs_.Add(other.nodeInputs_);
      if (other.SuppressOutput != false) {
        SuppressOutput = other.SuppressOutput;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (model_ == null) {
              Model = new global::Clarifai.Api.Model();
            }
            input.ReadMessage(Model);
            break;
          }
          case 26: {
            nodeInputs_.AddEntriesFrom(input, _repeated_nodeInputs_codec);
            break;
          }
          case 32: {
            SuppressOutput = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// NodeInput represents inputs to a node of the graph.
  /// </summary>
  public sealed partial class NodeInput : pb::IMessage<NodeInput> {
    private static readonly pb::MessageParser<NodeInput> _parser = new pb::MessageParser<NodeInput>(() => new NodeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInput(NodeInput other) : this() {
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInput Clone() {
      return new NodeInput(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    /// <summary>
    /// The id to a connected WorkflowNode which will be used as an input for current WorkflowNode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInput other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkflowResult : pb::IMessage<WorkflowResult> {
    private static readonly pb::MessageParser<WorkflowResult> _parser = new pb::MessageParser<WorkflowResult>(() => new WorkflowResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkflowResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowResult(WorkflowResult other) : this() {
      id_ = other.id_;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      model_ = other.model_ != null ? other.model_.Clone() : null;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      outputs_ = other.outputs_.Clone();
      suppressOutput_ = other.suppressOutput_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowResult Clone() {
      return new WorkflowResult(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Clarifai.Api.Status.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the object was created. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    /// the following from the API:
    /// "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 4;
    private global::Clarifai.Api.Model model_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Model Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 5;
    private global::Clarifai.Api.Input input_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Input Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Clarifai.Api.Output> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(50, global::Clarifai.Api.Output.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.Output> outputs_ = new pbc::RepeatedField<global::Clarifai.Api.Output>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.Output> Outputs {
      get { return outputs_; }
    }

    /// <summary>Field number for the "suppress_output" field.</summary>
    public const int SuppressOutputFieldNumber = 7;
    private bool suppressOutput_;
    /// <summary>
    /// Indicate if the output of this model is suppressed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SuppressOutput {
      get { return suppressOutput_; }
      set {
        suppressOutput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkflowResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkflowResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(Model, other.Model)) return false;
      if (!object.Equals(Input, other.Input)) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      if (SuppressOutput != other.SuppressOutput) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (model_ != null) hash ^= Model.GetHashCode();
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= outputs_.GetHashCode();
      if (SuppressOutput != false) hash ^= SuppressOutput.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (status_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Status);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (model_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Model);
      }
      if (input_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Input);
      }
      outputs_.WriteTo(output, _repeated_outputs_codec);
      if (SuppressOutput != false) {
        output.WriteRawTag(56);
        output.WriteBool(SuppressOutput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (model_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Model);
      }
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      if (SuppressOutput != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkflowResult other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Clarifai.Api.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.model_ != null) {
        if (model_ == null) {
          Model = new global::Clarifai.Api.Model();
        }
        Model.MergeFrom(other.Model);
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Clarifai.Api.Input();
        }
        Input.MergeFrom(other.Input);
      }
      outputs_.Add(other.outputs_);
      if (other.SuppressOutput != false) {
        SuppressOutput = other.SuppressOutput;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (status_ == null) {
              Status = new global::Clarifai.Api.Status.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            if (model_ == null) {
              Model = new global::Clarifai.Api.Model();
            }
            input.ReadMessage(Model);
            break;
          }
          case 42: {
            if (input_ == null) {
              Input = new global::Clarifai.Api.Input();
            }
            input.ReadMessage(Input);
            break;
          }
          case 50: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
          case 56: {
            SuppressOutput = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkflowState : pb::IMessage<WorkflowState> {
    private static readonly pb::MessageParser<WorkflowState> _parser = new pb::MessageParser<WorkflowState>(() => new WorkflowState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkflowState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowState(WorkflowState other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowState Clone() {
      return new WorkflowState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A unique ID for the workflow state.
    /// To start saving a state in a PostWorkflowResults request set this ID to "init"
    /// and it will return a newly generated unique state id that you can then pass in subsequent
    /// PostWorkflowResults calls. These state expire after 5 minutes between calls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkflowState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkflowState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkflowState other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppDuplication : pb::IMessage<AppDuplication> {
    private static readonly pb::MessageParser<AppDuplication> _parser = new pb::MessageParser<AppDuplication>(() => new AppDuplication());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppDuplication> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppDuplication() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppDuplication(AppDuplication other) : this() {
      id_ = other.id_;
      newAppId_ = other.newAppId_;
      newAppName_ = other.newAppName_;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      lastModifiedAt_ = other.lastModifiedAt_ != null ? other.lastModifiedAt_.Clone() : null;
      filter_ = other.filter_ != null ? other.filter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppDuplication Clone() {
      return new AppDuplication(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///the id of app duplication
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_app_id" field.</summary>
    public const int NewAppIdFieldNumber = 2;
    private string newAppId_ = "";
    /// <summary>
    ///the id of new app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewAppId {
      get { return newAppId_; }
      set {
        newAppId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_app_name" field.</summary>
    public const int NewAppNameFieldNumber = 3;
    private string newAppName_ = "";
    /// <summary>
    ///the name of new app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewAppName {
      get { return newAppName_; }
      set {
        newAppName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Clarifai.Api.Status.Status status_;
    /// <summary>
    ///the status of app duplication
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    ///when is the app duplication triggered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "last_modified_at" field.</summary>
    public const int LastModifiedAtFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastModifiedAt_;
    /// <summary>
    ///The last time when is the status got updated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastModifiedAt {
      get { return lastModifiedAt_; }
      set {
        lastModifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 7;
    private global::Clarifai.Api.AppDuplicationFilters filter_;
    /// <summary>
    /// Only copy resources depending on the filters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.AppDuplicationFilters Filter {
      get { return filter_; }
      set {
        filter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppDuplication);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppDuplication other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NewAppId != other.NewAppId) return false;
      if (NewAppName != other.NewAppName) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(LastModifiedAt, other.LastModifiedAt)) return false;
      if (!object.Equals(Filter, other.Filter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (NewAppId.Length != 0) hash ^= NewAppId.GetHashCode();
      if (NewAppName.Length != 0) hash ^= NewAppName.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (lastModifiedAt_ != null) hash ^= LastModifiedAt.GetHashCode();
      if (filter_ != null) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (NewAppId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NewAppId);
      }
      if (NewAppName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NewAppName);
      }
      if (status_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Status);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CreatedAt);
      }
      if (lastModifiedAt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LastModifiedAt);
      }
      if (filter_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (NewAppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewAppId);
      }
      if (NewAppName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewAppName);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (lastModifiedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastModifiedAt);
      }
      if (filter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppDuplication other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.NewAppId.Length != 0) {
        NewAppId = other.NewAppId;
      }
      if (other.NewAppName.Length != 0) {
        NewAppName = other.NewAppName;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Clarifai.Api.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.lastModifiedAt_ != null) {
        if (lastModifiedAt_ == null) {
          LastModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastModifiedAt.MergeFrom(other.LastModifiedAt);
      }
      if (other.filter_ != null) {
        if (filter_ == null) {
          Filter = new global::Clarifai.Api.AppDuplicationFilters();
        }
        Filter.MergeFrom(other.Filter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            NewAppId = input.ReadString();
            break;
          }
          case 26: {
            NewAppName = input.ReadString();
            break;
          }
          case 34: {
            if (status_ == null) {
              Status = new global::Clarifai.Api.Status.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 42: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 50: {
            if (lastModifiedAt_ == null) {
              LastModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastModifiedAt);
            break;
          }
          case 58: {
            if (filter_ == null) {
              Filter = new global::Clarifai.Api.AppDuplicationFilters();
            }
            input.ReadMessage(Filter);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppDuplicationFilters : pb::IMessage<AppDuplicationFilters> {
    private static readonly pb::MessageParser<AppDuplicationFilters> _parser = new pb::MessageParser<AppDuplicationFilters>(() => new AppDuplicationFilters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppDuplicationFilters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppDuplicationFilters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppDuplicationFilters(AppDuplicationFilters other) : this() {
      copyInputs_ = other.copyInputs_;
      copyConcepts_ = other.copyConcepts_;
      copyAnnotations_ = other.copyAnnotations_;
      copyModels_ = other.copyModels_;
      copyWorkflows_ = other.copyWorkflows_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppDuplicationFilters Clone() {
      return new AppDuplicationFilters(this);
    }

    /// <summary>Field number for the "copy_inputs" field.</summary>
    public const int CopyInputsFieldNumber = 1;
    private bool copyInputs_;
    /// <summary>
    /// Copy only inputs and default annotations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CopyInputs {
      get { return copyInputs_; }
      set {
        copyInputs_ = value;
      }
    }

    /// <summary>Field number for the "copy_concepts" field.</summary>
    public const int CopyConceptsFieldNumber = 2;
    private bool copyConcepts_;
    /// <summary>
    /// Copy only concepts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CopyConcepts {
      get { return copyConcepts_; }
      set {
        copyConcepts_ = value;
      }
    }

    /// <summary>Field number for the "copy_annotations" field.</summary>
    public const int CopyAnnotationsFieldNumber = 3;
    private bool copyAnnotations_;
    /// <summary>
    /// Copy annotations and what it depends on: inputs and concepts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CopyAnnotations {
      get { return copyAnnotations_; }
      set {
        copyAnnotations_ = value;
      }
    }

    /// <summary>Field number for the "copy_models" field.</summary>
    public const int CopyModelsFieldNumber = 4;
    private bool copyModels_;
    /// <summary>
    /// Copy models and what it depends on: concepts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CopyModels {
      get { return copyModels_; }
      set {
        copyModels_ = value;
      }
    }

    /// <summary>Field number for the "copy_workflows" field.</summary>
    public const int CopyWorkflowsFieldNumber = 5;
    private bool copyWorkflows_;
    /// <summary>
    /// Copy workflows and what it depends on: models and concepts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CopyWorkflows {
      get { return copyWorkflows_; }
      set {
        copyWorkflows_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppDuplicationFilters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppDuplicationFilters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CopyInputs != other.CopyInputs) return false;
      if (CopyConcepts != other.CopyConcepts) return false;
      if (CopyAnnotations != other.CopyAnnotations) return false;
      if (CopyModels != other.CopyModels) return false;
      if (CopyWorkflows != other.CopyWorkflows) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CopyInputs != false) hash ^= CopyInputs.GetHashCode();
      if (CopyConcepts != false) hash ^= CopyConcepts.GetHashCode();
      if (CopyAnnotations != false) hash ^= CopyAnnotations.GetHashCode();
      if (CopyModels != false) hash ^= CopyModels.GetHashCode();
      if (CopyWorkflows != false) hash ^= CopyWorkflows.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CopyInputs != false) {
        output.WriteRawTag(8);
        output.WriteBool(CopyInputs);
      }
      if (CopyConcepts != false) {
        output.WriteRawTag(16);
        output.WriteBool(CopyConcepts);
      }
      if (CopyAnnotations != false) {
        output.WriteRawTag(24);
        output.WriteBool(CopyAnnotations);
      }
      if (CopyModels != false) {
        output.WriteRawTag(32);
        output.WriteBool(CopyModels);
      }
      if (CopyWorkflows != false) {
        output.WriteRawTag(40);
        output.WriteBool(CopyWorkflows);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CopyInputs != false) {
        size += 1 + 1;
      }
      if (CopyConcepts != false) {
        size += 1 + 1;
      }
      if (CopyAnnotations != false) {
        size += 1 + 1;
      }
      if (CopyModels != false) {
        size += 1 + 1;
      }
      if (CopyWorkflows != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppDuplicationFilters other) {
      if (other == null) {
        return;
      }
      if (other.CopyInputs != false) {
        CopyInputs = other.CopyInputs;
      }
      if (other.CopyConcepts != false) {
        CopyConcepts = other.CopyConcepts;
      }
      if (other.CopyAnnotations != false) {
        CopyAnnotations = other.CopyAnnotations;
      }
      if (other.CopyModels != false) {
        CopyModels = other.CopyModels;
      }
      if (other.CopyWorkflows != false) {
        CopyWorkflows = other.CopyWorkflows;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CopyInputs = input.ReadBool();
            break;
          }
          case 16: {
            CopyConcepts = input.ReadBool();
            break;
          }
          case 24: {
            CopyAnnotations = input.ReadBool();
            break;
          }
          case 32: {
            CopyModels = input.ReadBool();
            break;
          }
          case 40: {
            CopyWorkflows = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Task is the work that needs to be done for labeling the inputs in an app.
  /// </summary>
  public sealed partial class Task : pb::IMessage<Task> {
    private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task(Task other) : this() {
      id_ = other.id_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      modifiedAt_ = other.modifiedAt_ != null ? other.modifiedAt_.Clone() : null;
      type_ = other.type_;
      description_ = other.description_;
      worker_ = other.worker_ != null ? other.worker_.Clone() : null;
      conceptIds_ = other.conceptIds_.Clone();
      inputSource_ = other.inputSource_ != null ? other.inputSource_.Clone() : null;
      sampleMs_ = other.sampleMs_;
      aiAssistant_ = other.aiAssistant_ != null ? other.aiAssistant_.Clone() : null;
      review_ = other.review_ != null ? other.review_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      name_ = other.name_;
      aiAssistParams_ = other.aiAssistParams_ != null ? other.aiAssistParams_.Clone() : null;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      appId_ = other.appId_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task Clone() {
      return new Task(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Unique ID for the task.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the task was created.
    /// The format is https://www.ietf.org/rfc/rfc3339.txt.
    /// Example: "2006-01-02T15:04:05.999999Z".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "modified_at" field.</summary>
    public const int ModifiedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedAt_;
    /// <summary>
    /// Most recent time when the task was updated.
    /// The format is https://www.ietf.org/rfc/rfc3339.txt.
    /// Example: "2006-01-02T15:04:05.999999Z".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedAt {
      get { return modifiedAt_; }
      set {
        modifiedAt_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Clarifai.Api.Task.Types.TaskType type_ = global::Clarifai.Api.Task.Types.TaskType.TypeNotSet;
    /// <summary>
    /// Task type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Task.Types.TaskType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Description of the task.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "worker" field.</summary>
    public const int WorkerFieldNumber = 6;
    private global::Clarifai.Api.TaskWorker worker_;
    /// <summary>
    /// Worker details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskWorker Worker {
      get { return worker_; }
      set {
        worker_ = value;
      }
    }

    /// <summary>Field number for the "concept_ids" field.</summary>
    public const int ConceptIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_conceptIds_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> conceptIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of concept ids used in the work of this task if label type is classification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ConceptIds {
      get { return conceptIds_; }
    }

    /// <summary>Field number for the "input_source" field.</summary>
    public const int InputSourceFieldNumber = 8;
    private global::Clarifai.Api.TaskInputSource inputSource_;
    /// <summary>
    /// List of inputs used in this task will be taken from this source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskInputSource InputSource {
      get { return inputSource_; }
      set {
        inputSource_ = value;
      }
    }

    /// <summary>Field number for the "sample_ms" field.</summary>
    public const int SampleMsFieldNumber = 9;
    private uint sampleMs_;
    /// <summary>
    /// For model predictions on video: Sample delay for video predicting (1 frame per N milliseconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SampleMs {
      get { return sampleMs_; }
      set {
        sampleMs_ = value;
      }
    }

    /// <summary>Field number for the "ai_assistant" field.</summary>
    public const int AiAssistantFieldNumber = 10;
    private global::Clarifai.Api.TaskAIAssistant aiAssistant_;
    /// <summary>
    /// AI assistant details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskAIAssistant AiAssistant {
      get { return aiAssistant_; }
      set {
        aiAssistant_ = value;
      }
    }

    /// <summary>Field number for the "review" field.</summary>
    public const int ReviewFieldNumber = 11;
    private global::Clarifai.Api.TaskReview review_;
    /// <summary>
    /// Review details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskReview Review {
      get { return review_; }
      set {
        review_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 12;
    private global::Clarifai.Api.Status.Status status_;
    /// <summary>
    /// Status of this task.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 13;
    private string name_ = "";
    /// <summary>
    /// Add a title for this task to quickly recognise it in a list of tasks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ai_assist_params" field.</summary>
    public const int AiAssistParamsFieldNumber = 14;
    private global::Clarifai.Api.AiAssistParameters aiAssistParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.AiAssistParameters AiAssistParams {
      get { return aiAssistParams_; }
      set {
        aiAssistParams_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 15;
    private global::Clarifai.Api.Visibility visibility_;
    /// <summary>
    /// The visibility field represents whether this message is privately/publicly visible.
    /// To be visible to the public the App that contains it AND the User that contains the App must
    /// also be publicly visible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 16;
    private string appId_ = "";
    /// <summary>
    /// The app the task belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 17;
    private string userId_ = "";
    /// <summary>
    /// The user the task belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(ModifiedAt, other.ModifiedAt)) return false;
      if (Type != other.Type) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Worker, other.Worker)) return false;
      if(!conceptIds_.Equals(other.conceptIds_)) return false;
      if (!object.Equals(InputSource, other.InputSource)) return false;
      if (SampleMs != other.SampleMs) return false;
      if (!object.Equals(AiAssistant, other.AiAssistant)) return false;
      if (!object.Equals(Review, other.Review)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(AiAssistParams, other.AiAssistParams)) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if (AppId != other.AppId) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (modifiedAt_ != null) hash ^= ModifiedAt.GetHashCode();
      if (Type != global::Clarifai.Api.Task.Types.TaskType.TypeNotSet) hash ^= Type.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (worker_ != null) hash ^= Worker.GetHashCode();
      hash ^= conceptIds_.GetHashCode();
      if (inputSource_ != null) hash ^= InputSource.GetHashCode();
      if (SampleMs != 0) hash ^= SampleMs.GetHashCode();
      if (aiAssistant_ != null) hash ^= AiAssistant.GetHashCode();
      if (review_ != null) hash ^= Review.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (aiAssistParams_ != null) hash ^= AiAssistParams.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreatedAt);
      }
      if (modifiedAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ModifiedAt);
      }
      if (Type != global::Clarifai.Api.Task.Types.TaskType.TypeNotSet) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (worker_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Worker);
      }
      conceptIds_.WriteTo(output, _repeated_conceptIds_codec);
      if (inputSource_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(InputSource);
      }
      if (SampleMs != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SampleMs);
      }
      if (aiAssistant_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AiAssistant);
      }
      if (review_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Review);
      }
      if (status_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Status);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (aiAssistParams_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(AiAssistParams);
      }
      if (visibility_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Visibility);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AppId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (modifiedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifiedAt);
      }
      if (Type != global::Clarifai.Api.Task.Types.TaskType.TypeNotSet) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (worker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worker);
      }
      size += conceptIds_.CalculateSize(_repeated_conceptIds_codec);
      if (inputSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputSource);
      }
      if (SampleMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SampleMs);
      }
      if (aiAssistant_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AiAssistant);
      }
      if (review_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Review);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (aiAssistParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AiAssistParams);
      }
      if (visibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (AppId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (UserId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.modifiedAt_ != null) {
        if (modifiedAt_ == null) {
          ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedAt.MergeFrom(other.ModifiedAt);
      }
      if (other.Type != global::Clarifai.Api.Task.Types.TaskType.TypeNotSet) {
        Type = other.Type;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.worker_ != null) {
        if (worker_ == null) {
          Worker = new global::Clarifai.Api.TaskWorker();
        }
        Worker.MergeFrom(other.Worker);
      }
      conceptIds_.Add(other.conceptIds_);
      if (other.inputSource_ != null) {
        if (inputSource_ == null) {
          InputSource = new global::Clarifai.Api.TaskInputSource();
        }
        InputSource.MergeFrom(other.InputSource);
      }
      if (other.SampleMs != 0) {
        SampleMs = other.SampleMs;
      }
      if (other.aiAssistant_ != null) {
        if (aiAssistant_ == null) {
          AiAssistant = new global::Clarifai.Api.TaskAIAssistant();
        }
        AiAssistant.MergeFrom(other.AiAssistant);
      }
      if (other.review_ != null) {
        if (review_ == null) {
          Review = new global::Clarifai.Api.TaskReview();
        }
        Review.MergeFrom(other.Review);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Clarifai.Api.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.aiAssistParams_ != null) {
        if (aiAssistParams_ == null) {
          AiAssistParams = new global::Clarifai.Api.AiAssistParameters();
        }
        AiAssistParams.MergeFrom(other.AiAssistParams);
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Clarifai.Api.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 26: {
            if (modifiedAt_ == null) {
              ModifiedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedAt);
            break;
          }
          case 32: {
            Type = (global::Clarifai.Api.Task.Types.TaskType) input.ReadEnum();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            if (worker_ == null) {
              Worker = new global::Clarifai.Api.TaskWorker();
            }
            input.ReadMessage(Worker);
            break;
          }
          case 58: {
            conceptIds_.AddEntriesFrom(input, _repeated_conceptIds_codec);
            break;
          }
          case 66: {
            if (inputSource_ == null) {
              InputSource = new global::Clarifai.Api.TaskInputSource();
            }
            input.ReadMessage(InputSource);
            break;
          }
          case 72: {
            SampleMs = input.ReadUInt32();
            break;
          }
          case 82: {
            if (aiAssistant_ == null) {
              AiAssistant = new global::Clarifai.Api.TaskAIAssistant();
            }
            input.ReadMessage(AiAssistant);
            break;
          }
          case 90: {
            if (review_ == null) {
              Review = new global::Clarifai.Api.TaskReview();
            }
            input.ReadMessage(Review);
            break;
          }
          case 98: {
            if (status_ == null) {
              Status = new global::Clarifai.Api.Status.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 114: {
            if (aiAssistParams_ == null) {
              AiAssistParams = new global::Clarifai.Api.AiAssistParameters();
            }
            input.ReadMessage(AiAssistParams);
            break;
          }
          case 122: {
            if (visibility_ == null) {
              Visibility = new global::Clarifai.Api.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 130: {
            AppId = input.ReadString();
            break;
          }
          case 138: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Task message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TaskType {
        [pbr::OriginalName("TYPE_NOT_SET")] TypeNotSet = 0,
        /// <summary>
        /// Concepts classification tasks annotate concepts for the overall image, frame of video or section of text.
        /// </summary>
        [pbr::OriginalName("CONCEPTS_CLASSIFICATION")] ConceptsClassification = 1,
        /// <summary>
        /// Bounding box detection tasks annotate rectangular bounding box regions around each concept in an image, frame of video or section of text.
        /// </summary>
        [pbr::OriginalName("BOUNDING_BOX_DETECTION")] BoundingBoxDetection = 2,
        /// <summary>
        /// Polygon detection tasks annotate free-form regions around concepts in an image, frame of video or section of text.
        /// </summary>
        [pbr::OriginalName("POLYGON_DETECTION")] PolygonDetection = 3,
      }

    }
    #endregion

  }

  public sealed partial class AiAssistParameters : pb::IMessage<AiAssistParameters> {
    private static readonly pb::MessageParser<AiAssistParameters> _parser = new pb::MessageParser<AiAssistParameters>(() => new AiAssistParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AiAssistParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AiAssistParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AiAssistParameters(AiAssistParameters other) : this() {
      minThreshold_ = other.minThreshold_;
      maxThreshold_ = other.maxThreshold_;
      conceptRelationIds_ = other.conceptRelationIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AiAssistParameters Clone() {
      return new AiAssistParameters(this);
    }

    /// <summary>Field number for the "min_threshold" field.</summary>
    public const int MinThresholdFieldNumber = 1;
    private float minThreshold_;
    /// <summary>
    /// Min and max threshold values for approving annotations by default based on prediction score
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinThreshold {
      get { return minThreshold_; }
      set {
        minThreshold_ = value;
      }
    }

    /// <summary>Field number for the "max_threshold" field.</summary>
    public const int MaxThresholdFieldNumber = 2;
    private float maxThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxThreshold {
      get { return maxThreshold_; }
      set {
        maxThreshold_ = value;
      }
    }

    /// <summary>Field number for the "concept_relation_ids" field.</summary>
    public const int ConceptRelationIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_conceptRelationIds_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> conceptRelationIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// ids of concept relations. Used in AI assist workflow
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ConceptRelationIds {
      get { return conceptRelationIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AiAssistParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AiAssistParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinThreshold, other.MinThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxThreshold, other.MaxThreshold)) return false;
      if(!conceptRelationIds_.Equals(other.conceptRelationIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinThreshold);
      if (MaxThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxThreshold);
      hash ^= conceptRelationIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinThreshold != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MinThreshold);
      }
      if (MaxThreshold != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxThreshold);
      }
      conceptRelationIds_.WriteTo(output, _repeated_conceptRelationIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinThreshold != 0F) {
        size += 1 + 4;
      }
      if (MaxThreshold != 0F) {
        size += 1 + 4;
      }
      size += conceptRelationIds_.CalculateSize(_repeated_conceptRelationIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AiAssistParameters other) {
      if (other == null) {
        return;
      }
      if (other.MinThreshold != 0F) {
        MinThreshold = other.MinThreshold;
      }
      if (other.MaxThreshold != 0F) {
        MaxThreshold = other.MaxThreshold;
      }
      conceptRelationIds_.Add(other.conceptRelationIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            MinThreshold = input.ReadFloat();
            break;
          }
          case 21: {
            MaxThreshold = input.ReadFloat();
            break;
          }
          case 26: {
            conceptRelationIds_.AddEntriesFrom(input, _repeated_conceptRelationIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskWorker : pb::IMessage<TaskWorker> {
    private static readonly pb::MessageParser<TaskWorker> _parser = new pb::MessageParser<TaskWorker>(() => new TaskWorker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskWorker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskWorker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskWorker(TaskWorker other) : this() {
      strategy_ = other.strategy_;
      userIds_ = other.userIds_.Clone();
      switch (other.StrategyInfoCase) {
        case StrategyInfoOneofCase.PartitionedStrategyInfo:
          PartitionedStrategyInfo = other.PartitionedStrategyInfo.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskWorker Clone() {
      return new TaskWorker(this);
    }

    /// <summary>Field number for the "strategy" field.</summary>
    public const int StrategyFieldNumber = 1;
    private global::Clarifai.Api.TaskWorker.Types.TaskWorkerStrategy strategy_ = global::Clarifai.Api.TaskWorker.Types.TaskWorkerStrategy.WorkerStrategyNotSet;
    /// <summary>
    /// Worker strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskWorker.Types.TaskWorkerStrategy Strategy {
      get { return strategy_; }
      set {
        strategy_ = value;
      }
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Who will work on this task.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    /// <summary>Field number for the "partitioned_strategy_info" field.</summary>
    public const int PartitionedStrategyInfoFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo PartitionedStrategyInfo {
      get { return strategyInfoCase_ == StrategyInfoOneofCase.PartitionedStrategyInfo ? (global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo) strategyInfo_ : null; }
      set {
        strategyInfo_ = value;
        strategyInfoCase_ = value == null ? StrategyInfoOneofCase.None : StrategyInfoOneofCase.PartitionedStrategyInfo;
      }
    }

    private object strategyInfo_;
    /// <summary>Enum of possible cases for the "strategy_info" oneof.</summary>
    public enum StrategyInfoOneofCase {
      None = 0,
      PartitionedStrategyInfo = 3,
    }
    private StrategyInfoOneofCase strategyInfoCase_ = StrategyInfoOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrategyInfoOneofCase StrategyInfoCase {
      get { return strategyInfoCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStrategyInfo() {
      strategyInfoCase_ = StrategyInfoOneofCase.None;
      strategyInfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskWorker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskWorker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Strategy != other.Strategy) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      if (!object.Equals(PartitionedStrategyInfo, other.PartitionedStrategyInfo)) return false;
      if (StrategyInfoCase != other.StrategyInfoCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Strategy != global::Clarifai.Api.TaskWorker.Types.TaskWorkerStrategy.WorkerStrategyNotSet) hash ^= Strategy.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (strategyInfoCase_ == StrategyInfoOneofCase.PartitionedStrategyInfo) hash ^= PartitionedStrategyInfo.GetHashCode();
      hash ^= (int) strategyInfoCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Strategy != global::Clarifai.Api.TaskWorker.Types.TaskWorkerStrategy.WorkerStrategyNotSet) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Strategy);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (strategyInfoCase_ == StrategyInfoOneofCase.PartitionedStrategyInfo) {
        output.WriteRawTag(26);
        output.WriteMessage(PartitionedStrategyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Strategy != global::Clarifai.Api.TaskWorker.Types.TaskWorkerStrategy.WorkerStrategyNotSet) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Strategy);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (strategyInfoCase_ == StrategyInfoOneofCase.PartitionedStrategyInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartitionedStrategyInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskWorker other) {
      if (other == null) {
        return;
      }
      if (other.Strategy != global::Clarifai.Api.TaskWorker.Types.TaskWorkerStrategy.WorkerStrategyNotSet) {
        Strategy = other.Strategy;
      }
      userIds_.Add(other.userIds_);
      switch (other.StrategyInfoCase) {
        case StrategyInfoOneofCase.PartitionedStrategyInfo:
          if (PartitionedStrategyInfo == null) {
            PartitionedStrategyInfo = new global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo();
          }
          PartitionedStrategyInfo.MergeFrom(other.PartitionedStrategyInfo);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Strategy = (global::Clarifai.Api.TaskWorker.Types.TaskWorkerStrategy) input.ReadEnum();
            break;
          }
          case 18: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
          case 26: {
            global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo subBuilder = new global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo();
            if (strategyInfoCase_ == StrategyInfoOneofCase.PartitionedStrategyInfo) {
              subBuilder.MergeFrom(PartitionedStrategyInfo);
            }
            input.ReadMessage(subBuilder);
            PartitionedStrategyInfo = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TaskWorker message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TaskWorkerStrategy {
        [pbr::OriginalName("WORKER_STRATEGY_NOT_SET")] WorkerStrategyNotSet = 0,
        /// <summary>
        /// The inputs will be partitioned in several partitions.
        /// Each worker will label one or more input partitions.
        /// </summary>
        [pbr::OriginalName("PARTITIONED")] Partitioned = 2,
        /// <summary>
        /// Each worker will label all inputs from input source.
        /// </summary>
        [pbr::OriginalName("FULL")] Full = 3,
      }

    }
    #endregion

  }

  public sealed partial class TaskWorkerPartitionedStrategyInfo : pb::IMessage<TaskWorkerPartitionedStrategyInfo> {
    private static readonly pb::MessageParser<TaskWorkerPartitionedStrategyInfo> _parser = new pb::MessageParser<TaskWorkerPartitionedStrategyInfo>(() => new TaskWorkerPartitionedStrategyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskWorkerPartitionedStrategyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskWorkerPartitionedStrategyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskWorkerPartitionedStrategyInfo(TaskWorkerPartitionedStrategyInfo other) : this() {
      type_ = other.type_;
      workersPerInput_ = other.workersPerInput_;
      weights_ = other.weights_ != null ? other.weights_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskWorkerPartitionedStrategyInfo Clone() {
      return new TaskWorkerPartitionedStrategyInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo.Types.TaskWorkerPartitionedStrategy type_ = global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo.Types.TaskWorkerPartitionedStrategy.PartitionedWorkerStrategyNotSet;
    /// <summary>
    /// Define how the partitioning should work.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo.Types.TaskWorkerPartitionedStrategy Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "workers_per_input" field.</summary>
    public const int WorkersPerInputFieldNumber = 2;
    private int workersPerInput_;
    /// <summary>
    /// How many workers will label each input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkersPerInput {
      get { return workersPerInput_; }
      set {
        workersPerInput_ = value;
      }
    }

    /// <summary>Field number for the "weights" field.</summary>
    public const int WeightsFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Struct weights_;
    /// <summary>
    /// In case of weighted partitioning, map user ids to weights.
    /// Each labeler will be assigned work proportional to its own weight as compared to the sum of total weight.
    ///
    /// EXAMPLE:
    /// If we have 3 workers, and weights = {1: 30, 2: 30, 3: 40},
    /// then first worker will have assigned 30% of the work,
    /// second worker will have assigned 30% of the work,
    /// and third worker will have assigned 40% of the work.
    /// You may use weights which add up to 100, but it's not necessary.
    /// For example, weights {1: 30, 2: 30, 3: 40} are equivalent with {1: 3, 2: 3, 3: 4}
    /// because they represent the same percentages: {1: 30%, 2: 30%, 3: 40%}.
    ///
    /// NOTE:
    /// Note that no worker should be assigned a weight percentage greater than 1/workers_per_input.
    /// It is mathematically impossible to partition the work in such a case.
    /// Why? Say, we have 3 workers. And workers_per_input = 2, i.e. each input must be labeled by 2 workers.
    /// Let's assign weights {1: 51%, 2: 25%, 3: 24%}.
    /// Note that first worker has a weight percentage higher than 1/workers_per_input = 1/2 = 50%.
    /// If we have 100 inputs, then a total of 100 * workers_per_input = 200 cumulative inputs will be labeled by these 3 workers.
    /// Worker 1 should label 102 cumulative inputs, while worker 2 and worker 3 will label 98 cumulative inputs together.
    /// No matter how we assign the 98 cumulative inputs, the 2 workers will be able to label up to 98 actual inputs.
    /// This means the remaining 2 inputs will be labeled only by worker 1. This contradicts the worker_per_input = 2 requirement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Weights {
      get { return weights_; }
      set {
        weights_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskWorkerPartitionedStrategyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskWorkerPartitionedStrategyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (WorkersPerInput != other.WorkersPerInput) return false;
      if (!object.Equals(Weights, other.Weights)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo.Types.TaskWorkerPartitionedStrategy.PartitionedWorkerStrategyNotSet) hash ^= Type.GetHashCode();
      if (WorkersPerInput != 0) hash ^= WorkersPerInput.GetHashCode();
      if (weights_ != null) hash ^= Weights.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo.Types.TaskWorkerPartitionedStrategy.PartitionedWorkerStrategyNotSet) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (WorkersPerInput != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WorkersPerInput);
      }
      if (weights_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Weights);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo.Types.TaskWorkerPartitionedStrategy.PartitionedWorkerStrategyNotSet) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (WorkersPerInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorkersPerInput);
      }
      if (weights_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Weights);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskWorkerPartitionedStrategyInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo.Types.TaskWorkerPartitionedStrategy.PartitionedWorkerStrategyNotSet) {
        Type = other.Type;
      }
      if (other.WorkersPerInput != 0) {
        WorkersPerInput = other.WorkersPerInput;
      }
      if (other.weights_ != null) {
        if (weights_ == null) {
          Weights = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Weights.MergeFrom(other.Weights);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Clarifai.Api.TaskWorkerPartitionedStrategyInfo.Types.TaskWorkerPartitionedStrategy) input.ReadEnum();
            break;
          }
          case 16: {
            WorkersPerInput = input.ReadInt32();
            break;
          }
          case 26: {
            if (weights_ == null) {
              Weights = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Weights);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TaskWorkerPartitionedStrategyInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TaskWorkerPartitionedStrategy {
        [pbr::OriginalName("PARTITIONED_WORKER_STRATEGY_NOT_SET")] PartitionedWorkerStrategyNotSet = 0,
        /// <summary>
        /// Each worker will label (approximately) the same number of inputs.
        /// </summary>
        [pbr::OriginalName("EVENLY")] Evenly = 1,
        /// <summary>
        /// Each worker will have an assigned weight.
        /// See weights field for more details.
        /// </summary>
        [pbr::OriginalName("WEIGHTED")] Weighted = 2,
      }

    }
    #endregion

  }

  public sealed partial class TaskInputSource : pb::IMessage<TaskInputSource> {
    private static readonly pb::MessageParser<TaskInputSource> _parser = new pb::MessageParser<TaskInputSource>(() => new TaskInputSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskInputSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInputSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInputSource(TaskInputSource other) : this() {
      type_ = other.type_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInputSource Clone() {
      return new TaskInputSource(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Clarifai.Api.TaskInputSource.Types.TaskInputSourceType type_ = global::Clarifai.Api.TaskInputSource.Types.TaskInputSourceType.InputSourceTypeNotSet;
    /// <summary>
    /// Type of input source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskInputSource.Types.TaskInputSourceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// If type is SAVED_SEARCH, then this is the saved search id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskInputSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskInputSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Clarifai.Api.TaskInputSource.Types.TaskInputSourceType.InputSourceTypeNotSet) hash ^= Type.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Clarifai.Api.TaskInputSource.Types.TaskInputSourceType.InputSourceTypeNotSet) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Clarifai.Api.TaskInputSource.Types.TaskInputSourceType.InputSourceTypeNotSet) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskInputSource other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Clarifai.Api.TaskInputSource.Types.TaskInputSourceType.InputSourceTypeNotSet) {
        Type = other.Type;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Clarifai.Api.TaskInputSource.Types.TaskInputSourceType) input.ReadEnum();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TaskInputSource message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TaskInputSourceType {
        [pbr::OriginalName("INPUT_SOURCE_TYPE_NOT_SET")] InputSourceTypeNotSet = 0,
        /// <summary>
        /// Use all inputs in the app.
        /// </summary>
        [pbr::OriginalName("ALL_INPUTS")] AllInputs = 1,
        /// <summary>
        /// Use the inputs from a saved search.
        /// </summary>
        [pbr::OriginalName("SAVED_SEARCH")] SavedSearch = 2,
      }

    }
    #endregion

  }

  public sealed partial class TaskReview : pb::IMessage<TaskReview> {
    private static readonly pb::MessageParser<TaskReview> _parser = new pb::MessageParser<TaskReview>(() => new TaskReview());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskReview> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskReview() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskReview(TaskReview other) : this() {
      strategy_ = other.strategy_;
      userIds_ = other.userIds_.Clone();
      switch (other.StrategyInfoCase) {
        case StrategyInfoOneofCase.ManualStrategyInfo:
          ManualStrategyInfo = other.ManualStrategyInfo.Clone();
          break;
        case StrategyInfoOneofCase.ConsensusStrategyInfo:
          ConsensusStrategyInfo = other.ConsensusStrategyInfo.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskReview Clone() {
      return new TaskReview(this);
    }

    /// <summary>Field number for the "strategy" field.</summary>
    public const int StrategyFieldNumber = 1;
    private global::Clarifai.Api.TaskReview.Types.TaskReviewStrategy strategy_ = global::Clarifai.Api.TaskReview.Types.TaskReviewStrategy.NotSet;
    /// <summary>
    /// Task review strategy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskReview.Types.TaskReviewStrategy Strategy {
      get { return strategy_; }
      set {
        strategy_ = value;
      }
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Who will review this task.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    /// <summary>Field number for the "manual_strategy_info" field.</summary>
    public const int ManualStrategyInfoFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskReviewManualStrategyInfo ManualStrategyInfo {
      get { return strategyInfoCase_ == StrategyInfoOneofCase.ManualStrategyInfo ? (global::Clarifai.Api.TaskReviewManualStrategyInfo) strategyInfo_ : null; }
      set {
        strategyInfo_ = value;
        strategyInfoCase_ = value == null ? StrategyInfoOneofCase.None : StrategyInfoOneofCase.ManualStrategyInfo;
      }
    }

    /// <summary>Field number for the "consensus_strategy_info" field.</summary>
    public const int ConsensusStrategyInfoFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TaskReviewConsensusStrategyInfo ConsensusStrategyInfo {
      get { return strategyInfoCase_ == StrategyInfoOneofCase.ConsensusStrategyInfo ? (global::Clarifai.Api.TaskReviewConsensusStrategyInfo) strategyInfo_ : null; }
      set {
        strategyInfo_ = value;
        strategyInfoCase_ = value == null ? StrategyInfoOneofCase.None : StrategyInfoOneofCase.ConsensusStrategyInfo;
      }
    }

    private object strategyInfo_;
    /// <summary>Enum of possible cases for the "strategy_info" oneof.</summary>
    public enum StrategyInfoOneofCase {
      None = 0,
      ManualStrategyInfo = 3,
      ConsensusStrategyInfo = 4,
    }
    private StrategyInfoOneofCase strategyInfoCase_ = StrategyInfoOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrategyInfoOneofCase StrategyInfoCase {
      get { return strategyInfoCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStrategyInfo() {
      strategyInfoCase_ = StrategyInfoOneofCase.None;
      strategyInfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskReview);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskReview other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Strategy != other.Strategy) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      if (!object.Equals(ManualStrategyInfo, other.ManualStrategyInfo)) return false;
      if (!object.Equals(ConsensusStrategyInfo, other.ConsensusStrategyInfo)) return false;
      if (StrategyInfoCase != other.StrategyInfoCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Strategy != global::Clarifai.Api.TaskReview.Types.TaskReviewStrategy.NotSet) hash ^= Strategy.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (strategyInfoCase_ == StrategyInfoOneofCase.ManualStrategyInfo) hash ^= ManualStrategyInfo.GetHashCode();
      if (strategyInfoCase_ == StrategyInfoOneofCase.ConsensusStrategyInfo) hash ^= ConsensusStrategyInfo.GetHashCode();
      hash ^= (int) strategyInfoCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Strategy != global::Clarifai.Api.TaskReview.Types.TaskReviewStrategy.NotSet) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Strategy);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (strategyInfoCase_ == StrategyInfoOneofCase.ManualStrategyInfo) {
        output.WriteRawTag(26);
        output.WriteMessage(ManualStrategyInfo);
      }
      if (strategyInfoCase_ == StrategyInfoOneofCase.ConsensusStrategyInfo) {
        output.WriteRawTag(34);
        output.WriteMessage(ConsensusStrategyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Strategy != global::Clarifai.Api.TaskReview.Types.TaskReviewStrategy.NotSet) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Strategy);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (strategyInfoCase_ == StrategyInfoOneofCase.ManualStrategyInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ManualStrategyInfo);
      }
      if (strategyInfoCase_ == StrategyInfoOneofCase.ConsensusStrategyInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConsensusStrategyInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskReview other) {
      if (other == null) {
        return;
      }
      if (other.Strategy != global::Clarifai.Api.TaskReview.Types.TaskReviewStrategy.NotSet) {
        Strategy = other.Strategy;
      }
      userIds_.Add(other.userIds_);
      switch (other.StrategyInfoCase) {
        case StrategyInfoOneofCase.ManualStrategyInfo:
          if (ManualStrategyInfo == null) {
            ManualStrategyInfo = new global::Clarifai.Api.TaskReviewManualStrategyInfo();
          }
          ManualStrategyInfo.MergeFrom(other.ManualStrategyInfo);
          break;
        case StrategyInfoOneofCase.ConsensusStrategyInfo:
          if (ConsensusStrategyInfo == null) {
            ConsensusStrategyInfo = new global::Clarifai.Api.TaskReviewConsensusStrategyInfo();
          }
          ConsensusStrategyInfo.MergeFrom(other.ConsensusStrategyInfo);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Strategy = (global::Clarifai.Api.TaskReview.Types.TaskReviewStrategy) input.ReadEnum();
            break;
          }
          case 18: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
          case 26: {
            global::Clarifai.Api.TaskReviewManualStrategyInfo subBuilder = new global::Clarifai.Api.TaskReviewManualStrategyInfo();
            if (strategyInfoCase_ == StrategyInfoOneofCase.ManualStrategyInfo) {
              subBuilder.MergeFrom(ManualStrategyInfo);
            }
            input.ReadMessage(subBuilder);
            ManualStrategyInfo = subBuilder;
            break;
          }
          case 34: {
            global::Clarifai.Api.TaskReviewConsensusStrategyInfo subBuilder = new global::Clarifai.Api.TaskReviewConsensusStrategyInfo();
            if (strategyInfoCase_ == StrategyInfoOneofCase.ConsensusStrategyInfo) {
              subBuilder.MergeFrom(ConsensusStrategyInfo);
            }
            input.ReadMessage(subBuilder);
            ConsensusStrategyInfo = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TaskReview message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TaskReviewStrategy {
        [pbr::OriginalName("TASK_REVIEW_STRATEGY_NOT_SET")] NotSet = 0,
        /// <summary>
        /// No review is needed.
        /// </summary>
        [pbr::OriginalName("NONE")] None = 1,
        /// <summary>
        /// Manual review strategy.
        /// </summary>
        [pbr::OriginalName("MANUAL")] Manual = 2,
        /// <summary>
        /// Consensus review strategy.
        /// </summary>
        [pbr::OriginalName("CONSENSUS")] Consensus = 3,
      }

    }
    #endregion

  }

  public sealed partial class TaskReviewManualStrategyInfo : pb::IMessage<TaskReviewManualStrategyInfo> {
    private static readonly pb::MessageParser<TaskReviewManualStrategyInfo> _parser = new pb::MessageParser<TaskReviewManualStrategyInfo>(() => new TaskReviewManualStrategyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskReviewManualStrategyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskReviewManualStrategyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskReviewManualStrategyInfo(TaskReviewManualStrategyInfo other) : this() {
      samplePercentage_ = other.samplePercentage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskReviewManualStrategyInfo Clone() {
      return new TaskReviewManualStrategyInfo(this);
    }

    /// <summary>Field number for the "sample_percentage" field.</summary>
    public const int SamplePercentageFieldNumber = 1;
    private float samplePercentage_;
    /// <summary>
    /// This field represents the percentage of inputs that will be reviewed by reviewers. It is a value between 0 and 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SamplePercentage {
      get { return samplePercentage_; }
      set {
        samplePercentage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskReviewManualStrategyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskReviewManualStrategyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SamplePercentage, other.SamplePercentage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SamplePercentage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SamplePercentage);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SamplePercentage != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SamplePercentage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SamplePercentage != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskReviewManualStrategyInfo other) {
      if (other == null) {
        return;
      }
      if (other.SamplePercentage != 0F) {
        SamplePercentage = other.SamplePercentage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SamplePercentage = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskReviewConsensusStrategyInfo : pb::IMessage<TaskReviewConsensusStrategyInfo> {
    private static readonly pb::MessageParser<TaskReviewConsensusStrategyInfo> _parser = new pb::MessageParser<TaskReviewConsensusStrategyInfo>(() => new TaskReviewConsensusStrategyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskReviewConsensusStrategyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskReviewConsensusStrategyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskReviewConsensusStrategyInfo(TaskReviewConsensusStrategyInfo other) : this() {
      approvalThreshold_ = other.approvalThreshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskReviewConsensusStrategyInfo Clone() {
      return new TaskReviewConsensusStrategyInfo(this);
    }

    /// <summary>Field number for the "approval_threshold" field.</summary>
    public const int ApprovalThresholdFieldNumber = 2;
    private uint approvalThreshold_;
    /// <summary>
    /// The number of labelers that need to agree in order to automatically approve an annotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ApprovalThreshold {
      get { return approvalThreshold_; }
      set {
        approvalThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskReviewConsensusStrategyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskReviewConsensusStrategyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApprovalThreshold != other.ApprovalThreshold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApprovalThreshold != 0) hash ^= ApprovalThreshold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApprovalThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ApprovalThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApprovalThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApprovalThreshold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskReviewConsensusStrategyInfo other) {
      if (other == null) {
        return;
      }
      if (other.ApprovalThreshold != 0) {
        ApprovalThreshold = other.ApprovalThreshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            ApprovalThreshold = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskAIAssistant : pb::IMessage<TaskAIAssistant> {
    private static readonly pb::MessageParser<TaskAIAssistant> _parser = new pb::MessageParser<TaskAIAssistant>(() => new TaskAIAssistant());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskAIAssistant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskAIAssistant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskAIAssistant(TaskAIAssistant other) : this() {
      workflowId_ = other.workflowId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskAIAssistant Clone() {
      return new TaskAIAssistant(this);
    }

    /// <summary>Field number for the "workflow_id" field.</summary>
    public const int WorkflowIdFieldNumber = 1;
    private string workflowId_ = "";
    /// <summary>
    /// The worker is helped by an AI assistant.
    /// This field is the workflow id which is used to assist the worker with predictions.
    /// If empty, then AI assistant is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkflowId {
      get { return workflowId_; }
      set {
        workflowId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskAIAssistant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskAIAssistant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkflowId != other.WorkflowId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkflowId.Length != 0) hash ^= WorkflowId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkflowId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkflowId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkflowId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkflowId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskAIAssistant other) {
      if (other == null) {
        return;
      }
      if (other.WorkflowId.Length != 0) {
        WorkflowId = other.WorkflowId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WorkflowId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskStatusCountPerUser : pb::IMessage<TaskStatusCountPerUser> {
    private static readonly pb::MessageParser<TaskStatusCountPerUser> _parser = new pb::MessageParser<TaskStatusCountPerUser>(() => new TaskStatusCountPerUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskStatusCountPerUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskStatusCountPerUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskStatusCountPerUser(TaskStatusCountPerUser other) : this() {
      userId_ = other.userId_;
      pending_ = other.pending_;
      awaitingReview_ = other.awaitingReview_;
      success_ = other.success_;
      reviewDenied_ = other.reviewDenied_;
      awaitingConsensusReview_ = other.awaitingConsensusReview_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskStatusCountPerUser Clone() {
      return new TaskStatusCountPerUser(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pending" field.</summary>
    public const int PendingFieldNumber = 2;
    private uint pending_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pending {
      get { return pending_; }
      set {
        pending_ = value;
      }
    }

    /// <summary>Field number for the "awaiting_review" field.</summary>
    public const int AwaitingReviewFieldNumber = 3;
    private uint awaitingReview_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwaitingReview {
      get { return awaitingReview_; }
      set {
        awaitingReview_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 4;
    private uint success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "review_denied" field.</summary>
    public const int ReviewDeniedFieldNumber = 5;
    private uint reviewDenied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReviewDenied {
      get { return reviewDenied_; }
      set {
        reviewDenied_ = value;
      }
    }

    /// <summary>Field number for the "awaiting_consensus_review" field.</summary>
    public const int AwaitingConsensusReviewFieldNumber = 6;
    private uint awaitingConsensusReview_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwaitingConsensusReview {
      get { return awaitingConsensusReview_; }
      set {
        awaitingConsensusReview_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskStatusCountPerUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskStatusCountPerUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Pending != other.Pending) return false;
      if (AwaitingReview != other.AwaitingReview) return false;
      if (Success != other.Success) return false;
      if (ReviewDenied != other.ReviewDenied) return false;
      if (AwaitingConsensusReview != other.AwaitingConsensusReview) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Pending != 0) hash ^= Pending.GetHashCode();
      if (AwaitingReview != 0) hash ^= AwaitingReview.GetHashCode();
      if (Success != 0) hash ^= Success.GetHashCode();
      if (ReviewDenied != 0) hash ^= ReviewDenied.GetHashCode();
      if (AwaitingConsensusReview != 0) hash ^= AwaitingConsensusReview.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Pending != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pending);
      }
      if (AwaitingReview != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AwaitingReview);
      }
      if (Success != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Success);
      }
      if (ReviewDenied != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ReviewDenied);
      }
      if (AwaitingConsensusReview != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(AwaitingConsensusReview);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Pending != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pending);
      }
      if (AwaitingReview != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwaitingReview);
      }
      if (Success != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Success);
      }
      if (ReviewDenied != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReviewDenied);
      }
      if (AwaitingConsensusReview != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwaitingConsensusReview);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskStatusCountPerUser other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Pending != 0) {
        Pending = other.Pending;
      }
      if (other.AwaitingReview != 0) {
        AwaitingReview = other.AwaitingReview;
      }
      if (other.Success != 0) {
        Success = other.Success;
      }
      if (other.ReviewDenied != 0) {
        ReviewDenied = other.ReviewDenied;
      }
      if (other.AwaitingConsensusReview != 0) {
        AwaitingConsensusReview = other.AwaitingConsensusReview;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            Pending = input.ReadUInt32();
            break;
          }
          case 24: {
            AwaitingReview = input.ReadUInt32();
            break;
          }
          case 32: {
            Success = input.ReadUInt32();
            break;
          }
          case 40: {
            ReviewDenied = input.ReadUInt32();
            break;
          }
          case 48: {
            AwaitingConsensusReview = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Collector is a data pathway from a CollectorSource to an app to collect data automatically.
  /// For example, a CollectorSource
  /// </summary>
  public sealed partial class Collector : pb::IMessage<Collector> {
    private static readonly pb::MessageParser<Collector> _parser = new pb::MessageParser<Collector>(() => new Collector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Collector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collector(Collector other) : this() {
      id_ = other.id_;
      description_ = other.description_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      preQueueWorkflowId_ = other.preQueueWorkflowId_;
      postQueueWorkflowId_ = other.postQueueWorkflowId_;
      collectorSource_ = other.collectorSource_ != null ? other.collectorSource_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collector Clone() {
      return new Collector(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Unique ID for the collector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Human readable description for the collector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// When the collector is created. We follow the XXXX timestamp
    /// format. We use https://www.ietf.org/rfc/rfc3339.txt format:
    /// "2006-01-02T15:04:05.999999Z" so you can expect results like
    /// the following from the API:
    /// "2017-04-11T21:50:50.223962Z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "pre_queue_workflow_id" field.</summary>
    public const int PreQueueWorkflowIdFieldNumber = 4;
    private string preQueueWorkflowId_ = "";
    /// <summary>
    /// This is a workflow to run inline in model predict calls. It should ONLY have very fast and
    /// light-weight models in it as it will effect the speed of the predictions being made.
    /// This workflow's purpose is to filter down the inputs to queue for the collector to process.
    /// The input to this workflow is going to be the OUTPUT of the model, not the input to the model
    /// since we want to encourage having fast workflows that can also take advantage of the model
    /// outputs to make deciions (for example: thresholding based on concepts). If the workflow
    /// output has any field that is non-empty then the input will be queued for the collector
    /// to process with the post_queue_workflow_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreQueueWorkflowId {
      get { return preQueueWorkflowId_; }
      set {
        preQueueWorkflowId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "post_queue_workflow_id" field.</summary>
    public const int PostQueueWorkflowIdFieldNumber = 5;
    private string postQueueWorkflowId_ = "";
    /// <summary>
    /// A workflow to run to after the collector is processing the queued input. This workflow
    /// uses the original input to the model as input to the workflow so that you can run additional
    /// models as well on that input to decide whether to queue the model or not. If the workflow
    /// output has any field that is non-empty then it will be passed on to POST /inputs to
    /// the destination app.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PostQueueWorkflowId {
      get { return postQueueWorkflowId_; }
      set {
        postQueueWorkflowId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collector_source" field.</summary>
    public const int CollectorSourceFieldNumber = 6;
    private global::Clarifai.Api.CollectorSource collectorSource_;
    /// <summary>
    /// The source of the collector to feed data into this app.
    /// Note(zeiler): if we wanted more than one source per collector we could make this it's own
    /// object and introduce /collectors/{collector_id}/sources
    /// We will keep it simple for now and have just one source per collector since a user can make
    /// more than one collector in the same app anyways.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.CollectorSource CollectorSource {
      get { return collectorSource_; }
      set {
        collectorSource_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::Clarifai.Api.Status.Status status_;
    /// <summary>
    /// Status for the collector. This allows you to pause a collector without having to delete it as
    /// an example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Collector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Collector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (PreQueueWorkflowId != other.PreQueueWorkflowId) return false;
      if (PostQueueWorkflowId != other.PostQueueWorkflowId) return false;
      if (!object.Equals(CollectorSource, other.CollectorSource)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (PreQueueWorkflowId.Length != 0) hash ^= PreQueueWorkflowId.GetHashCode();
      if (PostQueueWorkflowId.Length != 0) hash ^= PostQueueWorkflowId.GetHashCode();
      if (collectorSource_ != null) hash ^= CollectorSource.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (PreQueueWorkflowId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PreQueueWorkflowId);
      }
      if (PostQueueWorkflowId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PostQueueWorkflowId);
      }
      if (collectorSource_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CollectorSource);
      }
      if (status_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (PreQueueWorkflowId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreQueueWorkflowId);
      }
      if (PostQueueWorkflowId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PostQueueWorkflowId);
      }
      if (collectorSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectorSource);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Collector other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.PreQueueWorkflowId.Length != 0) {
        PreQueueWorkflowId = other.PreQueueWorkflowId;
      }
      if (other.PostQueueWorkflowId.Length != 0) {
        PostQueueWorkflowId = other.PostQueueWorkflowId;
      }
      if (other.collectorSource_ != null) {
        if (collectorSource_ == null) {
          CollectorSource = new global::Clarifai.Api.CollectorSource();
        }
        CollectorSource.MergeFrom(other.CollectorSource);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Clarifai.Api.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            PreQueueWorkflowId = input.ReadString();
            break;
          }
          case 42: {
            PostQueueWorkflowId = input.ReadString();
            break;
          }
          case 50: {
            if (collectorSource_ == null) {
              CollectorSource = new global::Clarifai.Api.CollectorSource();
            }
            input.ReadMessage(CollectorSource);
            break;
          }
          case 58: {
            if (status_ == null) {
              Status = new global::Clarifai.Api.Status.Status();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration for the source to collect data from.
  /// Only one of the fields can be present at a time.
  /// </summary>
  public sealed partial class CollectorSource : pb::IMessage<CollectorSource> {
    private static readonly pb::MessageParser<CollectorSource> _parser = new pb::MessageParser<CollectorSource>(() => new CollectorSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectorSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectorSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectorSource(CollectorSource other) : this() {
      apiPostModelOutputsCollectorSource_ = other.apiPostModelOutputsCollectorSource_ != null ? other.apiPostModelOutputsCollectorSource_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectorSource Clone() {
      return new CollectorSource(this);
    }

    /// <summary>Field number for the "api_post_model_outputs_collector_source" field.</summary>
    public const int ApiPostModelOutputsCollectorSourceFieldNumber = 2;
    private global::Clarifai.Api.APIPostModelOutputsCollectorSource apiPostModelOutputsCollectorSource_;
    /// <summary>
    /// Collect from the inputs passed in for PostModelOutputs predictions of a specific model.
    /// This does not apply to models used within workflows, only PostModelOutputs calls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.APIPostModelOutputsCollectorSource ApiPostModelOutputsCollectorSource {
      get { return apiPostModelOutputsCollectorSource_; }
      set {
        apiPostModelOutputsCollectorSource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectorSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectorSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ApiPostModelOutputsCollectorSource, other.ApiPostModelOutputsCollectorSource)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (apiPostModelOutputsCollectorSource_ != null) hash ^= ApiPostModelOutputsCollectorSource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (apiPostModelOutputsCollectorSource_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ApiPostModelOutputsCollectorSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (apiPostModelOutputsCollectorSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApiPostModelOutputsCollectorSource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectorSource other) {
      if (other == null) {
        return;
      }
      if (other.apiPostModelOutputsCollectorSource_ != null) {
        if (apiPostModelOutputsCollectorSource_ == null) {
          ApiPostModelOutputsCollectorSource = new global::Clarifai.Api.APIPostModelOutputsCollectorSource();
        }
        ApiPostModelOutputsCollectorSource.MergeFrom(other.ApiPostModelOutputsCollectorSource);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (apiPostModelOutputsCollectorSource_ == null) {
              ApiPostModelOutputsCollectorSource = new global::Clarifai.Api.APIPostModelOutputsCollectorSource();
            }
            input.ReadMessage(ApiPostModelOutputsCollectorSource);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This is configuration for using the inputs send for model prediction in our API as
  /// as the source for data.
  /// </summary>
  public sealed partial class APIPostModelOutputsCollectorSource : pb::IMessage<APIPostModelOutputsCollectorSource> {
    private static readonly pb::MessageParser<APIPostModelOutputsCollectorSource> _parser = new pb::MessageParser<APIPostModelOutputsCollectorSource>(() => new APIPostModelOutputsCollectorSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APIPostModelOutputsCollectorSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APIPostModelOutputsCollectorSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APIPostModelOutputsCollectorSource(APIPostModelOutputsCollectorSource other) : this() {
      modelUserId_ = other.modelUserId_;
      modelAppId_ = other.modelAppId_;
      modelId_ = other.modelId_;
      modelVersionId_ = other.modelVersionId_;
      postInputsKeyId_ = other.postInputsKeyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APIPostModelOutputsCollectorSource Clone() {
      return new APIPostModelOutputsCollectorSource(this);
    }

    /// <summary>Field number for the "model_user_id" field.</summary>
    public const int ModelUserIdFieldNumber = 1;
    private string modelUserId_ = "";
    /// <summary>
    /// To define the model that we should collect from we need to specify the following 4 IDs:
    /// The User ID of the model we want to collect from.
    /// This is User B in the example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelUserId {
      get { return modelUserId_; }
      set {
        modelUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_app_id" field.</summary>
    public const int ModelAppIdFieldNumber = 2;
    private string modelAppId_ = "";
    /// <summary>
    /// The App ID of the model we want to collect from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelAppId {
      get { return modelAppId_; }
      set {
        modelAppId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 3;
    private string modelId_ = "";
    /// <summary>
    /// The Model ID of the model we want to collect from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_version_id" field.</summary>
    public const int ModelVersionIdFieldNumber = 4;
    private string modelVersionId_ = "";
    /// <summary>
    /// The Version ID of the model we want to collect from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelVersionId {
      get { return modelVersionId_; }
      set {
        modelVersionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "post_inputs_key_id" field.</summary>
    public const int PostInputsKeyIdFieldNumber = 5;
    private string postInputsKeyId_ = "";
    /// <summary>
    /// This key is used to POST /inputs into your app by the collector. It can be an API key or a
    /// PAT. This needs the permissions that are needed for POST /inputs for the app_id this
    /// Collector is defined in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PostInputsKeyId {
      get { return postInputsKeyId_; }
      set {
        postInputsKeyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APIPostModelOutputsCollectorSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APIPostModelOutputsCollectorSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelUserId != other.ModelUserId) return false;
      if (ModelAppId != other.ModelAppId) return false;
      if (ModelId != other.ModelId) return false;
      if (ModelVersionId != other.ModelVersionId) return false;
      if (PostInputsKeyId != other.PostInputsKeyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelUserId.Length != 0) hash ^= ModelUserId.GetHashCode();
      if (ModelAppId.Length != 0) hash ^= ModelAppId.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (ModelVersionId.Length != 0) hash ^= ModelVersionId.GetHashCode();
      if (PostInputsKeyId.Length != 0) hash ^= PostInputsKeyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelUserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModelUserId);
      }
      if (ModelAppId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelAppId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelId);
      }
      if (ModelVersionId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ModelVersionId);
      }
      if (PostInputsKeyId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PostInputsKeyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelUserId);
      }
      if (ModelAppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelAppId);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (ModelVersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelVersionId);
      }
      if (PostInputsKeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PostInputsKeyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APIPostModelOutputsCollectorSource other) {
      if (other == null) {
        return;
      }
      if (other.ModelUserId.Length != 0) {
        ModelUserId = other.ModelUserId;
      }
      if (other.ModelAppId.Length != 0) {
        ModelAppId = other.ModelAppId;
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      if (other.ModelVersionId.Length != 0) {
        ModelVersionId = other.ModelVersionId;
      }
      if (other.PostInputsKeyId.Length != 0) {
        PostInputsKeyId = other.PostInputsKeyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModelUserId = input.ReadString();
            break;
          }
          case 18: {
            ModelAppId = input.ReadString();
            break;
          }
          case 26: {
            ModelId = input.ReadString();
            break;
          }
          case 34: {
            ModelVersionId = input.ReadString();
            break;
          }
          case 42: {
            PostInputsKeyId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////
  /// Stats Collection Objects.
  /////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class StatValue : pb::IMessage<StatValue> {
    private static readonly pb::MessageParser<StatValue> _parser = new pb::MessageParser<StatValue>(() => new StatValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValue(StatValue other) : this() {
      time_ = other.time_ != null ? other.time_.Clone() : null;
      value_ = other.value_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValue Clone() {
      return new StatValue(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp time_;
    /// <summary>
    /// The time of the event. Defaults to now().
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    /// <summary>
    /// A value for the metric you're recording.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of tags to attach to this stat. Each should contain one colon so that the first part will
    /// be used as a tag group while the second being the tag itself. For example: ["task_id:a",
    /// "worker_id:1"]. These tag groups like "task_id" or "worker_id" are important for aggregating
    /// values in the StatValueAggregateQuery.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatValue other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Time);
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
          case 26: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatValueAggregateResult : pb::IMessage<StatValueAggregateResult> {
    private static readonly pb::MessageParser<StatValueAggregateResult> _parser = new pb::MessageParser<StatValueAggregateResult>(() => new StatValueAggregateResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatValueAggregateResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValueAggregateResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValueAggregateResult(StatValueAggregateResult other) : this() {
      statValueAggregates_ = other.statValueAggregates_.Clone();
      statValueAggregateQuery_ = other.statValueAggregateQuery_ != null ? other.statValueAggregateQuery_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValueAggregateResult Clone() {
      return new StatValueAggregateResult(this);
    }

    /// <summary>Field number for the "stat_value_aggregates" field.</summary>
    public const int StatValueAggregatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Clarifai.Api.StatValueAggregate> _repeated_statValueAggregates_codec
        = pb::FieldCodec.ForMessage(10, global::Clarifai.Api.StatValueAggregate.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Api.StatValueAggregate> statValueAggregates_ = new pbc::RepeatedField<global::Clarifai.Api.StatValueAggregate>();
    /// <summary>
    /// The list of repeated aggregate values and their counts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Api.StatValueAggregate> StatValueAggregates {
      get { return statValueAggregates_; }
    }

    /// <summary>Field number for the "stat_value_aggregate_query" field.</summary>
    public const int StatValueAggregateQueryFieldNumber = 2;
    private global::Clarifai.Api.StatValueAggregateQuery statValueAggregateQuery_;
    /// <summary>
    /// The query that created these results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.StatValueAggregateQuery StatValueAggregateQuery {
      get { return statValueAggregateQuery_; }
      set {
        statValueAggregateQuery_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatValueAggregateResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatValueAggregateResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!statValueAggregates_.Equals(other.statValueAggregates_)) return false;
      if (!object.Equals(StatValueAggregateQuery, other.StatValueAggregateQuery)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= statValueAggregates_.GetHashCode();
      if (statValueAggregateQuery_ != null) hash ^= StatValueAggregateQuery.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      statValueAggregates_.WriteTo(output, _repeated_statValueAggregates_codec);
      if (statValueAggregateQuery_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StatValueAggregateQuery);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statValueAggregates_.CalculateSize(_repeated_statValueAggregates_codec);
      if (statValueAggregateQuery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatValueAggregateQuery);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatValueAggregateResult other) {
      if (other == null) {
        return;
      }
      statValueAggregates_.Add(other.statValueAggregates_);
      if (other.statValueAggregateQuery_ != null) {
        if (statValueAggregateQuery_ == null) {
          StatValueAggregateQuery = new global::Clarifai.Api.StatValueAggregateQuery();
        }
        StatValueAggregateQuery.MergeFrom(other.StatValueAggregateQuery);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            statValueAggregates_.AddEntriesFrom(input, _repeated_statValueAggregates_codec);
            break;
          }
          case 18: {
            if (statValueAggregateQuery_ == null) {
              StatValueAggregateQuery = new global::Clarifai.Api.StatValueAggregateQuery();
            }
            input.ReadMessage(StatValueAggregateQuery);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatValueAggregate : pb::IMessage<StatValueAggregate> {
    private static readonly pb::MessageParser<StatValueAggregate> _parser = new pb::MessageParser<StatValueAggregate>(() => new StatValueAggregate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatValueAggregate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValueAggregate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValueAggregate(StatValueAggregate other) : this() {
      time_ = other.time_ != null ? other.time_.Clone() : null;
      aggregateValue_ = other.aggregateValue_;
      count_ = other.count_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValueAggregate Clone() {
      return new StatValueAggregate(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp time_;
    /// <summary>
    /// The time of the aggregation. For example, if you aggregate over "HOUR" buckets then you can
    /// expect each hour that has atleast one value (matching the rest of your query fields) will have
    /// a StatValueAggregate with the time filled into that hour.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "aggregate_value" field.</summary>
    public const int AggregateValueFieldNumber = 2;
    private float aggregateValue_;
    /// <summary>
    /// The value aggregated according to the stat_value_agg_type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AggregateValue {
      get { return aggregateValue_; }
      set {
        aggregateValue_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private ulong count_;
    /// <summary>
    /// The count of the stat values that were used in this aggregation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The tags for this aggregated_value and count. This will be filled in if tag groups were used in
    /// the query to group aggregations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatValueAggregate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatValueAggregate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AggregateValue, other.AggregateValue)) return false;
      if (Count != other.Count) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      if (AggregateValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AggregateValue);
      if (Count != 0UL) hash ^= Count.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (AggregateValue != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AggregateValue);
      }
      if (Count != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Count);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (AggregateValue != 0F) {
        size += 1 + 4;
      }
      if (Count != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Count);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatValueAggregate other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.AggregateValue != 0F) {
        AggregateValue = other.AggregateValue;
      }
      if (other.Count != 0UL) {
        Count = other.Count;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Time);
            break;
          }
          case 21: {
            AggregateValue = input.ReadFloat();
            break;
          }
          case 24: {
            Count = input.ReadUInt64();
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatValueAggregateQuery : pb::IMessage<StatValueAggregateQuery> {
    private static readonly pb::MessageParser<StatValueAggregateQuery> _parser = new pb::MessageParser<StatValueAggregateQuery>(() => new StatValueAggregateQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatValueAggregateQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValueAggregateQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValueAggregateQuery(StatValueAggregateQuery other) : this() {
      tags_ = other.tags_.Clone();
      tagGroups_ = other.tagGroups_.Clone();
      statValueAggType_ = other.statValueAggType_;
      statTimeAggType_ = other.statTimeAggType_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatValueAggregateQuery Clone() {
      return new StatValueAggregateQuery(this);
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// These tags are used to filter down the values before they are aggregated. For example,
    /// if you want to aggregate values for "task_id:a" you could specify that as a tag here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "tag_groups" field.</summary>
    public const int TagGroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_tagGroups_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> tagGroups_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// These are tag groups to aggregate over. So for example if you added stat values with tags
    /// "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
    /// aggregation would return StatValueAggregate values for each task_id. If you provide more than
    /// one tag_group the response will return all rolled up combinations of them. For example
    /// ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
    /// values then you'd get StatValueAggregate values back for:
    /// task_id | something
    /// a       | 1
    /// a       | 2
    /// b       | 1
    /// b       | 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TagGroups {
      get { return tagGroups_; }
    }

    /// <summary>Field number for the "stat_value_agg_type" field.</summary>
    public const int StatValueAggTypeFieldNumber = 3;
    private global::Clarifai.Api.StatValueAggType statValueAggType_ = global::Clarifai.Api.StatValueAggType.Sum;
    /// <summary>
    /// Aggregation function to use over the values. Count(value) is also always returns.
    /// Defaults to 'sum' if not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.StatValueAggType StatValueAggType {
      get { return statValueAggType_; }
      set {
        statValueAggType_ = value;
      }
    }

    /// <summary>Field number for the "stat_time_agg_type" field.</summary>
    public const int StatTimeAggTypeFieldNumber = 4;
    private global::Clarifai.Api.StatTimeAggType statTimeAggType_ = global::Clarifai.Api.StatTimeAggType.NoTimeAgg;
    /// <summary>
    /// Aggregation bins for time where the values will be aggregated at this bin granualarity.
    /// And the "time" field will be returned in StatValueAggregate object.
    /// If not provided then bins are not used, and all time is aggregated over.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.StatTimeAggType StatTimeAggType {
      get { return statTimeAggType_; }
      set {
        statTimeAggType_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// If provided the time range over which values will be >= this time. If not provided then
    /// all values will be used back to start of time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// If provided the time range over which values will be &lt;= this time. If not provided then all
    /// values will be used up until now().
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatValueAggregateQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatValueAggregateQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tags_.Equals(other.tags_)) return false;
      if(!tagGroups_.Equals(other.tagGroups_)) return false;
      if (StatValueAggType != other.StatValueAggType) return false;
      if (StatTimeAggType != other.StatTimeAggType) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tags_.GetHashCode();
      hash ^= tagGroups_.GetHashCode();
      if (StatValueAggType != global::Clarifai.Api.StatValueAggType.Sum) hash ^= StatValueAggType.GetHashCode();
      if (StatTimeAggType != global::Clarifai.Api.StatTimeAggType.NoTimeAgg) hash ^= StatTimeAggType.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tags_.WriteTo(output, _repeated_tags_codec);
      tagGroups_.WriteTo(output, _repeated_tagGroups_codec);
      if (StatValueAggType != global::Clarifai.Api.StatValueAggType.Sum) {
        output.WriteRawTag(24);
        output.WriteEnum((int) StatValueAggType);
      }
      if (StatTimeAggType != global::Clarifai.Api.StatTimeAggType.NoTimeAgg) {
        output.WriteRawTag(32);
        output.WriteEnum((int) StatTimeAggType);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += tagGroups_.CalculateSize(_repeated_tagGroups_codec);
      if (StatValueAggType != global::Clarifai.Api.StatValueAggType.Sum) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatValueAggType);
      }
      if (StatTimeAggType != global::Clarifai.Api.StatTimeAggType.NoTimeAgg) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatTimeAggType);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatValueAggregateQuery other) {
      if (other == null) {
        return;
      }
      tags_.Add(other.tags_);
      tagGroups_.Add(other.tagGroups_);
      if (other.StatValueAggType != global::Clarifai.Api.StatValueAggType.Sum) {
        StatValueAggType = other.StatValueAggType;
      }
      if (other.StatTimeAggType != global::Clarifai.Api.StatTimeAggType.NoTimeAgg) {
        StatTimeAggType = other.StatTimeAggType;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 18: {
            tagGroups_.AddEntriesFrom(input, _repeated_tagGroups_codec);
            break;
          }
          case 24: {
            StatValueAggType = (global::Clarifai.Api.StatValueAggType) input.ReadEnum();
            break;
          }
          case 32: {
            StatTimeAggType = (global::Clarifai.Api.StatTimeAggType) input.ReadEnum();
            break;
          }
          case 42: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 50: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //////////////////////////////
  /// Visibilty of the resource.
  //////////////////////////////
  /// Visibility represents how visible the given resource is to other users.
  /// When authenticating a request we can tell if a user is a collaborator or a teammate for the
  /// the app that contains the resource and set their allowed visibility. We use that to restrict
  /// what they are allowed to see:
  /// If AllowedVisibility is PRIVATE then we allow PRIVATE (10), ORG (30), PUBLIC (50)
  /// If AllowedVisibility is ORG then we allow ORG (30), PUBLIC (50)
  /// If AllowedVisibility is PUBLIC then we allow PUBLIC (50) only.
  /// </summary>
  public sealed partial class Visibility : pb::IMessage<Visibility> {
    private static readonly pb::MessageParser<Visibility> _parser = new pb::MessageParser<Visibility>(() => new Visibility());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Visibility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Visibility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Visibility(Visibility other) : this() {
      gettable_ = other.gettable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Visibility Clone() {
      return new Visibility(this);
    }

    /// <summary>Field number for the "gettable" field.</summary>
    public const int GettableFieldNumber = 1;
    private global::Clarifai.Api.Visibility.Types.Gettable gettable_ = global::Clarifai.Api.Visibility.Types.Gettable.UnknownVisibility;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Visibility.Types.Gettable Gettable {
      get { return gettable_; }
      set {
        gettable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Visibility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Visibility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gettable != other.Gettable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gettable != global::Clarifai.Api.Visibility.Types.Gettable.UnknownVisibility) hash ^= Gettable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gettable != global::Clarifai.Api.Visibility.Types.Gettable.UnknownVisibility) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Gettable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gettable != global::Clarifai.Api.Visibility.Types.Gettable.UnknownVisibility) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gettable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Visibility other) {
      if (other == null) {
        return;
      }
      if (other.Gettable != global::Clarifai.Api.Visibility.Types.Gettable.UnknownVisibility) {
        Gettable = other.Gettable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Gettable = (global::Clarifai.Api.Visibility.Types.Gettable) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Visibility message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Gettable defined the level of access for GET operations for this resource.
      /// </summary>
      public enum Gettable {
        /// <summary>
        /// Default value not allowed.
        /// </summary>
        [pbr::OriginalName("UNKNOWN_VISIBILITY")] UnknownVisibility = 0,
        /// <summary>
        /// PRIVATE requires collaborator or team permissions in order to GET this resource.
        /// </summary>
        [pbr::OriginalName("PRIVATE")] Private = 10,
        /// <summary>
        /// ORG requires you to be in the same org in order to GET this resource, but don't have to be a
        /// teammate or collaborator.
        /// </summary>
        [pbr::OriginalName("ORG")] Org = 30,
        /// <summary>
        /// PUBLIC opens up GET access to the resource to any user on the platform even if they are not
        /// a teammate or collaborator.
        /// </summary>
        [pbr::OriginalName("PUBLIC")] Public = 50,
      }

    }
    #endregion

  }

  public sealed partial class TrendingMetric : pb::IMessage<TrendingMetric> {
    private static readonly pb::MessageParser<TrendingMetric> _parser = new pb::MessageParser<TrendingMetric>(() => new TrendingMetric());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrendingMetric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrendingMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrendingMetric(TrendingMetric other) : this() {
      userId_ = other.userId_;
      appId_ = other.appId_;
      objectId_ = other.objectId_;
      viewCount_ = other.viewCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrendingMetric Clone() {
      return new TrendingMetric(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 2;
    private string appId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 3;
    private string objectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjectId {
      get { return objectId_; }
      set {
        objectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view_count" field.</summary>
    public const int ViewCountFieldNumber = 4;
    private ulong viewCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ViewCount {
      get { return viewCount_; }
      set {
        viewCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrendingMetric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrendingMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AppId != other.AppId) return false;
      if (ObjectId != other.ObjectId) return false;
      if (ViewCount != other.ViewCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (ObjectId.Length != 0) hash ^= ObjectId.GetHashCode();
      if (ViewCount != 0UL) hash ^= ViewCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppId);
      }
      if (ObjectId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ObjectId);
      }
      if (ViewCount != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ViewCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (ObjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectId);
      }
      if (ViewCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ViewCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrendingMetric other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.ObjectId.Length != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.ViewCount != 0UL) {
        ViewCount = other.ViewCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            AppId = input.ReadString();
            break;
          }
          case 26: {
            ObjectId = input.ReadString();
            break;
          }
          case 32: {
            ViewCount = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeSegment : pb::IMessage<TimeSegment> {
    private static readonly pb::MessageParser<TimeSegment> _parser = new pb::MessageParser<TimeSegment>(() => new TimeSegment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSegment(TimeSegment other) : this() {
      id_ = other.id_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      timeInfo_ = other.timeInfo_ != null ? other.timeInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSegment Clone() {
      return new TimeSegment(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A unique id for the time segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Clarifai.Api.Data data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "time_info" field.</summary>
    public const int TimeInfoFieldNumber = 3;
    private global::Clarifai.Api.TimeInfo timeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Api.TimeInfo TimeInfo {
      get { return timeInfo_; }
      set {
        timeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(TimeInfo, other.TimeInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (timeInfo_ != null) hash ^= TimeInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (timeInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (timeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSegment other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Clarifai.Api.Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.timeInfo_ != null) {
        if (timeInfo_ == null) {
          TimeInfo = new global::Clarifai.Api.TimeInfo();
        }
        TimeInfo.MergeFrom(other.TimeInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::Clarifai.Api.Data();
            }
            input.ReadMessage(Data);
            break;
          }
          case 26: {
            if (timeInfo_ == null) {
              TimeInfo = new global::Clarifai.Api.TimeInfo();
            }
            input.ReadMessage(TimeInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeInfo : pb::IMessage<TimeInfo> {
    private static readonly pb::MessageParser<TimeInfo> _parser = new pb::MessageParser<TimeInfo>(() => new TimeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Api.ResourcesReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeInfo(TimeInfo other) : this() {
      numFrames_ = other.numFrames_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeInfo Clone() {
      return new TimeInfo(this);
    }

    /// <summary>Field number for the "num_frames" field.</summary>
    public const int NumFramesFieldNumber = 1;
    private uint numFrames_;
    /// <summary>
    /// Number of frames
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumFrames {
      get { return numFrames_; }
      set {
        numFrames_ = value;
      }
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 2;
    private uint beginTime_;
    /// <summary>
    /// Timestamp where track begins.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private uint endTime_;
    /// <summary>
    /// Timestamp where track ends.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumFrames != other.NumFrames) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumFrames != 0) hash ^= NumFrames.GetHashCode();
      if (BeginTime != 0) hash ^= BeginTime.GetHashCode();
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumFrames != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumFrames);
      }
      if (BeginTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BeginTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumFrames);
      }
      if (BeginTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeginTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeInfo other) {
      if (other == null) {
        return;
      }
      if (other.NumFrames != 0) {
        NumFrames = other.NumFrames;
      }
      if (other.BeginTime != 0) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumFrames = input.ReadUInt32();
            break;
          }
          case 16: {
            BeginTime = input.ReadUInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
