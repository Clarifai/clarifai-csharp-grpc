// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/clarifai/api/service.proto
// </auto-generated>
// Original file comments:
// ///////////////////////////////////////////// WARNING ///////////////////////////////////////////////
// Be aware that if you decide to add comments to this or any other non-private file, they could     //
// end up in our *public* auto-generated swagger documentation. In order to ensure that your         //
// comments are not included in our swagger docs, put one line of whitespace between your comment    //
// and any proto definitions.                                                                        //
// /////////////////////////////////////////////////////////////////////////////////////////////////////
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Clarifai.Api {
  /// <summary>
  /// V2
  /// </summary>
  public static partial class V2
  {
    static readonly string __ServiceName = "clarifai.api.V2";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Clarifai.Api.TestMessage> __Marshaller_clarifai_api_TestMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.TestMessage.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptRelationsRequest> __Marshaller_clarifai_api_ListConceptRelationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListConceptRelationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptRelationResponse> __Marshaller_clarifai_api_MultiConceptRelationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptRelationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptRelationsRequest> __Marshaller_clarifai_api_PostConceptRelationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptRelationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteConceptRelationsRequest> __Marshaller_clarifai_api_DeleteConceptRelationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteConceptRelationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.Status.BaseResponse> __Marshaller_clarifai_api_status_BaseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.Status.BaseResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetConceptCountsRequest> __Marshaller_clarifai_api_GetConceptCountsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetConceptCountsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptCountResponse> __Marshaller_clarifai_api_MultiConceptCountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptCountResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetConceptRequest> __Marshaller_clarifai_api_GetConceptRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetConceptRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleConceptResponse> __Marshaller_clarifai_api_SingleConceptResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleConceptResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptsRequest> __Marshaller_clarifai_api_ListConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListConceptsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptResponse> __Marshaller_clarifai_api_MultiConceptResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelConceptsRequest> __Marshaller_clarifai_api_ListModelConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelConceptsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptsSearchesRequest> __Marshaller_clarifai_api_PostConceptsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptsSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptsRequest> __Marshaller_clarifai_api_PostConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchConceptsRequest> __Marshaller_clarifai_api_PatchConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchConceptsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetVocabRequest> __Marshaller_clarifai_api_GetVocabRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetVocabRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleVocabResponse> __Marshaller_clarifai_api_SingleVocabResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleVocabResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListVocabsRequest> __Marshaller_clarifai_api_ListVocabsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListVocabsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiVocabResponse> __Marshaller_clarifai_api_MultiVocabResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiVocabResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostVocabsRequest> __Marshaller_clarifai_api_PostVocabsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostVocabsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchVocabsRequest> __Marshaller_clarifai_api_PatchVocabsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchVocabsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteVocabRequest> __Marshaller_clarifai_api_DeleteVocabRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteVocabRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteVocabsRequest> __Marshaller_clarifai_api_DeleteVocabsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteVocabsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListVocabConceptsRequest> __Marshaller_clarifai_api_ListVocabConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListVocabConceptsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostVocabConceptsRequest> __Marshaller_clarifai_api_PostVocabConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostVocabConceptsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteVocabConceptRequest> __Marshaller_clarifai_api_DeleteVocabConceptRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteVocabConceptRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteVocabConceptsRequest> __Marshaller_clarifai_api_DeleteVocabConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteVocabConceptsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetConceptLanguageRequest> __Marshaller_clarifai_api_GetConceptLanguageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetConceptLanguageRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleConceptLanguageResponse> __Marshaller_clarifai_api_SingleConceptLanguageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleConceptLanguageResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptLanguagesRequest> __Marshaller_clarifai_api_ListConceptLanguagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListConceptLanguagesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptLanguageResponse> __Marshaller_clarifai_api_MultiConceptLanguageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptLanguageResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptLanguagesRequest> __Marshaller_clarifai_api_PostConceptLanguagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptLanguagesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchConceptLanguagesRequest> __Marshaller_clarifai_api_PatchConceptLanguagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchConceptLanguagesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptReferencesRequest> __Marshaller_clarifai_api_ListConceptReferencesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListConceptReferencesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptReferenceResponse> __Marshaller_clarifai_api_MultiConceptReferenceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptReferenceResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListKnowledgeGraphsRequest> __Marshaller_clarifai_api_ListKnowledgeGraphsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListKnowledgeGraphsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiKnowledgeGraphResponse> __Marshaller_clarifai_api_MultiKnowledgeGraphResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiKnowledgeGraphResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostKnowledgeGraphsRequest> __Marshaller_clarifai_api_PostKnowledgeGraphsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostKnowledgeGraphsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptMappingJobsRequest> __Marshaller_clarifai_api_PostConceptMappingJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptMappingJobsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptMappingJobResponse> __Marshaller_clarifai_api_MultiConceptMappingJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptMappingJobResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptMappingsRequest> __Marshaller_clarifai_api_ListConceptMappingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListConceptMappingsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptMappingResponse> __Marshaller_clarifai_api_MultiConceptMappingResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptMappingResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptMappingsRequest> __Marshaller_clarifai_api_PostConceptMappingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptMappingsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAnnotationRequest> __Marshaller_clarifai_api_GetAnnotationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAnnotationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAnnotationResponse> __Marshaller_clarifai_api_SingleAnnotationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleAnnotationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAnnotationsRequest> __Marshaller_clarifai_api_ListAnnotationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAnnotationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAnnotationResponse> __Marshaller_clarifai_api_MultiAnnotationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAnnotationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationsRequest> __Marshaller_clarifai_api_PostAnnotationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAnnotationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationsRequest> __Marshaller_clarifai_api_PatchAnnotationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationsStatusRequest> __Marshaller_clarifai_api_PatchAnnotationsStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationsStatusRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationsStatusResponse> __Marshaller_clarifai_api_PatchAnnotationsStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationsStatusResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationRequest> __Marshaller_clarifai_api_DeleteAnnotationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAnnotationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationsRequest> __Marshaller_clarifai_api_DeleteAnnotationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAnnotationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationsSearchesRequest> __Marshaller_clarifai_api_PatchAnnotationsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationsSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiSearchResponse> __Marshaller_clarifai_api_MultiSearchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiSearchResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationsSearchesRequest> __Marshaller_clarifai_api_PostAnnotationsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAnnotationsSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputCountRequest> __Marshaller_clarifai_api_GetInputCountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInputCountRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInputCountResponse> __Marshaller_clarifai_api_SingleInputCountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleInputCountResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.StreamInputsRequest> __Marshaller_clarifai_api_StreamInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.StreamInputsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiInputResponse> __Marshaller_clarifai_api_MultiInputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiInputResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputSamplesRequest> __Marshaller_clarifai_api_GetInputSamplesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInputSamplesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiInputAnnotationResponse> __Marshaller_clarifai_api_MultiInputAnnotationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiInputAnnotationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputRequest> __Marshaller_clarifai_api_GetInputRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInputRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInputResponse> __Marshaller_clarifai_api_SingleInputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleInputResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListInputsRequest> __Marshaller_clarifai_api_ListInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListInputsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsRequest> __Marshaller_clarifai_api_PostInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInputsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsFileRequest> __Marshaller_clarifai_api_PostInputsFileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInputsFileRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsNiFiRequest> __Marshaller_clarifai_api_PostInputsNiFiRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInputsNiFiRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsDocumentRequest> __Marshaller_clarifai_api_PostInputsDocumentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInputsDocumentRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchInputsRequest> __Marshaller_clarifai_api_PatchInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchInputsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteInputRequest> __Marshaller_clarifai_api_DeleteInputRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteInputRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteInputsRequest> __Marshaller_clarifai_api_DeleteInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteInputsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchInputsSearchesRequest> __Marshaller_clarifai_api_PatchInputsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchInputsSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsSearchesRequest> __Marshaller_clarifai_api_PostInputsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInputsSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelOutputsRequest> __Marshaller_clarifai_api_PostModelOutputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelOutputsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiOutputResponse> __Marshaller_clarifai_api_MultiOutputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiOutputResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListDatasetsRequest> __Marshaller_clarifai_api_ListDatasetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListDatasetsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiDatasetResponse> __Marshaller_clarifai_api_MultiDatasetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiDatasetResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetDatasetRequest> __Marshaller_clarifai_api_GetDatasetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetDatasetRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleDatasetResponse> __Marshaller_clarifai_api_SingleDatasetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleDatasetResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostDatasetsRequest> __Marshaller_clarifai_api_PostDatasetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostDatasetsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchDatasetsRequest> __Marshaller_clarifai_api_PatchDatasetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchDatasetsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchDatasetIdsRequest> __Marshaller_clarifai_api_PatchDatasetIdsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchDatasetIdsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteDatasetsRequest> __Marshaller_clarifai_api_DeleteDatasetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteDatasetsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListDatasetInputsRequest> __Marshaller_clarifai_api_ListDatasetInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListDatasetInputsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiDatasetInputResponse> __Marshaller_clarifai_api_MultiDatasetInputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiDatasetInputResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetDatasetInputRequest> __Marshaller_clarifai_api_GetDatasetInputRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetDatasetInputRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleDatasetInputResponse> __Marshaller_clarifai_api_SingleDatasetInputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleDatasetInputResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostDatasetInputsRequest> __Marshaller_clarifai_api_PostDatasetInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostDatasetInputsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteDatasetInputsRequest> __Marshaller_clarifai_api_DeleteDatasetInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteDatasetInputsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListDatasetVersionsRequest> __Marshaller_clarifai_api_ListDatasetVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListDatasetVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiDatasetVersionResponse> __Marshaller_clarifai_api_MultiDatasetVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiDatasetVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetDatasetVersionRequest> __Marshaller_clarifai_api_GetDatasetVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetDatasetVersionRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleDatasetVersionResponse> __Marshaller_clarifai_api_SingleDatasetVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleDatasetVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest> __Marshaller_clarifai_api_ListDatasetVersionMetricsGroupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse> __Marshaller_clarifai_api_MultiDatasetVersionMetricsGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostDatasetVersionsRequest> __Marshaller_clarifai_api_PostDatasetVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostDatasetVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchDatasetVersionsRequest> __Marshaller_clarifai_api_PatchDatasetVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchDatasetVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteDatasetVersionsRequest> __Marshaller_clarifai_api_DeleteDatasetVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteDatasetVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PutDatasetVersionExportsRequest> __Marshaller_clarifai_api_PutDatasetVersionExportsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PutDatasetVersionExportsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiDatasetVersionExportResponse> __Marshaller_clarifai_api_MultiDatasetVersionExportResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiDatasetVersionExportResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelTypeRequest> __Marshaller_clarifai_api_GetModelTypeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelTypeRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelTypeResponse> __Marshaller_clarifai_api_SingleModelTypeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModelTypeResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListOpenSourceLicensesRequest> __Marshaller_clarifai_api_ListOpenSourceLicensesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListOpenSourceLicensesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListOpenSourceLicensesResponse> __Marshaller_clarifai_api_ListOpenSourceLicensesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListOpenSourceLicensesResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelTypesRequest> __Marshaller_clarifai_api_ListModelTypesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelTypesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelTypeResponse> __Marshaller_clarifai_api_MultiModelTypeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelTypeResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelRequest> __Marshaller_clarifai_api_GetModelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelResponse> __Marshaller_clarifai_api_SingleModelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModelResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelsRequest> __Marshaller_clarifai_api_ListModelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelResponse> __Marshaller_clarifai_api_MultiModelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelsSearchesRequest> __Marshaller_clarifai_api_PostModelsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelsSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelsRequest> __Marshaller_clarifai_api_PostModelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelsRequest> __Marshaller_clarifai_api_PatchModelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelIdsRequest> __Marshaller_clarifai_api_PatchModelIdsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelIdsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelRequest> __Marshaller_clarifai_api_DeleteModelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModelRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelsRequest> __Marshaller_clarifai_api_DeleteModelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModelsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelCheckConsentsRequest> __Marshaller_clarifai_api_PatchModelCheckConsentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelCheckConsentsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelCheckConsentResponse> __Marshaller_clarifai_api_MultiModelCheckConsentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelCheckConsentResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelToolkitsRequest> __Marshaller_clarifai_api_PatchModelToolkitsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelToolkitsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelToolkitResponse> __Marshaller_clarifai_api_MultiModelToolkitResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelToolkitResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelUseCasesRequest> __Marshaller_clarifai_api_PatchModelUseCasesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelUseCasesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelUseCaseResponse> __Marshaller_clarifai_api_MultiModelUseCaseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelUseCaseResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelLanguagesRequest> __Marshaller_clarifai_api_PatchModelLanguagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelLanguagesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelLanguageResponse> __Marshaller_clarifai_api_MultiModelLanguageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelLanguageResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelInputsRequest> __Marshaller_clarifai_api_ListModelInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelInputsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelVersionRequest> __Marshaller_clarifai_api_GetModelVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelVersionRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelVersionResponse> __Marshaller_clarifai_api_SingleModelVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModelVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelVersionsRequest> __Marshaller_clarifai_api_ListModelVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelVersionResponse> __Marshaller_clarifai_api_MultiModelVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest> __Marshaller_clarifai_api_PostWorkflowVersionsUnPublishRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowVersionsPublishRequest> __Marshaller_clarifai_api_PostWorkflowVersionsPublishRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowVersionsPublishRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionsPublishRequest> __Marshaller_clarifai_api_PostModelVersionsPublishRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionsPublishRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionsUnPublishRequest> __Marshaller_clarifai_api_PostModelVersionsUnPublishRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionsUnPublishRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionsRequest> __Marshaller_clarifai_api_PostModelVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelVersionsRequest> __Marshaller_clarifai_api_PatchModelVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelVersionRequest> __Marshaller_clarifai_api_DeleteModelVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModelVersionRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelVersionMetricsRequest> __Marshaller_clarifai_api_GetModelVersionMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelVersionMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionMetricsRequest> __Marshaller_clarifai_api_PostModelVersionMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelReferencesRequest> __Marshaller_clarifai_api_ListModelReferencesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelReferencesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelReferenceResponse> __Marshaller_clarifai_api_MultiModelReferenceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelReferenceResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelReferencesRequest> __Marshaller_clarifai_api_PostModelReferencesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelReferencesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelReferencesRequest> __Marshaller_clarifai_api_DeleteModelReferencesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModelReferencesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelVersionInputExampleRequest> __Marshaller_clarifai_api_GetModelVersionInputExampleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelVersionInputExampleRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelVersionInputExampleResponse> __Marshaller_clarifai_api_SingleModelVersionInputExampleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModelVersionInputExampleResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelVersionInputExamplesRequest> __Marshaller_clarifai_api_ListModelVersionInputExamplesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelVersionInputExamplesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelVersionInputExampleResponse> __Marshaller_clarifai_api_MultiModelVersionInputExampleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelVersionInputExampleResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionInputExamplesRequest> __Marshaller_clarifai_api_PostModelVersionInputExamplesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionInputExamplesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelVersionInputExamplesRequest> __Marshaller_clarifai_api_DeleteModelVersionInputExamplesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModelVersionInputExamplesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelStarsRequest> __Marshaller_clarifai_api_PostModelStarsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelStarsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelStarResponse> __Marshaller_clarifai_api_MultiModelStarResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelStarResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelStarsRequest> __Marshaller_clarifai_api_DeleteModelStarsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModelStarsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelStarsResponse> __Marshaller_clarifai_api_DeleteModelStarsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModelStarsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostUserStarsRequest> __Marshaller_clarifai_api_PostUserStarsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostUserStarsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiUserStarResponse> __Marshaller_clarifai_api_MultiUserStarResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiUserStarResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteUserStarsRequest> __Marshaller_clarifai_api_DeleteUserStarsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteUserStarsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteUserStarsResponse> __Marshaller_clarifai_api_DeleteUserStarsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteUserStarsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowStarsRequest> __Marshaller_clarifai_api_PostWorkflowStarsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowStarsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiWorkflowStarResponse> __Marshaller_clarifai_api_MultiWorkflowStarResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiWorkflowStarResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowStarsRequest> __Marshaller_clarifai_api_DeleteWorkflowStarsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteWorkflowStarsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowStarsResponse> __Marshaller_clarifai_api_DeleteWorkflowStarsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteWorkflowStarsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAppStarsRequest> __Marshaller_clarifai_api_PostAppStarsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAppStarsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAppStarResponse> __Marshaller_clarifai_api_MultiAppStarResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAppStarResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAppStarsRequest> __Marshaller_clarifai_api_DeleteAppStarsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAppStarsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAppStarsResponse> __Marshaller_clarifai_api_DeleteAppStarsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAppStarsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetWorkflowRequest> __Marshaller_clarifai_api_GetWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetWorkflowRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleWorkflowResponse> __Marshaller_clarifai_api_SingleWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleWorkflowResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListWorkflowsRequest> __Marshaller_clarifai_api_ListWorkflowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListWorkflowsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiWorkflowResponse> __Marshaller_clarifai_api_MultiWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiWorkflowResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListPublicWorkflowsRequest> __Marshaller_clarifai_api_ListPublicWorkflowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListPublicWorkflowsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowsRequest> __Marshaller_clarifai_api_PostWorkflowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchWorkflowsRequest> __Marshaller_clarifai_api_PatchWorkflowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchWorkflowsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchWorkflowIdsRequest> __Marshaller_clarifai_api_PatchWorkflowIdsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchWorkflowIdsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowRequest> __Marshaller_clarifai_api_DeleteWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteWorkflowRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowsRequest> __Marshaller_clarifai_api_DeleteWorkflowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteWorkflowsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsRequest> __Marshaller_clarifai_api_PostWorkflowResultsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowResultsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsResponse> __Marshaller_clarifai_api_PostWorkflowResultsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowResultsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest> __Marshaller_clarifai_api_PostWorkflowResultsSimilarityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowResultsSimilarityRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> __Marshaller_clarifai_api_PostWorkflowResultsSimilarityResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListWorkflowVersionsRequest> __Marshaller_clarifai_api_ListWorkflowVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListWorkflowVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiWorkflowVersionResponse> __Marshaller_clarifai_api_MultiWorkflowVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiWorkflowVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetWorkflowVersionRequest> __Marshaller_clarifai_api_GetWorkflowVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetWorkflowVersionRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleWorkflowVersionResponse> __Marshaller_clarifai_api_SingleWorkflowVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleWorkflowVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowVersionsRequest> __Marshaller_clarifai_api_DeleteWorkflowVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteWorkflowVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchWorkflowVersionsRequest> __Marshaller_clarifai_api_PatchWorkflowVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchWorkflowVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowMetricsRequest> __Marshaller_clarifai_api_PostWorkflowMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiWorkflowMetricsResponse> __Marshaller_clarifai_api_MultiWorkflowMetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiWorkflowMetricsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetWorkflowMetricsRequest> __Marshaller_clarifai_api_GetWorkflowMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetWorkflowMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleWorkflowMetricsResponse> __Marshaller_clarifai_api_SingleWorkflowMetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleWorkflowMetricsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetWorkflowNodeMetricsRequest> __Marshaller_clarifai_api_GetWorkflowNodeMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetWorkflowNodeMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleWorkflowNodeMetricsResponse> __Marshaller_clarifai_api_SingleWorkflowNodeMetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleWorkflowNodeMetricsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListWorkflowMetricsRequest> __Marshaller_clarifai_api_ListWorkflowMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListWorkflowMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowMetricsRequest> __Marshaller_clarifai_api_DeleteWorkflowMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteWorkflowMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetKeyRequest> __Marshaller_clarifai_api_GetKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetKeyRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleKeyResponse> __Marshaller_clarifai_api_SingleKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleKeyResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListKeysRequest> __Marshaller_clarifai_api_ListKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListKeysRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiKeyResponse> __Marshaller_clarifai_api_MultiKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiKeyResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAppKeysRequest> __Marshaller_clarifai_api_ListAppKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAppKeysRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteKeyRequest> __Marshaller_clarifai_api_DeleteKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteKeyRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostKeysRequest> __Marshaller_clarifai_api_PostKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostKeysRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchKeysRequest> __Marshaller_clarifai_api_PatchKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchKeysRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MyScopesRequest> __Marshaller_clarifai_api_MyScopesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MyScopesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiScopeResponse> __Marshaller_clarifai_api_MultiScopeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiScopeResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MyScopesUserRequest> __Marshaller_clarifai_api_MyScopesUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MyScopesUserRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiScopeUserResponse> __Marshaller_clarifai_api_MultiScopeUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiScopeUserResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MyScopesRootRequest> __Marshaller_clarifai_api_MyScopesRootRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MyScopesRootRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiScopeRootResponse> __Marshaller_clarifai_api_MultiScopeRootResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiScopeRootResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListScopesRequest> __Marshaller_clarifai_api_ListScopesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListScopesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiScopeDepsResponse> __Marshaller_clarifai_api_MultiScopeDepsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiScopeDepsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAppRequest> __Marshaller_clarifai_api_GetAppRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAppRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAppResponse> __Marshaller_clarifai_api_SingleAppResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleAppResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAppsRequest> __Marshaller_clarifai_api_ListAppsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAppsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAppResponse> __Marshaller_clarifai_api_MultiAppResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAppResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAppRequest> __Marshaller_clarifai_api_DeleteAppRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAppRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAppsRequest> __Marshaller_clarifai_api_PostAppsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAppsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAppsRequest> __Marshaller_clarifai_api_PatchAppsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAppsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAppsIdsRequest> __Marshaller_clarifai_api_PatchAppsIdsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAppsIdsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAppRequest> __Marshaller_clarifai_api_PatchAppRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAppRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAppOwnerRequest> __Marshaller_clarifai_api_PatchAppOwnerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAppOwnerRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAppsSearchesRequest> __Marshaller_clarifai_api_PostAppsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAppsSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetUserRequest> __Marshaller_clarifai_api_GetUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetUserRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleUserResponse> __Marshaller_clarifai_api_SingleUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleUserResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListUsersRequest> __Marshaller_clarifai_api_ListUsersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListUsersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiUserResponse> __Marshaller_clarifai_api_MultiUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiUserResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostUserConsentRequest> __Marshaller_clarifai_api_PostUserConsentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostUserConsentRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchUserRequest> __Marshaller_clarifai_api_PatchUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchUserRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostUserAccessRequest> __Marshaller_clarifai_api_PostUserAccessRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostUserAccessRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiUserAccessResponse> __Marshaller_clarifai_api_MultiUserAccessResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiUserAccessResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetUserAccessRequest> __Marshaller_clarifai_api_GetUserAccessRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetUserAccessRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleUserAccessResponse> __Marshaller_clarifai_api_SingleUserAccessResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleUserAccessResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostEmailsRequest> __Marshaller_clarifai_api_PostEmailsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostEmailsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultipleEmailResponse> __Marshaller_clarifai_api_MultipleEmailResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultipleEmailResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListEmailsRequest> __Marshaller_clarifai_api_ListEmailsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListEmailsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostResendVerifyRequest> __Marshaller_clarifai_api_PostResendVerifyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostResendVerifyRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleResendVerifyResponse> __Marshaller_clarifai_api_SingleResendVerifyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleResendVerifyResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteEmailRequest> __Marshaller_clarifai_api_DeleteEmailRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteEmailRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostPrimaryEmailRequest> __Marshaller_clarifai_api_PostPrimaryEmailRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostPrimaryEmailRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleEmailResponse> __Marshaller_clarifai_api_SingleEmailResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleEmailResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostValidatePasswordRequest> __Marshaller_clarifai_api_PostValidatePasswordRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostValidatePasswordRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SinglePasswordValidationResponse> __Marshaller_clarifai_api_SinglePasswordValidationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SinglePasswordValidationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListGlobalPasswordPoliciesRequest> __Marshaller_clarifai_api_ListGlobalPasswordPoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListGlobalPasswordPoliciesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiplePasswordPoliciesResponse> __Marshaller_clarifai_api_MultiplePasswordPoliciesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiplePasswordPoliciesResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListPasswordPoliciesRequest> __Marshaller_clarifai_api_ListPasswordPoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListPasswordPoliciesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostPasswordPoliciesRequest> __Marshaller_clarifai_api_PostPasswordPoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostPasswordPoliciesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchPasswordPoliciesRequest> __Marshaller_clarifai_api_PatchPasswordPoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchPasswordPoliciesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeletePasswordPoliciesRequest> __Marshaller_clarifai_api_DeletePasswordPoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeletePasswordPoliciesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.UserFeatureConfigRequest> __Marshaller_clarifai_api_UserFeatureConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.UserFeatureConfigRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleUserFeatureConfigResponse> __Marshaller_clarifai_api_SingleUserFeatureConfigResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleUserFeatureConfigResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostOrganizationsRequest> __Marshaller_clarifai_api_PostOrganizationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostOrganizationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiOrganizationResponse> __Marshaller_clarifai_api_MultiOrganizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiOrganizationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListUsersOrganizationsRequest> __Marshaller_clarifai_api_ListUsersOrganizationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListUsersOrganizationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiUsersOrganizationsResponse> __Marshaller_clarifai_api_MultiUsersOrganizationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiUsersOrganizationsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListOrganizationsRequest> __Marshaller_clarifai_api_ListOrganizationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListOrganizationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetOrganizationRequest> __Marshaller_clarifai_api_GetOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetOrganizationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleOrganizationResponse> __Marshaller_clarifai_api_SingleOrganizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleOrganizationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchOrganizationRequest> __Marshaller_clarifai_api_PatchOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchOrganizationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteOrganizationRequest> __Marshaller_clarifai_api_DeleteOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteOrganizationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListOrganizationMembersRequest> __Marshaller_clarifai_api_ListOrganizationMembersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListOrganizationMembersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiOrganizationMemberResponse> __Marshaller_clarifai_api_MultiOrganizationMemberResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiOrganizationMemberResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListOrganizationAppMembersRequest> __Marshaller_clarifai_api_ListOrganizationAppMembersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListOrganizationAppMembersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostOrganizationMemberRequest> __Marshaller_clarifai_api_PostOrganizationMemberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostOrganizationMemberRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchOrganizationMembersRequest> __Marshaller_clarifai_api_PatchOrganizationMembersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchOrganizationMembersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteOrganizationMemberRequest> __Marshaller_clarifai_api_DeleteOrganizationMemberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteOrganizationMemberRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostOrganizationInvitationsRequest> __Marshaller_clarifai_api_PostOrganizationInvitationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostOrganizationInvitationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiOrganizationInvitationResponse> __Marshaller_clarifai_api_MultiOrganizationInvitationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiOrganizationInvitationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchOrganizationInvitationsRequest> __Marshaller_clarifai_api_PatchOrganizationInvitationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchOrganizationInvitationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListOrganizationInvitationsRequest> __Marshaller_clarifai_api_ListOrganizationInvitationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListOrganizationInvitationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetOrganizationInvitationRequest> __Marshaller_clarifai_api_GetOrganizationInvitationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetOrganizationInvitationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleOrganizationInvitationResponse> __Marshaller_clarifai_api_SingleOrganizationInvitationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleOrganizationInvitationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostDeclineOrganizationInvitationRequest> __Marshaller_clarifai_api_PostDeclineOrganizationInvitationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostDeclineOrganizationInvitationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAcceptOrganizationInvitationRequest> __Marshaller_clarifai_api_PostAcceptOrganizationInvitationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAcceptOrganizationInvitationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetOrganizationInvitationPublicRequest> __Marshaller_clarifai_api_GetOrganizationInvitationPublicRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetOrganizationInvitationPublicRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteRequestingUserFromOrganizationRequest> __Marshaller_clarifai_api_DeleteRequestingUserFromOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteRequestingUserFromOrganizationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostIdentityProvidersRequest> __Marshaller_clarifai_api_PostIdentityProvidersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostIdentityProvidersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiIdentityProviderResponse> __Marshaller_clarifai_api_MultiIdentityProviderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiIdentityProviderResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListIdentityProvidersRequest> __Marshaller_clarifai_api_ListIdentityProvidersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListIdentityProvidersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetIdentityProviderRequest> __Marshaller_clarifai_api_GetIdentityProviderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetIdentityProviderRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleIdentityProviderResponse> __Marshaller_clarifai_api_SingleIdentityProviderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleIdentityProviderResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchIdentityProvidersRequest> __Marshaller_clarifai_api_PatchIdentityProvidersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchIdentityProvidersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteIdentityProvidersRequest> __Marshaller_clarifai_api_DeleteIdentityProvidersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteIdentityProvidersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostTeamsRequest> __Marshaller_clarifai_api_PostTeamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostTeamsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiTeamResponse> __Marshaller_clarifai_api_MultiTeamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiTeamResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListTeamsRequest> __Marshaller_clarifai_api_ListTeamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListTeamsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetTeamRequest> __Marshaller_clarifai_api_GetTeamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetTeamRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleTeamResponse> __Marshaller_clarifai_api_SingleTeamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleTeamResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchTeamsRequest> __Marshaller_clarifai_api_PatchTeamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchTeamsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteTeamsRequest> __Marshaller_clarifai_api_DeleteTeamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteTeamsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostTeamUsersRequest> __Marshaller_clarifai_api_PostTeamUsersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostTeamUsersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiTeamUserResponse> __Marshaller_clarifai_api_MultiTeamUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiTeamUserResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListTeamUsersRequest> __Marshaller_clarifai_api_ListTeamUsersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListTeamUsersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteTeamUsersRequest> __Marshaller_clarifai_api_DeleteTeamUsersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteTeamUsersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostTeamAppsRequest> __Marshaller_clarifai_api_PostTeamAppsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostTeamAppsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListTeamAppsRequest> __Marshaller_clarifai_api_ListTeamAppsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListTeamAppsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiTeamAppsResponse> __Marshaller_clarifai_api_MultiTeamAppsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiTeamAppsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteTeamAppsRequest> __Marshaller_clarifai_api_DeleteTeamAppsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteTeamAppsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListRolesRequest> __Marshaller_clarifai_api_ListRolesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListRolesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiRoleResponse> __Marshaller_clarifai_api_MultiRoleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiRoleResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetRoleRequest> __Marshaller_clarifai_api_GetRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetRoleRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleRoleResponse> __Marshaller_clarifai_api_SingleRoleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleRoleResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetSearchRequest> __Marshaller_clarifai_api_GetSearchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetSearchRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleSearchResponse> __Marshaller_clarifai_api_SingleSearchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleSearchResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListSearchesRequest> __Marshaller_clarifai_api_ListSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchSearchesRequest> __Marshaller_clarifai_api_PatchSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostSearchesRequest> __Marshaller_clarifai_api_PostSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostSearchesByIDRequest> __Marshaller_clarifai_api_PostSearchesByIDRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostSearchesByIDRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_PostAnnotationSearchMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAnnotationSearchMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_GetAnnotationSearchMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAnnotationSearchMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_ListAnnotationSearchMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAnnotationSearchMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_DeleteAnnotationSearchMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteSearchRequest> __Marshaller_clarifai_api_DeleteSearchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteSearchRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAttributeSearchRequest> __Marshaller_clarifai_api_PostAttributeSearchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAttributeSearchRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAnnotationFiltersRequest> __Marshaller_clarifai_api_ListAnnotationFiltersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAnnotationFiltersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAnnotationFilterResponse> __Marshaller_clarifai_api_MultiAnnotationFilterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAnnotationFilterResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAnnotationFilterRequest> __Marshaller_clarifai_api_GetAnnotationFilterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAnnotationFilterRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAnnotationFilterResponse> __Marshaller_clarifai_api_SingleAnnotationFilterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleAnnotationFilterResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationFiltersRequest> __Marshaller_clarifai_api_PostAnnotationFiltersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAnnotationFiltersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationFiltersRequest> __Marshaller_clarifai_api_PatchAnnotationFiltersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationFiltersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationFiltersRequest> __Marshaller_clarifai_api_DeleteAnnotationFiltersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAnnotationFiltersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListClustersRequest> __Marshaller_clarifai_api_ListClustersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListClustersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiClusterResponse> __Marshaller_clarifai_api_MultiClusterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiClusterResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAnnotationsForClusterRequest> __Marshaller_clarifai_api_ListAnnotationsForClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAnnotationsForClusterRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostClustersSearchesRequest> __Marshaller_clarifai_api_PostClustersSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostClustersSearchesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostVerifyEmailRequest> __Marshaller_clarifai_api_PostVerifyEmailRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostVerifyEmailRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleVerifyEmailResponse> __Marshaller_clarifai_api_SingleVerifyEmailResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleVerifyEmailResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.RequestResetPasswordRequest> __Marshaller_clarifai_api_RequestResetPasswordRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.RequestResetPasswordRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.CompleteResetPasswordRequest> __Marshaller_clarifai_api_CompleteResetPasswordRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.CompleteResetPasswordRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostLoginRequest> __Marshaller_clarifai_api_PostLoginRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostLoginRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleLoginResponse> __Marshaller_clarifai_api_SingleLoginResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleLoginResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostSignupRequest> __Marshaller_clarifai_api_PostSignupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostSignupRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostLogoutRequest> __Marshaller_clarifai_api_PostLogoutRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostLogoutRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleLogoutResponse> __Marshaller_clarifai_api_SingleLogoutResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleLogoutResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAuthMethodsRequest> __Marshaller_clarifai_api_ListAuthMethodsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAuthMethodsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAuthMethodsResponse> __Marshaller_clarifai_api_ListAuthMethodsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAuthMethodsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostIdLoginFinalizerRequest> __Marshaller_clarifai_api_PostIdLoginFinalizerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostIdLoginFinalizerRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostIdLoginFinalizerResponse> __Marshaller_clarifai_api_PostIdLoginFinalizerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostIdLoginFinalizerResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostLinkIdpUserRequest> __Marshaller_clarifai_api_PostLinkIdpUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostLinkIdpUserRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostLinkIdpUserResponse> __Marshaller_clarifai_api_PostLinkIdpUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostLinkIdpUserResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetLoginInfoRequest> __Marshaller_clarifai_api_GetLoginInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetLoginInfoRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetLoginInfoResponse> __Marshaller_clarifai_api_GetLoginInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetLoginInfoResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.List2FAMethodsRequest> __Marshaller_clarifai_api_List2FAMethodsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.List2FAMethodsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.List2FAMethodsResponse> __Marshaller_clarifai_api_List2FAMethodsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.List2FAMethodsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAuth2FATotpRegisterEnableRequest> __Marshaller_clarifai_api_PostAuth2FATotpRegisterEnableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAuth2FATotpRegisterEnableRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAuth2FATotpRegisterEnableResponse> __Marshaller_clarifai_api_PostAuth2FATotpRegisterEnableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAuth2FATotpRegisterEnableResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAuth2FATotpRegisterVerifyRequest> __Marshaller_clarifai_api_PostAuth2FATotpRegisterVerifyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAuth2FATotpRegisterVerifyRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAuth2FATotpRegisterVerifyResponse> __Marshaller_clarifai_api_PostAuth2FATotpRegisterVerifyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAuth2FATotpRegisterVerifyResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAuth2FATotpDisableRequest> __Marshaller_clarifai_api_PostAuth2FATotpDisableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAuth2FATotpDisableRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAuth2FATotpDisableResponse> __Marshaller_clarifai_api_PostAuth2FATotpDisableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAuth2FATotpDisableResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAuth2FATotpLoginRequest> __Marshaller_clarifai_api_PostAuth2FATotpLoginRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAuth2FATotpLoginRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAuth2FATotpRecoverRequest> __Marshaller_clarifai_api_PostAuth2FATotpRecoverRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAuth2FATotpRecoverRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAuth2FATotpRecoverResponse> __Marshaller_clarifai_api_PostAuth2FATotpRecoverResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAuth2FATotpRecoverResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAuth2FATotpRecoverConfirmRequest> __Marshaller_clarifai_api_GetAuth2FATotpRecoverConfirmRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAuth2FATotpRecoverConfirmRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAuth2FATotpRecoverConfirmResponse> __Marshaller_clarifai_api_GetAuth2FATotpRecoverConfirmResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAuth2FATotpRecoverConfirmResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetSubscriptionRequest> __Marshaller_clarifai_api_GetSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetSubscriptionRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleSubscriptionResponse> __Marshaller_clarifai_api_SingleSubscriptionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleSubscriptionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostSubscriptionRequest> __Marshaller_clarifai_api_PostSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostSubscriptionRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListCreditCardsRequest> __Marshaller_clarifai_api_ListCreditCardsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListCreditCardsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultipleCreditCardResponse> __Marshaller_clarifai_api_MultipleCreditCardResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultipleCreditCardResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostCreditCardRequest> __Marshaller_clarifai_api_PostCreditCardRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostCreditCardRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleCreditCardResponse> __Marshaller_clarifai_api_SingleCreditCardResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleCreditCardResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteCreditCardRequest> __Marshaller_clarifai_api_DeleteCreditCardRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteCreditCardRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchCreditCardsRequest> __Marshaller_clarifai_api_PatchCreditCardsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchCreditCardsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetShippingAddressRequest> __Marshaller_clarifai_api_GetShippingAddressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetShippingAddressRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleShippingAddressResponse> __Marshaller_clarifai_api_SingleShippingAddressResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleShippingAddressResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PutShippingAddressRequest> __Marshaller_clarifai_api_PutShippingAddressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PutShippingAddressRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListPlansRequest> __Marshaller_clarifai_api_ListPlansRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListPlansRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiPlanResponse> __Marshaller_clarifai_api_MultiPlanResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiPlanResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListStatusCodesRequest> __Marshaller_clarifai_api_ListStatusCodesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListStatusCodesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiStatusCodeResponse> __Marshaller_clarifai_api_MultiStatusCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiStatusCodeResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetStatusCodeRequest> __Marshaller_clarifai_api_GetStatusCodeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetStatusCodeRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleStatusCodeResponse> __Marshaller_clarifai_api_SingleStatusCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleStatusCodeResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetHealthzRequest> __Marshaller_clarifai_api_GetHealthzRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetHealthzRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetHealthzResponse> __Marshaller_clarifai_api_GetHealthzResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetHealthzResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListUserBillingCyclesRequest> __Marshaller_clarifai_api_ListUserBillingCyclesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListUserBillingCyclesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListUserBillingCyclesResponse> __Marshaller_clarifai_api_ListUserBillingCyclesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListUserBillingCyclesResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListUserCyclesRequest> __Marshaller_clarifai_api_ListUserCyclesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListUserCyclesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListUserCyclesResponse> __Marshaller_clarifai_api_ListUserCyclesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListUserCyclesResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetBillingUsageRequest> __Marshaller_clarifai_api_GetBillingUsageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetBillingUsageRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetBillingUsageResponse> __Marshaller_clarifai_api_GetBillingUsageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetBillingUsageResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostHistoricalUsageRequest> __Marshaller_clarifai_api_PostHistoricalUsageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostHistoricalUsageRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostHistoricalUsageResponse> __Marshaller_clarifai_api_PostHistoricalUsageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostHistoricalUsageResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetHistoricalUsageRequest> __Marshaller_clarifai_api_GetHistoricalUsageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetHistoricalUsageRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetHistoricalUsageResponse> __Marshaller_clarifai_api_GetHistoricalUsageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetHistoricalUsageResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListUsageIntervalsRequest> __Marshaller_clarifai_api_ListUsageIntervalsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListUsageIntervalsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListUsageIntervalsResponse> __Marshaller_clarifai_api_ListUsageIntervalsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListUsageIntervalsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetRealtimeUsageRequest> __Marshaller_clarifai_api_GetRealtimeUsageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetRealtimeUsageRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetRealtimeUsageResponse> __Marshaller_clarifai_api_GetRealtimeUsageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetRealtimeUsageResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostUsageRequest> __Marshaller_clarifai_api_PostUsageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostUsageRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostUsageResponse> __Marshaller_clarifai_api_PostUsageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostUsageResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListCollaboratorsRequest> __Marshaller_clarifai_api_ListCollaboratorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListCollaboratorsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiCollaboratorsResponse> __Marshaller_clarifai_api_MultiCollaboratorsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiCollaboratorsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostCollaboratorsRequest> __Marshaller_clarifai_api_PostCollaboratorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostCollaboratorsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchCollaboratorsRequest> __Marshaller_clarifai_api_PatchCollaboratorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchCollaboratorsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteCollaboratorsRequest> __Marshaller_clarifai_api_DeleteCollaboratorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteCollaboratorsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListCollaborationsRequest> __Marshaller_clarifai_api_ListCollaborationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListCollaborationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiCollaborationsResponse> __Marshaller_clarifai_api_MultiCollaborationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiCollaborationsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.FetchLicenseRequest> __Marshaller_clarifai_api_FetchLicenseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.FetchLicenseRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.FetchLicenseResponse> __Marshaller_clarifai_api_FetchLicenseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.FetchLicenseResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListLicensesRequest> __Marshaller_clarifai_api_ListLicensesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListLicensesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultipleLicensesResponse> __Marshaller_clarifai_api_MultipleLicensesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultipleLicensesResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetLicenseRequest> __Marshaller_clarifai_api_GetLicenseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetLicenseRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleLicenseResponse> __Marshaller_clarifai_api_SingleLicenseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleLicenseResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ValidateLicenseRequest> __Marshaller_clarifai_api_ValidateLicenseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ValidateLicenseRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ValidateLicenseResponse> __Marshaller_clarifai_api_ValidateLicenseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ValidateLicenseResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAppDuplicationsRequest> __Marshaller_clarifai_api_PostAppDuplicationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAppDuplicationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAppDuplicationsResponse> __Marshaller_clarifai_api_MultiAppDuplicationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAppDuplicationsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAppDuplicationsRequest> __Marshaller_clarifai_api_ListAppDuplicationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAppDuplicationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAppDuplicationRequest> __Marshaller_clarifai_api_GetAppDuplicationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAppDuplicationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAppDuplicationResponse> __Marshaller_clarifai_api_SingleAppDuplicationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleAppDuplicationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostTasksRequest> __Marshaller_clarifai_api_PostTasksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostTasksRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiTaskResponse> __Marshaller_clarifai_api_MultiTaskResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiTaskResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetTaskCountRequest> __Marshaller_clarifai_api_GetTaskCountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetTaskCountRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleTaskCountResponse> __Marshaller_clarifai_api_SingleTaskCountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleTaskCountResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetTaskRequest> __Marshaller_clarifai_api_GetTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetTaskRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleTaskResponse> __Marshaller_clarifai_api_SingleTaskResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleTaskResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListTasksRequest> __Marshaller_clarifai_api_ListTasksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListTasksRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchTasksRequest> __Marshaller_clarifai_api_PatchTasksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchTasksRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteTasksRequest> __Marshaller_clarifai_api_DeleteTasksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteTasksRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationCountsRollupRequest> __Marshaller_clarifai_api_PatchAnnotationCountsRollupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationCountsRollupRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostLabelOrdersRequest> __Marshaller_clarifai_api_PostLabelOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostLabelOrdersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiLabelOrderResponse> __Marshaller_clarifai_api_MultiLabelOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiLabelOrderResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetLabelOrderRequest> __Marshaller_clarifai_api_GetLabelOrderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetLabelOrderRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleLabelOrderResponse> __Marshaller_clarifai_api_SingleLabelOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleLabelOrderResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListLabelOrdersRequest> __Marshaller_clarifai_api_ListLabelOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListLabelOrdersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchLabelOrdersRequest> __Marshaller_clarifai_api_PatchLabelOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchLabelOrdersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteLabelOrdersRequest> __Marshaller_clarifai_api_DeleteLabelOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteLabelOrdersRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostCollectorsRequest> __Marshaller_clarifai_api_PostCollectorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostCollectorsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiCollectorResponse> __Marshaller_clarifai_api_MultiCollectorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiCollectorResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetCollectorRequest> __Marshaller_clarifai_api_GetCollectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetCollectorRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleCollectorResponse> __Marshaller_clarifai_api_SingleCollectorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleCollectorResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListCollectorsRequest> __Marshaller_clarifai_api_ListCollectorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListCollectorsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchCollectorsRequest> __Marshaller_clarifai_api_PatchCollectorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchCollectorsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteCollectorsRequest> __Marshaller_clarifai_api_DeleteCollectorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteCollectorsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostStatValuesRequest> __Marshaller_clarifai_api_PostStatValuesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostStatValuesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiStatValueResponse> __Marshaller_clarifai_api_MultiStatValueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiStatValueResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostStatValuesAggregateRequest> __Marshaller_clarifai_api_PostStatValuesAggregateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostStatValuesAggregateRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiStatValueAggregateResponse> __Marshaller_clarifai_api_MultiStatValueAggregateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiStatValueAggregateResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnalyticsRequest> __Marshaller_clarifai_api_PostAnalyticsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAnalyticsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnalyticsResponse> __Marshaller_clarifai_api_PostAnalyticsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAnalyticsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostSDKBillingRequest> __Marshaller_clarifai_api_PostSDKBillingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostSDKBillingRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostSDKBillingResponse> __Marshaller_clarifai_api_PostSDKBillingResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostSDKBillingResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostFindDuplicateAnnotationsJobsRequest> __Marshaller_clarifai_api_PostFindDuplicateAnnotationsJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostFindDuplicateAnnotationsJobsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse> __Marshaller_clarifai_api_MultiFindDuplicateAnnotationsJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetFindDuplicateAnnotationsJobRequest> __Marshaller_clarifai_api_GetFindDuplicateAnnotationsJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetFindDuplicateAnnotationsJobRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleFindDuplicateAnnotationsJobResponse> __Marshaller_clarifai_api_SingleFindDuplicateAnnotationsJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleFindDuplicateAnnotationsJobResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListFindDuplicateAnnotationsJobsRequest> __Marshaller_clarifai_api_ListFindDuplicateAnnotationsJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListFindDuplicateAnnotationsJobsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteFindDuplicateAnnotationsJobsRequest> __Marshaller_clarifai_api_DeleteFindDuplicateAnnotationsJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteFindDuplicateAnnotationsJobsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostTrendingMetricsViewRequest> __Marshaller_clarifai_api_PostTrendingMetricsViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostTrendingMetricsViewRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListTrendingMetricsViewsRequest> __Marshaller_clarifai_api_ListTrendingMetricsViewsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListTrendingMetricsViewsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiTrendingMetricsViewResponse> __Marshaller_clarifai_api_MultiTrendingMetricsViewResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiTrendingMetricsViewResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostIdValidationRequest> __Marshaller_clarifai_api_PostIdValidationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostIdValidationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiIdValidationResponse> __Marshaller_clarifai_api_MultiIdValidationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiIdValidationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListTagCategoriesRequest> __Marshaller_clarifai_api_ListTagCategoriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListTagCategoriesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiTagCategoryResponse> __Marshaller_clarifai_api_MultiTagCategoryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiTagCategoryResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListWebNotificationsRequest> __Marshaller_clarifai_api_ListWebNotificationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListWebNotificationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiWebNotificationResponse> __Marshaller_clarifai_api_MultiWebNotificationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiWebNotificationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetWebNotificationRequest> __Marshaller_clarifai_api_GetWebNotificationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetWebNotificationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleWebNotificationResponse> __Marshaller_clarifai_api_SingleWebNotificationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleWebNotificationResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchWebNotificationsRequest> __Marshaller_clarifai_api_PatchWebNotificationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchWebNotificationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWebNotificationsRequest> __Marshaller_clarifai_api_DeleteWebNotificationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteWebNotificationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModuleRequest> __Marshaller_clarifai_api_GetModuleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModuleRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModuleResponse> __Marshaller_clarifai_api_SingleModuleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModuleResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModulesRequest> __Marshaller_clarifai_api_ListModulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModulesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModuleResponse> __Marshaller_clarifai_api_MultiModuleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModuleResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModulesRequest> __Marshaller_clarifai_api_PostModulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModulesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModulesRequest> __Marshaller_clarifai_api_PatchModulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModulesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModulesRequest> __Marshaller_clarifai_api_DeleteModulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModulesRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModuleVersionRequest> __Marshaller_clarifai_api_GetModuleVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModuleVersionRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModuleVersionResponse> __Marshaller_clarifai_api_SingleModuleVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModuleVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModuleVersionsRequest> __Marshaller_clarifai_api_ListModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModuleVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModuleVersionResponse> __Marshaller_clarifai_api_MultiModuleVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModuleVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModuleVersionsRequest> __Marshaller_clarifai_api_PostModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModuleVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModuleVersionsRequest> __Marshaller_clarifai_api_DeleteModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModuleVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInstalledModuleVersionRequest> __Marshaller_clarifai_api_GetInstalledModuleVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInstalledModuleVersionRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInstalledModuleVersionResponse> __Marshaller_clarifai_api_SingleInstalledModuleVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleInstalledModuleVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListInstalledModuleVersionsRequest> __Marshaller_clarifai_api_ListInstalledModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListInstalledModuleVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiInstalledModuleVersionResponse> __Marshaller_clarifai_api_MultiInstalledModuleVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiInstalledModuleVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInstalledModuleVersionsRequest> __Marshaller_clarifai_api_PostInstalledModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInstalledModuleVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteInstalledModuleVersionsRequest> __Marshaller_clarifai_api_DeleteInstalledModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteInstalledModuleVersionsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest> __Marshaller_clarifai_api_PostInstalledModuleVersionsKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostBulkOperationsRequest> __Marshaller_clarifai_api_PostBulkOperationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostBulkOperationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiBulkOperationsResponse> __Marshaller_clarifai_api_MultiBulkOperationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiBulkOperationsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListBulkOperationsRequest> __Marshaller_clarifai_api_ListBulkOperationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListBulkOperationsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetBulkOperationRequest> __Marshaller_clarifai_api_GetBulkOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetBulkOperationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleBulkOperationsResponse> __Marshaller_clarifai_api_SingleBulkOperationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleBulkOperationsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.CancelBulkOperationRequest> __Marshaller_clarifai_api_CancelBulkOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.CancelBulkOperationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteBulkOperationRequest> __Marshaller_clarifai_api_DeleteBulkOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteBulkOperationRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetDatasetInputsSearchAddJobRequest> __Marshaller_clarifai_api_GetDatasetInputsSearchAddJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetDatasetInputsSearchAddJobRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleDatasetInputsSearchAddJobResponse> __Marshaller_clarifai_api_SingleDatasetInputsSearchAddJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleDatasetInputsSearchAddJobResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListNextTaskAssignmentsRequest> __Marshaller_clarifai_api_ListNextTaskAssignmentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListNextTaskAssignmentsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PutTaskAssignmentsRequest> __Marshaller_clarifai_api_PutTaskAssignmentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PutTaskAssignmentsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWaitlistEmailsRequest> __Marshaller_clarifai_api_PostWaitlistEmailsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWaitlistEmailsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiWaitlistEmailResponse> __Marshaller_clarifai_api_MultiWaitlistEmailResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiWaitlistEmailResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetSampledPredictMetricsRequest> __Marshaller_clarifai_api_GetSampledPredictMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetSampledPredictMetricsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiSampledPredictMetricsResponse> __Marshaller_clarifai_api_MultiSampledPredictMetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiSampledPredictMetricsResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsAddJobsRequest> __Marshaller_clarifai_api_PostInputsAddJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInputsAddJobsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiInputsAddJobResponse> __Marshaller_clarifai_api_MultiInputsAddJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiInputsAddJobResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListInputsAddJobsRequest> __Marshaller_clarifai_api_ListInputsAddJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListInputsAddJobsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputsAddJobRequest> __Marshaller_clarifai_api_GetInputsAddJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInputsAddJobRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInputsAddJobResponse> __Marshaller_clarifai_api_SingleInputsAddJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleInputsAddJobResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.CancelInputsAddJobRequest> __Marshaller_clarifai_api_CancelInputsAddJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.CancelInputsAddJobRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PostUploadsRequest> __Marshaller_clarifai_api_PostUploadsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostUploadsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiUploadResponse> __Marshaller_clarifai_api_MultiUploadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiUploadResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.PutUploadContentPartsRequest> __Marshaller_clarifai_api_PutUploadContentPartsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PutUploadContentPartsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleUploadResponse> __Marshaller_clarifai_api_SingleUploadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleUploadResponse.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.GetUploadRequest> __Marshaller_clarifai_api_GetUploadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetUploadRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.ListUploadsRequest> __Marshaller_clarifai_api_ListUploadsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListUploadsRequest.Parser));
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteUploadsRequest> __Marshaller_clarifai_api_DeleteUploadsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteUploadsRequest.Parser));

    static readonly grpc::Method<global::Clarifai.Api.TestMessage, global::Clarifai.Api.TestMessage> __Method_Echo = new grpc::Method<global::Clarifai.Api.TestMessage, global::Clarifai.Api.TestMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Echo",
        __Marshaller_clarifai_api_TestMessage,
        __Marshaller_clarifai_api_TestMessage);

    static readonly grpc::Method<global::Clarifai.Api.ListConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse> __Method_ListConceptRelations = new grpc::Method<global::Clarifai.Api.ListConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConceptRelations",
        __Marshaller_clarifai_api_ListConceptRelationsRequest,
        __Marshaller_clarifai_api_MultiConceptRelationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse> __Method_PostConceptRelations = new grpc::Method<global::Clarifai.Api.PostConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptRelations",
        __Marshaller_clarifai_api_PostConceptRelationsRequest,
        __Marshaller_clarifai_api_MultiConceptRelationResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteConceptRelationsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteConceptRelations = new grpc::Method<global::Clarifai.Api.DeleteConceptRelationsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConceptRelations",
        __Marshaller_clarifai_api_DeleteConceptRelationsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetConceptCountsRequest, global::Clarifai.Api.MultiConceptCountResponse> __Method_GetConceptCounts = new grpc::Method<global::Clarifai.Api.GetConceptCountsRequest, global::Clarifai.Api.MultiConceptCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConceptCounts",
        __Marshaller_clarifai_api_GetConceptCountsRequest,
        __Marshaller_clarifai_api_MultiConceptCountResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetConceptRequest, global::Clarifai.Api.SingleConceptResponse> __Method_GetConcept = new grpc::Method<global::Clarifai.Api.GetConceptRequest, global::Clarifai.Api.SingleConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConcept",
        __Marshaller_clarifai_api_GetConceptRequest,
        __Marshaller_clarifai_api_SingleConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_ListConcepts = new grpc::Method<global::Clarifai.Api.ListConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConcepts",
        __Marshaller_clarifai_api_ListConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_ListModelConcepts = new grpc::Method<global::Clarifai.Api.ListModelConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelConcepts",
        __Marshaller_clarifai_api_ListModelConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptsSearchesRequest, global::Clarifai.Api.MultiConceptResponse> __Method_PostConceptsSearches = new grpc::Method<global::Clarifai.Api.PostConceptsSearchesRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptsSearches",
        __Marshaller_clarifai_api_PostConceptsSearchesRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_PostConcepts = new grpc::Method<global::Clarifai.Api.PostConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConcepts",
        __Marshaller_clarifai_api_PostConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_PatchConcepts = new grpc::Method<global::Clarifai.Api.PatchConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchConcepts",
        __Marshaller_clarifai_api_PatchConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetVocabRequest, global::Clarifai.Api.SingleVocabResponse> __Method_GetVocab = new grpc::Method<global::Clarifai.Api.GetVocabRequest, global::Clarifai.Api.SingleVocabResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVocab",
        __Marshaller_clarifai_api_GetVocabRequest,
        __Marshaller_clarifai_api_SingleVocabResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListVocabsRequest, global::Clarifai.Api.MultiVocabResponse> __Method_ListVocabs = new grpc::Method<global::Clarifai.Api.ListVocabsRequest, global::Clarifai.Api.MultiVocabResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListVocabs",
        __Marshaller_clarifai_api_ListVocabsRequest,
        __Marshaller_clarifai_api_MultiVocabResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostVocabsRequest, global::Clarifai.Api.MultiVocabResponse> __Method_PostVocabs = new grpc::Method<global::Clarifai.Api.PostVocabsRequest, global::Clarifai.Api.MultiVocabResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostVocabs",
        __Marshaller_clarifai_api_PostVocabsRequest,
        __Marshaller_clarifai_api_MultiVocabResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchVocabsRequest, global::Clarifai.Api.MultiVocabResponse> __Method_PatchVocabs = new grpc::Method<global::Clarifai.Api.PatchVocabsRequest, global::Clarifai.Api.MultiVocabResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchVocabs",
        __Marshaller_clarifai_api_PatchVocabsRequest,
        __Marshaller_clarifai_api_MultiVocabResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteVocabRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteVocab = new grpc::Method<global::Clarifai.Api.DeleteVocabRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteVocab",
        __Marshaller_clarifai_api_DeleteVocabRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteVocabsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteVocabs = new grpc::Method<global::Clarifai.Api.DeleteVocabsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteVocabs",
        __Marshaller_clarifai_api_DeleteVocabsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListVocabConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_ListVocabConcepts = new grpc::Method<global::Clarifai.Api.ListVocabConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListVocabConcepts",
        __Marshaller_clarifai_api_ListVocabConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostVocabConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_PostVocabConcepts = new grpc::Method<global::Clarifai.Api.PostVocabConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostVocabConcepts",
        __Marshaller_clarifai_api_PostVocabConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteVocabConceptRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteVocabConcept = new grpc::Method<global::Clarifai.Api.DeleteVocabConceptRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteVocabConcept",
        __Marshaller_clarifai_api_DeleteVocabConceptRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteVocabConceptsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteVocabConcepts = new grpc::Method<global::Clarifai.Api.DeleteVocabConceptsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteVocabConcepts",
        __Marshaller_clarifai_api_DeleteVocabConceptsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetConceptLanguageRequest, global::Clarifai.Api.SingleConceptLanguageResponse> __Method_GetConceptLanguage = new grpc::Method<global::Clarifai.Api.GetConceptLanguageRequest, global::Clarifai.Api.SingleConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConceptLanguage",
        __Marshaller_clarifai_api_GetConceptLanguageRequest,
        __Marshaller_clarifai_api_SingleConceptLanguageResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse> __Method_ListConceptLanguages = new grpc::Method<global::Clarifai.Api.ListConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConceptLanguages",
        __Marshaller_clarifai_api_ListConceptLanguagesRequest,
        __Marshaller_clarifai_api_MultiConceptLanguageResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse> __Method_PostConceptLanguages = new grpc::Method<global::Clarifai.Api.PostConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptLanguages",
        __Marshaller_clarifai_api_PostConceptLanguagesRequest,
        __Marshaller_clarifai_api_MultiConceptLanguageResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse> __Method_PatchConceptLanguages = new grpc::Method<global::Clarifai.Api.PatchConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchConceptLanguages",
        __Marshaller_clarifai_api_PatchConceptLanguagesRequest,
        __Marshaller_clarifai_api_MultiConceptLanguageResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListConceptReferencesRequest, global::Clarifai.Api.MultiConceptReferenceResponse> __Method_ListConceptReferences = new grpc::Method<global::Clarifai.Api.ListConceptReferencesRequest, global::Clarifai.Api.MultiConceptReferenceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConceptReferences",
        __Marshaller_clarifai_api_ListConceptReferencesRequest,
        __Marshaller_clarifai_api_MultiConceptReferenceResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse> __Method_ListKnowledgeGraphs = new grpc::Method<global::Clarifai.Api.ListKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListKnowledgeGraphs",
        __Marshaller_clarifai_api_ListKnowledgeGraphsRequest,
        __Marshaller_clarifai_api_MultiKnowledgeGraphResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse> __Method_PostKnowledgeGraphs = new grpc::Method<global::Clarifai.Api.PostKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostKnowledgeGraphs",
        __Marshaller_clarifai_api_PostKnowledgeGraphsRequest,
        __Marshaller_clarifai_api_MultiKnowledgeGraphResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptMappingJobsRequest, global::Clarifai.Api.MultiConceptMappingJobResponse> __Method_PostConceptMappingJobs = new grpc::Method<global::Clarifai.Api.PostConceptMappingJobsRequest, global::Clarifai.Api.MultiConceptMappingJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptMappingJobs",
        __Marshaller_clarifai_api_PostConceptMappingJobsRequest,
        __Marshaller_clarifai_api_MultiConceptMappingJobResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListConceptMappingsRequest, global::Clarifai.Api.MultiConceptMappingResponse> __Method_ListConceptMappings = new grpc::Method<global::Clarifai.Api.ListConceptMappingsRequest, global::Clarifai.Api.MultiConceptMappingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConceptMappings",
        __Marshaller_clarifai_api_ListConceptMappingsRequest,
        __Marshaller_clarifai_api_MultiConceptMappingResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptMappingsRequest, global::Clarifai.Api.MultiConceptMappingResponse> __Method_PostConceptMappings = new grpc::Method<global::Clarifai.Api.PostConceptMappingsRequest, global::Clarifai.Api.MultiConceptMappingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptMappings",
        __Marshaller_clarifai_api_PostConceptMappingsRequest,
        __Marshaller_clarifai_api_MultiConceptMappingResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetAnnotationRequest, global::Clarifai.Api.SingleAnnotationResponse> __Method_GetAnnotation = new grpc::Method<global::Clarifai.Api.GetAnnotationRequest, global::Clarifai.Api.SingleAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnnotation",
        __Marshaller_clarifai_api_GetAnnotationRequest,
        __Marshaller_clarifai_api_SingleAnnotationResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse> __Method_ListAnnotations = new grpc::Method<global::Clarifai.Api.ListAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotations",
        __Marshaller_clarifai_api_ListAnnotationsRequest,
        __Marshaller_clarifai_api_MultiAnnotationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse> __Method_PostAnnotations = new grpc::Method<global::Clarifai.Api.PostAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotations",
        __Marshaller_clarifai_api_PostAnnotationsRequest,
        __Marshaller_clarifai_api_MultiAnnotationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse> __Method_PatchAnnotations = new grpc::Method<global::Clarifai.Api.PatchAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnnotations",
        __Marshaller_clarifai_api_PatchAnnotationsRequest,
        __Marshaller_clarifai_api_MultiAnnotationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAnnotationsStatusRequest, global::Clarifai.Api.PatchAnnotationsStatusResponse> __Method_PatchAnnotationsStatus = new grpc::Method<global::Clarifai.Api.PatchAnnotationsStatusRequest, global::Clarifai.Api.PatchAnnotationsStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnnotationsStatus",
        __Marshaller_clarifai_api_PatchAnnotationsStatusRequest,
        __Marshaller_clarifai_api_PatchAnnotationsStatusResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotation = new grpc::Method<global::Clarifai.Api.DeleteAnnotationRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotation",
        __Marshaller_clarifai_api_DeleteAnnotationRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotations = new grpc::Method<global::Clarifai.Api.DeleteAnnotationsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotations",
        __Marshaller_clarifai_api_DeleteAnnotationsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PatchAnnotationsSearches = new grpc::Method<global::Clarifai.Api.PatchAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnnotationsSearches",
        __Marshaller_clarifai_api_PatchAnnotationsSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostAnnotationsSearches = new grpc::Method<global::Clarifai.Api.PostAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotationsSearches",
        __Marshaller_clarifai_api_PostAnnotationsSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetInputCountRequest, global::Clarifai.Api.SingleInputCountResponse> __Method_GetInputCount = new grpc::Method<global::Clarifai.Api.GetInputCountRequest, global::Clarifai.Api.SingleInputCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInputCount",
        __Marshaller_clarifai_api_GetInputCountRequest,
        __Marshaller_clarifai_api_SingleInputCountResponse);

    static readonly grpc::Method<global::Clarifai.Api.StreamInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_StreamInputs = new grpc::Method<global::Clarifai.Api.StreamInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StreamInputs",
        __Marshaller_clarifai_api_StreamInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetInputSamplesRequest, global::Clarifai.Api.MultiInputAnnotationResponse> __Method_GetInputSamples = new grpc::Method<global::Clarifai.Api.GetInputSamplesRequest, global::Clarifai.Api.MultiInputAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInputSamples",
        __Marshaller_clarifai_api_GetInputSamplesRequest,
        __Marshaller_clarifai_api_MultiInputAnnotationResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetInputRequest, global::Clarifai.Api.SingleInputResponse> __Method_GetInput = new grpc::Method<global::Clarifai.Api.GetInputRequest, global::Clarifai.Api.SingleInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInput",
        __Marshaller_clarifai_api_GetInputRequest,
        __Marshaller_clarifai_api_SingleInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_ListInputs = new grpc::Method<global::Clarifai.Api.ListInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInputs",
        __Marshaller_clarifai_api_ListInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_PostInputs = new grpc::Method<global::Clarifai.Api.PostInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputs",
        __Marshaller_clarifai_api_PostInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostInputsFileRequest, global::Clarifai.Api.MultiInputResponse> __Method_PostInputsFile = new grpc::Method<global::Clarifai.Api.PostInputsFileRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputsFile",
        __Marshaller_clarifai_api_PostInputsFileRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostInputsNiFiRequest, global::Clarifai.Api.MultiInputResponse> __Method_PostInputsNiFi = new grpc::Method<global::Clarifai.Api.PostInputsNiFiRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputsNiFi",
        __Marshaller_clarifai_api_PostInputsNiFiRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostInputsDocumentRequest, global::Clarifai.Api.MultiInputResponse> __Method_PostInputsDocument = new grpc::Method<global::Clarifai.Api.PostInputsDocumentRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputsDocument",
        __Marshaller_clarifai_api_PostInputsDocumentRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_PatchInputs = new grpc::Method<global::Clarifai.Api.PatchInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchInputs",
        __Marshaller_clarifai_api_PatchInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteInputRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteInput = new grpc::Method<global::Clarifai.Api.DeleteInputRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInput",
        __Marshaller_clarifai_api_DeleteInputRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteInputsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteInputs = new grpc::Method<global::Clarifai.Api.DeleteInputsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInputs",
        __Marshaller_clarifai_api_DeleteInputsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PatchInputsSearches = new grpc::Method<global::Clarifai.Api.PatchInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchInputsSearches",
        __Marshaller_clarifai_api_PatchInputsSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostInputsSearches = new grpc::Method<global::Clarifai.Api.PostInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputsSearches",
        __Marshaller_clarifai_api_PostInputsSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelOutputsRequest, global::Clarifai.Api.MultiOutputResponse> __Method_PostModelOutputs = new grpc::Method<global::Clarifai.Api.PostModelOutputsRequest, global::Clarifai.Api.MultiOutputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelOutputs",
        __Marshaller_clarifai_api_PostModelOutputsRequest,
        __Marshaller_clarifai_api_MultiOutputResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse> __Method_ListDatasets = new grpc::Method<global::Clarifai.Api.ListDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatasets",
        __Marshaller_clarifai_api_ListDatasetsRequest,
        __Marshaller_clarifai_api_MultiDatasetResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetDatasetRequest, global::Clarifai.Api.SingleDatasetResponse> __Method_GetDataset = new grpc::Method<global::Clarifai.Api.GetDatasetRequest, global::Clarifai.Api.SingleDatasetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDataset",
        __Marshaller_clarifai_api_GetDatasetRequest,
        __Marshaller_clarifai_api_SingleDatasetResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse> __Method_PostDatasets = new grpc::Method<global::Clarifai.Api.PostDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostDatasets",
        __Marshaller_clarifai_api_PostDatasetsRequest,
        __Marshaller_clarifai_api_MultiDatasetResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse> __Method_PatchDatasets = new grpc::Method<global::Clarifai.Api.PatchDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchDatasets",
        __Marshaller_clarifai_api_PatchDatasetsRequest,
        __Marshaller_clarifai_api_MultiDatasetResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchDatasetIdsRequest, global::Clarifai.Api.MultiDatasetResponse> __Method_PatchDatasetIds = new grpc::Method<global::Clarifai.Api.PatchDatasetIdsRequest, global::Clarifai.Api.MultiDatasetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchDatasetIds",
        __Marshaller_clarifai_api_PatchDatasetIdsRequest,
        __Marshaller_clarifai_api_MultiDatasetResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteDatasetsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteDatasets = new grpc::Method<global::Clarifai.Api.DeleteDatasetsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDatasets",
        __Marshaller_clarifai_api_DeleteDatasetsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse> __Method_ListDatasetInputs = new grpc::Method<global::Clarifai.Api.ListDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatasetInputs",
        __Marshaller_clarifai_api_ListDatasetInputsRequest,
        __Marshaller_clarifai_api_MultiDatasetInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetDatasetInputRequest, global::Clarifai.Api.SingleDatasetInputResponse> __Method_GetDatasetInput = new grpc::Method<global::Clarifai.Api.GetDatasetInputRequest, global::Clarifai.Api.SingleDatasetInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatasetInput",
        __Marshaller_clarifai_api_GetDatasetInputRequest,
        __Marshaller_clarifai_api_SingleDatasetInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse> __Method_PostDatasetInputs = new grpc::Method<global::Clarifai.Api.PostDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostDatasetInputs",
        __Marshaller_clarifai_api_PostDatasetInputsRequest,
        __Marshaller_clarifai_api_MultiDatasetInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteDatasetInputsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteDatasetInputs = new grpc::Method<global::Clarifai.Api.DeleteDatasetInputsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDatasetInputs",
        __Marshaller_clarifai_api_DeleteDatasetInputsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse> __Method_ListDatasetVersions = new grpc::Method<global::Clarifai.Api.ListDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatasetVersions",
        __Marshaller_clarifai_api_ListDatasetVersionsRequest,
        __Marshaller_clarifai_api_MultiDatasetVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetDatasetVersionRequest, global::Clarifai.Api.SingleDatasetVersionResponse> __Method_GetDatasetVersion = new grpc::Method<global::Clarifai.Api.GetDatasetVersionRequest, global::Clarifai.Api.SingleDatasetVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatasetVersion",
        __Marshaller_clarifai_api_GetDatasetVersionRequest,
        __Marshaller_clarifai_api_SingleDatasetVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest, global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse> __Method_ListDatasetVersionMetricsGroups = new grpc::Method<global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest, global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatasetVersionMetricsGroups",
        __Marshaller_clarifai_api_ListDatasetVersionMetricsGroupsRequest,
        __Marshaller_clarifai_api_MultiDatasetVersionMetricsGroupResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse> __Method_PostDatasetVersions = new grpc::Method<global::Clarifai.Api.PostDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostDatasetVersions",
        __Marshaller_clarifai_api_PostDatasetVersionsRequest,
        __Marshaller_clarifai_api_MultiDatasetVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse> __Method_PatchDatasetVersions = new grpc::Method<global::Clarifai.Api.PatchDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchDatasetVersions",
        __Marshaller_clarifai_api_PatchDatasetVersionsRequest,
        __Marshaller_clarifai_api_MultiDatasetVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteDatasetVersionsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteDatasetVersions = new grpc::Method<global::Clarifai.Api.DeleteDatasetVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDatasetVersions",
        __Marshaller_clarifai_api_DeleteDatasetVersionsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PutDatasetVersionExportsRequest, global::Clarifai.Api.MultiDatasetVersionExportResponse> __Method_PutDatasetVersionExports = new grpc::Method<global::Clarifai.Api.PutDatasetVersionExportsRequest, global::Clarifai.Api.MultiDatasetVersionExportResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutDatasetVersionExports",
        __Marshaller_clarifai_api_PutDatasetVersionExportsRequest,
        __Marshaller_clarifai_api_MultiDatasetVersionExportResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelTypeRequest, global::Clarifai.Api.SingleModelTypeResponse> __Method_GetModelType = new grpc::Method<global::Clarifai.Api.GetModelTypeRequest, global::Clarifai.Api.SingleModelTypeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelType",
        __Marshaller_clarifai_api_GetModelTypeRequest,
        __Marshaller_clarifai_api_SingleModelTypeResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListOpenSourceLicensesRequest, global::Clarifai.Api.ListOpenSourceLicensesResponse> __Method_ListOpenSourceLicenses = new grpc::Method<global::Clarifai.Api.ListOpenSourceLicensesRequest, global::Clarifai.Api.ListOpenSourceLicensesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOpenSourceLicenses",
        __Marshaller_clarifai_api_ListOpenSourceLicensesRequest,
        __Marshaller_clarifai_api_ListOpenSourceLicensesResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelTypesRequest, global::Clarifai.Api.MultiModelTypeResponse> __Method_ListModelTypes = new grpc::Method<global::Clarifai.Api.ListModelTypesRequest, global::Clarifai.Api.MultiModelTypeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelTypes",
        __Marshaller_clarifai_api_ListModelTypesRequest,
        __Marshaller_clarifai_api_MultiModelTypeResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse> __Method_GetModel = new grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModel",
        __Marshaller_clarifai_api_GetModelRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse> __Method_GetModelOutputInfo = new grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelOutputInfo",
        __Marshaller_clarifai_api_GetModelRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelsRequest, global::Clarifai.Api.MultiModelResponse> __Method_ListModels = new grpc::Method<global::Clarifai.Api.ListModelsRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModels",
        __Marshaller_clarifai_api_ListModelsRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelsSearchesRequest, global::Clarifai.Api.MultiModelResponse> __Method_PostModelsSearches = new grpc::Method<global::Clarifai.Api.PostModelsSearchesRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelsSearches",
        __Marshaller_clarifai_api_PostModelsSearchesRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelsRequest, global::Clarifai.Api.SingleModelResponse> __Method_PostModels = new grpc::Method<global::Clarifai.Api.PostModelsRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModels",
        __Marshaller_clarifai_api_PostModelsRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchModelsRequest, global::Clarifai.Api.MultiModelResponse> __Method_PatchModels = new grpc::Method<global::Clarifai.Api.PatchModelsRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModels",
        __Marshaller_clarifai_api_PatchModelsRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchModelIdsRequest, global::Clarifai.Api.MultiModelResponse> __Method_PatchModelIds = new grpc::Method<global::Clarifai.Api.PatchModelIdsRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelIds",
        __Marshaller_clarifai_api_PatchModelIdsRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModelRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModel = new grpc::Method<global::Clarifai.Api.DeleteModelRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModel",
        __Marshaller_clarifai_api_DeleteModelRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModelsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModels = new grpc::Method<global::Clarifai.Api.DeleteModelsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModels",
        __Marshaller_clarifai_api_DeleteModelsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchModelCheckConsentsRequest, global::Clarifai.Api.MultiModelCheckConsentResponse> __Method_PatchModelCheckConsents = new grpc::Method<global::Clarifai.Api.PatchModelCheckConsentsRequest, global::Clarifai.Api.MultiModelCheckConsentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelCheckConsents",
        __Marshaller_clarifai_api_PatchModelCheckConsentsRequest,
        __Marshaller_clarifai_api_MultiModelCheckConsentResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchModelToolkitsRequest, global::Clarifai.Api.MultiModelToolkitResponse> __Method_PatchModelToolkits = new grpc::Method<global::Clarifai.Api.PatchModelToolkitsRequest, global::Clarifai.Api.MultiModelToolkitResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelToolkits",
        __Marshaller_clarifai_api_PatchModelToolkitsRequest,
        __Marshaller_clarifai_api_MultiModelToolkitResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchModelUseCasesRequest, global::Clarifai.Api.MultiModelUseCaseResponse> __Method_PatchModelUseCases = new grpc::Method<global::Clarifai.Api.PatchModelUseCasesRequest, global::Clarifai.Api.MultiModelUseCaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelUseCases",
        __Marshaller_clarifai_api_PatchModelUseCasesRequest,
        __Marshaller_clarifai_api_MultiModelUseCaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchModelLanguagesRequest, global::Clarifai.Api.MultiModelLanguageResponse> __Method_PatchModelLanguages = new grpc::Method<global::Clarifai.Api.PatchModelLanguagesRequest, global::Clarifai.Api.MultiModelLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelLanguages",
        __Marshaller_clarifai_api_PatchModelLanguagesRequest,
        __Marshaller_clarifai_api_MultiModelLanguageResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_ListModelInputs = new grpc::Method<global::Clarifai.Api.ListModelInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelInputs",
        __Marshaller_clarifai_api_ListModelInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelVersionRequest, global::Clarifai.Api.SingleModelVersionResponse> __Method_GetModelVersion = new grpc::Method<global::Clarifai.Api.GetModelVersionRequest, global::Clarifai.Api.SingleModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelVersion",
        __Marshaller_clarifai_api_GetModelVersionRequest,
        __Marshaller_clarifai_api_SingleModelVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse> __Method_ListModelVersions = new grpc::Method<global::Clarifai.Api.ListModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelVersions",
        __Marshaller_clarifai_api_ListModelVersionsRequest,
        __Marshaller_clarifai_api_MultiModelVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostWorkflowVersionsUnPublish = new grpc::Method<global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowVersionsUnPublish",
        __Marshaller_clarifai_api_PostWorkflowVersionsUnPublishRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostWorkflowVersionsPublish = new grpc::Method<global::Clarifai.Api.PostWorkflowVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowVersionsPublish",
        __Marshaller_clarifai_api_PostWorkflowVersionsPublishRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostModelVersionsPublish = new grpc::Method<global::Clarifai.Api.PostModelVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersionsPublish",
        __Marshaller_clarifai_api_PostModelVersionsPublishRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostModelVersionsUnPublish = new grpc::Method<global::Clarifai.Api.PostModelVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersionsUnPublish",
        __Marshaller_clarifai_api_PostModelVersionsUnPublishRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionsRequest, global::Clarifai.Api.SingleModelResponse> __Method_PostModelVersions = new grpc::Method<global::Clarifai.Api.PostModelVersionsRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersions",
        __Marshaller_clarifai_api_PostModelVersionsRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse> __Method_PatchModelVersions = new grpc::Method<global::Clarifai.Api.PatchModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelVersions",
        __Marshaller_clarifai_api_PatchModelVersionsRequest,
        __Marshaller_clarifai_api_MultiModelVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModelVersionRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModelVersion = new grpc::Method<global::Clarifai.Api.DeleteModelVersionRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModelVersion",
        __Marshaller_clarifai_api_DeleteModelVersionRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse> __Method_GetModelVersionMetrics = new grpc::Method<global::Clarifai.Api.GetModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelVersionMetrics",
        __Marshaller_clarifai_api_GetModelVersionMetricsRequest,
        __Marshaller_clarifai_api_SingleModelVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse> __Method_PostModelVersionMetrics = new grpc::Method<global::Clarifai.Api.PostModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersionMetrics",
        __Marshaller_clarifai_api_PostModelVersionMetricsRequest,
        __Marshaller_clarifai_api_SingleModelVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelReferencesRequest, global::Clarifai.Api.MultiModelReferenceResponse> __Method_ListModelReferences = new grpc::Method<global::Clarifai.Api.ListModelReferencesRequest, global::Clarifai.Api.MultiModelReferenceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelReferences",
        __Marshaller_clarifai_api_ListModelReferencesRequest,
        __Marshaller_clarifai_api_MultiModelReferenceResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelReferencesRequest, global::Clarifai.Api.MultiModelReferenceResponse> __Method_PostModelReferences = new grpc::Method<global::Clarifai.Api.PostModelReferencesRequest, global::Clarifai.Api.MultiModelReferenceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelReferences",
        __Marshaller_clarifai_api_PostModelReferencesRequest,
        __Marshaller_clarifai_api_MultiModelReferenceResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModelReferencesRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModelReferences = new grpc::Method<global::Clarifai.Api.DeleteModelReferencesRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModelReferences",
        __Marshaller_clarifai_api_DeleteModelReferencesRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelVersionInputExampleRequest, global::Clarifai.Api.SingleModelVersionInputExampleResponse> __Method_GetModelVersionInputExample = new grpc::Method<global::Clarifai.Api.GetModelVersionInputExampleRequest, global::Clarifai.Api.SingleModelVersionInputExampleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelVersionInputExample",
        __Marshaller_clarifai_api_GetModelVersionInputExampleRequest,
        __Marshaller_clarifai_api_SingleModelVersionInputExampleResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelVersionInputExamplesRequest, global::Clarifai.Api.MultiModelVersionInputExampleResponse> __Method_ListModelVersionInputExamples = new grpc::Method<global::Clarifai.Api.ListModelVersionInputExamplesRequest, global::Clarifai.Api.MultiModelVersionInputExampleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelVersionInputExamples",
        __Marshaller_clarifai_api_ListModelVersionInputExamplesRequest,
        __Marshaller_clarifai_api_MultiModelVersionInputExampleResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionInputExamplesRequest, global::Clarifai.Api.MultiModelVersionInputExampleResponse> __Method_PostModelVersionInputExamples = new grpc::Method<global::Clarifai.Api.PostModelVersionInputExamplesRequest, global::Clarifai.Api.MultiModelVersionInputExampleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersionInputExamples",
        __Marshaller_clarifai_api_PostModelVersionInputExamplesRequest,
        __Marshaller_clarifai_api_MultiModelVersionInputExampleResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModelVersionInputExamplesRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModelVersionInputExamples = new grpc::Method<global::Clarifai.Api.DeleteModelVersionInputExamplesRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModelVersionInputExamples",
        __Marshaller_clarifai_api_DeleteModelVersionInputExamplesRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelStarsRequest, global::Clarifai.Api.MultiModelStarResponse> __Method_PostModelStars = new grpc::Method<global::Clarifai.Api.PostModelStarsRequest, global::Clarifai.Api.MultiModelStarResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelStars",
        __Marshaller_clarifai_api_PostModelStarsRequest,
        __Marshaller_clarifai_api_MultiModelStarResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModelStarsRequest, global::Clarifai.Api.DeleteModelStarsResponse> __Method_DeleteModelStars = new grpc::Method<global::Clarifai.Api.DeleteModelStarsRequest, global::Clarifai.Api.DeleteModelStarsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModelStars",
        __Marshaller_clarifai_api_DeleteModelStarsRequest,
        __Marshaller_clarifai_api_DeleteModelStarsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostUserStarsRequest, global::Clarifai.Api.MultiUserStarResponse> __Method_PostUserStars = new grpc::Method<global::Clarifai.Api.PostUserStarsRequest, global::Clarifai.Api.MultiUserStarResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostUserStars",
        __Marshaller_clarifai_api_PostUserStarsRequest,
        __Marshaller_clarifai_api_MultiUserStarResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteUserStarsRequest, global::Clarifai.Api.DeleteUserStarsResponse> __Method_DeleteUserStars = new grpc::Method<global::Clarifai.Api.DeleteUserStarsRequest, global::Clarifai.Api.DeleteUserStarsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUserStars",
        __Marshaller_clarifai_api_DeleteUserStarsRequest,
        __Marshaller_clarifai_api_DeleteUserStarsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowStarsRequest, global::Clarifai.Api.MultiWorkflowStarResponse> __Method_PostWorkflowStars = new grpc::Method<global::Clarifai.Api.PostWorkflowStarsRequest, global::Clarifai.Api.MultiWorkflowStarResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowStars",
        __Marshaller_clarifai_api_PostWorkflowStarsRequest,
        __Marshaller_clarifai_api_MultiWorkflowStarResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteWorkflowStarsRequest, global::Clarifai.Api.DeleteWorkflowStarsResponse> __Method_DeleteWorkflowStars = new grpc::Method<global::Clarifai.Api.DeleteWorkflowStarsRequest, global::Clarifai.Api.DeleteWorkflowStarsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflowStars",
        __Marshaller_clarifai_api_DeleteWorkflowStarsRequest,
        __Marshaller_clarifai_api_DeleteWorkflowStarsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAppStarsRequest, global::Clarifai.Api.MultiAppStarResponse> __Method_PostAppStars = new grpc::Method<global::Clarifai.Api.PostAppStarsRequest, global::Clarifai.Api.MultiAppStarResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAppStars",
        __Marshaller_clarifai_api_PostAppStarsRequest,
        __Marshaller_clarifai_api_MultiAppStarResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteAppStarsRequest, global::Clarifai.Api.DeleteAppStarsResponse> __Method_DeleteAppStars = new grpc::Method<global::Clarifai.Api.DeleteAppStarsRequest, global::Clarifai.Api.DeleteAppStarsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAppStars",
        __Marshaller_clarifai_api_DeleteAppStarsRequest,
        __Marshaller_clarifai_api_DeleteAppStarsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetWorkflowRequest, global::Clarifai.Api.SingleWorkflowResponse> __Method_GetWorkflow = new grpc::Method<global::Clarifai.Api.GetWorkflowRequest, global::Clarifai.Api.SingleWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflow",
        __Marshaller_clarifai_api_GetWorkflowRequest,
        __Marshaller_clarifai_api_SingleWorkflowResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_ListWorkflows = new grpc::Method<global::Clarifai.Api.ListWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkflows",
        __Marshaller_clarifai_api_ListWorkflowsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListPublicWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_ListPublicWorkflows = new grpc::Method<global::Clarifai.Api.ListPublicWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPublicWorkflows",
        __Marshaller_clarifai_api_ListPublicWorkflowsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_PostWorkflows = new grpc::Method<global::Clarifai.Api.PostWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflows",
        __Marshaller_clarifai_api_PostWorkflowsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_PatchWorkflows = new grpc::Method<global::Clarifai.Api.PatchWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchWorkflows",
        __Marshaller_clarifai_api_PatchWorkflowsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchWorkflowIdsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_PatchWorkflowIds = new grpc::Method<global::Clarifai.Api.PatchWorkflowIdsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchWorkflowIds",
        __Marshaller_clarifai_api_PatchWorkflowIdsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteWorkflowRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteWorkflow = new grpc::Method<global::Clarifai.Api.DeleteWorkflowRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflow",
        __Marshaller_clarifai_api_DeleteWorkflowRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteWorkflowsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteWorkflows = new grpc::Method<global::Clarifai.Api.DeleteWorkflowsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflows",
        __Marshaller_clarifai_api_DeleteWorkflowsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowResultsRequest, global::Clarifai.Api.PostWorkflowResultsResponse> __Method_PostWorkflowResults = new grpc::Method<global::Clarifai.Api.PostWorkflowResultsRequest, global::Clarifai.Api.PostWorkflowResultsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowResults",
        __Marshaller_clarifai_api_PostWorkflowResultsRequest,
        __Marshaller_clarifai_api_PostWorkflowResultsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> __Method_PostWorkflowResultsSimilarity = new grpc::Method<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowResultsSimilarity",
        __Marshaller_clarifai_api_PostWorkflowResultsSimilarityRequest,
        __Marshaller_clarifai_api_PostWorkflowResultsSimilarityResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse> __Method_ListWorkflowVersions = new grpc::Method<global::Clarifai.Api.ListWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkflowVersions",
        __Marshaller_clarifai_api_ListWorkflowVersionsRequest,
        __Marshaller_clarifai_api_MultiWorkflowVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetWorkflowVersionRequest, global::Clarifai.Api.SingleWorkflowVersionResponse> __Method_GetWorkflowVersion = new grpc::Method<global::Clarifai.Api.GetWorkflowVersionRequest, global::Clarifai.Api.SingleWorkflowVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowVersion",
        __Marshaller_clarifai_api_GetWorkflowVersionRequest,
        __Marshaller_clarifai_api_SingleWorkflowVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteWorkflowVersionsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteWorkflowVersions = new grpc::Method<global::Clarifai.Api.DeleteWorkflowVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflowVersions",
        __Marshaller_clarifai_api_DeleteWorkflowVersionsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse> __Method_PatchWorkflowVersions = new grpc::Method<global::Clarifai.Api.PatchWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchWorkflowVersions",
        __Marshaller_clarifai_api_PatchWorkflowVersionsRequest,
        __Marshaller_clarifai_api_MultiWorkflowVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowMetricsRequest, global::Clarifai.Api.MultiWorkflowMetricsResponse> __Method_PostWorkflowMetrics = new grpc::Method<global::Clarifai.Api.PostWorkflowMetricsRequest, global::Clarifai.Api.MultiWorkflowMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowMetrics",
        __Marshaller_clarifai_api_PostWorkflowMetricsRequest,
        __Marshaller_clarifai_api_MultiWorkflowMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetWorkflowMetricsRequest, global::Clarifai.Api.SingleWorkflowMetricsResponse> __Method_GetWorkflowMetrics = new grpc::Method<global::Clarifai.Api.GetWorkflowMetricsRequest, global::Clarifai.Api.SingleWorkflowMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowMetrics",
        __Marshaller_clarifai_api_GetWorkflowMetricsRequest,
        __Marshaller_clarifai_api_SingleWorkflowMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetWorkflowNodeMetricsRequest, global::Clarifai.Api.SingleWorkflowNodeMetricsResponse> __Method_GetWorkflowNodeMetrics = new grpc::Method<global::Clarifai.Api.GetWorkflowNodeMetricsRequest, global::Clarifai.Api.SingleWorkflowNodeMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowNodeMetrics",
        __Marshaller_clarifai_api_GetWorkflowNodeMetricsRequest,
        __Marshaller_clarifai_api_SingleWorkflowNodeMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListWorkflowMetricsRequest, global::Clarifai.Api.MultiWorkflowMetricsResponse> __Method_ListWorkflowMetrics = new grpc::Method<global::Clarifai.Api.ListWorkflowMetricsRequest, global::Clarifai.Api.MultiWorkflowMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkflowMetrics",
        __Marshaller_clarifai_api_ListWorkflowMetricsRequest,
        __Marshaller_clarifai_api_MultiWorkflowMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteWorkflowMetricsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteWorkflowMetrics = new grpc::Method<global::Clarifai.Api.DeleteWorkflowMetricsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflowMetrics",
        __Marshaller_clarifai_api_DeleteWorkflowMetricsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetKeyRequest, global::Clarifai.Api.SingleKeyResponse> __Method_GetKey = new grpc::Method<global::Clarifai.Api.GetKeyRequest, global::Clarifai.Api.SingleKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetKey",
        __Marshaller_clarifai_api_GetKeyRequest,
        __Marshaller_clarifai_api_SingleKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_ListKeys = new grpc::Method<global::Clarifai.Api.ListKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListKeys",
        __Marshaller_clarifai_api_ListKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAppKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_ListAppKeys = new grpc::Method<global::Clarifai.Api.ListAppKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAppKeys",
        __Marshaller_clarifai_api_ListAppKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteKeyRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteKey = new grpc::Method<global::Clarifai.Api.DeleteKeyRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteKey",
        __Marshaller_clarifai_api_DeleteKeyRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_PostKeys = new grpc::Method<global::Clarifai.Api.PostKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostKeys",
        __Marshaller_clarifai_api_PostKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_PatchKeys = new grpc::Method<global::Clarifai.Api.PatchKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchKeys",
        __Marshaller_clarifai_api_PatchKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.MyScopesRequest, global::Clarifai.Api.MultiScopeResponse> __Method_MyScopes = new grpc::Method<global::Clarifai.Api.MyScopesRequest, global::Clarifai.Api.MultiScopeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MyScopes",
        __Marshaller_clarifai_api_MyScopesRequest,
        __Marshaller_clarifai_api_MultiScopeResponse);

    static readonly grpc::Method<global::Clarifai.Api.MyScopesUserRequest, global::Clarifai.Api.MultiScopeUserResponse> __Method_MyScopesUser = new grpc::Method<global::Clarifai.Api.MyScopesUserRequest, global::Clarifai.Api.MultiScopeUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MyScopesUser",
        __Marshaller_clarifai_api_MyScopesUserRequest,
        __Marshaller_clarifai_api_MultiScopeUserResponse);

    static readonly grpc::Method<global::Clarifai.Api.MyScopesRootRequest, global::Clarifai.Api.MultiScopeRootResponse> __Method_MyScopesRoot = new grpc::Method<global::Clarifai.Api.MyScopesRootRequest, global::Clarifai.Api.MultiScopeRootResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MyScopesRoot",
        __Marshaller_clarifai_api_MyScopesRootRequest,
        __Marshaller_clarifai_api_MultiScopeRootResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListScopesRequest, global::Clarifai.Api.MultiScopeDepsResponse> __Method_ListScopes = new grpc::Method<global::Clarifai.Api.ListScopesRequest, global::Clarifai.Api.MultiScopeDepsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListScopes",
        __Marshaller_clarifai_api_ListScopesRequest,
        __Marshaller_clarifai_api_MultiScopeDepsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetAppRequest, global::Clarifai.Api.SingleAppResponse> __Method_GetApp = new grpc::Method<global::Clarifai.Api.GetAppRequest, global::Clarifai.Api.SingleAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApp",
        __Marshaller_clarifai_api_GetAppRequest,
        __Marshaller_clarifai_api_SingleAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAppsRequest, global::Clarifai.Api.MultiAppResponse> __Method_ListApps = new grpc::Method<global::Clarifai.Api.ListAppsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListApps",
        __Marshaller_clarifai_api_ListAppsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteAppRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteApp = new grpc::Method<global::Clarifai.Api.DeleteAppRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteApp",
        __Marshaller_clarifai_api_DeleteAppRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAppsRequest, global::Clarifai.Api.MultiAppResponse> __Method_PostApps = new grpc::Method<global::Clarifai.Api.PostAppsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostApps",
        __Marshaller_clarifai_api_PostAppsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAppsRequest, global::Clarifai.Api.MultiAppResponse> __Method_PatchApps = new grpc::Method<global::Clarifai.Api.PatchAppsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchApps",
        __Marshaller_clarifai_api_PatchAppsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAppsIdsRequest, global::Clarifai.Api.MultiAppResponse> __Method_PatchAppsIds = new grpc::Method<global::Clarifai.Api.PatchAppsIdsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAppsIds",
        __Marshaller_clarifai_api_PatchAppsIdsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAppRequest, global::Clarifai.Api.SingleAppResponse> __Method_PatchApp = new grpc::Method<global::Clarifai.Api.PatchAppRequest, global::Clarifai.Api.SingleAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchApp",
        __Marshaller_clarifai_api_PatchAppRequest,
        __Marshaller_clarifai_api_SingleAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAppOwnerRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PatchAppOwner = new grpc::Method<global::Clarifai.Api.PatchAppOwnerRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAppOwner",
        __Marshaller_clarifai_api_PatchAppOwnerRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAppsSearchesRequest, global::Clarifai.Api.MultiAppResponse> __Method_PostAppsSearches = new grpc::Method<global::Clarifai.Api.PostAppsSearchesRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAppsSearches",
        __Marshaller_clarifai_api_PostAppsSearchesRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetUserRequest, global::Clarifai.Api.SingleUserResponse> __Method_GetUser = new grpc::Method<global::Clarifai.Api.GetUserRequest, global::Clarifai.Api.SingleUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUser",
        __Marshaller_clarifai_api_GetUserRequest,
        __Marshaller_clarifai_api_SingleUserResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListUsersRequest, global::Clarifai.Api.MultiUserResponse> __Method_ListUsers = new grpc::Method<global::Clarifai.Api.ListUsersRequest, global::Clarifai.Api.MultiUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUsers",
        __Marshaller_clarifai_api_ListUsersRequest,
        __Marshaller_clarifai_api_MultiUserResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostUserConsentRequest, global::Clarifai.Api.SingleUserResponse> __Method_PostUserConsent = new grpc::Method<global::Clarifai.Api.PostUserConsentRequest, global::Clarifai.Api.SingleUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostUserConsent",
        __Marshaller_clarifai_api_PostUserConsentRequest,
        __Marshaller_clarifai_api_SingleUserResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchUserRequest, global::Clarifai.Api.SingleUserResponse> __Method_PatchUser = new grpc::Method<global::Clarifai.Api.PatchUserRequest, global::Clarifai.Api.SingleUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchUser",
        __Marshaller_clarifai_api_PatchUserRequest,
        __Marshaller_clarifai_api_SingleUserResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostUserAccessRequest, global::Clarifai.Api.MultiUserAccessResponse> __Method_PostUserAccess = new grpc::Method<global::Clarifai.Api.PostUserAccessRequest, global::Clarifai.Api.MultiUserAccessResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostUserAccess",
        __Marshaller_clarifai_api_PostUserAccessRequest,
        __Marshaller_clarifai_api_MultiUserAccessResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetUserAccessRequest, global::Clarifai.Api.SingleUserAccessResponse> __Method_GetUserAccess = new grpc::Method<global::Clarifai.Api.GetUserAccessRequest, global::Clarifai.Api.SingleUserAccessResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserAccess",
        __Marshaller_clarifai_api_GetUserAccessRequest,
        __Marshaller_clarifai_api_SingleUserAccessResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostEmailsRequest, global::Clarifai.Api.MultipleEmailResponse> __Method_PostEmails = new grpc::Method<global::Clarifai.Api.PostEmailsRequest, global::Clarifai.Api.MultipleEmailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostEmails",
        __Marshaller_clarifai_api_PostEmailsRequest,
        __Marshaller_clarifai_api_MultipleEmailResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListEmailsRequest, global::Clarifai.Api.MultipleEmailResponse> __Method_ListEmails = new grpc::Method<global::Clarifai.Api.ListEmailsRequest, global::Clarifai.Api.MultipleEmailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListEmails",
        __Marshaller_clarifai_api_ListEmailsRequest,
        __Marshaller_clarifai_api_MultipleEmailResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostResendVerifyRequest, global::Clarifai.Api.SingleResendVerifyResponse> __Method_PostResendVerifyEmail = new grpc::Method<global::Clarifai.Api.PostResendVerifyRequest, global::Clarifai.Api.SingleResendVerifyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostResendVerifyEmail",
        __Marshaller_clarifai_api_PostResendVerifyRequest,
        __Marshaller_clarifai_api_SingleResendVerifyResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteEmailRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteEmail = new grpc::Method<global::Clarifai.Api.DeleteEmailRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteEmail",
        __Marshaller_clarifai_api_DeleteEmailRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostPrimaryEmailRequest, global::Clarifai.Api.SingleEmailResponse> __Method_PostPrimaryEmail = new grpc::Method<global::Clarifai.Api.PostPrimaryEmailRequest, global::Clarifai.Api.SingleEmailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostPrimaryEmail",
        __Marshaller_clarifai_api_PostPrimaryEmailRequest,
        __Marshaller_clarifai_api_SingleEmailResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostValidatePasswordRequest, global::Clarifai.Api.SinglePasswordValidationResponse> __Method_PostValidatePassword = new grpc::Method<global::Clarifai.Api.PostValidatePasswordRequest, global::Clarifai.Api.SinglePasswordValidationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostValidatePassword",
        __Marshaller_clarifai_api_PostValidatePasswordRequest,
        __Marshaller_clarifai_api_SinglePasswordValidationResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListGlobalPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse> __Method_ListGlobalPasswordPolicies = new grpc::Method<global::Clarifai.Api.ListGlobalPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListGlobalPasswordPolicies",
        __Marshaller_clarifai_api_ListGlobalPasswordPoliciesRequest,
        __Marshaller_clarifai_api_MultiplePasswordPoliciesResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse> __Method_ListPasswordPolicies = new grpc::Method<global::Clarifai.Api.ListPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPasswordPolicies",
        __Marshaller_clarifai_api_ListPasswordPoliciesRequest,
        __Marshaller_clarifai_api_MultiplePasswordPoliciesResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse> __Method_PostPasswordPolicies = new grpc::Method<global::Clarifai.Api.PostPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostPasswordPolicies",
        __Marshaller_clarifai_api_PostPasswordPoliciesRequest,
        __Marshaller_clarifai_api_MultiplePasswordPoliciesResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse> __Method_PatchPasswordPolicies = new grpc::Method<global::Clarifai.Api.PatchPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchPasswordPolicies",
        __Marshaller_clarifai_api_PatchPasswordPoliciesRequest,
        __Marshaller_clarifai_api_MultiplePasswordPoliciesResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeletePasswordPoliciesRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeletePasswordPolicies = new grpc::Method<global::Clarifai.Api.DeletePasswordPoliciesRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePasswordPolicies",
        __Marshaller_clarifai_api_DeletePasswordPoliciesRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.UserFeatureConfigRequest, global::Clarifai.Api.SingleUserFeatureConfigResponse> __Method_GetUserFeatureConfig = new grpc::Method<global::Clarifai.Api.UserFeatureConfigRequest, global::Clarifai.Api.SingleUserFeatureConfigResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserFeatureConfig",
        __Marshaller_clarifai_api_UserFeatureConfigRequest,
        __Marshaller_clarifai_api_SingleUserFeatureConfigResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostOrganizationsRequest, global::Clarifai.Api.MultiOrganizationResponse> __Method_PostOrganizations = new grpc::Method<global::Clarifai.Api.PostOrganizationsRequest, global::Clarifai.Api.MultiOrganizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostOrganizations",
        __Marshaller_clarifai_api_PostOrganizationsRequest,
        __Marshaller_clarifai_api_MultiOrganizationResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListUsersOrganizationsRequest, global::Clarifai.Api.MultiUsersOrganizationsResponse> __Method_ListUsersOrganizations = new grpc::Method<global::Clarifai.Api.ListUsersOrganizationsRequest, global::Clarifai.Api.MultiUsersOrganizationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUsersOrganizations",
        __Marshaller_clarifai_api_ListUsersOrganizationsRequest,
        __Marshaller_clarifai_api_MultiUsersOrganizationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListOrganizationsRequest, global::Clarifai.Api.MultiOrganizationResponse> __Method_ListOrganizations = new grpc::Method<global::Clarifai.Api.ListOrganizationsRequest, global::Clarifai.Api.MultiOrganizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOrganizations",
        __Marshaller_clarifai_api_ListOrganizationsRequest,
        __Marshaller_clarifai_api_MultiOrganizationResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetOrganizationRequest, global::Clarifai.Api.SingleOrganizationResponse> __Method_GetOrganization = new grpc::Method<global::Clarifai.Api.GetOrganizationRequest, global::Clarifai.Api.SingleOrganizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganization",
        __Marshaller_clarifai_api_GetOrganizationRequest,
        __Marshaller_clarifai_api_SingleOrganizationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchOrganizationRequest, global::Clarifai.Api.SingleOrganizationResponse> __Method_PatchOrganization = new grpc::Method<global::Clarifai.Api.PatchOrganizationRequest, global::Clarifai.Api.SingleOrganizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchOrganization",
        __Marshaller_clarifai_api_PatchOrganizationRequest,
        __Marshaller_clarifai_api_SingleOrganizationResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteOrganizationRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteOrganization = new grpc::Method<global::Clarifai.Api.DeleteOrganizationRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOrganization",
        __Marshaller_clarifai_api_DeleteOrganizationRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListOrganizationMembersRequest, global::Clarifai.Api.MultiOrganizationMemberResponse> __Method_ListOrganizationMembers = new grpc::Method<global::Clarifai.Api.ListOrganizationMembersRequest, global::Clarifai.Api.MultiOrganizationMemberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOrganizationMembers",
        __Marshaller_clarifai_api_ListOrganizationMembersRequest,
        __Marshaller_clarifai_api_MultiOrganizationMemberResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListOrganizationAppMembersRequest, global::Clarifai.Api.MultiOrganizationMemberResponse> __Method_ListOrganizationAppMembers = new grpc::Method<global::Clarifai.Api.ListOrganizationAppMembersRequest, global::Clarifai.Api.MultiOrganizationMemberResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOrganizationAppMembers",
        __Marshaller_clarifai_api_ListOrganizationAppMembersRequest,
        __Marshaller_clarifai_api_MultiOrganizationMemberResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostOrganizationMemberRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostOrganizationMember = new grpc::Method<global::Clarifai.Api.PostOrganizationMemberRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostOrganizationMember",
        __Marshaller_clarifai_api_PostOrganizationMemberRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchOrganizationMembersRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PatchOrganizationMember = new grpc::Method<global::Clarifai.Api.PatchOrganizationMembersRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchOrganizationMember",
        __Marshaller_clarifai_api_PatchOrganizationMembersRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteOrganizationMemberRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteOrganizationMember = new grpc::Method<global::Clarifai.Api.DeleteOrganizationMemberRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOrganizationMember",
        __Marshaller_clarifai_api_DeleteOrganizationMemberRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostOrganizationInvitationsRequest, global::Clarifai.Api.MultiOrganizationInvitationResponse> __Method_PostOrganizationInvitations = new grpc::Method<global::Clarifai.Api.PostOrganizationInvitationsRequest, global::Clarifai.Api.MultiOrganizationInvitationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostOrganizationInvitations",
        __Marshaller_clarifai_api_PostOrganizationInvitationsRequest,
        __Marshaller_clarifai_api_MultiOrganizationInvitationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchOrganizationInvitationsRequest, global::Clarifai.Api.MultiOrganizationInvitationResponse> __Method_PatchOrganizationInvitations = new grpc::Method<global::Clarifai.Api.PatchOrganizationInvitationsRequest, global::Clarifai.Api.MultiOrganizationInvitationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchOrganizationInvitations",
        __Marshaller_clarifai_api_PatchOrganizationInvitationsRequest,
        __Marshaller_clarifai_api_MultiOrganizationInvitationResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListOrganizationInvitationsRequest, global::Clarifai.Api.MultiOrganizationInvitationResponse> __Method_ListOrganizationInvitations = new grpc::Method<global::Clarifai.Api.ListOrganizationInvitationsRequest, global::Clarifai.Api.MultiOrganizationInvitationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOrganizationInvitations",
        __Marshaller_clarifai_api_ListOrganizationInvitationsRequest,
        __Marshaller_clarifai_api_MultiOrganizationInvitationResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetOrganizationInvitationRequest, global::Clarifai.Api.SingleOrganizationInvitationResponse> __Method_GetOrganizationInvitation = new grpc::Method<global::Clarifai.Api.GetOrganizationInvitationRequest, global::Clarifai.Api.SingleOrganizationInvitationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganizationInvitation",
        __Marshaller_clarifai_api_GetOrganizationInvitationRequest,
        __Marshaller_clarifai_api_SingleOrganizationInvitationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostDeclineOrganizationInvitationRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostDeclineOrganizationInvitation = new grpc::Method<global::Clarifai.Api.PostDeclineOrganizationInvitationRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostDeclineOrganizationInvitation",
        __Marshaller_clarifai_api_PostDeclineOrganizationInvitationRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAcceptOrganizationInvitationRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostAcceptOrganizationInvitation = new grpc::Method<global::Clarifai.Api.PostAcceptOrganizationInvitationRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAcceptOrganizationInvitation",
        __Marshaller_clarifai_api_PostAcceptOrganizationInvitationRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetOrganizationInvitationPublicRequest, global::Clarifai.Api.SingleOrganizationInvitationResponse> __Method_GetOrganizationInvitationPublic = new grpc::Method<global::Clarifai.Api.GetOrganizationInvitationPublicRequest, global::Clarifai.Api.SingleOrganizationInvitationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganizationInvitationPublic",
        __Marshaller_clarifai_api_GetOrganizationInvitationPublicRequest,
        __Marshaller_clarifai_api_SingleOrganizationInvitationResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteRequestingUserFromOrganizationRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteRequestingUserFromOrganization = new grpc::Method<global::Clarifai.Api.DeleteRequestingUserFromOrganizationRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRequestingUserFromOrganization",
        __Marshaller_clarifai_api_DeleteRequestingUserFromOrganizationRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostIdentityProvidersRequest, global::Clarifai.Api.MultiIdentityProviderResponse> __Method_PostIdentityProviders = new grpc::Method<global::Clarifai.Api.PostIdentityProvidersRequest, global::Clarifai.Api.MultiIdentityProviderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostIdentityProviders",
        __Marshaller_clarifai_api_PostIdentityProvidersRequest,
        __Marshaller_clarifai_api_MultiIdentityProviderResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListIdentityProvidersRequest, global::Clarifai.Api.MultiIdentityProviderResponse> __Method_ListIdentityProviders = new grpc::Method<global::Clarifai.Api.ListIdentityProvidersRequest, global::Clarifai.Api.MultiIdentityProviderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListIdentityProviders",
        __Marshaller_clarifai_api_ListIdentityProvidersRequest,
        __Marshaller_clarifai_api_MultiIdentityProviderResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetIdentityProviderRequest, global::Clarifai.Api.SingleIdentityProviderResponse> __Method_GetIdentityProvider = new grpc::Method<global::Clarifai.Api.GetIdentityProviderRequest, global::Clarifai.Api.SingleIdentityProviderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIdentityProvider",
        __Marshaller_clarifai_api_GetIdentityProviderRequest,
        __Marshaller_clarifai_api_SingleIdentityProviderResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchIdentityProvidersRequest, global::Clarifai.Api.MultiIdentityProviderResponse> __Method_PatchIdentityProviders = new grpc::Method<global::Clarifai.Api.PatchIdentityProvidersRequest, global::Clarifai.Api.MultiIdentityProviderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchIdentityProviders",
        __Marshaller_clarifai_api_PatchIdentityProvidersRequest,
        __Marshaller_clarifai_api_MultiIdentityProviderResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteIdentityProvidersRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteIdentityProviders = new grpc::Method<global::Clarifai.Api.DeleteIdentityProvidersRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteIdentityProviders",
        __Marshaller_clarifai_api_DeleteIdentityProvidersRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostTeamsRequest, global::Clarifai.Api.MultiTeamResponse> __Method_PostTeams = new grpc::Method<global::Clarifai.Api.PostTeamsRequest, global::Clarifai.Api.MultiTeamResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostTeams",
        __Marshaller_clarifai_api_PostTeamsRequest,
        __Marshaller_clarifai_api_MultiTeamResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListTeamsRequest, global::Clarifai.Api.MultiTeamResponse> __Method_ListTeams = new grpc::Method<global::Clarifai.Api.ListTeamsRequest, global::Clarifai.Api.MultiTeamResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTeams",
        __Marshaller_clarifai_api_ListTeamsRequest,
        __Marshaller_clarifai_api_MultiTeamResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetTeamRequest, global::Clarifai.Api.SingleTeamResponse> __Method_GetTeam = new grpc::Method<global::Clarifai.Api.GetTeamRequest, global::Clarifai.Api.SingleTeamResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTeam",
        __Marshaller_clarifai_api_GetTeamRequest,
        __Marshaller_clarifai_api_SingleTeamResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchTeamsRequest, global::Clarifai.Api.MultiTeamResponse> __Method_PatchTeams = new grpc::Method<global::Clarifai.Api.PatchTeamsRequest, global::Clarifai.Api.MultiTeamResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchTeams",
        __Marshaller_clarifai_api_PatchTeamsRequest,
        __Marshaller_clarifai_api_MultiTeamResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteTeamsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteTeams = new grpc::Method<global::Clarifai.Api.DeleteTeamsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTeams",
        __Marshaller_clarifai_api_DeleteTeamsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostTeamUsersRequest, global::Clarifai.Api.MultiTeamUserResponse> __Method_PostTeamUsers = new grpc::Method<global::Clarifai.Api.PostTeamUsersRequest, global::Clarifai.Api.MultiTeamUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostTeamUsers",
        __Marshaller_clarifai_api_PostTeamUsersRequest,
        __Marshaller_clarifai_api_MultiTeamUserResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListTeamUsersRequest, global::Clarifai.Api.MultiTeamUserResponse> __Method_ListTeamUsers = new grpc::Method<global::Clarifai.Api.ListTeamUsersRequest, global::Clarifai.Api.MultiTeamUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTeamUsers",
        __Marshaller_clarifai_api_ListTeamUsersRequest,
        __Marshaller_clarifai_api_MultiTeamUserResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteTeamUsersRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteTeamUsers = new grpc::Method<global::Clarifai.Api.DeleteTeamUsersRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTeamUsers",
        __Marshaller_clarifai_api_DeleteTeamUsersRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostTeamAppsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostTeamApps = new grpc::Method<global::Clarifai.Api.PostTeamAppsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostTeamApps",
        __Marshaller_clarifai_api_PostTeamAppsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListTeamAppsRequest, global::Clarifai.Api.MultiTeamAppsResponse> __Method_ListTeamApps = new grpc::Method<global::Clarifai.Api.ListTeamAppsRequest, global::Clarifai.Api.MultiTeamAppsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTeamApps",
        __Marshaller_clarifai_api_ListTeamAppsRequest,
        __Marshaller_clarifai_api_MultiTeamAppsResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteTeamAppsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteTeamApps = new grpc::Method<global::Clarifai.Api.DeleteTeamAppsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTeamApps",
        __Marshaller_clarifai_api_DeleteTeamAppsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListRolesRequest, global::Clarifai.Api.MultiRoleResponse> __Method_ListRoles = new grpc::Method<global::Clarifai.Api.ListRolesRequest, global::Clarifai.Api.MultiRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRoles",
        __Marshaller_clarifai_api_ListRolesRequest,
        __Marshaller_clarifai_api_MultiRoleResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetRoleRequest, global::Clarifai.Api.SingleRoleResponse> __Method_GetRole = new grpc::Method<global::Clarifai.Api.GetRoleRequest, global::Clarifai.Api.SingleRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRole",
        __Marshaller_clarifai_api_GetRoleRequest,
        __Marshaller_clarifai_api_SingleRoleResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetSearchRequest, global::Clarifai.Api.SingleSearchResponse> __Method_GetSearch = new grpc::Method<global::Clarifai.Api.GetSearchRequest, global::Clarifai.Api.SingleSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSearch",
        __Marshaller_clarifai_api_GetSearchRequest,
        __Marshaller_clarifai_api_SingleSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_ListSearches = new grpc::Method<global::Clarifai.Api.ListSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSearches",
        __Marshaller_clarifai_api_ListSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PatchSearches = new grpc::Method<global::Clarifai.Api.PatchSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchSearches",
        __Marshaller_clarifai_api_PatchSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostSearches = new grpc::Method<global::Clarifai.Api.PostSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostSearches",
        __Marshaller_clarifai_api_PostSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostSearchesByIDRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostSearchesByID = new grpc::Method<global::Clarifai.Api.PostSearchesByIDRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostSearchesByID",
        __Marshaller_clarifai_api_PostSearchesByIDRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Method_PostAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.PostAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotationSearchMetrics",
        __Marshaller_clarifai_api_PostAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Method_GetAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.GetAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnnotationSearchMetrics",
        __Marshaller_clarifai_api_GetAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Method_ListAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.ListAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotationSearchMetrics",
        __Marshaller_clarifai_api_ListAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotationSearchMetrics",
        __Marshaller_clarifai_api_DeleteAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteSearchRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteSearch = new grpc::Method<global::Clarifai.Api.DeleteSearchRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSearch",
        __Marshaller_clarifai_api_DeleteSearchRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAttributeSearchRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostAttributeSearch = new grpc::Method<global::Clarifai.Api.PostAttributeSearchRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAttributeSearch",
        __Marshaller_clarifai_api_PostAttributeSearchRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse> __Method_ListAnnotationFilters = new grpc::Method<global::Clarifai.Api.ListAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotationFilters",
        __Marshaller_clarifai_api_ListAnnotationFiltersRequest,
        __Marshaller_clarifai_api_MultiAnnotationFilterResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetAnnotationFilterRequest, global::Clarifai.Api.SingleAnnotationFilterResponse> __Method_GetAnnotationFilter = new grpc::Method<global::Clarifai.Api.GetAnnotationFilterRequest, global::Clarifai.Api.SingleAnnotationFilterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnnotationFilter",
        __Marshaller_clarifai_api_GetAnnotationFilterRequest,
        __Marshaller_clarifai_api_SingleAnnotationFilterResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse> __Method_PostAnnotationFilters = new grpc::Method<global::Clarifai.Api.PostAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotationFilters",
        __Marshaller_clarifai_api_PostAnnotationFiltersRequest,
        __Marshaller_clarifai_api_MultiAnnotationFilterResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse> __Method_PatchAnnotationFilters = new grpc::Method<global::Clarifai.Api.PatchAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnnotationFilters",
        __Marshaller_clarifai_api_PatchAnnotationFiltersRequest,
        __Marshaller_clarifai_api_MultiAnnotationFilterResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationFiltersRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotationFilters = new grpc::Method<global::Clarifai.Api.DeleteAnnotationFiltersRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotationFilters",
        __Marshaller_clarifai_api_DeleteAnnotationFiltersRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListClustersRequest, global::Clarifai.Api.MultiClusterResponse> __Method_ListClusters = new grpc::Method<global::Clarifai.Api.ListClustersRequest, global::Clarifai.Api.MultiClusterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListClusters",
        __Marshaller_clarifai_api_ListClustersRequest,
        __Marshaller_clarifai_api_MultiClusterResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAnnotationsForClusterRequest, global::Clarifai.Api.MultiAnnotationResponse> __Method_ListAnnotationsForCluster = new grpc::Method<global::Clarifai.Api.ListAnnotationsForClusterRequest, global::Clarifai.Api.MultiAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotationsForCluster",
        __Marshaller_clarifai_api_ListAnnotationsForClusterRequest,
        __Marshaller_clarifai_api_MultiAnnotationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostClustersSearchesRequest, global::Clarifai.Api.MultiClusterResponse> __Method_PostClustersSearches = new grpc::Method<global::Clarifai.Api.PostClustersSearchesRequest, global::Clarifai.Api.MultiClusterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostClustersSearches",
        __Marshaller_clarifai_api_PostClustersSearchesRequest,
        __Marshaller_clarifai_api_MultiClusterResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostVerifyEmailRequest, global::Clarifai.Api.SingleVerifyEmailResponse> __Method_PostVerifyEmail = new grpc::Method<global::Clarifai.Api.PostVerifyEmailRequest, global::Clarifai.Api.SingleVerifyEmailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostVerifyEmail",
        __Marshaller_clarifai_api_PostVerifyEmailRequest,
        __Marshaller_clarifai_api_SingleVerifyEmailResponse);

    static readonly grpc::Method<global::Clarifai.Api.RequestResetPasswordRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostRequestResetPassword = new grpc::Method<global::Clarifai.Api.RequestResetPasswordRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostRequestResetPassword",
        __Marshaller_clarifai_api_RequestResetPasswordRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.CompleteResetPasswordRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostCompleteResetPassword = new grpc::Method<global::Clarifai.Api.CompleteResetPasswordRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostCompleteResetPassword",
        __Marshaller_clarifai_api_CompleteResetPasswordRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostLoginRequest, global::Clarifai.Api.SingleLoginResponse> __Method_PostLogin = new grpc::Method<global::Clarifai.Api.PostLoginRequest, global::Clarifai.Api.SingleLoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostLogin",
        __Marshaller_clarifai_api_PostLoginRequest,
        __Marshaller_clarifai_api_SingleLoginResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostSignupRequest, global::Clarifai.Api.SingleLoginResponse> __Method_PostSignup = new grpc::Method<global::Clarifai.Api.PostSignupRequest, global::Clarifai.Api.SingleLoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostSignup",
        __Marshaller_clarifai_api_PostSignupRequest,
        __Marshaller_clarifai_api_SingleLoginResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostLogoutRequest, global::Clarifai.Api.SingleLogoutResponse> __Method_PostLogout = new grpc::Method<global::Clarifai.Api.PostLogoutRequest, global::Clarifai.Api.SingleLogoutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostLogout",
        __Marshaller_clarifai_api_PostLogoutRequest,
        __Marshaller_clarifai_api_SingleLogoutResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAuthMethodsRequest, global::Clarifai.Api.ListAuthMethodsResponse> __Method_ListAuthMethods = new grpc::Method<global::Clarifai.Api.ListAuthMethodsRequest, global::Clarifai.Api.ListAuthMethodsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAuthMethods",
        __Marshaller_clarifai_api_ListAuthMethodsRequest,
        __Marshaller_clarifai_api_ListAuthMethodsResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAuthMethodsRequest, global::Clarifai.Api.ListAuthMethodsResponse> __Method_ListOrgAuthMethods = new grpc::Method<global::Clarifai.Api.ListAuthMethodsRequest, global::Clarifai.Api.ListAuthMethodsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOrgAuthMethods",
        __Marshaller_clarifai_api_ListAuthMethodsRequest,
        __Marshaller_clarifai_api_ListAuthMethodsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostIdLoginFinalizerRequest, global::Clarifai.Api.PostIdLoginFinalizerResponse> __Method_PostIdLoginFinalizer = new grpc::Method<global::Clarifai.Api.PostIdLoginFinalizerRequest, global::Clarifai.Api.PostIdLoginFinalizerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostIdLoginFinalizer",
        __Marshaller_clarifai_api_PostIdLoginFinalizerRequest,
        __Marshaller_clarifai_api_PostIdLoginFinalizerResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostLinkIdpUserRequest, global::Clarifai.Api.PostLinkIdpUserResponse> __Method_PostLinkIdpUser = new grpc::Method<global::Clarifai.Api.PostLinkIdpUserRequest, global::Clarifai.Api.PostLinkIdpUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostLinkIdpUser",
        __Marshaller_clarifai_api_PostLinkIdpUserRequest,
        __Marshaller_clarifai_api_PostLinkIdpUserResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetLoginInfoRequest, global::Clarifai.Api.GetLoginInfoResponse> __Method_GetLoginInfo = new grpc::Method<global::Clarifai.Api.GetLoginInfoRequest, global::Clarifai.Api.GetLoginInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLoginInfo",
        __Marshaller_clarifai_api_GetLoginInfoRequest,
        __Marshaller_clarifai_api_GetLoginInfoResponse);

    static readonly grpc::Method<global::Clarifai.Api.List2FAMethodsRequest, global::Clarifai.Api.List2FAMethodsResponse> __Method_ListAuth2FAMethods = new grpc::Method<global::Clarifai.Api.List2FAMethodsRequest, global::Clarifai.Api.List2FAMethodsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAuth2FAMethods",
        __Marshaller_clarifai_api_List2FAMethodsRequest,
        __Marshaller_clarifai_api_List2FAMethodsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAuth2FATotpRegisterEnableRequest, global::Clarifai.Api.PostAuth2FATotpRegisterEnableResponse> __Method_PostAuth2FATotpRegisterEnable = new grpc::Method<global::Clarifai.Api.PostAuth2FATotpRegisterEnableRequest, global::Clarifai.Api.PostAuth2FATotpRegisterEnableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAuth2FATotpRegisterEnable",
        __Marshaller_clarifai_api_PostAuth2FATotpRegisterEnableRequest,
        __Marshaller_clarifai_api_PostAuth2FATotpRegisterEnableResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAuth2FATotpRegisterVerifyRequest, global::Clarifai.Api.PostAuth2FATotpRegisterVerifyResponse> __Method_PostAuth2FATotpRegisterVerify = new grpc::Method<global::Clarifai.Api.PostAuth2FATotpRegisterVerifyRequest, global::Clarifai.Api.PostAuth2FATotpRegisterVerifyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAuth2FATotpRegisterVerify",
        __Marshaller_clarifai_api_PostAuth2FATotpRegisterVerifyRequest,
        __Marshaller_clarifai_api_PostAuth2FATotpRegisterVerifyResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAuth2FATotpDisableRequest, global::Clarifai.Api.PostAuth2FATotpDisableResponse> __Method_PostAuth2FATotpDisable = new grpc::Method<global::Clarifai.Api.PostAuth2FATotpDisableRequest, global::Clarifai.Api.PostAuth2FATotpDisableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAuth2FATotpDisable",
        __Marshaller_clarifai_api_PostAuth2FATotpDisableRequest,
        __Marshaller_clarifai_api_PostAuth2FATotpDisableResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAuth2FATotpLoginRequest, global::Clarifai.Api.SingleLoginResponse> __Method_PostAuth2FATotpLogin = new grpc::Method<global::Clarifai.Api.PostAuth2FATotpLoginRequest, global::Clarifai.Api.SingleLoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAuth2FATotpLogin",
        __Marshaller_clarifai_api_PostAuth2FATotpLoginRequest,
        __Marshaller_clarifai_api_SingleLoginResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAuth2FATotpRecoverRequest, global::Clarifai.Api.PostAuth2FATotpRecoverResponse> __Method_PostAuth2FATotpRecover = new grpc::Method<global::Clarifai.Api.PostAuth2FATotpRecoverRequest, global::Clarifai.Api.PostAuth2FATotpRecoverResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAuth2FATotpRecover",
        __Marshaller_clarifai_api_PostAuth2FATotpRecoverRequest,
        __Marshaller_clarifai_api_PostAuth2FATotpRecoverResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetAuth2FATotpRecoverConfirmRequest, global::Clarifai.Api.GetAuth2FATotpRecoverConfirmResponse> __Method_GetAuth2FATotpRecoverConfirm = new grpc::Method<global::Clarifai.Api.GetAuth2FATotpRecoverConfirmRequest, global::Clarifai.Api.GetAuth2FATotpRecoverConfirmResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAuth2FATotpRecoverConfirm",
        __Marshaller_clarifai_api_GetAuth2FATotpRecoverConfirmRequest,
        __Marshaller_clarifai_api_GetAuth2FATotpRecoverConfirmResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetSubscriptionRequest, global::Clarifai.Api.SingleSubscriptionResponse> __Method_GetSubscription = new grpc::Method<global::Clarifai.Api.GetSubscriptionRequest, global::Clarifai.Api.SingleSubscriptionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSubscription",
        __Marshaller_clarifai_api_GetSubscriptionRequest,
        __Marshaller_clarifai_api_SingleSubscriptionResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostSubscriptionRequest, global::Clarifai.Api.SingleSubscriptionResponse> __Method_PostSubscription = new grpc::Method<global::Clarifai.Api.PostSubscriptionRequest, global::Clarifai.Api.SingleSubscriptionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostSubscription",
        __Marshaller_clarifai_api_PostSubscriptionRequest,
        __Marshaller_clarifai_api_SingleSubscriptionResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListCreditCardsRequest, global::Clarifai.Api.MultipleCreditCardResponse> __Method_ListCreditCards = new grpc::Method<global::Clarifai.Api.ListCreditCardsRequest, global::Clarifai.Api.MultipleCreditCardResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCreditCards",
        __Marshaller_clarifai_api_ListCreditCardsRequest,
        __Marshaller_clarifai_api_MultipleCreditCardResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostCreditCardRequest, global::Clarifai.Api.SingleCreditCardResponse> __Method_PostCreditCard = new grpc::Method<global::Clarifai.Api.PostCreditCardRequest, global::Clarifai.Api.SingleCreditCardResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostCreditCard",
        __Marshaller_clarifai_api_PostCreditCardRequest,
        __Marshaller_clarifai_api_SingleCreditCardResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteCreditCardRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteCreditCard = new grpc::Method<global::Clarifai.Api.DeleteCreditCardRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCreditCard",
        __Marshaller_clarifai_api_DeleteCreditCardRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchCreditCardsRequest, global::Clarifai.Api.MultipleCreditCardResponse> __Method_PatchCreditCards = new grpc::Method<global::Clarifai.Api.PatchCreditCardsRequest, global::Clarifai.Api.MultipleCreditCardResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchCreditCards",
        __Marshaller_clarifai_api_PatchCreditCardsRequest,
        __Marshaller_clarifai_api_MultipleCreditCardResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetShippingAddressRequest, global::Clarifai.Api.SingleShippingAddressResponse> __Method_GetShippingAddress = new grpc::Method<global::Clarifai.Api.GetShippingAddressRequest, global::Clarifai.Api.SingleShippingAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShippingAddress",
        __Marshaller_clarifai_api_GetShippingAddressRequest,
        __Marshaller_clarifai_api_SingleShippingAddressResponse);

    static readonly grpc::Method<global::Clarifai.Api.PutShippingAddressRequest, global::Clarifai.Api.SingleShippingAddressResponse> __Method_PutShippingAddress = new grpc::Method<global::Clarifai.Api.PutShippingAddressRequest, global::Clarifai.Api.SingleShippingAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutShippingAddress",
        __Marshaller_clarifai_api_PutShippingAddressRequest,
        __Marshaller_clarifai_api_SingleShippingAddressResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListPlansRequest, global::Clarifai.Api.MultiPlanResponse> __Method_ListPlans = new grpc::Method<global::Clarifai.Api.ListPlansRequest, global::Clarifai.Api.MultiPlanResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPlans",
        __Marshaller_clarifai_api_ListPlansRequest,
        __Marshaller_clarifai_api_MultiPlanResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListStatusCodesRequest, global::Clarifai.Api.MultiStatusCodeResponse> __Method_ListStatusCodes = new grpc::Method<global::Clarifai.Api.ListStatusCodesRequest, global::Clarifai.Api.MultiStatusCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListStatusCodes",
        __Marshaller_clarifai_api_ListStatusCodesRequest,
        __Marshaller_clarifai_api_MultiStatusCodeResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetStatusCodeRequest, global::Clarifai.Api.SingleStatusCodeResponse> __Method_GetStatusCode = new grpc::Method<global::Clarifai.Api.GetStatusCodeRequest, global::Clarifai.Api.SingleStatusCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatusCode",
        __Marshaller_clarifai_api_GetStatusCodeRequest,
        __Marshaller_clarifai_api_SingleStatusCodeResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetHealthzRequest, global::Clarifai.Api.GetHealthzResponse> __Method_GetHealthz = new grpc::Method<global::Clarifai.Api.GetHealthzRequest, global::Clarifai.Api.GetHealthzResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHealthz",
        __Marshaller_clarifai_api_GetHealthzRequest,
        __Marshaller_clarifai_api_GetHealthzResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListUserBillingCyclesRequest, global::Clarifai.Api.ListUserBillingCyclesResponse> __Method_ListUserBillingCycles = new grpc::Method<global::Clarifai.Api.ListUserBillingCyclesRequest, global::Clarifai.Api.ListUserBillingCyclesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUserBillingCycles",
        __Marshaller_clarifai_api_ListUserBillingCyclesRequest,
        __Marshaller_clarifai_api_ListUserBillingCyclesResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListUserCyclesRequest, global::Clarifai.Api.ListUserCyclesResponse> __Method_ListUserCycles = new grpc::Method<global::Clarifai.Api.ListUserCyclesRequest, global::Clarifai.Api.ListUserCyclesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUserCycles",
        __Marshaller_clarifai_api_ListUserCyclesRequest,
        __Marshaller_clarifai_api_ListUserCyclesResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetBillingUsageRequest, global::Clarifai.Api.GetBillingUsageResponse> __Method_GetBillingUsage = new grpc::Method<global::Clarifai.Api.GetBillingUsageRequest, global::Clarifai.Api.GetBillingUsageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBillingUsage",
        __Marshaller_clarifai_api_GetBillingUsageRequest,
        __Marshaller_clarifai_api_GetBillingUsageResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostHistoricalUsageRequest, global::Clarifai.Api.PostHistoricalUsageResponse> __Method_PostHistoricalUsage = new grpc::Method<global::Clarifai.Api.PostHistoricalUsageRequest, global::Clarifai.Api.PostHistoricalUsageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostHistoricalUsage",
        __Marshaller_clarifai_api_PostHistoricalUsageRequest,
        __Marshaller_clarifai_api_PostHistoricalUsageResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetHistoricalUsageRequest, global::Clarifai.Api.GetHistoricalUsageResponse> __Method_GetHistoricalUsage = new grpc::Method<global::Clarifai.Api.GetHistoricalUsageRequest, global::Clarifai.Api.GetHistoricalUsageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHistoricalUsage",
        __Marshaller_clarifai_api_GetHistoricalUsageRequest,
        __Marshaller_clarifai_api_GetHistoricalUsageResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListUsageIntervalsRequest, global::Clarifai.Api.ListUsageIntervalsResponse> __Method_ListUsageIntervals = new grpc::Method<global::Clarifai.Api.ListUsageIntervalsRequest, global::Clarifai.Api.ListUsageIntervalsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUsageIntervals",
        __Marshaller_clarifai_api_ListUsageIntervalsRequest,
        __Marshaller_clarifai_api_ListUsageIntervalsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetRealtimeUsageRequest, global::Clarifai.Api.GetRealtimeUsageResponse> __Method_GetRealtimeUsage = new grpc::Method<global::Clarifai.Api.GetRealtimeUsageRequest, global::Clarifai.Api.GetRealtimeUsageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRealtimeUsage",
        __Marshaller_clarifai_api_GetRealtimeUsageRequest,
        __Marshaller_clarifai_api_GetRealtimeUsageResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostUsageRequest, global::Clarifai.Api.PostUsageResponse> __Method_PostUsage = new grpc::Method<global::Clarifai.Api.PostUsageRequest, global::Clarifai.Api.PostUsageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostUsage",
        __Marshaller_clarifai_api_PostUsageRequest,
        __Marshaller_clarifai_api_PostUsageResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse> __Method_ListCollaborators = new grpc::Method<global::Clarifai.Api.ListCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollaborators",
        __Marshaller_clarifai_api_ListCollaboratorsRequest,
        __Marshaller_clarifai_api_MultiCollaboratorsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse> __Method_PostCollaborators = new grpc::Method<global::Clarifai.Api.PostCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostCollaborators",
        __Marshaller_clarifai_api_PostCollaboratorsRequest,
        __Marshaller_clarifai_api_MultiCollaboratorsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse> __Method_PatchCollaborators = new grpc::Method<global::Clarifai.Api.PatchCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchCollaborators",
        __Marshaller_clarifai_api_PatchCollaboratorsRequest,
        __Marshaller_clarifai_api_MultiCollaboratorsResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteCollaboratorsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteCollaborators = new grpc::Method<global::Clarifai.Api.DeleteCollaboratorsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCollaborators",
        __Marshaller_clarifai_api_DeleteCollaboratorsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListCollaborationsRequest, global::Clarifai.Api.MultiCollaborationsResponse> __Method_ListCollaborations = new grpc::Method<global::Clarifai.Api.ListCollaborationsRequest, global::Clarifai.Api.MultiCollaborationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollaborations",
        __Marshaller_clarifai_api_ListCollaborationsRequest,
        __Marshaller_clarifai_api_MultiCollaborationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.FetchLicenseRequest, global::Clarifai.Api.FetchLicenseResponse> __Method_FetchLicense = new grpc::Method<global::Clarifai.Api.FetchLicenseRequest, global::Clarifai.Api.FetchLicenseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchLicense",
        __Marshaller_clarifai_api_FetchLicenseRequest,
        __Marshaller_clarifai_api_FetchLicenseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListLicensesRequest, global::Clarifai.Api.MultipleLicensesResponse> __Method_ListLicenses = new grpc::Method<global::Clarifai.Api.ListLicensesRequest, global::Clarifai.Api.MultipleLicensesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLicenses",
        __Marshaller_clarifai_api_ListLicensesRequest,
        __Marshaller_clarifai_api_MultipleLicensesResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetLicenseRequest, global::Clarifai.Api.SingleLicenseResponse> __Method_GetLicense = new grpc::Method<global::Clarifai.Api.GetLicenseRequest, global::Clarifai.Api.SingleLicenseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLicense",
        __Marshaller_clarifai_api_GetLicenseRequest,
        __Marshaller_clarifai_api_SingleLicenseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ValidateLicenseRequest, global::Clarifai.Api.ValidateLicenseResponse> __Method_ValidateLicense = new grpc::Method<global::Clarifai.Api.ValidateLicenseRequest, global::Clarifai.Api.ValidateLicenseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateLicense",
        __Marshaller_clarifai_api_ValidateLicenseRequest,
        __Marshaller_clarifai_api_ValidateLicenseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse> __Method_PostAppDuplications = new grpc::Method<global::Clarifai.Api.PostAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAppDuplications",
        __Marshaller_clarifai_api_PostAppDuplicationsRequest,
        __Marshaller_clarifai_api_MultiAppDuplicationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse> __Method_ListAppDuplications = new grpc::Method<global::Clarifai.Api.ListAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAppDuplications",
        __Marshaller_clarifai_api_ListAppDuplicationsRequest,
        __Marshaller_clarifai_api_MultiAppDuplicationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetAppDuplicationRequest, global::Clarifai.Api.SingleAppDuplicationResponse> __Method_GetAppDuplication = new grpc::Method<global::Clarifai.Api.GetAppDuplicationRequest, global::Clarifai.Api.SingleAppDuplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAppDuplication",
        __Marshaller_clarifai_api_GetAppDuplicationRequest,
        __Marshaller_clarifai_api_SingleAppDuplicationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostTasksRequest, global::Clarifai.Api.MultiTaskResponse> __Method_PostTasks = new grpc::Method<global::Clarifai.Api.PostTasksRequest, global::Clarifai.Api.MultiTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostTasks",
        __Marshaller_clarifai_api_PostTasksRequest,
        __Marshaller_clarifai_api_MultiTaskResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse> __Method_GetTaskAnnotationCount = new grpc::Method<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTaskAnnotationCount",
        __Marshaller_clarifai_api_GetTaskCountRequest,
        __Marshaller_clarifai_api_SingleTaskCountResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse> __Method_GetTaskInputCount = new grpc::Method<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTaskInputCount",
        __Marshaller_clarifai_api_GetTaskCountRequest,
        __Marshaller_clarifai_api_SingleTaskCountResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetTaskRequest, global::Clarifai.Api.SingleTaskResponse> __Method_GetTask = new grpc::Method<global::Clarifai.Api.GetTaskRequest, global::Clarifai.Api.SingleTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTask",
        __Marshaller_clarifai_api_GetTaskRequest,
        __Marshaller_clarifai_api_SingleTaskResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListTasksRequest, global::Clarifai.Api.MultiTaskResponse> __Method_ListTasks = new grpc::Method<global::Clarifai.Api.ListTasksRequest, global::Clarifai.Api.MultiTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTasks",
        __Marshaller_clarifai_api_ListTasksRequest,
        __Marshaller_clarifai_api_MultiTaskResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchTasksRequest, global::Clarifai.Api.MultiTaskResponse> __Method_PatchTasks = new grpc::Method<global::Clarifai.Api.PatchTasksRequest, global::Clarifai.Api.MultiTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchTasks",
        __Marshaller_clarifai_api_PatchTasksRequest,
        __Marshaller_clarifai_api_MultiTaskResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteTasksRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteTasks = new grpc::Method<global::Clarifai.Api.DeleteTasksRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTasks",
        __Marshaller_clarifai_api_DeleteTasksRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAnnotationCountsRollupRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PatchAnnotationCountsRollup = new grpc::Method<global::Clarifai.Api.PatchAnnotationCountsRollupRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnnotationCountsRollup",
        __Marshaller_clarifai_api_PatchAnnotationCountsRollupRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse> __Method_PostLabelOrders = new grpc::Method<global::Clarifai.Api.PostLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostLabelOrders",
        __Marshaller_clarifai_api_PostLabelOrdersRequest,
        __Marshaller_clarifai_api_MultiLabelOrderResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetLabelOrderRequest, global::Clarifai.Api.SingleLabelOrderResponse> __Method_GetLabelOrder = new grpc::Method<global::Clarifai.Api.GetLabelOrderRequest, global::Clarifai.Api.SingleLabelOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLabelOrder",
        __Marshaller_clarifai_api_GetLabelOrderRequest,
        __Marshaller_clarifai_api_SingleLabelOrderResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse> __Method_ListLabelOrders = new grpc::Method<global::Clarifai.Api.ListLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLabelOrders",
        __Marshaller_clarifai_api_ListLabelOrdersRequest,
        __Marshaller_clarifai_api_MultiLabelOrderResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse> __Method_PatchLabelOrders = new grpc::Method<global::Clarifai.Api.PatchLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchLabelOrders",
        __Marshaller_clarifai_api_PatchLabelOrdersRequest,
        __Marshaller_clarifai_api_MultiLabelOrderResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteLabelOrdersRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteLabelOrders = new grpc::Method<global::Clarifai.Api.DeleteLabelOrdersRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteLabelOrders",
        __Marshaller_clarifai_api_DeleteLabelOrdersRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse> __Method_PostCollectors = new grpc::Method<global::Clarifai.Api.PostCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostCollectors",
        __Marshaller_clarifai_api_PostCollectorsRequest,
        __Marshaller_clarifai_api_MultiCollectorResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetCollectorRequest, global::Clarifai.Api.SingleCollectorResponse> __Method_GetCollector = new grpc::Method<global::Clarifai.Api.GetCollectorRequest, global::Clarifai.Api.SingleCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCollector",
        __Marshaller_clarifai_api_GetCollectorRequest,
        __Marshaller_clarifai_api_SingleCollectorResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse> __Method_ListCollectors = new grpc::Method<global::Clarifai.Api.ListCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollectors",
        __Marshaller_clarifai_api_ListCollectorsRequest,
        __Marshaller_clarifai_api_MultiCollectorResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse> __Method_PatchCollectors = new grpc::Method<global::Clarifai.Api.PatchCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchCollectors",
        __Marshaller_clarifai_api_PatchCollectorsRequest,
        __Marshaller_clarifai_api_MultiCollectorResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteCollectorsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteCollectors = new grpc::Method<global::Clarifai.Api.DeleteCollectorsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCollectors",
        __Marshaller_clarifai_api_DeleteCollectorsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostStatValuesRequest, global::Clarifai.Api.MultiStatValueResponse> __Method_PostStatValues = new grpc::Method<global::Clarifai.Api.PostStatValuesRequest, global::Clarifai.Api.MultiStatValueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostStatValues",
        __Marshaller_clarifai_api_PostStatValuesRequest,
        __Marshaller_clarifai_api_MultiStatValueResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostStatValuesAggregateRequest, global::Clarifai.Api.MultiStatValueAggregateResponse> __Method_PostStatValuesAggregate = new grpc::Method<global::Clarifai.Api.PostStatValuesAggregateRequest, global::Clarifai.Api.MultiStatValueAggregateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostStatValuesAggregate",
        __Marshaller_clarifai_api_PostStatValuesAggregateRequest,
        __Marshaller_clarifai_api_MultiStatValueAggregateResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAnalyticsRequest, global::Clarifai.Api.PostAnalyticsResponse> __Method_PostAnalytics = new grpc::Method<global::Clarifai.Api.PostAnalyticsRequest, global::Clarifai.Api.PostAnalyticsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnalytics",
        __Marshaller_clarifai_api_PostAnalyticsRequest,
        __Marshaller_clarifai_api_PostAnalyticsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostSDKBillingRequest, global::Clarifai.Api.PostSDKBillingResponse> __Method_PostSDKBilling = new grpc::Method<global::Clarifai.Api.PostSDKBillingRequest, global::Clarifai.Api.PostSDKBillingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostSDKBilling",
        __Marshaller_clarifai_api_PostSDKBillingRequest,
        __Marshaller_clarifai_api_PostSDKBillingResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostFindDuplicateAnnotationsJobsRequest, global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse> __Method_PostFindDuplicateAnnotationsJobs = new grpc::Method<global::Clarifai.Api.PostFindDuplicateAnnotationsJobsRequest, global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostFindDuplicateAnnotationsJobs",
        __Marshaller_clarifai_api_PostFindDuplicateAnnotationsJobsRequest,
        __Marshaller_clarifai_api_MultiFindDuplicateAnnotationsJobResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetFindDuplicateAnnotationsJobRequest, global::Clarifai.Api.SingleFindDuplicateAnnotationsJobResponse> __Method_GetFindDuplicateAnnotationsJob = new grpc::Method<global::Clarifai.Api.GetFindDuplicateAnnotationsJobRequest, global::Clarifai.Api.SingleFindDuplicateAnnotationsJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFindDuplicateAnnotationsJob",
        __Marshaller_clarifai_api_GetFindDuplicateAnnotationsJobRequest,
        __Marshaller_clarifai_api_SingleFindDuplicateAnnotationsJobResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListFindDuplicateAnnotationsJobsRequest, global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse> __Method_ListFindDuplicateAnnotationsJobs = new grpc::Method<global::Clarifai.Api.ListFindDuplicateAnnotationsJobsRequest, global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFindDuplicateAnnotationsJobs",
        __Marshaller_clarifai_api_ListFindDuplicateAnnotationsJobsRequest,
        __Marshaller_clarifai_api_MultiFindDuplicateAnnotationsJobResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteFindDuplicateAnnotationsJobsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteFindDuplicateAnnotationsJobs = new grpc::Method<global::Clarifai.Api.DeleteFindDuplicateAnnotationsJobsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteFindDuplicateAnnotationsJobs",
        __Marshaller_clarifai_api_DeleteFindDuplicateAnnotationsJobsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostTrendingMetricsViewRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostTrendingMetricsView = new grpc::Method<global::Clarifai.Api.PostTrendingMetricsViewRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostTrendingMetricsView",
        __Marshaller_clarifai_api_PostTrendingMetricsViewRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListTrendingMetricsViewsRequest, global::Clarifai.Api.MultiTrendingMetricsViewResponse> __Method_ListTrendingMetricsViews = new grpc::Method<global::Clarifai.Api.ListTrendingMetricsViewsRequest, global::Clarifai.Api.MultiTrendingMetricsViewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTrendingMetricsViews",
        __Marshaller_clarifai_api_ListTrendingMetricsViewsRequest,
        __Marshaller_clarifai_api_MultiTrendingMetricsViewResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostIdValidationRequest, global::Clarifai.Api.MultiIdValidationResponse> __Method_PostIdValidation = new grpc::Method<global::Clarifai.Api.PostIdValidationRequest, global::Clarifai.Api.MultiIdValidationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostIdValidation",
        __Marshaller_clarifai_api_PostIdValidationRequest,
        __Marshaller_clarifai_api_MultiIdValidationResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListTagCategoriesRequest, global::Clarifai.Api.MultiTagCategoryResponse> __Method_ListTagCategories = new grpc::Method<global::Clarifai.Api.ListTagCategoriesRequest, global::Clarifai.Api.MultiTagCategoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTagCategories",
        __Marshaller_clarifai_api_ListTagCategoriesRequest,
        __Marshaller_clarifai_api_MultiTagCategoryResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListWebNotificationsRequest, global::Clarifai.Api.MultiWebNotificationResponse> __Method_ListWebNotifications = new grpc::Method<global::Clarifai.Api.ListWebNotificationsRequest, global::Clarifai.Api.MultiWebNotificationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWebNotifications",
        __Marshaller_clarifai_api_ListWebNotificationsRequest,
        __Marshaller_clarifai_api_MultiWebNotificationResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetWebNotificationRequest, global::Clarifai.Api.SingleWebNotificationResponse> __Method_GetWebNotification = new grpc::Method<global::Clarifai.Api.GetWebNotificationRequest, global::Clarifai.Api.SingleWebNotificationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWebNotification",
        __Marshaller_clarifai_api_GetWebNotificationRequest,
        __Marshaller_clarifai_api_SingleWebNotificationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchWebNotificationsRequest, global::Clarifai.Api.MultiWebNotificationResponse> __Method_PatchWebNotifications = new grpc::Method<global::Clarifai.Api.PatchWebNotificationsRequest, global::Clarifai.Api.MultiWebNotificationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchWebNotifications",
        __Marshaller_clarifai_api_PatchWebNotificationsRequest,
        __Marshaller_clarifai_api_MultiWebNotificationResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteWebNotificationsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteWebNotifications = new grpc::Method<global::Clarifai.Api.DeleteWebNotificationsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWebNotifications",
        __Marshaller_clarifai_api_DeleteWebNotificationsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModuleRequest, global::Clarifai.Api.SingleModuleResponse> __Method_GetModule = new grpc::Method<global::Clarifai.Api.GetModuleRequest, global::Clarifai.Api.SingleModuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModule",
        __Marshaller_clarifai_api_GetModuleRequest,
        __Marshaller_clarifai_api_SingleModuleResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModulesRequest, global::Clarifai.Api.MultiModuleResponse> __Method_ListModules = new grpc::Method<global::Clarifai.Api.ListModulesRequest, global::Clarifai.Api.MultiModuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModules",
        __Marshaller_clarifai_api_ListModulesRequest,
        __Marshaller_clarifai_api_MultiModuleResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModulesRequest, global::Clarifai.Api.MultiModuleResponse> __Method_PostModules = new grpc::Method<global::Clarifai.Api.PostModulesRequest, global::Clarifai.Api.MultiModuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModules",
        __Marshaller_clarifai_api_PostModulesRequest,
        __Marshaller_clarifai_api_MultiModuleResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchModulesRequest, global::Clarifai.Api.MultiModuleResponse> __Method_PatchModules = new grpc::Method<global::Clarifai.Api.PatchModulesRequest, global::Clarifai.Api.MultiModuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModules",
        __Marshaller_clarifai_api_PatchModulesRequest,
        __Marshaller_clarifai_api_MultiModuleResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModulesRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModules = new grpc::Method<global::Clarifai.Api.DeleteModulesRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModules",
        __Marshaller_clarifai_api_DeleteModulesRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModuleVersionRequest, global::Clarifai.Api.SingleModuleVersionResponse> __Method_GetModuleVersion = new grpc::Method<global::Clarifai.Api.GetModuleVersionRequest, global::Clarifai.Api.SingleModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModuleVersion",
        __Marshaller_clarifai_api_GetModuleVersionRequest,
        __Marshaller_clarifai_api_SingleModuleVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse> __Method_ListModuleVersions = new grpc::Method<global::Clarifai.Api.ListModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModuleVersions",
        __Marshaller_clarifai_api_ListModuleVersionsRequest,
        __Marshaller_clarifai_api_MultiModuleVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse> __Method_PostModuleVersions = new grpc::Method<global::Clarifai.Api.PostModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModuleVersions",
        __Marshaller_clarifai_api_PostModuleVersionsRequest,
        __Marshaller_clarifai_api_MultiModuleVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModuleVersions = new grpc::Method<global::Clarifai.Api.DeleteModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModuleVersions",
        __Marshaller_clarifai_api_DeleteModuleVersionsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetInstalledModuleVersionRequest, global::Clarifai.Api.SingleInstalledModuleVersionResponse> __Method_GetInstalledModuleVersion = new grpc::Method<global::Clarifai.Api.GetInstalledModuleVersionRequest, global::Clarifai.Api.SingleInstalledModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInstalledModuleVersion",
        __Marshaller_clarifai_api_GetInstalledModuleVersionRequest,
        __Marshaller_clarifai_api_SingleInstalledModuleVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse> __Method_ListInstalledModuleVersions = new grpc::Method<global::Clarifai.Api.ListInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInstalledModuleVersions",
        __Marshaller_clarifai_api_ListInstalledModuleVersionsRequest,
        __Marshaller_clarifai_api_MultiInstalledModuleVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse> __Method_PostInstalledModuleVersions = new grpc::Method<global::Clarifai.Api.PostInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInstalledModuleVersions",
        __Marshaller_clarifai_api_PostInstalledModuleVersionsRequest,
        __Marshaller_clarifai_api_MultiInstalledModuleVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteInstalledModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteInstalledModuleVersions = new grpc::Method<global::Clarifai.Api.DeleteInstalledModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInstalledModuleVersions",
        __Marshaller_clarifai_api_DeleteInstalledModuleVersionsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest, global::Clarifai.Api.SingleKeyResponse> __Method_PostInstalledModuleVersionsKey = new grpc::Method<global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest, global::Clarifai.Api.SingleKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInstalledModuleVersionsKey",
        __Marshaller_clarifai_api_PostInstalledModuleVersionsKeyRequest,
        __Marshaller_clarifai_api_SingleKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse> __Method_PostBulkOperations = new grpc::Method<global::Clarifai.Api.PostBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostBulkOperations",
        __Marshaller_clarifai_api_PostBulkOperationsRequest,
        __Marshaller_clarifai_api_MultiBulkOperationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse> __Method_ListBulkOperations = new grpc::Method<global::Clarifai.Api.ListBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBulkOperations",
        __Marshaller_clarifai_api_ListBulkOperationsRequest,
        __Marshaller_clarifai_api_MultiBulkOperationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetBulkOperationRequest, global::Clarifai.Api.SingleBulkOperationsResponse> __Method_GetBulkOperation = new grpc::Method<global::Clarifai.Api.GetBulkOperationRequest, global::Clarifai.Api.SingleBulkOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBulkOperation",
        __Marshaller_clarifai_api_GetBulkOperationRequest,
        __Marshaller_clarifai_api_SingleBulkOperationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.CancelBulkOperationRequest, global::Clarifai.Api.MultiBulkOperationsResponse> __Method_CancelBulkOperations = new grpc::Method<global::Clarifai.Api.CancelBulkOperationRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelBulkOperations",
        __Marshaller_clarifai_api_CancelBulkOperationRequest,
        __Marshaller_clarifai_api_MultiBulkOperationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteBulkOperationRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteBulkOperations = new grpc::Method<global::Clarifai.Api.DeleteBulkOperationRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteBulkOperations",
        __Marshaller_clarifai_api_DeleteBulkOperationRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetDatasetInputsSearchAddJobRequest, global::Clarifai.Api.SingleDatasetInputsSearchAddJobResponse> __Method_GetDatasetInputsSearchAddJob = new grpc::Method<global::Clarifai.Api.GetDatasetInputsSearchAddJobRequest, global::Clarifai.Api.SingleDatasetInputsSearchAddJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatasetInputsSearchAddJob",
        __Marshaller_clarifai_api_GetDatasetInputsSearchAddJobRequest,
        __Marshaller_clarifai_api_SingleDatasetInputsSearchAddJobResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListNextTaskAssignmentsRequest, global::Clarifai.Api.MultiInputResponse> __Method_ListNextTaskAssignments = new grpc::Method<global::Clarifai.Api.ListNextTaskAssignmentsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNextTaskAssignments",
        __Marshaller_clarifai_api_ListNextTaskAssignmentsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.PutTaskAssignmentsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PutTaskAssignments = new grpc::Method<global::Clarifai.Api.PutTaskAssignmentsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutTaskAssignments",
        __Marshaller_clarifai_api_PutTaskAssignmentsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWaitlistEmailsRequest, global::Clarifai.Api.MultiWaitlistEmailResponse> __Method_PostWaitlistEmails = new grpc::Method<global::Clarifai.Api.PostWaitlistEmailsRequest, global::Clarifai.Api.MultiWaitlistEmailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWaitlistEmails",
        __Marshaller_clarifai_api_PostWaitlistEmailsRequest,
        __Marshaller_clarifai_api_MultiWaitlistEmailResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetSampledPredictMetricsRequest, global::Clarifai.Api.MultiSampledPredictMetricsResponse> __Method_GetSampledPredictMetrics = new grpc::Method<global::Clarifai.Api.GetSampledPredictMetricsRequest, global::Clarifai.Api.MultiSampledPredictMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSampledPredictMetrics",
        __Marshaller_clarifai_api_GetSampledPredictMetricsRequest,
        __Marshaller_clarifai_api_MultiSampledPredictMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostInputsAddJobsRequest, global::Clarifai.Api.MultiInputsAddJobResponse> __Method_PostInputsAddJobs = new grpc::Method<global::Clarifai.Api.PostInputsAddJobsRequest, global::Clarifai.Api.MultiInputsAddJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputsAddJobs",
        __Marshaller_clarifai_api_PostInputsAddJobsRequest,
        __Marshaller_clarifai_api_MultiInputsAddJobResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListInputsAddJobsRequest, global::Clarifai.Api.MultiInputsAddJobResponse> __Method_ListInputsAddJobs = new grpc::Method<global::Clarifai.Api.ListInputsAddJobsRequest, global::Clarifai.Api.MultiInputsAddJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInputsAddJobs",
        __Marshaller_clarifai_api_ListInputsAddJobsRequest,
        __Marshaller_clarifai_api_MultiInputsAddJobResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse> __Method_GetInputsAddJob = new grpc::Method<global::Clarifai.Api.GetInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInputsAddJob",
        __Marshaller_clarifai_api_GetInputsAddJobRequest,
        __Marshaller_clarifai_api_SingleInputsAddJobResponse);

    static readonly grpc::Method<global::Clarifai.Api.CancelInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse> __Method_CancelInputsAddJob = new grpc::Method<global::Clarifai.Api.CancelInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelInputsAddJob",
        __Marshaller_clarifai_api_CancelInputsAddJobRequest,
        __Marshaller_clarifai_api_SingleInputsAddJobResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostUploadsRequest, global::Clarifai.Api.MultiUploadResponse> __Method_PostUploads = new grpc::Method<global::Clarifai.Api.PostUploadsRequest, global::Clarifai.Api.MultiUploadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostUploads",
        __Marshaller_clarifai_api_PostUploadsRequest,
        __Marshaller_clarifai_api_MultiUploadResponse);

    static readonly grpc::Method<global::Clarifai.Api.PutUploadContentPartsRequest, global::Clarifai.Api.SingleUploadResponse> __Method_PutUploadContentParts = new grpc::Method<global::Clarifai.Api.PutUploadContentPartsRequest, global::Clarifai.Api.SingleUploadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutUploadContentParts",
        __Marshaller_clarifai_api_PutUploadContentPartsRequest,
        __Marshaller_clarifai_api_SingleUploadResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetUploadRequest, global::Clarifai.Api.SingleUploadResponse> __Method_GetUpload = new grpc::Method<global::Clarifai.Api.GetUploadRequest, global::Clarifai.Api.SingleUploadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUpload",
        __Marshaller_clarifai_api_GetUploadRequest,
        __Marshaller_clarifai_api_SingleUploadResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListUploadsRequest, global::Clarifai.Api.MultiUploadResponse> __Method_ListUploads = new grpc::Method<global::Clarifai.Api.ListUploadsRequest, global::Clarifai.Api.MultiUploadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUploads",
        __Marshaller_clarifai_api_ListUploadsRequest,
        __Marshaller_clarifai_api_MultiUploadResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteUploadsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteUploads = new grpc::Method<global::Clarifai.Api.DeleteUploadsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUploads",
        __Marshaller_clarifai_api_DeleteUploadsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Clarifai.Api.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of V2</summary>
    [grpc::BindServiceMethod(typeof(V2), "BindService")]
    public abstract partial class V2Base
    {
      /// <summary>
      /// Common echo example.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.TestMessage> Echo(global::Clarifai.Api.TestMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List concept relations between concepts in the platform.
      /// MUST be above ListConcepts so that if concept_id is empty this will still match
      /// /concepts/relations to list all the concept relations in the app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptRelationResponse> ListConceptRelations(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptRelationResponse> PostConceptRelations(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteConceptRelations(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptCountResponse> GetConceptCounts(global::Clarifai.Api.GetConceptCountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleConceptResponse> GetConcept(global::Clarifai.Api.GetConceptRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> ListConcepts(global::Clarifai.Api.ListConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List models concepts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> ListModelConcepts(global::Clarifai.Api.ListModelConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> PostConceptsSearches(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> PostConcepts(global::Clarifai.Api.PostConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> PatchConcepts(global::Clarifai.Api.PatchConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific vocab from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleVocabResponse> GetVocab(global::Clarifai.Api.GetVocabRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the vocabs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiVocabResponse> ListVocabs(global::Clarifai.Api.ListVocabsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a vocab to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiVocabResponse> PostVocabs(global::Clarifai.Api.PostVocabsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more vocabs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiVocabResponse> PatchVocabs(global::Clarifai.Api.PatchVocabsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single vocab.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteVocab(global::Clarifai.Api.DeleteVocabRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple vocabs in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteVocabs(global::Clarifai.Api.DeleteVocabsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the vocabs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> ListVocabConcepts(global::Clarifai.Api.ListVocabConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a vocab to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> PostVocabConcepts(global::Clarifai.Api.PostVocabConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single concept from a vocab.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteVocabConcept(global::Clarifai.Api.DeleteVocabConceptRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple concepts from a vocab in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteVocabConcepts(global::Clarifai.Api.DeleteVocabConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleConceptLanguageResponse> GetConceptLanguage(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptLanguageResponse> ListConceptLanguages(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new translation for this concept.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptLanguageResponse> PostConceptLanguages(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptLanguageResponse> PatchConceptLanguages(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the concept in all the outside sources where we found these concepts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptReferenceResponse> ListConceptReferences(global::Clarifai.Api.ListConceptReferencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKnowledgeGraphResponse> ListKnowledgeGraphs(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKnowledgeGraphResponse> PostKnowledgeGraphs(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptMappingJobResponse> PostConceptMappingJobs(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all concept mappings for a given concept id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptMappingResponse> ListConceptMappings(global::Clarifai.Api.ListConceptMappingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post concept mappings.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptMappingResponse> PostConceptMappings(global::Clarifai.Api.PostConceptMappingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAnnotationResponse> GetAnnotation(global::Clarifai.Api.GetAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotations(global::Clarifai.Api.ListAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationResponse> PostAnnotations(global::Clarifai.Api.PostAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationResponse> PatchAnnotations(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch annotations status by worker id and task id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PatchAnnotationsStatusResponse> PatchAnnotationsStatus(global::Clarifai.Api.PatchAnnotationsStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotation(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotations(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch saved annotations searches by ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PatchAnnotationsSearches(global::Clarifai.Api.PatchAnnotationsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a search over annotations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostAnnotationsSearches(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get input count per status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputCountResponse> GetInputCount(global::Clarifai.Api.GetInputCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> StreamInputs(global::Clarifai.Api.StreamInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputAnnotationResponse> GetInputSamples(global::Clarifai.Api.GetInputSamplesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputResponse> GetInput(global::Clarifai.Api.GetInputRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> ListInputs(global::Clarifai.Api.ListInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add an input (or set of inputs) to an app.
      /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      /// it is asynchronous.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> PostInputs(global::Clarifai.Api.PostInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add an input (or set of inputs) to an app via a file.
      /// This is asynchronous.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> PostInputsFile(global::Clarifai.Api.PostInputsFileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add an input or set of inputs to an app designed for NiFi integration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> PostInputsNiFi(global::Clarifai.Api.PostInputsNiFiRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add an input or set of inputs to an app designed for Document integration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> PostInputsDocument(global::Clarifai.Api.PostInputsDocumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> PatchInputs(global::Clarifai.Api.PatchInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single input asynchronously.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteInput(global::Clarifai.Api.DeleteInputRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteInputs(global::Clarifai.Api.DeleteInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch saved inputs searches by ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PatchInputsSearches(global::Clarifai.Api.PatchInputsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a search over inputs
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostInputsSearches(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiOutputResponse> PostModelOutputs(global::Clarifai.Api.PostModelOutputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the datasets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetResponse> ListDatasets(global::Clarifai.Api.ListDatasetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific dataset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleDatasetResponse> GetDataset(global::Clarifai.Api.GetDatasetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add datasets to an app.
      /// The process is atomic, i.e. either all or no datasets are added.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetResponse> PostDatasets(global::Clarifai.Api.PostDatasetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more datasets.
      /// The process is atomic, i.e. either all or no datasets are patched.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetResponse> PatchDatasets(global::Clarifai.Api.PatchDatasetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more dataset ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetResponse> PatchDatasetIds(global::Clarifai.Api.PatchDatasetIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete one or more datasets in a single request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteDatasets(global::Clarifai.Api.DeleteDatasetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the dataset inputs in a dataset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetInputResponse> ListDatasetInputs(global::Clarifai.Api.ListDatasetInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific dataset input.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleDatasetInputResponse> GetDatasetInput(global::Clarifai.Api.GetDatasetInputRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add dataset inputs to a dataset.
      /// The process is not atomic, i.e. if there are errors with some dataset
      /// inputs, others might still be added. The response reports
      ///   - SUCCESS if all dataset inputs were added,
      ///   - MIXED_STATUS if only some dataset inputs were added, and
      ///   - FAILURE if no dataset inputs were added.
      /// Each individual dataset input in the response has the status set to
      /// indicate if it was successful or if there was an error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetInputResponse> PostDatasetInputs(global::Clarifai.Api.PostDatasetInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete one or more dataset inputs in a single request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetInputs(global::Clarifai.Api.DeleteDatasetInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the dataset versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetVersionResponse> ListDatasetVersions(global::Clarifai.Api.ListDatasetVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific dataset version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleDatasetVersionResponse> GetDatasetVersion(global::Clarifai.Api.GetDatasetVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse> ListDatasetVersionMetricsGroups(global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add dataset versions to a dataset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetVersionResponse> PostDatasetVersions(global::Clarifai.Api.PostDatasetVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more dataset versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetVersionResponse> PatchDatasetVersions(global::Clarifai.Api.PatchDatasetVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete one or more dataset versions in a single request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetVersions(global::Clarifai.Api.DeleteDatasetVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create export of a dataset version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetVersionExportResponse> PutDatasetVersionExports(global::Clarifai.Api.PutDatasetVersionExportsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelTypeResponse> GetModelType(global::Clarifai.Api.GetModelTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the supported open source licenses in the platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.ListOpenSourceLicensesResponse> ListOpenSourceLicenses(global::Clarifai.Api.ListOpenSourceLicensesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the model types available in the platform.
      /// This MUST be above ListModels so that the /models/types endpoint takes precedence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelTypeResponse> ListModelTypes(global::Clarifai.Api.ListModelTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> GetModel(global::Clarifai.Api.GetModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> GetModelOutputInfo(global::Clarifai.Api.GetModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> ListModels(global::Clarifai.Api.ListModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> PostModelsSearches(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a models to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> PostModels(global::Clarifai.Api.PostModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> PatchModels(global::Clarifai.Api.PatchModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more models ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> PatchModelIds(global::Clarifai.Api.PatchModelIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModel(global::Clarifai.Api.DeleteModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModels(global::Clarifai.Api.DeleteModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update model check consents
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelCheckConsentResponse> PatchModelCheckConsents(global::Clarifai.Api.PatchModelCheckConsentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update model toolkits tags
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelToolkitResponse> PatchModelToolkits(global::Clarifai.Api.PatchModelToolkitsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update model use_cases tags
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelUseCaseResponse> PatchModelUseCases(global::Clarifai.Api.PatchModelUseCasesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update model languages tags
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelLanguageResponse> PatchModelLanguages(global::Clarifai.Api.PatchModelLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> ListModelInputs(global::Clarifai.Api.ListModelInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersion(global::Clarifai.Api.GetModelVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelVersionResponse> ListModelVersions(global::Clarifai.Api.ListModelVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsUnPublish(global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsPublish(global::Clarifai.Api.PostWorkflowVersionsPublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostModelVersionsPublish
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsPublish(global::Clarifai.Api.PostModelVersionsPublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostModelVersionsUnPublish
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsUnPublish(global::Clarifai.Api.PostModelVersionsUnPublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> PostModelVersions(global::Clarifai.Api.PostModelVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PatchModelVersions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelVersionResponse> PatchModelVersions(global::Clarifai.Api.PatchModelVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersion(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionMetrics(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionResponse> PostModelVersionMetrics(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists model references tied to a particular model id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelReferenceResponse> ListModelReferences(global::Clarifai.Api.ListModelReferencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add new reference(s) to a particular model
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelReferenceResponse> PostModelReferences(global::Clarifai.Api.PostModelReferencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete model references tied to a model id by reference id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModelReferences(global::Clarifai.Api.DeleteModelReferencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetModelVersionInputExample
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionInputExampleResponse> GetModelVersionInputExample(global::Clarifai.Api.GetModelVersionInputExampleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelVersionInputExampleResponse> ListModelVersionInputExamples(global::Clarifai.Api.ListModelVersionInputExamplesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelVersionInputExampleResponse> PostModelVersionInputExamples(global::Clarifai.Api.PostModelVersionInputExamplesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersionInputExamples(global::Clarifai.Api.DeleteModelVersionInputExamplesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Star a model
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelStarResponse> PostModelStars(global::Clarifai.Api.PostModelStarsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Un-star a model
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.DeleteModelStarsResponse> DeleteModelStars(global::Clarifai.Api.DeleteModelStarsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Star a user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiUserStarResponse> PostUserStars(global::Clarifai.Api.PostUserStarsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Un-star a user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.DeleteUserStarsResponse> DeleteUserStars(global::Clarifai.Api.DeleteUserStarsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Star a workflow
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowStarResponse> PostWorkflowStars(global::Clarifai.Api.PostWorkflowStarsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Un-star a workflow
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.DeleteWorkflowStarsResponse> DeleteWorkflowStars(global::Clarifai.Api.DeleteWorkflowStarsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Star an app
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppStarResponse> PostAppStars(global::Clarifai.Api.PostAppStarsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Un-star an app
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.DeleteAppStarsResponse> DeleteAppStars(global::Clarifai.Api.DeleteAppStarsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleWorkflowResponse> GetWorkflow(global::Clarifai.Api.GetWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> ListWorkflows(global::Clarifai.Api.ListWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all public workflows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> ListPublicWorkflows(global::Clarifai.Api.ListPublicWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> PostWorkflows(global::Clarifai.Api.PostWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflows(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more workflows ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowIds(global::Clarifai.Api.PatchWorkflowIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflow(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflows(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostWorkflowResultsResponse> PostWorkflowResults(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Compare embeddings distances using a workflow
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> PostWorkflowResultsSimilarity(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List workflow versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowVersionResponse> ListWorkflowVersions(global::Clarifai.Api.ListWorkflowVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get single workflow version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleWorkflowVersionResponse> GetWorkflowVersion(global::Clarifai.Api.GetWorkflowVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete workflow versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowVersions(global::Clarifai.Api.DeleteWorkflowVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch workflow versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowVersionResponse> PatchWorkflowVersions(global::Clarifai.Api.PatchWorkflowVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Evaluate all the nodes in the workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowMetricsResponse> PostWorkflowMetrics(global::Clarifai.Api.PostWorkflowMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get workflow evaluation data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleWorkflowMetricsResponse> GetWorkflowMetrics(global::Clarifai.Api.GetWorkflowMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetWorkflowNodeMetrics
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleWorkflowNodeMetricsResponse> GetWorkflowNodeMetrics(global::Clarifai.Api.GetWorkflowNodeMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListWorkflowMetrics
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowMetricsResponse> ListWorkflowMetrics(global::Clarifai.Api.ListWorkflowMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete one or more workflow metrics.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowMetrics(global::Clarifai.Api.DeleteWorkflowMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleKeyResponse> GetKey(global::Clarifai.Api.GetKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> ListKeys(global::Clarifai.Api.ListKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> ListAppKeys(global::Clarifai.Api.ListAppKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteKey(global::Clarifai.Api.DeleteKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> PostKeys(global::Clarifai.Api.PostKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> PatchKeys(global::Clarifai.Api.PatchKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiScopeResponse> MyScopes(global::Clarifai.Api.MyScopesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiScopeUserResponse> MyScopesUser(global::Clarifai.Api.MyScopesUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiScopeRootResponse> MyScopesRoot(global::Clarifai.Api.MyScopesRootRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all auth scopes available to me as a user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiScopeDepsResponse> ListScopes(global::Clarifai.Api.ListScopesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAppResponse> GetApp(global::Clarifai.Api.GetAppRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> ListApps(global::Clarifai.Api.ListAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteApp(global::Clarifai.Api.DeleteAppRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PostApps(global::Clarifai.Api.PostAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PatchApps(global::Clarifai.Api.PatchAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch apps ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PatchAppsIds(global::Clarifai.Api.PatchAppsIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAppResponse> PatchApp(global::Clarifai.Api.PatchAppRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch app owner.
      /// The new app owner can only be an org, and the original owner must be a member of that org.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PatchAppOwner(global::Clarifai.Api.PatchAppOwnerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PostAppsSearches(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get current user information
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleUserResponse> GetUser(global::Clarifai.Api.GetUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List users
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiUserResponse> ListUsers(global::Clarifai.Api.ListUsersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update gdpr fields of current user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleUserResponse> PostUserConsent(global::Clarifai.Api.PostUserConsentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch information of current user or another user in the same organisation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleUserResponse> PatchUser(global::Clarifai.Api.PatchUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post user access request
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiUserAccessResponse> PostUserAccess(global::Clarifai.Api.PostUserAccessRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get user access request
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleUserAccessResponse> GetUserAccess(global::Clarifai.Api.GetUserAccessRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /////////////////////////////////////////
      /// Email
      /////////////////////////////////////////
      /// Add Email
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultipleEmailResponse> PostEmails(global::Clarifai.Api.PostEmailsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List emails
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultipleEmailResponse> ListEmails(global::Clarifai.Api.ListEmailsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// For sending another verification email.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleResendVerifyResponse> PostResendVerifyEmail(global::Clarifai.Api.PostResendVerifyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deleting an email.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteEmail(global::Clarifai.Api.DeleteEmailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create primate email.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleEmailResponse> PostPrimaryEmail(global::Clarifai.Api.PostPrimaryEmailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SinglePasswordValidationResponse> PostValidatePassword(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get global policy
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiplePasswordPoliciesResponse> ListGlobalPasswordPolicies(global::Clarifai.Api.ListGlobalPasswordPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific set of password policies attached to a user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiplePasswordPoliciesResponse> ListPasswordPolicies(global::Clarifai.Api.ListPasswordPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a specific set of password policies attached to a user or an organization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiplePasswordPoliciesResponse> PostPasswordPolicies(global::Clarifai.Api.PostPasswordPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a specific set of password policies attached to a user or an organization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiplePasswordPoliciesResponse> PatchPasswordPolicies(global::Clarifai.Api.PatchPasswordPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeletePasswordPolicies
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeletePasswordPolicies(global::Clarifai.Api.DeletePasswordPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get user feature config
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleUserFeatureConfigResponse> GetUserFeatureConfig(global::Clarifai.Api.UserFeatureConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add organizations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiOrganizationResponse> PostOrganizations(global::Clarifai.Api.PostOrganizationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the provided user's organizations with their roles
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiUsersOrganizationsResponse> ListUsersOrganizations(global::Clarifai.Api.ListUsersOrganizationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List multiple organizations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiOrganizationResponse> ListOrganizations(global::Clarifai.Api.ListOrganizationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get single organization
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleOrganizationResponse> GetOrganization(global::Clarifai.Api.GetOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch an organization
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleOrganizationResponse> PatchOrganization(global::Clarifai.Api.PatchOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an organization
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteOrganization(global::Clarifai.Api.DeleteOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List organization members
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiOrganizationMemberResponse> ListOrganizationMembers(global::Clarifai.Api.ListOrganizationMembersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListOrganizationAppMembers
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiOrganizationMemberResponse> ListOrganizationAppMembers(global::Clarifai.Api.ListOrganizationAppMembersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add new member to organization
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostOrganizationMember(global::Clarifai.Api.PostOrganizationMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PatchOrganizationMember
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PatchOrganizationMember(global::Clarifai.Api.PatchOrganizationMembersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove a member from organization
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteOrganizationMember(global::Clarifai.Api.DeleteOrganizationMemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Organization invites
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiOrganizationInvitationResponse> PostOrganizationInvitations(global::Clarifai.Api.PostOrganizationInvitationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PatchOrganizationInvitations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiOrganizationInvitationResponse> PatchOrganizationInvitations(global::Clarifai.Api.PatchOrganizationInvitationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListOrganizationInvitations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiOrganizationInvitationResponse> ListOrganizationInvitations(global::Clarifai.Api.ListOrganizationInvitationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetOrganizationInvitation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleOrganizationInvitationResponse> GetOrganizationInvitation(global::Clarifai.Api.GetOrganizationInvitationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostDeclineOrganizationInvitation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostDeclineOrganizationInvitation(global::Clarifai.Api.PostDeclineOrganizationInvitationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostAcceptOrganizationInvitation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostAcceptOrganizationInvitation(global::Clarifai.Api.PostAcceptOrganizationInvitationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetOrganizationInvitationPublic
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleOrganizationInvitationResponse> GetOrganizationInvitationPublic(global::Clarifai.Api.GetOrganizationInvitationPublicRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Leave an organization
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteRequestingUserFromOrganization(global::Clarifai.Api.DeleteRequestingUserFromOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add IdentityProviders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiIdentityProviderResponse> PostIdentityProviders(global::Clarifai.Api.PostIdentityProvidersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiIdentityProviderResponse> ListIdentityProviders(global::Clarifai.Api.ListIdentityProvidersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get single IdentityProvider
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleIdentityProviderResponse> GetIdentityProvider(global::Clarifai.Api.GetIdentityProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiIdentityProviderResponse> PatchIdentityProviders(global::Clarifai.Api.PatchIdentityProvidersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteIdentityProviders(global::Clarifai.Api.DeleteIdentityProvidersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add teams
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTeamResponse> PostTeams(global::Clarifai.Api.PostTeamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List multiple teams
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTeamResponse> ListTeams(global::Clarifai.Api.ListTeamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get single team
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleTeamResponse> GetTeam(global::Clarifai.Api.GetTeamRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch multiple teams
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTeamResponse> PatchTeams(global::Clarifai.Api.PatchTeamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple teams
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteTeams(global::Clarifai.Api.DeleteTeamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add users to a team
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTeamUserResponse> PostTeamUsers(global::Clarifai.Api.PostTeamUsersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List team users
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTeamUserResponse> ListTeamUsers(global::Clarifai.Api.ListTeamUsersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete users from a team
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteTeamUsers(global::Clarifai.Api.DeleteTeamUsersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add applications to team
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostTeamApps(global::Clarifai.Api.PostTeamAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List team applications
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTeamAppsResponse> ListTeamApps(global::Clarifai.Api.ListTeamAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove applications from team
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteTeamApps(global::Clarifai.Api.DeleteTeamAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List multiple roles
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiRoleResponse> ListRoles(global::Clarifai.Api.ListRolesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get single role
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleRoleResponse> GetRole(global::Clarifai.Api.GetRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a saved legacy search.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleSearchResponse> GetSearch(global::Clarifai.Api.GetSearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all saved legacy searches.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> ListSearches(global::Clarifai.Api.ListSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch saved legacy searches by ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PatchSearches(global::Clarifai.Api.PatchSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a new search and optionally save it.
      ///
      /// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostSearches(global::Clarifai.Api.PostSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a previously saved legacy search.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostSearchesByID(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> PostAnnotationSearchMetrics(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> GetAnnotationSearchMetrics(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> ListAnnotationSearchMetrics(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteAnnotationSearchMetrics
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationSearchMetrics(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteSearch(global::Clarifai.Api.DeleteSearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute an attribute search.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostAttributeSearch(global::Clarifai.Api.PostAttributeSearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the annotation filters.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationFilterResponse> ListAnnotationFilters(global::Clarifai.Api.ListAnnotationFiltersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific annotation filter.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAnnotationFilterResponse> GetAnnotationFilter(global::Clarifai.Api.GetAnnotationFilterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add annotation filters.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationFilterResponse> PostAnnotationFilters(global::Clarifai.Api.PostAnnotationFiltersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more annotation filters.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationFilterResponse> PatchAnnotationFilters(global::Clarifai.Api.PatchAnnotationFiltersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete one or more annotation filters in a single request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationFilters(global::Clarifai.Api.DeleteAnnotationFiltersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a list of clusters in an app
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiClusterResponse> ListClusters(global::Clarifai.Api.ListClustersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the annotations for a given cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotationsForCluster(global::Clarifai.Api.ListAnnotationsForClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the annotations for a given cluser.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiClusterResponse> PostClustersSearches(global::Clarifai.Api.PostClustersSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Verify email
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleVerifyEmailResponse> PostVerifyEmail(global::Clarifai.Api.PostVerifyEmailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request for password reset email
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostRequestResetPassword(global::Clarifai.Api.RequestResetPasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Complete reset password
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostCompleteResetPassword(global::Clarifai.Api.CompleteResetPasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Login with user/pass
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleLoginResponse> PostLogin(global::Clarifai.Api.PostLoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Signup with account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleLoginResponse> PostSignup(global::Clarifai.Api.PostSignupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Logout use
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleLogoutResponse> PostLogout(global::Clarifai.Api.PostLogoutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List available authentication methods, e.g.
      /// * standard auth method - login using user &amp; password
      /// * SAML auth methods - SSO using SAML Identity Providers like Okta, Github, Google GSuite, LinkedIn, etc.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.ListAuthMethodsResponse> ListAuthMethods(global::Clarifai.Api.ListAuthMethodsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListOrgAuthMethods
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.ListAuthMethodsResponse> ListOrgAuthMethods(global::Clarifai.Api.ListAuthMethodsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListOrgAuthMethods
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostIdLoginFinalizerResponse> PostIdLoginFinalizer(global::Clarifai.Api.PostIdLoginFinalizerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostLinkIdpUser
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostLinkIdpUserResponse> PostLinkIdpUser(global::Clarifai.Api.PostLinkIdpUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetLoginInfo
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.GetLoginInfoResponse> GetLoginInfo(global::Clarifai.Api.GetLoginInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List available 2FA methods in current environment, e.g.
      /// * TOTP auth method - login layer using time synced  codes
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.List2FAMethodsResponse> ListAuth2FAMethods(global::Clarifai.Api.List2FAMethodsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enable Clarifai TOTP 2FA
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostAuth2FATotpRegisterEnableResponse> PostAuth2FATotpRegisterEnable(global::Clarifai.Api.PostAuth2FATotpRegisterEnableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Verify Clarifai TOTP 2FA activation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostAuth2FATotpRegisterVerifyResponse> PostAuth2FATotpRegisterVerify(global::Clarifai.Api.PostAuth2FATotpRegisterVerifyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Disable Clarifai TOTP 2FA
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostAuth2FATotpDisableResponse> PostAuth2FATotpDisable(global::Clarifai.Api.PostAuth2FATotpDisableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Login with Clarifai TOTP 2FA activation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleLoginResponse> PostAuth2FATotpLogin(global::Clarifai.Api.PostAuth2FATotpLoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Recover users Clarifai TOTP 2FA activation through sending an email confirmation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostAuth2FATotpRecoverResponse> PostAuth2FATotpRecover(global::Clarifai.Api.PostAuth2FATotpRecoverRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Confirm the recovery of users Clarifai TOTP 2FA. Will be called by user from email link (via portal).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.GetAuth2FATotpRecoverConfirmResponse> GetAuth2FATotpRecoverConfirm(global::Clarifai.Api.GetAuth2FATotpRecoverConfirmRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the subscriptions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleSubscriptionResponse> GetSubscription(global::Clarifai.Api.GetSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new subscription.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleSubscriptionResponse> PostSubscription(global::Clarifai.Api.PostSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all credit cards.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultipleCreditCardResponse> ListCreditCards(global::Clarifai.Api.ListCreditCardsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new credit card.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleCreditCardResponse> PostCreditCard(global::Clarifai.Api.PostCreditCardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a credit card.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteCreditCard(global::Clarifai.Api.DeleteCreditCardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a credit card.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultipleCreditCardResponse> PatchCreditCards(global::Clarifai.Api.PatchCreditCardsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the shipping address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleShippingAddressResponse> GetShippingAddress(global::Clarifai.Api.GetShippingAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update shipping address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleShippingAddressResponse> PutShippingAddress(global::Clarifai.Api.PutShippingAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListPlans
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiPlanResponse> ListPlans(global::Clarifai.Api.ListPlansRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiStatusCodeResponse> ListStatusCodes(global::Clarifai.Api.ListStatusCodesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleStatusCodeResponse> GetStatusCode(global::Clarifai.Api.GetStatusCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Health check endpoint
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.GetHealthzResponse> GetHealthz(global::Clarifai.Api.GetHealthzRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all billing  cycles - old billing
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.ListUserBillingCyclesResponse> ListUserBillingCycles(global::Clarifai.Api.ListUserBillingCyclesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List user usage.cycles.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.ListUserCyclesResponse> ListUserCycles(global::Clarifai.Api.ListUserCyclesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the billing cycle start and end date as well as invoice items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.GetBillingUsageResponse> GetBillingUsage(global::Clarifai.Api.GetBillingUsageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add historical usage. - Billing 1
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostHistoricalUsageResponse> PostHistoricalUsage(global::Clarifai.Api.PostHistoricalUsageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get historical usage. - Billing 2
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.GetHistoricalUsageResponse> GetHistoricalUsage(global::Clarifai.Api.GetHistoricalUsageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a list of valid usage intervals
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.ListUsageIntervalsResponse> ListUsageIntervals(global::Clarifai.Api.ListUsageIntervalsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get realtime usage.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.GetRealtimeUsageResponse> GetRealtimeUsage(global::Clarifai.Api.GetRealtimeUsageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post usage to platform. Only called by on prem now.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostUsageResponse> PostUsage(global::Clarifai.Api.PostUsageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaboratorsResponse> ListCollaborators(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaboratorsResponse> PostCollaborators(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaboratorsResponse> PatchCollaborators(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteCollaborators(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaborationsResponse> ListCollaborations(global::Clarifai.Api.ListCollaborationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the license with crypto security.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.FetchLicenseResponse> FetchLicense(global::Clarifai.Api.FetchLicenseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all licenses.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultipleLicensesResponse> ListLicenses(global::Clarifai.Api.ListLicensesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a license
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleLicenseResponse> GetLicense(global::Clarifai.Api.GetLicenseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check that a license is still valid.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.ValidateLicenseResponse> ValidateLicense(global::Clarifai.Api.ValidateLicenseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppDuplicationsResponse> PostAppDuplications(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// list all the app duplications user triggers
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppDuplicationsResponse> ListAppDuplications(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get the app duplication status
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAppDuplicationResponse> GetAppDuplication(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTaskResponse> PostTasks(global::Clarifai.Api.PostTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Task annotation count
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleTaskCountResponse> GetTaskAnnotationCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Task Input count
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleTaskCountResponse> GetTaskInputCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleTaskResponse> GetTask(global::Clarifai.Api.GetTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTaskResponse> ListTasks(global::Clarifai.Api.ListTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTaskResponse> PatchTasks(global::Clarifai.Api.PatchTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteTasks(global::Clarifai.Api.DeleteTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Rollup annotation count for task.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PatchAnnotationCountsRollup(global::Clarifai.Api.PatchAnnotationCountsRollupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add Label orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiLabelOrderResponse> PostLabelOrders(global::Clarifai.Api.PostLabelOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a label order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleLabelOrderResponse> GetLabelOrder(global::Clarifai.Api.GetLabelOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List label orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiLabelOrderResponse> ListLabelOrders(global::Clarifai.Api.ListLabelOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more label orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiLabelOrderResponse> PatchLabelOrders(global::Clarifai.Api.PatchLabelOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple label orders in one request.
      /// this do not change task status
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteLabelOrders(global::Clarifai.Api.DeleteLabelOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollectorResponse> PostCollectors(global::Clarifai.Api.PostCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleCollectorResponse> GetCollector(global::Clarifai.Api.GetCollectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollectorResponse> ListCollectors(global::Clarifai.Api.ListCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollectorResponse> PatchCollectors(global::Clarifai.Api.PatchCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteCollectors(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostStatValues
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiStatValueResponse> PostStatValues(global::Clarifai.Api.PostStatValuesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostStatValuesAggregate
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiStatValueAggregateResponse> PostStatValuesAggregate(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new analytics entry into our database
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostAnalyticsResponse> PostAnalytics(global::Clarifai.Api.PostAnalyticsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new sdk_billing entry into our database
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostSDKBillingResponse> PostSDKBilling(global::Clarifai.Api.PostSDKBillingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Find annotations duplicates based on an specified attribute of different annotations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse> PostFindDuplicateAnnotationsJobs(global::Clarifai.Api.PostFindDuplicateAnnotationsJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get annotations find duplicates jobs results by id
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleFindDuplicateAnnotationsJobResponse> GetFindDuplicateAnnotationsJob(global::Clarifai.Api.GetFindDuplicateAnnotationsJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the annotations find duplicates jobs results
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse> ListFindDuplicateAnnotationsJobs(global::Clarifai.Api.ListFindDuplicateAnnotationsJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteFindDuplicateAnnotationsJobs
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteFindDuplicateAnnotationsJobs(global::Clarifai.Api.DeleteFindDuplicateAnnotationsJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Increase the view metric for a detail view
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostTrendingMetricsView(global::Clarifai.Api.PostTrendingMetricsViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the view metrics for a detail view
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTrendingMetricsViewResponse> ListTrendingMetricsViews(global::Clarifai.Api.ListTrendingMetricsViewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Validates the ids (app and user supported), returns validation errors and recommendations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiIdValidationResponse> PostIdValidation(global::Clarifai.Api.PostIdValidationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the available tags for specified object_type grouped by category
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTagCategoryResponse> ListTagCategories(global::Clarifai.Api.ListTagCategoriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List users web notifications
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWebNotificationResponse> ListWebNotifications(global::Clarifai.Api.ListWebNotificationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a web notification
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleWebNotificationResponse> GetWebNotification(global::Clarifai.Api.GetWebNotificationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update users web notifications
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWebNotificationResponse> PatchWebNotifications(global::Clarifai.Api.PatchWebNotificationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete users web notifications
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteWebNotifications(global::Clarifai.Api.DeleteWebNotificationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific module from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModuleResponse> GetModule(global::Clarifai.Api.GetModuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the modules in community, by user or by app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModuleResponse> ListModules(global::Clarifai.Api.ListModulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a modules to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModuleResponse> PostModules(global::Clarifai.Api.PostModulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more modules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModuleResponse> PatchModules(global::Clarifai.Api.PatchModulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple modules in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModules(global::Clarifai.Api.DeleteModulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific module version for a module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModuleVersionResponse> GetModuleVersion(global::Clarifai.Api.GetModuleVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the modules versions for a given module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModuleVersionResponse> ListModuleVersions(global::Clarifai.Api.ListModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new module version to trigger training of the module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModuleVersionResponse> PostModuleVersions(global::Clarifai.Api.PostModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a multiple module version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModuleVersions(global::Clarifai.Api.DeleteModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInstalledModuleVersionResponse> GetInstalledModuleVersion(global::Clarifai.Api.GetInstalledModuleVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInstalledModuleVersionResponse> ListInstalledModuleVersions(global::Clarifai.Api.ListInstalledModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInstalledModuleVersionResponse> PostInstalledModuleVersions(global::Clarifai.Api.PostInstalledModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
      /// in the url.
      /// This cleaned up any associated caller keys so needs the Keys_Delete scope.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteInstalledModuleVersions(global::Clarifai.Api.DeleteInstalledModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Assign a key that the caller owns to be used when accessing this installed module version
      /// If this endpoint is called with a different key then it overwrites what is there.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleKeyResponse> PostInstalledModuleVersionsKey(global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Perform bulk operations on a list of inputs based on input source.
      /// Operation include add, update, delete of concepts, metadata and geo data.
      /// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiBulkOperationsResponse> PostBulkOperations(global::Clarifai.Api.PostBulkOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the bulk operations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiBulkOperationsResponse> ListBulkOperations(global::Clarifai.Api.ListBulkOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the bulk operation details by ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleBulkOperationsResponse> GetBulkOperation(global::Clarifai.Api.GetBulkOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancel one or more bulk operations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiBulkOperationsResponse> CancelBulkOperations(global::Clarifai.Api.CancelBulkOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// delete one or more terminated bulk operations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteBulkOperations(global::Clarifai.Api.DeleteBulkOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific job.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleDatasetInputsSearchAddJobResponse> GetDatasetInputsSearchAddJob(global::Clarifai.Api.GetDatasetInputsSearchAddJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List next non-labeled and unassigned inputs from task's dataset
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> ListNextTaskAssignments(global::Clarifai.Api.ListNextTaskAssignmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PutTaskAssignments(global::Clarifai.Api.PutTaskAssignmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostWaitlistEmails adds new e-mail addresses to a feature waiting list.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWaitlistEmailResponse> PostWaitlistEmails(global::Clarifai.Api.PostWaitlistEmailsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetSampledPredictResults get sampled prediction metrics by model id
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSampledPredictMetricsResponse> GetSampledPredictMetrics(global::Clarifai.Api.GetSampledPredictMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a job to add inputs from a cloud storage to an app on the clarifai platform
      /// This is an Asynchronous process. Use ListInputsAddJobs or GetInputsJob to check the status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputsAddJobResponse> PostInputsAddJobs(global::Clarifai.Api.PostInputsAddJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the inputs add jobs
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputsAddJobResponse> ListInputsAddJobs(global::Clarifai.Api.ListInputsAddJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the input add job details by ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputsAddJobResponse> GetInputsAddJob(global::Clarifai.Api.GetInputsAddJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// cancel the input add job by ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputsAddJobResponse> CancelInputsAddJob(global::Clarifai.Api.CancelInputsAddJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiUploadResponse> PostUploads(global::Clarifai.Api.PostUploadsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleUploadResponse> PutUploadContentParts(global::Clarifai.Api.PutUploadContentPartsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleUploadResponse> GetUpload(global::Clarifai.Api.GetUploadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiUploadResponse> ListUploads(global::Clarifai.Api.ListUploadsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteUploads(global::Clarifai.Api.DeleteUploadsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for V2</summary>
    public partial class V2Client : grpc::ClientBase<V2Client>
    {
      /// <summary>Creates a new client for V2</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public V2Client(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for V2 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public V2Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected V2Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected V2Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Common echo example.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.TestMessage Echo(global::Clarifai.Api.TestMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Echo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Common echo example.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.TestMessage Echo(global::Clarifai.Api.TestMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Echo, null, options, request);
      }
      /// <summary>
      /// Common echo example.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.TestMessage> EchoAsync(global::Clarifai.Api.TestMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EchoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Common echo example.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.TestMessage> EchoAsync(global::Clarifai.Api.TestMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Echo, null, options, request);
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// MUST be above ListConcepts so that if concept_id is empty this will still match
      /// /concepts/relations to list all the concept relations in the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptRelationResponse ListConceptRelations(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptRelations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// MUST be above ListConcepts so that if concept_id is empty this will still match
      /// /concepts/relations to list all the concept relations in the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptRelationResponse ListConceptRelations(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConceptRelations, null, options, request);
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// MUST be above ListConcepts so that if concept_id is empty this will still match
      /// /concepts/relations to list all the concept relations in the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> ListConceptRelationsAsync(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptRelationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// MUST be above ListConcepts so that if concept_id is empty this will still match
      /// /concepts/relations to list all the concept relations in the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> ListConceptRelationsAsync(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptRelationResponse PostConceptRelations(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptRelations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptRelationResponse PostConceptRelations(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> PostConceptRelationsAsync(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptRelationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> PostConceptRelationsAsync(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteConceptRelations(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConceptRelations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteConceptRelations(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteConceptRelationsAsync(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConceptRelationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteConceptRelationsAsync(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConceptRelations, null, options, request);
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptCountResponse GetConceptCounts(global::Clarifai.Api.GetConceptCountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptCounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptCountResponse GetConceptCounts(global::Clarifai.Api.GetConceptCountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConceptCounts, null, options, request);
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptCountResponse> GetConceptCountsAsync(global::Clarifai.Api.GetConceptCountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptCountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptCountResponse> GetConceptCountsAsync(global::Clarifai.Api.GetConceptCountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConceptCounts, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleConceptResponse GetConcept(global::Clarifai.Api.GetConceptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConcept(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleConceptResponse GetConcept(global::Clarifai.Api.GetConceptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConcept, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptResponse> GetConceptAsync(global::Clarifai.Api.GetConceptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptResponse> GetConceptAsync(global::Clarifai.Api.GetConceptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConcept, null, options, request);
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse ListConcepts(global::Clarifai.Api.ListConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse ListConcepts(global::Clarifai.Api.ListConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConcepts, null, options, request);
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListConceptsAsync(global::Clarifai.Api.ListConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListConceptsAsync(global::Clarifai.Api.ListConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConcepts, null, options, request);
      }
      /// <summary>
      /// List models concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse ListModelConcepts(global::Clarifai.Api.ListModelConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List models concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse ListModelConcepts(global::Clarifai.Api.ListModelConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelConcepts, null, options, request);
      }
      /// <summary>
      /// List models concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListModelConceptsAsync(global::Clarifai.Api.ListModelConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List models concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListModelConceptsAsync(global::Clarifai.Api.ListModelConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelConcepts, null, options, request);
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PostConceptsSearches(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PostConceptsSearches(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptsSearches, null, options, request);
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsSearchesAsync(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsSearchesAsync(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptsSearches, null, options, request);
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PostConcepts(global::Clarifai.Api.PostConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PostConcepts(global::Clarifai.Api.PostConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConcepts, null, options, request);
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsAsync(global::Clarifai.Api.PostConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsAsync(global::Clarifai.Api.PostConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConcepts, null, options, request);
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PatchConcepts(global::Clarifai.Api.PatchConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PatchConcepts(global::Clarifai.Api.PatchConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchConcepts, null, options, request);
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PatchConceptsAsync(global::Clarifai.Api.PatchConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PatchConceptsAsync(global::Clarifai.Api.PatchConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchConcepts, null, options, request);
      }
      /// <summary>
      /// Get a specific vocab from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleVocabResponse GetVocab(global::Clarifai.Api.GetVocabRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVocab(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific vocab from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleVocabResponse GetVocab(global::Clarifai.Api.GetVocabRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVocab, null, options, request);
      }
      /// <summary>
      /// Get a specific vocab from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleVocabResponse> GetVocabAsync(global::Clarifai.Api.GetVocabRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVocabAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific vocab from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleVocabResponse> GetVocabAsync(global::Clarifai.Api.GetVocabRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVocab, null, options, request);
      }
      /// <summary>
      /// List all the vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiVocabResponse ListVocabs(global::Clarifai.Api.ListVocabsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVocabs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiVocabResponse ListVocabs(global::Clarifai.Api.ListVocabsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVocabs, null, options, request);
      }
      /// <summary>
      /// List all the vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiVocabResponse> ListVocabsAsync(global::Clarifai.Api.ListVocabsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVocabsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiVocabResponse> ListVocabsAsync(global::Clarifai.Api.ListVocabsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVocabs, null, options, request);
      }
      /// <summary>
      /// Add a vocab to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiVocabResponse PostVocabs(global::Clarifai.Api.PostVocabsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostVocabs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a vocab to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiVocabResponse PostVocabs(global::Clarifai.Api.PostVocabsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostVocabs, null, options, request);
      }
      /// <summary>
      /// Add a vocab to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiVocabResponse> PostVocabsAsync(global::Clarifai.Api.PostVocabsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostVocabsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a vocab to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiVocabResponse> PostVocabsAsync(global::Clarifai.Api.PostVocabsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostVocabs, null, options, request);
      }
      /// <summary>
      /// Patch one or more vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiVocabResponse PatchVocabs(global::Clarifai.Api.PatchVocabsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchVocabs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiVocabResponse PatchVocabs(global::Clarifai.Api.PatchVocabsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchVocabs, null, options, request);
      }
      /// <summary>
      /// Patch one or more vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiVocabResponse> PatchVocabsAsync(global::Clarifai.Api.PatchVocabsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchVocabsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiVocabResponse> PatchVocabsAsync(global::Clarifai.Api.PatchVocabsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchVocabs, null, options, request);
      }
      /// <summary>
      /// Delete a single vocab.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteVocab(global::Clarifai.Api.DeleteVocabRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVocab(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single vocab.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteVocab(global::Clarifai.Api.DeleteVocabRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVocab, null, options, request);
      }
      /// <summary>
      /// Delete a single vocab.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteVocabAsync(global::Clarifai.Api.DeleteVocabRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVocabAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single vocab.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteVocabAsync(global::Clarifai.Api.DeleteVocabRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVocab, null, options, request);
      }
      /// <summary>
      /// Delete multiple vocabs in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteVocabs(global::Clarifai.Api.DeleteVocabsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVocabs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple vocabs in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteVocabs(global::Clarifai.Api.DeleteVocabsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVocabs, null, options, request);
      }
      /// <summary>
      /// Delete multiple vocabs in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteVocabsAsync(global::Clarifai.Api.DeleteVocabsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVocabsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple vocabs in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteVocabsAsync(global::Clarifai.Api.DeleteVocabsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVocabs, null, options, request);
      }
      /// <summary>
      /// List all the vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse ListVocabConcepts(global::Clarifai.Api.ListVocabConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVocabConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse ListVocabConcepts(global::Clarifai.Api.ListVocabConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVocabConcepts, null, options, request);
      }
      /// <summary>
      /// List all the vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListVocabConceptsAsync(global::Clarifai.Api.ListVocabConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVocabConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the vocabs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListVocabConceptsAsync(global::Clarifai.Api.ListVocabConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVocabConcepts, null, options, request);
      }
      /// <summary>
      /// Add a vocab to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PostVocabConcepts(global::Clarifai.Api.PostVocabConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostVocabConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a vocab to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PostVocabConcepts(global::Clarifai.Api.PostVocabConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostVocabConcepts, null, options, request);
      }
      /// <summary>
      /// Add a vocab to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostVocabConceptsAsync(global::Clarifai.Api.PostVocabConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostVocabConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a vocab to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostVocabConceptsAsync(global::Clarifai.Api.PostVocabConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostVocabConcepts, null, options, request);
      }
      /// <summary>
      /// Delete a single concept from a vocab.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteVocabConcept(global::Clarifai.Api.DeleteVocabConceptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVocabConcept(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single concept from a vocab.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteVocabConcept(global::Clarifai.Api.DeleteVocabConceptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVocabConcept, null, options, request);
      }
      /// <summary>
      /// Delete a single concept from a vocab.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteVocabConceptAsync(global::Clarifai.Api.DeleteVocabConceptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVocabConceptAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single concept from a vocab.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteVocabConceptAsync(global::Clarifai.Api.DeleteVocabConceptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVocabConcept, null, options, request);
      }
      /// <summary>
      /// Delete multiple concepts from a vocab in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteVocabConcepts(global::Clarifai.Api.DeleteVocabConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVocabConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple concepts from a vocab in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteVocabConcepts(global::Clarifai.Api.DeleteVocabConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVocabConcepts, null, options, request);
      }
      /// <summary>
      /// Delete multiple concepts from a vocab in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteVocabConceptsAsync(global::Clarifai.Api.DeleteVocabConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVocabConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple concepts from a vocab in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteVocabConceptsAsync(global::Clarifai.Api.DeleteVocabConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVocabConcepts, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleConceptLanguageResponse GetConceptLanguage(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptLanguage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleConceptLanguageResponse GetConceptLanguage(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConceptLanguage, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptLanguageResponse> GetConceptLanguageAsync(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptLanguageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptLanguageResponse> GetConceptLanguageAsync(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConceptLanguage, null, options, request);
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse ListConceptLanguages(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse ListConceptLanguages(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConceptLanguages, null, options, request);
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> ListConceptLanguagesAsync(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> ListConceptLanguagesAsync(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Add a new translation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PostConceptLanguages(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new translation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PostConceptLanguages(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Add a new translation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PostConceptLanguagesAsync(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new translation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PostConceptLanguagesAsync(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PatchConceptLanguages(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConceptLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PatchConceptLanguages(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PatchConceptLanguagesAsync(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConceptLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PatchConceptLanguagesAsync(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchConceptLanguages, null, options, request);
      }
      /// <summary>
      /// List the concept in all the outside sources where we found these concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptReferenceResponse ListConceptReferences(global::Clarifai.Api.ListConceptReferencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptReferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the concept in all the outside sources where we found these concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptReferenceResponse ListConceptReferences(global::Clarifai.Api.ListConceptReferencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConceptReferences, null, options, request);
      }
      /// <summary>
      /// List the concept in all the outside sources where we found these concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptReferenceResponse> ListConceptReferencesAsync(global::Clarifai.Api.ListConceptReferencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptReferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the concept in all the outside sources where we found these concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptReferenceResponse> ListConceptReferencesAsync(global::Clarifai.Api.ListConceptReferencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConceptReferences, null, options, request);
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse ListKnowledgeGraphs(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKnowledgeGraphs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse ListKnowledgeGraphs(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> ListKnowledgeGraphsAsync(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKnowledgeGraphsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> ListKnowledgeGraphsAsync(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse PostKnowledgeGraphs(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKnowledgeGraphs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse PostKnowledgeGraphs(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> PostKnowledgeGraphsAsync(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKnowledgeGraphsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> PostKnowledgeGraphsAsync(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptMappingJobResponse PostConceptMappingJobs(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptMappingJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptMappingJobResponse PostConceptMappingJobs(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptMappingJobs, null, options, request);
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptMappingJobResponse> PostConceptMappingJobsAsync(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptMappingJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptMappingJobResponse> PostConceptMappingJobsAsync(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptMappingJobs, null, options, request);
      }
      /// <summary>
      /// List all concept mappings for a given concept id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptMappingResponse ListConceptMappings(global::Clarifai.Api.ListConceptMappingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptMappings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all concept mappings for a given concept id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptMappingResponse ListConceptMappings(global::Clarifai.Api.ListConceptMappingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConceptMappings, null, options, request);
      }
      /// <summary>
      /// List all concept mappings for a given concept id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptMappingResponse> ListConceptMappingsAsync(global::Clarifai.Api.ListConceptMappingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptMappingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all concept mappings for a given concept id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptMappingResponse> ListConceptMappingsAsync(global::Clarifai.Api.ListConceptMappingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConceptMappings, null, options, request);
      }
      /// <summary>
      /// Post concept mappings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptMappingResponse PostConceptMappings(global::Clarifai.Api.PostConceptMappingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptMappings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept mappings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptMappingResponse PostConceptMappings(global::Clarifai.Api.PostConceptMappingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptMappings, null, options, request);
      }
      /// <summary>
      /// Post concept mappings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptMappingResponse> PostConceptMappingsAsync(global::Clarifai.Api.PostConceptMappingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptMappingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept mappings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptMappingResponse> PostConceptMappingsAsync(global::Clarifai.Api.PostConceptMappingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptMappings, null, options, request);
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAnnotationResponse GetAnnotation(global::Clarifai.Api.GetAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAnnotationResponse GetAnnotation(global::Clarifai.Api.GetAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnnotation, null, options, request);
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAnnotationResponse> GetAnnotationAsync(global::Clarifai.Api.GetAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAnnotationResponse> GetAnnotationAsync(global::Clarifai.Api.GetAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnnotation, null, options, request);
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse ListAnnotations(global::Clarifai.Api.ListAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse ListAnnotations(global::Clarifai.Api.ListAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotations, null, options, request);
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotationsAsync(global::Clarifai.Api.ListAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotationsAsync(global::Clarifai.Api.ListAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotations, null, options, request);
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse PostAnnotations(global::Clarifai.Api.PostAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse PostAnnotations(global::Clarifai.Api.PostAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotations, null, options, request);
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PostAnnotationsAsync(global::Clarifai.Api.PostAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PostAnnotationsAsync(global::Clarifai.Api.PostAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotations, null, options, request);
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse PatchAnnotations(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse PatchAnnotations(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnnotations, null, options, request);
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PatchAnnotationsAsync(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PatchAnnotationsAsync(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnnotations, null, options, request);
      }
      /// <summary>
      /// Patch annotations status by worker id and task id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PatchAnnotationsStatusResponse PatchAnnotationsStatus(global::Clarifai.Api.PatchAnnotationsStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch annotations status by worker id and task id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PatchAnnotationsStatusResponse PatchAnnotationsStatus(global::Clarifai.Api.PatchAnnotationsStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnnotationsStatus, null, options, request);
      }
      /// <summary>
      /// Patch annotations status by worker id and task id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PatchAnnotationsStatusResponse> PatchAnnotationsStatusAsync(global::Clarifai.Api.PatchAnnotationsStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch annotations status by worker id and task id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PatchAnnotationsStatusResponse> PatchAnnotationsStatusAsync(global::Clarifai.Api.PatchAnnotationsStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnnotationsStatus, null, options, request);
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotation(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotation(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotation, null, options, request);
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationAsync(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationAsync(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotation, null, options, request);
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotations(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotations(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotations, null, options, request);
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationsAsync(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationsAsync(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotations, null, options, request);
      }
      /// <summary>
      /// Patch saved annotations searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PatchAnnotationsSearches(global::Clarifai.Api.PatchAnnotationsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved annotations searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PatchAnnotationsSearches(global::Clarifai.Api.PatchAnnotationsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnnotationsSearches, null, options, request);
      }
      /// <summary>
      /// Patch saved annotations searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchAnnotationsSearchesAsync(global::Clarifai.Api.PatchAnnotationsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved annotations searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchAnnotationsSearchesAsync(global::Clarifai.Api.PatchAnnotationsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnnotationsSearches, null, options, request);
      }
      /// <summary>
      /// Execute a search over annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostAnnotationsSearches(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostAnnotationsSearches(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotationsSearches, null, options, request);
      }
      /// <summary>
      /// Execute a search over annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostAnnotationsSearchesAsync(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostAnnotationsSearchesAsync(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotationsSearches, null, options, request);
      }
      /// <summary>
      /// Get input count per status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputCountResponse GetInputCount(global::Clarifai.Api.GetInputCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get input count per status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputCountResponse GetInputCount(global::Clarifai.Api.GetInputCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInputCount, null, options, request);
      }
      /// <summary>
      /// Get input count per status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputCountResponse> GetInputCountAsync(global::Clarifai.Api.GetInputCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get input count per status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputCountResponse> GetInputCountAsync(global::Clarifai.Api.GetInputCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInputCount, null, options, request);
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse StreamInputs(global::Clarifai.Api.StreamInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse StreamInputs(global::Clarifai.Api.StreamInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StreamInputs, null, options, request);
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> StreamInputsAsync(global::Clarifai.Api.StreamInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> StreamInputsAsync(global::Clarifai.Api.StreamInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StreamInputs, null, options, request);
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputAnnotationResponse GetInputSamples(global::Clarifai.Api.GetInputSamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputSamples(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputAnnotationResponse GetInputSamples(global::Clarifai.Api.GetInputSamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInputSamples, null, options, request);
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputAnnotationResponse> GetInputSamplesAsync(global::Clarifai.Api.GetInputSamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputSamplesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputAnnotationResponse> GetInputSamplesAsync(global::Clarifai.Api.GetInputSamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInputSamples, null, options, request);
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputResponse GetInput(global::Clarifai.Api.GetInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInput(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputResponse GetInput(global::Clarifai.Api.GetInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInput, null, options, request);
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputResponse> GetInputAsync(global::Clarifai.Api.GetInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputResponse> GetInputAsync(global::Clarifai.Api.GetInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInput, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse ListInputs(global::Clarifai.Api.ListInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse ListInputs(global::Clarifai.Api.ListInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInputs, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListInputsAsync(global::Clarifai.Api.ListInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListInputsAsync(global::Clarifai.Api.ListInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInputs, null, options, request);
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app.
      /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      /// it is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PostInputs(global::Clarifai.Api.PostInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app.
      /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      /// it is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PostInputs(global::Clarifai.Api.PostInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputs, null, options, request);
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app.
      /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      /// it is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsAsync(global::Clarifai.Api.PostInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app.
      /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      /// it is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsAsync(global::Clarifai.Api.PostInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputs, null, options, request);
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app via a file.
      /// This is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PostInputsFile(global::Clarifai.Api.PostInputsFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app via a file.
      /// This is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PostInputsFile(global::Clarifai.Api.PostInputsFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputsFile, null, options, request);
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app via a file.
      /// This is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsFileAsync(global::Clarifai.Api.PostInputsFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app via a file.
      /// This is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsFileAsync(global::Clarifai.Api.PostInputsFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputsFile, null, options, request);
      }
      /// <summary>
      /// Add an input or set of inputs to an app designed for NiFi integration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PostInputsNiFi(global::Clarifai.Api.PostInputsNiFiRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsNiFi(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an input or set of inputs to an app designed for NiFi integration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PostInputsNiFi(global::Clarifai.Api.PostInputsNiFiRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputsNiFi, null, options, request);
      }
      /// <summary>
      /// Add an input or set of inputs to an app designed for NiFi integration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsNiFiAsync(global::Clarifai.Api.PostInputsNiFiRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsNiFiAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an input or set of inputs to an app designed for NiFi integration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsNiFiAsync(global::Clarifai.Api.PostInputsNiFiRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputsNiFi, null, options, request);
      }
      /// <summary>
      /// Add an input or set of inputs to an app designed for Document integration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PostInputsDocument(global::Clarifai.Api.PostInputsDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsDocument(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an input or set of inputs to an app designed for Document integration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PostInputsDocument(global::Clarifai.Api.PostInputsDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputsDocument, null, options, request);
      }
      /// <summary>
      /// Add an input or set of inputs to an app designed for Document integration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsDocumentAsync(global::Clarifai.Api.PostInputsDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsDocumentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an input or set of inputs to an app designed for Document integration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsDocumentAsync(global::Clarifai.Api.PostInputsDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputsDocument, null, options, request);
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PatchInputs(global::Clarifai.Api.PatchInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PatchInputs(global::Clarifai.Api.PatchInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchInputs, null, options, request);
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PatchInputsAsync(global::Clarifai.Api.PatchInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PatchInputsAsync(global::Clarifai.Api.PatchInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchInputs, null, options, request);
      }
      /// <summary>
      /// Delete a single input asynchronously.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInput(global::Clarifai.Api.DeleteInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInput(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single input asynchronously.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInput(global::Clarifai.Api.DeleteInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInput, null, options, request);
      }
      /// <summary>
      /// Delete a single input asynchronously.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputAsync(global::Clarifai.Api.DeleteInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInputAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single input asynchronously.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputAsync(global::Clarifai.Api.DeleteInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInput, null, options, request);
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInputs(global::Clarifai.Api.DeleteInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInputs(global::Clarifai.Api.DeleteInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInputs, null, options, request);
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputsAsync(global::Clarifai.Api.DeleteInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputsAsync(global::Clarifai.Api.DeleteInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInputs, null, options, request);
      }
      /// <summary>
      /// Patch saved inputs searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PatchInputsSearches(global::Clarifai.Api.PatchInputsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchInputsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved inputs searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PatchInputsSearches(global::Clarifai.Api.PatchInputsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchInputsSearches, null, options, request);
      }
      /// <summary>
      /// Patch saved inputs searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchInputsSearchesAsync(global::Clarifai.Api.PatchInputsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchInputsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved inputs searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchInputsSearchesAsync(global::Clarifai.Api.PatchInputsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchInputsSearches, null, options, request);
      }
      /// <summary>
      /// Execute a search over inputs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostInputsSearches(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over inputs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostInputsSearches(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputsSearches, null, options, request);
      }
      /// <summary>
      /// Execute a search over inputs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostInputsSearchesAsync(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over inputs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostInputsSearchesAsync(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputsSearches, null, options, request);
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOutputResponse PostModelOutputs(global::Clarifai.Api.PostModelOutputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelOutputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOutputResponse PostModelOutputs(global::Clarifai.Api.PostModelOutputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelOutputs, null, options, request);
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOutputResponse> PostModelOutputsAsync(global::Clarifai.Api.PostModelOutputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelOutputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOutputResponse> PostModelOutputsAsync(global::Clarifai.Api.PostModelOutputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelOutputs, null, options, request);
      }
      /// <summary>
      /// List all the datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetResponse ListDatasets(global::Clarifai.Api.ListDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetResponse ListDatasets(global::Clarifai.Api.ListDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatasets, null, options, request);
      }
      /// <summary>
      /// List all the datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> ListDatasetsAsync(global::Clarifai.Api.ListDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> ListDatasetsAsync(global::Clarifai.Api.ListDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatasets, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleDatasetResponse GetDataset(global::Clarifai.Api.GetDatasetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleDatasetResponse GetDataset(global::Clarifai.Api.GetDatasetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataset, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetResponse> GetDatasetAsync(global::Clarifai.Api.GetDatasetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetResponse> GetDatasetAsync(global::Clarifai.Api.GetDatasetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataset, null, options, request);
      }
      /// <summary>
      /// Add datasets to an app.
      /// The process is atomic, i.e. either all or no datasets are added.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetResponse PostDatasets(global::Clarifai.Api.PostDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add datasets to an app.
      /// The process is atomic, i.e. either all or no datasets are added.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetResponse PostDatasets(global::Clarifai.Api.PostDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostDatasets, null, options, request);
      }
      /// <summary>
      /// Add datasets to an app.
      /// The process is atomic, i.e. either all or no datasets are added.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> PostDatasetsAsync(global::Clarifai.Api.PostDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add datasets to an app.
      /// The process is atomic, i.e. either all or no datasets are added.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> PostDatasetsAsync(global::Clarifai.Api.PostDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostDatasets, null, options, request);
      }
      /// <summary>
      /// Patch one or more datasets.
      /// The process is atomic, i.e. either all or no datasets are patched.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetResponse PatchDatasets(global::Clarifai.Api.PatchDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchDatasets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more datasets.
      /// The process is atomic, i.e. either all or no datasets are patched.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetResponse PatchDatasets(global::Clarifai.Api.PatchDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchDatasets, null, options, request);
      }
      /// <summary>
      /// Patch one or more datasets.
      /// The process is atomic, i.e. either all or no datasets are patched.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> PatchDatasetsAsync(global::Clarifai.Api.PatchDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchDatasetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more datasets.
      /// The process is atomic, i.e. either all or no datasets are patched.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> PatchDatasetsAsync(global::Clarifai.Api.PatchDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchDatasets, null, options, request);
      }
      /// <summary>
      /// Patch one or more dataset ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetResponse PatchDatasetIds(global::Clarifai.Api.PatchDatasetIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchDatasetIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more dataset ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetResponse PatchDatasetIds(global::Clarifai.Api.PatchDatasetIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchDatasetIds, null, options, request);
      }
      /// <summary>
      /// Patch one or more dataset ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> PatchDatasetIdsAsync(global::Clarifai.Api.PatchDatasetIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchDatasetIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more dataset ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> PatchDatasetIdsAsync(global::Clarifai.Api.PatchDatasetIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchDatasetIds, null, options, request);
      }
      /// <summary>
      /// Delete one or more datasets in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasets(global::Clarifai.Api.DeleteDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more datasets in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasets(global::Clarifai.Api.DeleteDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDatasets, null, options, request);
      }
      /// <summary>
      /// Delete one or more datasets in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetsAsync(global::Clarifai.Api.DeleteDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more datasets in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetsAsync(global::Clarifai.Api.DeleteDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDatasets, null, options, request);
      }
      /// <summary>
      /// List all the dataset inputs in a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetInputResponse ListDatasetInputs(global::Clarifai.Api.ListDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the dataset inputs in a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetInputResponse ListDatasetInputs(global::Clarifai.Api.ListDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatasetInputs, null, options, request);
      }
      /// <summary>
      /// List all the dataset inputs in a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetInputResponse> ListDatasetInputsAsync(global::Clarifai.Api.ListDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the dataset inputs in a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetInputResponse> ListDatasetInputsAsync(global::Clarifai.Api.ListDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatasetInputs, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset input.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleDatasetInputResponse GetDatasetInput(global::Clarifai.Api.GetDatasetInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetInput(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset input.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleDatasetInputResponse GetDatasetInput(global::Clarifai.Api.GetDatasetInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatasetInput, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset input.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetInputResponse> GetDatasetInputAsync(global::Clarifai.Api.GetDatasetInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetInputAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset input.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetInputResponse> GetDatasetInputAsync(global::Clarifai.Api.GetDatasetInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatasetInput, null, options, request);
      }
      /// <summary>
      /// Add dataset inputs to a dataset.
      /// The process is not atomic, i.e. if there are errors with some dataset
      /// inputs, others might still be added. The response reports
      ///   - SUCCESS if all dataset inputs were added,
      ///   - MIXED_STATUS if only some dataset inputs were added, and
      ///   - FAILURE if no dataset inputs were added.
      /// Each individual dataset input in the response has the status set to
      /// indicate if it was successful or if there was an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetInputResponse PostDatasetInputs(global::Clarifai.Api.PostDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasetInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add dataset inputs to a dataset.
      /// The process is not atomic, i.e. if there are errors with some dataset
      /// inputs, others might still be added. The response reports
      ///   - SUCCESS if all dataset inputs were added,
      ///   - MIXED_STATUS if only some dataset inputs were added, and
      ///   - FAILURE if no dataset inputs were added.
      /// Each individual dataset input in the response has the status set to
      /// indicate if it was successful or if there was an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetInputResponse PostDatasetInputs(global::Clarifai.Api.PostDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostDatasetInputs, null, options, request);
      }
      /// <summary>
      /// Add dataset inputs to a dataset.
      /// The process is not atomic, i.e. if there are errors with some dataset
      /// inputs, others might still be added. The response reports
      ///   - SUCCESS if all dataset inputs were added,
      ///   - MIXED_STATUS if only some dataset inputs were added, and
      ///   - FAILURE if no dataset inputs were added.
      /// Each individual dataset input in the response has the status set to
      /// indicate if it was successful or if there was an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetInputResponse> PostDatasetInputsAsync(global::Clarifai.Api.PostDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasetInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add dataset inputs to a dataset.
      /// The process is not atomic, i.e. if there are errors with some dataset
      /// inputs, others might still be added. The response reports
      ///   - SUCCESS if all dataset inputs were added,
      ///   - MIXED_STATUS if only some dataset inputs were added, and
      ///   - FAILURE if no dataset inputs were added.
      /// Each individual dataset input in the response has the status set to
      /// indicate if it was successful or if there was an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetInputResponse> PostDatasetInputsAsync(global::Clarifai.Api.PostDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostDatasetInputs, null, options, request);
      }
      /// <summary>
      /// Delete one or more dataset inputs in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasetInputs(global::Clarifai.Api.DeleteDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasetInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more dataset inputs in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasetInputs(global::Clarifai.Api.DeleteDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDatasetInputs, null, options, request);
      }
      /// <summary>
      /// Delete one or more dataset inputs in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetInputsAsync(global::Clarifai.Api.DeleteDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasetInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more dataset inputs in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetInputsAsync(global::Clarifai.Api.DeleteDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDatasetInputs, null, options, request);
      }
      /// <summary>
      /// List all the dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse ListDatasetVersions(global::Clarifai.Api.ListDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse ListDatasetVersions(global::Clarifai.Api.ListDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatasetVersions, null, options, request);
      }
      /// <summary>
      /// List all the dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> ListDatasetVersionsAsync(global::Clarifai.Api.ListDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> ListDatasetVersionsAsync(global::Clarifai.Api.ListDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleDatasetVersionResponse GetDatasetVersion(global::Clarifai.Api.GetDatasetVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleDatasetVersionResponse GetDatasetVersion(global::Clarifai.Api.GetDatasetVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatasetVersion, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetVersionResponse> GetDatasetVersionAsync(global::Clarifai.Api.GetDatasetVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetVersionResponse> GetDatasetVersionAsync(global::Clarifai.Api.GetDatasetVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatasetVersion, null, options, request);
      }
      public virtual global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse ListDatasetVersionMetricsGroups(global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetVersionMetricsGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse ListDatasetVersionMetricsGroups(global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatasetVersionMetricsGroups, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse> ListDatasetVersionMetricsGroupsAsync(global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetVersionMetricsGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse> ListDatasetVersionMetricsGroupsAsync(global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatasetVersionMetricsGroups, null, options, request);
      }
      /// <summary>
      /// Add dataset versions to a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse PostDatasetVersions(global::Clarifai.Api.PostDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasetVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add dataset versions to a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse PostDatasetVersions(global::Clarifai.Api.PostDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Add dataset versions to a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> PostDatasetVersionsAsync(global::Clarifai.Api.PostDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasetVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add dataset versions to a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> PostDatasetVersionsAsync(global::Clarifai.Api.PostDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Patch one or more dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse PatchDatasetVersions(global::Clarifai.Api.PatchDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchDatasetVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse PatchDatasetVersions(global::Clarifai.Api.PatchDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Patch one or more dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> PatchDatasetVersionsAsync(global::Clarifai.Api.PatchDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchDatasetVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> PatchDatasetVersionsAsync(global::Clarifai.Api.PatchDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Delete one or more dataset versions in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasetVersions(global::Clarifai.Api.DeleteDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasetVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more dataset versions in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasetVersions(global::Clarifai.Api.DeleteDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Delete one or more dataset versions in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetVersionsAsync(global::Clarifai.Api.DeleteDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasetVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more dataset versions in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetVersionsAsync(global::Clarifai.Api.DeleteDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Create export of a dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetVersionExportResponse PutDatasetVersionExports(global::Clarifai.Api.PutDatasetVersionExportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutDatasetVersionExports(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create export of a dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiDatasetVersionExportResponse PutDatasetVersionExports(global::Clarifai.Api.PutDatasetVersionExportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutDatasetVersionExports, null, options, request);
      }
      /// <summary>
      /// Create export of a dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionExportResponse> PutDatasetVersionExportsAsync(global::Clarifai.Api.PutDatasetVersionExportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutDatasetVersionExportsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create export of a dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionExportResponse> PutDatasetVersionExportsAsync(global::Clarifai.Api.PutDatasetVersionExportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutDatasetVersionExports, null, options, request);
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelTypeResponse GetModelType(global::Clarifai.Api.GetModelTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelTypeResponse GetModelType(global::Clarifai.Api.GetModelTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelType, null, options, request);
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelTypeResponse> GetModelTypeAsync(global::Clarifai.Api.GetModelTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelTypeResponse> GetModelTypeAsync(global::Clarifai.Api.GetModelTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelType, null, options, request);
      }
      /// <summary>
      /// List all the supported open source licenses in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListOpenSourceLicensesResponse ListOpenSourceLicenses(global::Clarifai.Api.ListOpenSourceLicensesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOpenSourceLicenses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the supported open source licenses in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListOpenSourceLicensesResponse ListOpenSourceLicenses(global::Clarifai.Api.ListOpenSourceLicensesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOpenSourceLicenses, null, options, request);
      }
      /// <summary>
      /// List all the supported open source licenses in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListOpenSourceLicensesResponse> ListOpenSourceLicensesAsync(global::Clarifai.Api.ListOpenSourceLicensesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOpenSourceLicensesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the supported open source licenses in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListOpenSourceLicensesResponse> ListOpenSourceLicensesAsync(global::Clarifai.Api.ListOpenSourceLicensesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOpenSourceLicenses, null, options, request);
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// This MUST be above ListModels so that the /models/types endpoint takes precedence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelTypeResponse ListModelTypes(global::Clarifai.Api.ListModelTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelTypes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// This MUST be above ListModels so that the /models/types endpoint takes precedence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelTypeResponse ListModelTypes(global::Clarifai.Api.ListModelTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelTypes, null, options, request);
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// This MUST be above ListModels so that the /models/types endpoint takes precedence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelTypeResponse> ListModelTypesAsync(global::Clarifai.Api.ListModelTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelTypesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// This MUST be above ListModels so that the /models/types endpoint takes precedence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelTypeResponse> ListModelTypesAsync(global::Clarifai.Api.ListModelTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelTypes, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse GetModel(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse GetModel(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModel, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelAsync(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelAsync(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModel, null, options, request);
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse GetModelOutputInfo(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelOutputInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse GetModelOutputInfo(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelOutputInfo, null, options, request);
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelOutputInfoAsync(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelOutputInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelOutputInfoAsync(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelOutputInfo, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse ListModels(global::Clarifai.Api.ListModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse ListModels(global::Clarifai.Api.ListModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModels, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> ListModelsAsync(global::Clarifai.Api.ListModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> ListModelsAsync(global::Clarifai.Api.ListModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModels, null, options, request);
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse PostModelsSearches(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse PostModelsSearches(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelsSearches, null, options, request);
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PostModelsSearchesAsync(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PostModelsSearchesAsync(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelsSearches, null, options, request);
      }
      /// <summary>
      /// Add a models to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse PostModels(global::Clarifai.Api.PostModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a models to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse PostModels(global::Clarifai.Api.PostModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModels, null, options, request);
      }
      /// <summary>
      /// Add a models to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelsAsync(global::Clarifai.Api.PostModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a models to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelsAsync(global::Clarifai.Api.PostModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModels, null, options, request);
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse PatchModels(global::Clarifai.Api.PatchModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse PatchModels(global::Clarifai.Api.PatchModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModels, null, options, request);
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PatchModelsAsync(global::Clarifai.Api.PatchModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PatchModelsAsync(global::Clarifai.Api.PatchModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModels, null, options, request);
      }
      /// <summary>
      /// Patch one or more models ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse PatchModelIds(global::Clarifai.Api.PatchModelIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more models ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse PatchModelIds(global::Clarifai.Api.PatchModelIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelIds, null, options, request);
      }
      /// <summary>
      /// Patch one or more models ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PatchModelIdsAsync(global::Clarifai.Api.PatchModelIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more models ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PatchModelIdsAsync(global::Clarifai.Api.PatchModelIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelIds, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModel(global::Clarifai.Api.DeleteModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModel(global::Clarifai.Api.DeleteModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModel, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelAsync(global::Clarifai.Api.DeleteModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelAsync(global::Clarifai.Api.DeleteModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModel, null, options, request);
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModels(global::Clarifai.Api.DeleteModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModels(global::Clarifai.Api.DeleteModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModels, null, options, request);
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelsAsync(global::Clarifai.Api.DeleteModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelsAsync(global::Clarifai.Api.DeleteModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModels, null, options, request);
      }
      /// <summary>
      /// Update model check consents
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelCheckConsentResponse PatchModelCheckConsents(global::Clarifai.Api.PatchModelCheckConsentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelCheckConsents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model check consents
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelCheckConsentResponse PatchModelCheckConsents(global::Clarifai.Api.PatchModelCheckConsentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelCheckConsents, null, options, request);
      }
      /// <summary>
      /// Update model check consents
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelCheckConsentResponse> PatchModelCheckConsentsAsync(global::Clarifai.Api.PatchModelCheckConsentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelCheckConsentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model check consents
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelCheckConsentResponse> PatchModelCheckConsentsAsync(global::Clarifai.Api.PatchModelCheckConsentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelCheckConsents, null, options, request);
      }
      /// <summary>
      /// Update model toolkits tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelToolkitResponse PatchModelToolkits(global::Clarifai.Api.PatchModelToolkitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelToolkits(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model toolkits tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelToolkitResponse PatchModelToolkits(global::Clarifai.Api.PatchModelToolkitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelToolkits, null, options, request);
      }
      /// <summary>
      /// Update model toolkits tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelToolkitResponse> PatchModelToolkitsAsync(global::Clarifai.Api.PatchModelToolkitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelToolkitsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model toolkits tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelToolkitResponse> PatchModelToolkitsAsync(global::Clarifai.Api.PatchModelToolkitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelToolkits, null, options, request);
      }
      /// <summary>
      /// Update model use_cases tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelUseCaseResponse PatchModelUseCases(global::Clarifai.Api.PatchModelUseCasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelUseCases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model use_cases tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelUseCaseResponse PatchModelUseCases(global::Clarifai.Api.PatchModelUseCasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelUseCases, null, options, request);
      }
      /// <summary>
      /// Update model use_cases tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelUseCaseResponse> PatchModelUseCasesAsync(global::Clarifai.Api.PatchModelUseCasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelUseCasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model use_cases tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelUseCaseResponse> PatchModelUseCasesAsync(global::Clarifai.Api.PatchModelUseCasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelUseCases, null, options, request);
      }
      /// <summary>
      /// Update model languages tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelLanguageResponse PatchModelLanguages(global::Clarifai.Api.PatchModelLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model languages tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelLanguageResponse PatchModelLanguages(global::Clarifai.Api.PatchModelLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelLanguages, null, options, request);
      }
      /// <summary>
      /// Update model languages tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelLanguageResponse> PatchModelLanguagesAsync(global::Clarifai.Api.PatchModelLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model languages tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelLanguageResponse> PatchModelLanguagesAsync(global::Clarifai.Api.PatchModelLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelLanguages, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse ListModelInputs(global::Clarifai.Api.ListModelInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse ListModelInputs(global::Clarifai.Api.ListModelInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelInputs, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListModelInputsAsync(global::Clarifai.Api.ListModelInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListModelInputsAsync(global::Clarifai.Api.ListModelInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelInputs, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersion(global::Clarifai.Api.GetModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersion(global::Clarifai.Api.GetModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelVersion, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionAsync(global::Clarifai.Api.GetModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionAsync(global::Clarifai.Api.GetModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelVersion, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelVersionResponse ListModelVersions(global::Clarifai.Api.ListModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelVersionResponse ListModelVersions(global::Clarifai.Api.ListModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelVersions, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionResponse> ListModelVersionsAsync(global::Clarifai.Api.ListModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionResponse> ListModelVersionsAsync(global::Clarifai.Api.ListModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelVersions, null, options, request);
      }
      public virtual global::Clarifai.Api.Status.BaseResponse PostWorkflowVersionsUnPublish(global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowVersionsUnPublish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.Status.BaseResponse PostWorkflowVersionsUnPublish(global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowVersionsUnPublish, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsUnPublishAsync(global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowVersionsUnPublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsUnPublishAsync(global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowVersionsUnPublish, null, options, request);
      }
      public virtual global::Clarifai.Api.Status.BaseResponse PostWorkflowVersionsPublish(global::Clarifai.Api.PostWorkflowVersionsPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowVersionsPublish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.Status.BaseResponse PostWorkflowVersionsPublish(global::Clarifai.Api.PostWorkflowVersionsPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowVersionsPublish, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsPublishAsync(global::Clarifai.Api.PostWorkflowVersionsPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowVersionsPublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsPublishAsync(global::Clarifai.Api.PostWorkflowVersionsPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowVersionsPublish, null, options, request);
      }
      /// <summary>
      /// PostModelVersionsPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostModelVersionsPublish(global::Clarifai.Api.PostModelVersionsPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsPublish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostModelVersionsPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostModelVersionsPublish(global::Clarifai.Api.PostModelVersionsPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersionsPublish, null, options, request);
      }
      /// <summary>
      /// PostModelVersionsPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsPublishAsync(global::Clarifai.Api.PostModelVersionsPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsPublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostModelVersionsPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsPublishAsync(global::Clarifai.Api.PostModelVersionsPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersionsPublish, null, options, request);
      }
      /// <summary>
      /// PostModelVersionsUnPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostModelVersionsUnPublish(global::Clarifai.Api.PostModelVersionsUnPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsUnPublish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostModelVersionsUnPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostModelVersionsUnPublish(global::Clarifai.Api.PostModelVersionsUnPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersionsUnPublish, null, options, request);
      }
      /// <summary>
      /// PostModelVersionsUnPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsUnPublishAsync(global::Clarifai.Api.PostModelVersionsUnPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsUnPublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostModelVersionsUnPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsUnPublishAsync(global::Clarifai.Api.PostModelVersionsUnPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersionsUnPublish, null, options, request);
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse PostModelVersions(global::Clarifai.Api.PostModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse PostModelVersions(global::Clarifai.Api.PostModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersions, null, options, request);
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelVersionsAsync(global::Clarifai.Api.PostModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelVersionsAsync(global::Clarifai.Api.PostModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersions, null, options, request);
      }
      /// <summary>
      /// PatchModelVersions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelVersionResponse PatchModelVersions(global::Clarifai.Api.PatchModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PatchModelVersions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelVersionResponse PatchModelVersions(global::Clarifai.Api.PatchModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelVersions, null, options, request);
      }
      /// <summary>
      /// PatchModelVersions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionResponse> PatchModelVersionsAsync(global::Clarifai.Api.PatchModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PatchModelVersions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionResponse> PatchModelVersionsAsync(global::Clarifai.Api.PatchModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelVersions, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModelVersion(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModelVersion(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModelVersion, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersionAsync(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersionAsync(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModelVersion, null, options, request);
      }
      /// <summary>
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersionMetrics(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersionMetrics(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionMetricsAsync(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionMetricsAsync(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse PostModelVersionMetrics(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse PostModelVersionMetrics(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> PostModelVersionMetricsAsync(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> PostModelVersionMetricsAsync(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Lists model references tied to a particular model id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelReferenceResponse ListModelReferences(global::Clarifai.Api.ListModelReferencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelReferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists model references tied to a particular model id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelReferenceResponse ListModelReferences(global::Clarifai.Api.ListModelReferencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelReferences, null, options, request);
      }
      /// <summary>
      /// Lists model references tied to a particular model id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelReferenceResponse> ListModelReferencesAsync(global::Clarifai.Api.ListModelReferencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelReferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists model references tied to a particular model id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelReferenceResponse> ListModelReferencesAsync(global::Clarifai.Api.ListModelReferencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelReferences, null, options, request);
      }
      /// <summary>
      /// Add new reference(s) to a particular model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelReferenceResponse PostModelReferences(global::Clarifai.Api.PostModelReferencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelReferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add new reference(s) to a particular model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelReferenceResponse PostModelReferences(global::Clarifai.Api.PostModelReferencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelReferences, null, options, request);
      }
      /// <summary>
      /// Add new reference(s) to a particular model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelReferenceResponse> PostModelReferencesAsync(global::Clarifai.Api.PostModelReferencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelReferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add new reference(s) to a particular model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelReferenceResponse> PostModelReferencesAsync(global::Clarifai.Api.PostModelReferencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelReferences, null, options, request);
      }
      /// <summary>
      /// Delete model references tied to a model id by reference id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModelReferences(global::Clarifai.Api.DeleteModelReferencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelReferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete model references tied to a model id by reference id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModelReferences(global::Clarifai.Api.DeleteModelReferencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModelReferences, null, options, request);
      }
      /// <summary>
      /// Delete model references tied to a model id by reference id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelReferencesAsync(global::Clarifai.Api.DeleteModelReferencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelReferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete model references tied to a model id by reference id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelReferencesAsync(global::Clarifai.Api.DeleteModelReferencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModelReferences, null, options, request);
      }
      /// <summary>
      /// GetModelVersionInputExample
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionInputExampleResponse GetModelVersionInputExample(global::Clarifai.Api.GetModelVersionInputExampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionInputExample(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetModelVersionInputExample
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionInputExampleResponse GetModelVersionInputExample(global::Clarifai.Api.GetModelVersionInputExampleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelVersionInputExample, null, options, request);
      }
      /// <summary>
      /// GetModelVersionInputExample
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionInputExampleResponse> GetModelVersionInputExampleAsync(global::Clarifai.Api.GetModelVersionInputExampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionInputExampleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetModelVersionInputExample
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionInputExampleResponse> GetModelVersionInputExampleAsync(global::Clarifai.Api.GetModelVersionInputExampleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelVersionInputExample, null, options, request);
      }
      /// <summary>
      /// ListModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelVersionInputExampleResponse ListModelVersionInputExamples(global::Clarifai.Api.ListModelVersionInputExamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersionInputExamples(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelVersionInputExampleResponse ListModelVersionInputExamples(global::Clarifai.Api.ListModelVersionInputExamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelVersionInputExamples, null, options, request);
      }
      /// <summary>
      /// ListModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionInputExampleResponse> ListModelVersionInputExamplesAsync(global::Clarifai.Api.ListModelVersionInputExamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersionInputExamplesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionInputExampleResponse> ListModelVersionInputExamplesAsync(global::Clarifai.Api.ListModelVersionInputExamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelVersionInputExamples, null, options, request);
      }
      /// <summary>
      /// PostModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelVersionInputExampleResponse PostModelVersionInputExamples(global::Clarifai.Api.PostModelVersionInputExamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionInputExamples(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelVersionInputExampleResponse PostModelVersionInputExamples(global::Clarifai.Api.PostModelVersionInputExamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersionInputExamples, null, options, request);
      }
      /// <summary>
      /// PostModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionInputExampleResponse> PostModelVersionInputExamplesAsync(global::Clarifai.Api.PostModelVersionInputExamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionInputExamplesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionInputExampleResponse> PostModelVersionInputExamplesAsync(global::Clarifai.Api.PostModelVersionInputExamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersionInputExamples, null, options, request);
      }
      /// <summary>
      /// DeleteModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModelVersionInputExamples(global::Clarifai.Api.DeleteModelVersionInputExamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelVersionInputExamples(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModelVersionInputExamples(global::Clarifai.Api.DeleteModelVersionInputExamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModelVersionInputExamples, null, options, request);
      }
      /// <summary>
      /// DeleteModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersionInputExamplesAsync(global::Clarifai.Api.DeleteModelVersionInputExamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelVersionInputExamplesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersionInputExamplesAsync(global::Clarifai.Api.DeleteModelVersionInputExamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModelVersionInputExamples, null, options, request);
      }
      /// <summary>
      /// Star a model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelStarResponse PostModelStars(global::Clarifai.Api.PostModelStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelStars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Star a model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelStarResponse PostModelStars(global::Clarifai.Api.PostModelStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelStars, null, options, request);
      }
      /// <summary>
      /// Star a model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelStarResponse> PostModelStarsAsync(global::Clarifai.Api.PostModelStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelStarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Star a model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelStarResponse> PostModelStarsAsync(global::Clarifai.Api.PostModelStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelStars, null, options, request);
      }
      /// <summary>
      ///Un-star a model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.DeleteModelStarsResponse DeleteModelStars(global::Clarifai.Api.DeleteModelStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelStars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Un-star a model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.DeleteModelStarsResponse DeleteModelStars(global::Clarifai.Api.DeleteModelStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModelStars, null, options, request);
      }
      /// <summary>
      ///Un-star a model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.DeleteModelStarsResponse> DeleteModelStarsAsync(global::Clarifai.Api.DeleteModelStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelStarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Un-star a model
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.DeleteModelStarsResponse> DeleteModelStarsAsync(global::Clarifai.Api.DeleteModelStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModelStars, null, options, request);
      }
      /// <summary>
      /// Star a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiUserStarResponse PostUserStars(global::Clarifai.Api.PostUserStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUserStars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Star a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiUserStarResponse PostUserStars(global::Clarifai.Api.PostUserStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostUserStars, null, options, request);
      }
      /// <summary>
      /// Star a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUserStarResponse> PostUserStarsAsync(global::Clarifai.Api.PostUserStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUserStarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Star a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUserStarResponse> PostUserStarsAsync(global::Clarifai.Api.PostUserStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostUserStars, null, options, request);
      }
      /// <summary>
      /// Un-star a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.DeleteUserStarsResponse DeleteUserStars(global::Clarifai.Api.DeleteUserStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUserStars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Un-star a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.DeleteUserStarsResponse DeleteUserStars(global::Clarifai.Api.DeleteUserStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteUserStars, null, options, request);
      }
      /// <summary>
      /// Un-star a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.DeleteUserStarsResponse> DeleteUserStarsAsync(global::Clarifai.Api.DeleteUserStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUserStarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Un-star a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.DeleteUserStarsResponse> DeleteUserStarsAsync(global::Clarifai.Api.DeleteUserStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteUserStars, null, options, request);
      }
      /// <summary>
      /// Star a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowStarResponse PostWorkflowStars(global::Clarifai.Api.PostWorkflowStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowStars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Star a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowStarResponse PostWorkflowStars(global::Clarifai.Api.PostWorkflowStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowStars, null, options, request);
      }
      /// <summary>
      /// Star a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowStarResponse> PostWorkflowStarsAsync(global::Clarifai.Api.PostWorkflowStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowStarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Star a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowStarResponse> PostWorkflowStarsAsync(global::Clarifai.Api.PostWorkflowStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowStars, null, options, request);
      }
      /// <summary>
      /// Un-star a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.DeleteWorkflowStarsResponse DeleteWorkflowStars(global::Clarifai.Api.DeleteWorkflowStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowStars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Un-star a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.DeleteWorkflowStarsResponse DeleteWorkflowStars(global::Clarifai.Api.DeleteWorkflowStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflowStars, null, options, request);
      }
      /// <summary>
      /// Un-star a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.DeleteWorkflowStarsResponse> DeleteWorkflowStarsAsync(global::Clarifai.Api.DeleteWorkflowStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowStarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Un-star a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.DeleteWorkflowStarsResponse> DeleteWorkflowStarsAsync(global::Clarifai.Api.DeleteWorkflowStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflowStars, null, options, request);
      }
      /// <summary>
      /// Star an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppStarResponse PostAppStars(global::Clarifai.Api.PostAppStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppStars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Star an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppStarResponse PostAppStars(global::Clarifai.Api.PostAppStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAppStars, null, options, request);
      }
      /// <summary>
      /// Star an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppStarResponse> PostAppStarsAsync(global::Clarifai.Api.PostAppStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppStarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Star an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppStarResponse> PostAppStarsAsync(global::Clarifai.Api.PostAppStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAppStars, null, options, request);
      }
      /// <summary>
      /// Un-star an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.DeleteAppStarsResponse DeleteAppStars(global::Clarifai.Api.DeleteAppStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAppStars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Un-star an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.DeleteAppStarsResponse DeleteAppStars(global::Clarifai.Api.DeleteAppStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAppStars, null, options, request);
      }
      /// <summary>
      /// Un-star an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.DeleteAppStarsResponse> DeleteAppStarsAsync(global::Clarifai.Api.DeleteAppStarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAppStarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Un-star an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.DeleteAppStarsResponse> DeleteAppStarsAsync(global::Clarifai.Api.DeleteAppStarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAppStars, null, options, request);
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWorkflowResponse GetWorkflow(global::Clarifai.Api.GetWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWorkflowResponse GetWorkflow(global::Clarifai.Api.GetWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflow, null, options, request);
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowResponse> GetWorkflowAsync(global::Clarifai.Api.GetWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowResponse> GetWorkflowAsync(global::Clarifai.Api.GetWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflow, null, options, request);
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse ListWorkflows(global::Clarifai.Api.ListWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse ListWorkflows(global::Clarifai.Api.ListWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkflows, null, options, request);
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> ListWorkflowsAsync(global::Clarifai.Api.ListWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> ListWorkflowsAsync(global::Clarifai.Api.ListWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkflows, null, options, request);
      }
      /// <summary>
      /// List all public workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse ListPublicWorkflows(global::Clarifai.Api.ListPublicWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPublicWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all public workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse ListPublicWorkflows(global::Clarifai.Api.ListPublicWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPublicWorkflows, null, options, request);
      }
      /// <summary>
      /// List all public workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> ListPublicWorkflowsAsync(global::Clarifai.Api.ListPublicWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPublicWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all public workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> ListPublicWorkflowsAsync(global::Clarifai.Api.ListPublicWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPublicWorkflows, null, options, request);
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse PostWorkflows(global::Clarifai.Api.PostWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse PostWorkflows(global::Clarifai.Api.PostWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflows, null, options, request);
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PostWorkflowsAsync(global::Clarifai.Api.PostWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PostWorkflowsAsync(global::Clarifai.Api.PostWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflows, null, options, request);
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse PatchWorkflows(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse PatchWorkflows(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchWorkflows, null, options, request);
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowsAsync(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowsAsync(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchWorkflows, null, options, request);
      }
      /// <summary>
      /// Patch one or more workflows ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse PatchWorkflowIds(global::Clarifai.Api.PatchWorkflowIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more workflows ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse PatchWorkflowIds(global::Clarifai.Api.PatchWorkflowIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchWorkflowIds, null, options, request);
      }
      /// <summary>
      /// Patch one or more workflows ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowIdsAsync(global::Clarifai.Api.PatchWorkflowIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more workflows ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowIdsAsync(global::Clarifai.Api.PatchWorkflowIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchWorkflowIds, null, options, request);
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflow(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflow(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflow, null, options, request);
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowAsync(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowAsync(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflow, null, options, request);
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflows(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflows(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflows, null, options, request);
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowsAsync(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowsAsync(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflows, null, options, request);
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostWorkflowResultsResponse PostWorkflowResults(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResults(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostWorkflowResultsResponse PostWorkflowResults(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowResults, null, options, request);
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsResponse> PostWorkflowResultsAsync(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResultsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsResponse> PostWorkflowResultsAsync(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowResults, null, options, request);
      }
      /// <summary>
      /// Compare embeddings distances using a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostWorkflowResultsSimilarityResponse PostWorkflowResultsSimilarity(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResultsSimilarity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Compare embeddings distances using a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostWorkflowResultsSimilarityResponse PostWorkflowResultsSimilarity(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowResultsSimilarity, null, options, request);
      }
      /// <summary>
      /// Compare embeddings distances using a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> PostWorkflowResultsSimilarityAsync(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResultsSimilarityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Compare embeddings distances using a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> PostWorkflowResultsSimilarityAsync(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowResultsSimilarity, null, options, request);
      }
      /// <summary>
      /// List workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowVersionResponse ListWorkflowVersions(global::Clarifai.Api.ListWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowVersionResponse ListWorkflowVersions(global::Clarifai.Api.ListWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// List workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowVersionResponse> ListWorkflowVersionsAsync(global::Clarifai.Api.ListWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowVersionResponse> ListWorkflowVersionsAsync(global::Clarifai.Api.ListWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// Get single workflow version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWorkflowVersionResponse GetWorkflowVersion(global::Clarifai.Api.GetWorkflowVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single workflow version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWorkflowVersionResponse GetWorkflowVersion(global::Clarifai.Api.GetWorkflowVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowVersion, null, options, request);
      }
      /// <summary>
      /// Get single workflow version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowVersionResponse> GetWorkflowVersionAsync(global::Clarifai.Api.GetWorkflowVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single workflow version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowVersionResponse> GetWorkflowVersionAsync(global::Clarifai.Api.GetWorkflowVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowVersion, null, options, request);
      }
      /// <summary>
      /// Delete workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflowVersions(global::Clarifai.Api.DeleteWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflowVersions(global::Clarifai.Api.DeleteWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// Delete workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowVersionsAsync(global::Clarifai.Api.DeleteWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowVersionsAsync(global::Clarifai.Api.DeleteWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// Patch workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowVersionResponse PatchWorkflowVersions(global::Clarifai.Api.PatchWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowVersionResponse PatchWorkflowVersions(global::Clarifai.Api.PatchWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// Patch workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowVersionResponse> PatchWorkflowVersionsAsync(global::Clarifai.Api.PatchWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowVersionResponse> PatchWorkflowVersionsAsync(global::Clarifai.Api.PatchWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// Evaluate all the nodes in the workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowMetricsResponse PostWorkflowMetrics(global::Clarifai.Api.PostWorkflowMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Evaluate all the nodes in the workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowMetricsResponse PostWorkflowMetrics(global::Clarifai.Api.PostWorkflowMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowMetrics, null, options, request);
      }
      /// <summary>
      /// Evaluate all the nodes in the workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowMetricsResponse> PostWorkflowMetricsAsync(global::Clarifai.Api.PostWorkflowMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Evaluate all the nodes in the workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowMetricsResponse> PostWorkflowMetricsAsync(global::Clarifai.Api.PostWorkflowMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowMetrics, null, options, request);
      }
      /// <summary>
      /// Get workflow evaluation data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWorkflowMetricsResponse GetWorkflowMetrics(global::Clarifai.Api.GetWorkflowMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get workflow evaluation data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWorkflowMetricsResponse GetWorkflowMetrics(global::Clarifai.Api.GetWorkflowMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowMetrics, null, options, request);
      }
      /// <summary>
      /// Get workflow evaluation data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowMetricsResponse> GetWorkflowMetricsAsync(global::Clarifai.Api.GetWorkflowMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get workflow evaluation data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowMetricsResponse> GetWorkflowMetricsAsync(global::Clarifai.Api.GetWorkflowMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowMetrics, null, options, request);
      }
      /// <summary>
      /// GetWorkflowNodeMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWorkflowNodeMetricsResponse GetWorkflowNodeMetrics(global::Clarifai.Api.GetWorkflowNodeMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowNodeMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWorkflowNodeMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWorkflowNodeMetricsResponse GetWorkflowNodeMetrics(global::Clarifai.Api.GetWorkflowNodeMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowNodeMetrics, null, options, request);
      }
      /// <summary>
      /// GetWorkflowNodeMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowNodeMetricsResponse> GetWorkflowNodeMetricsAsync(global::Clarifai.Api.GetWorkflowNodeMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowNodeMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWorkflowNodeMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowNodeMetricsResponse> GetWorkflowNodeMetricsAsync(global::Clarifai.Api.GetWorkflowNodeMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowNodeMetrics, null, options, request);
      }
      /// <summary>
      /// ListWorkflowMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowMetricsResponse ListWorkflowMetrics(global::Clarifai.Api.ListWorkflowMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListWorkflowMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowMetricsResponse ListWorkflowMetrics(global::Clarifai.Api.ListWorkflowMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkflowMetrics, null, options, request);
      }
      /// <summary>
      /// ListWorkflowMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowMetricsResponse> ListWorkflowMetricsAsync(global::Clarifai.Api.ListWorkflowMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListWorkflowMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowMetricsResponse> ListWorkflowMetricsAsync(global::Clarifai.Api.ListWorkflowMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkflowMetrics, null, options, request);
      }
      /// <summary>
      /// Delete one or more workflow metrics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflowMetrics(global::Clarifai.Api.DeleteWorkflowMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more workflow metrics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflowMetrics(global::Clarifai.Api.DeleteWorkflowMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflowMetrics, null, options, request);
      }
      /// <summary>
      /// Delete one or more workflow metrics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowMetricsAsync(global::Clarifai.Api.DeleteWorkflowMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more workflow metrics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowMetricsAsync(global::Clarifai.Api.DeleteWorkflowMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflowMetrics, null, options, request);
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleKeyResponse GetKey(global::Clarifai.Api.GetKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleKeyResponse GetKey(global::Clarifai.Api.GetKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetKey, null, options, request);
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleKeyResponse> GetKeyAsync(global::Clarifai.Api.GetKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleKeyResponse> GetKeyAsync(global::Clarifai.Api.GetKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetKey, null, options, request);
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse ListKeys(global::Clarifai.Api.ListKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse ListKeys(global::Clarifai.Api.ListKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListKeys, null, options, request);
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListKeysAsync(global::Clarifai.Api.ListKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListKeysAsync(global::Clarifai.Api.ListKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListKeys, null, options, request);
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse ListAppKeys(global::Clarifai.Api.ListAppKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse ListAppKeys(global::Clarifai.Api.ListAppKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAppKeys, null, options, request);
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListAppKeysAsync(global::Clarifai.Api.ListAppKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListAppKeysAsync(global::Clarifai.Api.ListAppKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAppKeys, null, options, request);
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteKey(global::Clarifai.Api.DeleteKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteKey(global::Clarifai.Api.DeleteKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteKey, null, options, request);
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteKeyAsync(global::Clarifai.Api.DeleteKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteKeyAsync(global::Clarifai.Api.DeleteKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteKey, null, options, request);
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse PostKeys(global::Clarifai.Api.PostKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse PostKeys(global::Clarifai.Api.PostKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostKeys, null, options, request);
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PostKeysAsync(global::Clarifai.Api.PostKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PostKeysAsync(global::Clarifai.Api.PostKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostKeys, null, options, request);
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse PatchKeys(global::Clarifai.Api.PatchKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse PatchKeys(global::Clarifai.Api.PatchKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchKeys, null, options, request);
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PatchKeysAsync(global::Clarifai.Api.PatchKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PatchKeysAsync(global::Clarifai.Api.PatchKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchKeys, null, options, request);
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiScopeResponse MyScopes(global::Clarifai.Api.MyScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiScopeResponse MyScopes(global::Clarifai.Api.MyScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MyScopes, null, options, request);
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeResponse> MyScopesAsync(global::Clarifai.Api.MyScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeResponse> MyScopesAsync(global::Clarifai.Api.MyScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MyScopes, null, options, request);
      }
      public virtual global::Clarifai.Api.MultiScopeUserResponse MyScopesUser(global::Clarifai.Api.MyScopesUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.MultiScopeUserResponse MyScopesUser(global::Clarifai.Api.MyScopesUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MyScopesUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeUserResponse> MyScopesUserAsync(global::Clarifai.Api.MyScopesUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeUserResponse> MyScopesUserAsync(global::Clarifai.Api.MyScopesUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MyScopesUser, null, options, request);
      }
      public virtual global::Clarifai.Api.MultiScopeRootResponse MyScopesRoot(global::Clarifai.Api.MyScopesRootRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesRoot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.MultiScopeRootResponse MyScopesRoot(global::Clarifai.Api.MyScopesRootRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MyScopesRoot, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeRootResponse> MyScopesRootAsync(global::Clarifai.Api.MyScopesRootRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesRootAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeRootResponse> MyScopesRootAsync(global::Clarifai.Api.MyScopesRootRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MyScopesRoot, null, options, request);
      }
      /// <summary>
      /// List all auth scopes available to me as a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiScopeDepsResponse ListScopes(global::Clarifai.Api.ListScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScopes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all auth scopes available to me as a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiScopeDepsResponse ListScopes(global::Clarifai.Api.ListScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListScopes, null, options, request);
      }
      /// <summary>
      /// List all auth scopes available to me as a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeDepsResponse> ListScopesAsync(global::Clarifai.Api.ListScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScopesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all auth scopes available to me as a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeDepsResponse> ListScopesAsync(global::Clarifai.Api.ListScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListScopes, null, options, request);
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAppResponse GetApp(global::Clarifai.Api.GetAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAppResponse GetApp(global::Clarifai.Api.GetAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApp, null, options, request);
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppResponse> GetAppAsync(global::Clarifai.Api.GetAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppResponse> GetAppAsync(global::Clarifai.Api.GetAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApp, null, options, request);
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse ListApps(global::Clarifai.Api.ListAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse ListApps(global::Clarifai.Api.ListAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListApps, null, options, request);
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> ListAppsAsync(global::Clarifai.Api.ListAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> ListAppsAsync(global::Clarifai.Api.ListAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListApps, null, options, request);
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteApp(global::Clarifai.Api.DeleteAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteApp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteApp(global::Clarifai.Api.DeleteAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteApp, null, options, request);
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAppAsync(global::Clarifai.Api.DeleteAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAppAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAppAsync(global::Clarifai.Api.DeleteAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteApp, null, options, request);
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PostApps(global::Clarifai.Api.PostAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PostApps(global::Clarifai.Api.PostAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostApps, null, options, request);
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsAsync(global::Clarifai.Api.PostAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsAsync(global::Clarifai.Api.PostAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostApps, null, options, request);
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PatchApps(global::Clarifai.Api.PatchAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PatchApps(global::Clarifai.Api.PatchAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchApps, null, options, request);
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PatchAppsAsync(global::Clarifai.Api.PatchAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PatchAppsAsync(global::Clarifai.Api.PatchAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchApps, null, options, request);
      }
      /// <summary>
      /// Patch apps ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PatchAppsIds(global::Clarifai.Api.PatchAppsIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppsIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch apps ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PatchAppsIds(global::Clarifai.Api.PatchAppsIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAppsIds, null, options, request);
      }
      /// <summary>
      /// Patch apps ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PatchAppsIdsAsync(global::Clarifai.Api.PatchAppsIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppsIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch apps ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PatchAppsIdsAsync(global::Clarifai.Api.PatchAppsIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAppsIds, null, options, request);
      }
      /// <summary>
      /// Patch one app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAppResponse PatchApp(global::Clarifai.Api.PatchAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchApp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAppResponse PatchApp(global::Clarifai.Api.PatchAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchApp, null, options, request);
      }
      /// <summary>
      /// Patch one app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppResponse> PatchAppAsync(global::Clarifai.Api.PatchAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppResponse> PatchAppAsync(global::Clarifai.Api.PatchAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchApp, null, options, request);
      }
      /// <summary>
      /// Patch app owner.
      /// The new app owner can only be an org, and the original owner must be a member of that org.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PatchAppOwner(global::Clarifai.Api.PatchAppOwnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppOwner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch app owner.
      /// The new app owner can only be an org, and the original owner must be a member of that org.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PatchAppOwner(global::Clarifai.Api.PatchAppOwnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAppOwner, null, options, request);
      }
      /// <summary>
      /// Patch app owner.
      /// The new app owner can only be an org, and the original owner must be a member of that org.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PatchAppOwnerAsync(global::Clarifai.Api.PatchAppOwnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppOwnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch app owner.
      /// The new app owner can only be an org, and the original owner must be a member of that org.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PatchAppOwnerAsync(global::Clarifai.Api.PatchAppOwnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAppOwner, null, options, request);
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PostAppsSearches(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PostAppsSearches(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAppsSearches, null, options, request);
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsSearchesAsync(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsSearchesAsync(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAppsSearches, null, options, request);
      }
      /// <summary>
      /// Get current user information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleUserResponse GetUser(global::Clarifai.Api.GetUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get current user information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleUserResponse GetUser(global::Clarifai.Api.GetUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUser, null, options, request);
      }
      /// <summary>
      /// Get current user information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserResponse> GetUserAsync(global::Clarifai.Api.GetUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get current user information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserResponse> GetUserAsync(global::Clarifai.Api.GetUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUser, null, options, request);
      }
      /// <summary>
      /// List users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiUserResponse ListUsers(global::Clarifai.Api.ListUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiUserResponse ListUsers(global::Clarifai.Api.ListUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUsers, null, options, request);
      }
      /// <summary>
      /// List users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUserResponse> ListUsersAsync(global::Clarifai.Api.ListUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUsersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUserResponse> ListUsersAsync(global::Clarifai.Api.ListUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUsers, null, options, request);
      }
      /// <summary>
      /// Update gdpr fields of current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleUserResponse PostUserConsent(global::Clarifai.Api.PostUserConsentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUserConsent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update gdpr fields of current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleUserResponse PostUserConsent(global::Clarifai.Api.PostUserConsentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostUserConsent, null, options, request);
      }
      /// <summary>
      /// Update gdpr fields of current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserResponse> PostUserConsentAsync(global::Clarifai.Api.PostUserConsentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUserConsentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update gdpr fields of current user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserResponse> PostUserConsentAsync(global::Clarifai.Api.PostUserConsentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostUserConsent, null, options, request);
      }
      /// <summary>
      /// Patch information of current user or another user in the same organisation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleUserResponse PatchUser(global::Clarifai.Api.PatchUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch information of current user or another user in the same organisation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleUserResponse PatchUser(global::Clarifai.Api.PatchUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchUser, null, options, request);
      }
      /// <summary>
      /// Patch information of current user or another user in the same organisation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserResponse> PatchUserAsync(global::Clarifai.Api.PatchUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch information of current user or another user in the same organisation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserResponse> PatchUserAsync(global::Clarifai.Api.PatchUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchUser, null, options, request);
      }
      /// <summary>
      /// Post user access request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiUserAccessResponse PostUserAccess(global::Clarifai.Api.PostUserAccessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUserAccess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post user access request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiUserAccessResponse PostUserAccess(global::Clarifai.Api.PostUserAccessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostUserAccess, null, options, request);
      }
      /// <summary>
      /// Post user access request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUserAccessResponse> PostUserAccessAsync(global::Clarifai.Api.PostUserAccessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUserAccessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post user access request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUserAccessResponse> PostUserAccessAsync(global::Clarifai.Api.PostUserAccessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostUserAccess, null, options, request);
      }
      /// <summary>
      /// Get user access request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleUserAccessResponse GetUserAccess(global::Clarifai.Api.GetUserAccessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAccess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get user access request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleUserAccessResponse GetUserAccess(global::Clarifai.Api.GetUserAccessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserAccess, null, options, request);
      }
      /// <summary>
      /// Get user access request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserAccessResponse> GetUserAccessAsync(global::Clarifai.Api.GetUserAccessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAccessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get user access request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserAccessResponse> GetUserAccessAsync(global::Clarifai.Api.GetUserAccessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserAccess, null, options, request);
      }
      /// <summary>
      /////////////////////////////////////////
      /// Email
      /////////////////////////////////////////
      /// Add Email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultipleEmailResponse PostEmails(global::Clarifai.Api.PostEmailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostEmails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /////////////////////////////////////////
      /// Email
      /////////////////////////////////////////
      /// Add Email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultipleEmailResponse PostEmails(global::Clarifai.Api.PostEmailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostEmails, null, options, request);
      }
      /// <summary>
      /////////////////////////////////////////
      /// Email
      /////////////////////////////////////////
      /// Add Email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultipleEmailResponse> PostEmailsAsync(global::Clarifai.Api.PostEmailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostEmailsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /////////////////////////////////////////
      /// Email
      /////////////////////////////////////////
      /// Add Email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultipleEmailResponse> PostEmailsAsync(global::Clarifai.Api.PostEmailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostEmails, null, options, request);
      }
      /// <summary>
      /// List emails
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultipleEmailResponse ListEmails(global::Clarifai.Api.ListEmailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEmails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List emails
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultipleEmailResponse ListEmails(global::Clarifai.Api.ListEmailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListEmails, null, options, request);
      }
      /// <summary>
      /// List emails
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultipleEmailResponse> ListEmailsAsync(global::Clarifai.Api.ListEmailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEmailsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List emails
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultipleEmailResponse> ListEmailsAsync(global::Clarifai.Api.ListEmailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListEmails, null, options, request);
      }
      /// <summary>
      /// For sending another verification email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleResendVerifyResponse PostResendVerifyEmail(global::Clarifai.Api.PostResendVerifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostResendVerifyEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// For sending another verification email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleResendVerifyResponse PostResendVerifyEmail(global::Clarifai.Api.PostResendVerifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostResendVerifyEmail, null, options, request);
      }
      /// <summary>
      /// For sending another verification email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleResendVerifyResponse> PostResendVerifyEmailAsync(global::Clarifai.Api.PostResendVerifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostResendVerifyEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// For sending another verification email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleResendVerifyResponse> PostResendVerifyEmailAsync(global::Clarifai.Api.PostResendVerifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostResendVerifyEmail, null, options, request);
      }
      /// <summary>
      /// Deleting an email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteEmail(global::Clarifai.Api.DeleteEmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deleting an email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteEmail(global::Clarifai.Api.DeleteEmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteEmail, null, options, request);
      }
      /// <summary>
      /// Deleting an email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteEmailAsync(global::Clarifai.Api.DeleteEmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deleting an email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteEmailAsync(global::Clarifai.Api.DeleteEmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteEmail, null, options, request);
      }
      /// <summary>
      /// Create primate email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleEmailResponse PostPrimaryEmail(global::Clarifai.Api.PostPrimaryEmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostPrimaryEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create primate email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleEmailResponse PostPrimaryEmail(global::Clarifai.Api.PostPrimaryEmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostPrimaryEmail, null, options, request);
      }
      /// <summary>
      /// Create primate email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleEmailResponse> PostPrimaryEmailAsync(global::Clarifai.Api.PostPrimaryEmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostPrimaryEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create primate email.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleEmailResponse> PostPrimaryEmailAsync(global::Clarifai.Api.PostPrimaryEmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostPrimaryEmail, null, options, request);
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SinglePasswordValidationResponse PostValidatePassword(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostValidatePassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SinglePasswordValidationResponse PostValidatePassword(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostValidatePassword, null, options, request);
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SinglePasswordValidationResponse> PostValidatePasswordAsync(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostValidatePasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SinglePasswordValidationResponse> PostValidatePasswordAsync(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostValidatePassword, null, options, request);
      }
      /// <summary>
      /// Get global policy
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiplePasswordPoliciesResponse ListGlobalPasswordPolicies(global::Clarifai.Api.ListGlobalPasswordPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGlobalPasswordPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get global policy
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiplePasswordPoliciesResponse ListGlobalPasswordPolicies(global::Clarifai.Api.ListGlobalPasswordPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListGlobalPasswordPolicies, null, options, request);
      }
      /// <summary>
      /// Get global policy
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiplePasswordPoliciesResponse> ListGlobalPasswordPoliciesAsync(global::Clarifai.Api.ListGlobalPasswordPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGlobalPasswordPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get global policy
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiplePasswordPoliciesResponse> ListGlobalPasswordPoliciesAsync(global::Clarifai.Api.ListGlobalPasswordPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListGlobalPasswordPolicies, null, options, request);
      }
      /// <summary>
      /// Get a specific set of password policies attached to a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiplePasswordPoliciesResponse ListPasswordPolicies(global::Clarifai.Api.ListPasswordPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPasswordPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific set of password policies attached to a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiplePasswordPoliciesResponse ListPasswordPolicies(global::Clarifai.Api.ListPasswordPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPasswordPolicies, null, options, request);
      }
      /// <summary>
      /// Get a specific set of password policies attached to a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiplePasswordPoliciesResponse> ListPasswordPoliciesAsync(global::Clarifai.Api.ListPasswordPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPasswordPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific set of password policies attached to a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiplePasswordPoliciesResponse> ListPasswordPoliciesAsync(global::Clarifai.Api.ListPasswordPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPasswordPolicies, null, options, request);
      }
      /// <summary>
      /// Create a specific set of password policies attached to a user or an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiplePasswordPoliciesResponse PostPasswordPolicies(global::Clarifai.Api.PostPasswordPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostPasswordPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a specific set of password policies attached to a user or an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiplePasswordPoliciesResponse PostPasswordPolicies(global::Clarifai.Api.PostPasswordPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostPasswordPolicies, null, options, request);
      }
      /// <summary>
      /// Create a specific set of password policies attached to a user or an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiplePasswordPoliciesResponse> PostPasswordPoliciesAsync(global::Clarifai.Api.PostPasswordPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostPasswordPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a specific set of password policies attached to a user or an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiplePasswordPoliciesResponse> PostPasswordPoliciesAsync(global::Clarifai.Api.PostPasswordPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostPasswordPolicies, null, options, request);
      }
      /// <summary>
      /// Update a specific set of password policies attached to a user or an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiplePasswordPoliciesResponse PatchPasswordPolicies(global::Clarifai.Api.PatchPasswordPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchPasswordPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a specific set of password policies attached to a user or an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiplePasswordPoliciesResponse PatchPasswordPolicies(global::Clarifai.Api.PatchPasswordPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchPasswordPolicies, null, options, request);
      }
      /// <summary>
      /// Update a specific set of password policies attached to a user or an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiplePasswordPoliciesResponse> PatchPasswordPoliciesAsync(global::Clarifai.Api.PatchPasswordPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchPasswordPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a specific set of password policies attached to a user or an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiplePasswordPoliciesResponse> PatchPasswordPoliciesAsync(global::Clarifai.Api.PatchPasswordPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchPasswordPolicies, null, options, request);
      }
      /// <summary>
      /// DeletePasswordPolicies
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeletePasswordPolicies(global::Clarifai.Api.DeletePasswordPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePasswordPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeletePasswordPolicies
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeletePasswordPolicies(global::Clarifai.Api.DeletePasswordPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePasswordPolicies, null, options, request);
      }
      /// <summary>
      /// DeletePasswordPolicies
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeletePasswordPoliciesAsync(global::Clarifai.Api.DeletePasswordPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePasswordPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeletePasswordPolicies
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeletePasswordPoliciesAsync(global::Clarifai.Api.DeletePasswordPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePasswordPolicies, null, options, request);
      }
      /// <summary>
      /// Get user feature config
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleUserFeatureConfigResponse GetUserFeatureConfig(global::Clarifai.Api.UserFeatureConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserFeatureConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get user feature config
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleUserFeatureConfigResponse GetUserFeatureConfig(global::Clarifai.Api.UserFeatureConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserFeatureConfig, null, options, request);
      }
      /// <summary>
      /// Get user feature config
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserFeatureConfigResponse> GetUserFeatureConfigAsync(global::Clarifai.Api.UserFeatureConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserFeatureConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get user feature config
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserFeatureConfigResponse> GetUserFeatureConfigAsync(global::Clarifai.Api.UserFeatureConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserFeatureConfig, null, options, request);
      }
      /// <summary>
      /// Add organizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationResponse PostOrganizations(global::Clarifai.Api.PostOrganizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostOrganizations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add organizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationResponse PostOrganizations(global::Clarifai.Api.PostOrganizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostOrganizations, null, options, request);
      }
      /// <summary>
      /// Add organizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationResponse> PostOrganizationsAsync(global::Clarifai.Api.PostOrganizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostOrganizationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add organizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationResponse> PostOrganizationsAsync(global::Clarifai.Api.PostOrganizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostOrganizations, null, options, request);
      }
      /// <summary>
      /// List the provided user's organizations with their roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiUsersOrganizationsResponse ListUsersOrganizations(global::Clarifai.Api.ListUsersOrganizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUsersOrganizations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the provided user's organizations with their roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiUsersOrganizationsResponse ListUsersOrganizations(global::Clarifai.Api.ListUsersOrganizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUsersOrganizations, null, options, request);
      }
      /// <summary>
      /// List the provided user's organizations with their roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUsersOrganizationsResponse> ListUsersOrganizationsAsync(global::Clarifai.Api.ListUsersOrganizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUsersOrganizationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the provided user's organizations with their roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUsersOrganizationsResponse> ListUsersOrganizationsAsync(global::Clarifai.Api.ListUsersOrganizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUsersOrganizations, null, options, request);
      }
      /// <summary>
      /// List multiple organizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationResponse ListOrganizations(global::Clarifai.Api.ListOrganizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List multiple organizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationResponse ListOrganizations(global::Clarifai.Api.ListOrganizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOrganizations, null, options, request);
      }
      /// <summary>
      /// List multiple organizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationResponse> ListOrganizationsAsync(global::Clarifai.Api.ListOrganizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List multiple organizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationResponse> ListOrganizationsAsync(global::Clarifai.Api.ListOrganizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOrganizations, null, options, request);
      }
      /// <summary>
      /// Get single organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleOrganizationResponse GetOrganization(global::Clarifai.Api.GetOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleOrganizationResponse GetOrganization(global::Clarifai.Api.GetOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganization, null, options, request);
      }
      /// <summary>
      /// Get single organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleOrganizationResponse> GetOrganizationAsync(global::Clarifai.Api.GetOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleOrganizationResponse> GetOrganizationAsync(global::Clarifai.Api.GetOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganization, null, options, request);
      }
      /// <summary>
      /// Patch an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleOrganizationResponse PatchOrganization(global::Clarifai.Api.PatchOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleOrganizationResponse PatchOrganization(global::Clarifai.Api.PatchOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchOrganization, null, options, request);
      }
      /// <summary>
      /// Patch an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleOrganizationResponse> PatchOrganizationAsync(global::Clarifai.Api.PatchOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleOrganizationResponse> PatchOrganizationAsync(global::Clarifai.Api.PatchOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchOrganization, null, options, request);
      }
      /// <summary>
      /// Delete an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteOrganization(global::Clarifai.Api.DeleteOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteOrganization(global::Clarifai.Api.DeleteOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOrganization, null, options, request);
      }
      /// <summary>
      /// Delete an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteOrganizationAsync(global::Clarifai.Api.DeleteOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteOrganizationAsync(global::Clarifai.Api.DeleteOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOrganization, null, options, request);
      }
      /// <summary>
      /// List organization members
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationMemberResponse ListOrganizationMembers(global::Clarifai.Api.ListOrganizationMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List organization members
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationMemberResponse ListOrganizationMembers(global::Clarifai.Api.ListOrganizationMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOrganizationMembers, null, options, request);
      }
      /// <summary>
      /// List organization members
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationMemberResponse> ListOrganizationMembersAsync(global::Clarifai.Api.ListOrganizationMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List organization members
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationMemberResponse> ListOrganizationMembersAsync(global::Clarifai.Api.ListOrganizationMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOrganizationMembers, null, options, request);
      }
      /// <summary>
      /// ListOrganizationAppMembers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationMemberResponse ListOrganizationAppMembers(global::Clarifai.Api.ListOrganizationAppMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationAppMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListOrganizationAppMembers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationMemberResponse ListOrganizationAppMembers(global::Clarifai.Api.ListOrganizationAppMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOrganizationAppMembers, null, options, request);
      }
      /// <summary>
      /// ListOrganizationAppMembers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationMemberResponse> ListOrganizationAppMembersAsync(global::Clarifai.Api.ListOrganizationAppMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationAppMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListOrganizationAppMembers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationMemberResponse> ListOrganizationAppMembersAsync(global::Clarifai.Api.ListOrganizationAppMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOrganizationAppMembers, null, options, request);
      }
      /// <summary>
      /// Add new member to organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostOrganizationMember(global::Clarifai.Api.PostOrganizationMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostOrganizationMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add new member to organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostOrganizationMember(global::Clarifai.Api.PostOrganizationMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostOrganizationMember, null, options, request);
      }
      /// <summary>
      /// Add new member to organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostOrganizationMemberAsync(global::Clarifai.Api.PostOrganizationMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostOrganizationMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add new member to organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostOrganizationMemberAsync(global::Clarifai.Api.PostOrganizationMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostOrganizationMember, null, options, request);
      }
      /// <summary>
      /// PatchOrganizationMember
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PatchOrganizationMember(global::Clarifai.Api.PatchOrganizationMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchOrganizationMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PatchOrganizationMember
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PatchOrganizationMember(global::Clarifai.Api.PatchOrganizationMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchOrganizationMember, null, options, request);
      }
      /// <summary>
      /// PatchOrganizationMember
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PatchOrganizationMemberAsync(global::Clarifai.Api.PatchOrganizationMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchOrganizationMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PatchOrganizationMember
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PatchOrganizationMemberAsync(global::Clarifai.Api.PatchOrganizationMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchOrganizationMember, null, options, request);
      }
      /// <summary>
      /// Remove a member from organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteOrganizationMember(global::Clarifai.Api.DeleteOrganizationMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a member from organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteOrganizationMember(global::Clarifai.Api.DeleteOrganizationMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOrganizationMember, null, options, request);
      }
      /// <summary>
      /// Remove a member from organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteOrganizationMemberAsync(global::Clarifai.Api.DeleteOrganizationMemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a member from organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteOrganizationMemberAsync(global::Clarifai.Api.DeleteOrganizationMemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOrganizationMember, null, options, request);
      }
      /// <summary>
      /// Organization invites
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationInvitationResponse PostOrganizationInvitations(global::Clarifai.Api.PostOrganizationInvitationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostOrganizationInvitations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Organization invites
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationInvitationResponse PostOrganizationInvitations(global::Clarifai.Api.PostOrganizationInvitationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostOrganizationInvitations, null, options, request);
      }
      /// <summary>
      /// Organization invites
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationInvitationResponse> PostOrganizationInvitationsAsync(global::Clarifai.Api.PostOrganizationInvitationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostOrganizationInvitationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Organization invites
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationInvitationResponse> PostOrganizationInvitationsAsync(global::Clarifai.Api.PostOrganizationInvitationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostOrganizationInvitations, null, options, request);
      }
      /// <summary>
      /// PatchOrganizationInvitations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationInvitationResponse PatchOrganizationInvitations(global::Clarifai.Api.PatchOrganizationInvitationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchOrganizationInvitations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PatchOrganizationInvitations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationInvitationResponse PatchOrganizationInvitations(global::Clarifai.Api.PatchOrganizationInvitationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchOrganizationInvitations, null, options, request);
      }
      /// <summary>
      /// PatchOrganizationInvitations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationInvitationResponse> PatchOrganizationInvitationsAsync(global::Clarifai.Api.PatchOrganizationInvitationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchOrganizationInvitationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PatchOrganizationInvitations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationInvitationResponse> PatchOrganizationInvitationsAsync(global::Clarifai.Api.PatchOrganizationInvitationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchOrganizationInvitations, null, options, request);
      }
      /// <summary>
      /// ListOrganizationInvitations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationInvitationResponse ListOrganizationInvitations(global::Clarifai.Api.ListOrganizationInvitationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationInvitations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListOrganizationInvitations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOrganizationInvitationResponse ListOrganizationInvitations(global::Clarifai.Api.ListOrganizationInvitationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOrganizationInvitations, null, options, request);
      }
      /// <summary>
      /// ListOrganizationInvitations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationInvitationResponse> ListOrganizationInvitationsAsync(global::Clarifai.Api.ListOrganizationInvitationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationInvitationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListOrganizationInvitations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOrganizationInvitationResponse> ListOrganizationInvitationsAsync(global::Clarifai.Api.ListOrganizationInvitationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOrganizationInvitations, null, options, request);
      }
      /// <summary>
      /// GetOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleOrganizationInvitationResponse GetOrganizationInvitation(global::Clarifai.Api.GetOrganizationInvitationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizationInvitation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleOrganizationInvitationResponse GetOrganizationInvitation(global::Clarifai.Api.GetOrganizationInvitationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganizationInvitation, null, options, request);
      }
      /// <summary>
      /// GetOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleOrganizationInvitationResponse> GetOrganizationInvitationAsync(global::Clarifai.Api.GetOrganizationInvitationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizationInvitationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleOrganizationInvitationResponse> GetOrganizationInvitationAsync(global::Clarifai.Api.GetOrganizationInvitationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganizationInvitation, null, options, request);
      }
      /// <summary>
      /// PostDeclineOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostDeclineOrganizationInvitation(global::Clarifai.Api.PostDeclineOrganizationInvitationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDeclineOrganizationInvitation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostDeclineOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostDeclineOrganizationInvitation(global::Clarifai.Api.PostDeclineOrganizationInvitationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostDeclineOrganizationInvitation, null, options, request);
      }
      /// <summary>
      /// PostDeclineOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostDeclineOrganizationInvitationAsync(global::Clarifai.Api.PostDeclineOrganizationInvitationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDeclineOrganizationInvitationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostDeclineOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostDeclineOrganizationInvitationAsync(global::Clarifai.Api.PostDeclineOrganizationInvitationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostDeclineOrganizationInvitation, null, options, request);
      }
      /// <summary>
      /// PostAcceptOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostAcceptOrganizationInvitation(global::Clarifai.Api.PostAcceptOrganizationInvitationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAcceptOrganizationInvitation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostAcceptOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostAcceptOrganizationInvitation(global::Clarifai.Api.PostAcceptOrganizationInvitationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAcceptOrganizationInvitation, null, options, request);
      }
      /// <summary>
      /// PostAcceptOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostAcceptOrganizationInvitationAsync(global::Clarifai.Api.PostAcceptOrganizationInvitationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAcceptOrganizationInvitationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostAcceptOrganizationInvitation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostAcceptOrganizationInvitationAsync(global::Clarifai.Api.PostAcceptOrganizationInvitationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAcceptOrganizationInvitation, null, options, request);
      }
      /// <summary>
      /// GetOrganizationInvitationPublic
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleOrganizationInvitationResponse GetOrganizationInvitationPublic(global::Clarifai.Api.GetOrganizationInvitationPublicRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizationInvitationPublic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetOrganizationInvitationPublic
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleOrganizationInvitationResponse GetOrganizationInvitationPublic(global::Clarifai.Api.GetOrganizationInvitationPublicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganizationInvitationPublic, null, options, request);
      }
      /// <summary>
      /// GetOrganizationInvitationPublic
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleOrganizationInvitationResponse> GetOrganizationInvitationPublicAsync(global::Clarifai.Api.GetOrganizationInvitationPublicRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizationInvitationPublicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetOrganizationInvitationPublic
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleOrganizationInvitationResponse> GetOrganizationInvitationPublicAsync(global::Clarifai.Api.GetOrganizationInvitationPublicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganizationInvitationPublic, null, options, request);
      }
      /// <summary>
      /// Leave an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteRequestingUserFromOrganization(global::Clarifai.Api.DeleteRequestingUserFromOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRequestingUserFromOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Leave an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteRequestingUserFromOrganization(global::Clarifai.Api.DeleteRequestingUserFromOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRequestingUserFromOrganization, null, options, request);
      }
      /// <summary>
      /// Leave an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteRequestingUserFromOrganizationAsync(global::Clarifai.Api.DeleteRequestingUserFromOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRequestingUserFromOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Leave an organization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteRequestingUserFromOrganizationAsync(global::Clarifai.Api.DeleteRequestingUserFromOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRequestingUserFromOrganization, null, options, request);
      }
      /// <summary>
      /// Add IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiIdentityProviderResponse PostIdentityProviders(global::Clarifai.Api.PostIdentityProvidersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostIdentityProviders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiIdentityProviderResponse PostIdentityProviders(global::Clarifai.Api.PostIdentityProvidersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostIdentityProviders, null, options, request);
      }
      /// <summary>
      /// Add IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiIdentityProviderResponse> PostIdentityProvidersAsync(global::Clarifai.Api.PostIdentityProvidersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostIdentityProvidersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiIdentityProviderResponse> PostIdentityProvidersAsync(global::Clarifai.Api.PostIdentityProvidersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostIdentityProviders, null, options, request);
      }
      /// <summary>
      /// List multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiIdentityProviderResponse ListIdentityProviders(global::Clarifai.Api.ListIdentityProvidersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIdentityProviders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiIdentityProviderResponse ListIdentityProviders(global::Clarifai.Api.ListIdentityProvidersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListIdentityProviders, null, options, request);
      }
      /// <summary>
      /// List multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiIdentityProviderResponse> ListIdentityProvidersAsync(global::Clarifai.Api.ListIdentityProvidersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIdentityProvidersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiIdentityProviderResponse> ListIdentityProvidersAsync(global::Clarifai.Api.ListIdentityProvidersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListIdentityProviders, null, options, request);
      }
      /// <summary>
      /// Get single IdentityProvider
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleIdentityProviderResponse GetIdentityProvider(global::Clarifai.Api.GetIdentityProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIdentityProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single IdentityProvider
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleIdentityProviderResponse GetIdentityProvider(global::Clarifai.Api.GetIdentityProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIdentityProvider, null, options, request);
      }
      /// <summary>
      /// Get single IdentityProvider
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleIdentityProviderResponse> GetIdentityProviderAsync(global::Clarifai.Api.GetIdentityProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIdentityProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single IdentityProvider
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleIdentityProviderResponse> GetIdentityProviderAsync(global::Clarifai.Api.GetIdentityProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIdentityProvider, null, options, request);
      }
      /// <summary>
      /// Patch multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiIdentityProviderResponse PatchIdentityProviders(global::Clarifai.Api.PatchIdentityProvidersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchIdentityProviders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiIdentityProviderResponse PatchIdentityProviders(global::Clarifai.Api.PatchIdentityProvidersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchIdentityProviders, null, options, request);
      }
      /// <summary>
      /// Patch multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiIdentityProviderResponse> PatchIdentityProvidersAsync(global::Clarifai.Api.PatchIdentityProvidersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchIdentityProvidersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiIdentityProviderResponse> PatchIdentityProvidersAsync(global::Clarifai.Api.PatchIdentityProvidersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchIdentityProviders, null, options, request);
      }
      /// <summary>
      /// Delete multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteIdentityProviders(global::Clarifai.Api.DeleteIdentityProvidersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIdentityProviders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteIdentityProviders(global::Clarifai.Api.DeleteIdentityProvidersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteIdentityProviders, null, options, request);
      }
      /// <summary>
      /// Delete multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteIdentityProvidersAsync(global::Clarifai.Api.DeleteIdentityProvidersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIdentityProvidersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple IdentityProviders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteIdentityProvidersAsync(global::Clarifai.Api.DeleteIdentityProvidersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteIdentityProviders, null, options, request);
      }
      /// <summary>
      /// Add teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamResponse PostTeams(global::Clarifai.Api.PostTeamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTeams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamResponse PostTeams(global::Clarifai.Api.PostTeamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostTeams, null, options, request);
      }
      /// <summary>
      /// Add teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamResponse> PostTeamsAsync(global::Clarifai.Api.PostTeamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTeamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamResponse> PostTeamsAsync(global::Clarifai.Api.PostTeamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostTeams, null, options, request);
      }
      /// <summary>
      /// List multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamResponse ListTeams(global::Clarifai.Api.ListTeamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTeams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamResponse ListTeams(global::Clarifai.Api.ListTeamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTeams, null, options, request);
      }
      /// <summary>
      /// List multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamResponse> ListTeamsAsync(global::Clarifai.Api.ListTeamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTeamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamResponse> ListTeamsAsync(global::Clarifai.Api.ListTeamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTeams, null, options, request);
      }
      /// <summary>
      /// Get single team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTeamResponse GetTeam(global::Clarifai.Api.GetTeamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTeam(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTeamResponse GetTeam(global::Clarifai.Api.GetTeamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTeam, null, options, request);
      }
      /// <summary>
      /// Get single team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTeamResponse> GetTeamAsync(global::Clarifai.Api.GetTeamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTeamAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTeamResponse> GetTeamAsync(global::Clarifai.Api.GetTeamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTeam, null, options, request);
      }
      /// <summary>
      /// Patch multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamResponse PatchTeams(global::Clarifai.Api.PatchTeamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchTeams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamResponse PatchTeams(global::Clarifai.Api.PatchTeamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchTeams, null, options, request);
      }
      /// <summary>
      /// Patch multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamResponse> PatchTeamsAsync(global::Clarifai.Api.PatchTeamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchTeamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamResponse> PatchTeamsAsync(global::Clarifai.Api.PatchTeamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchTeams, null, options, request);
      }
      /// <summary>
      /// Delete multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTeams(global::Clarifai.Api.DeleteTeamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTeams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTeams(global::Clarifai.Api.DeleteTeamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTeams, null, options, request);
      }
      /// <summary>
      /// Delete multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTeamsAsync(global::Clarifai.Api.DeleteTeamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTeamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple teams
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTeamsAsync(global::Clarifai.Api.DeleteTeamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTeams, null, options, request);
      }
      /// <summary>
      /// Add users to a team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamUserResponse PostTeamUsers(global::Clarifai.Api.PostTeamUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTeamUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add users to a team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamUserResponse PostTeamUsers(global::Clarifai.Api.PostTeamUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostTeamUsers, null, options, request);
      }
      /// <summary>
      /// Add users to a team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamUserResponse> PostTeamUsersAsync(global::Clarifai.Api.PostTeamUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTeamUsersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add users to a team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamUserResponse> PostTeamUsersAsync(global::Clarifai.Api.PostTeamUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostTeamUsers, null, options, request);
      }
      /// <summary>
      /// List team users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamUserResponse ListTeamUsers(global::Clarifai.Api.ListTeamUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTeamUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List team users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamUserResponse ListTeamUsers(global::Clarifai.Api.ListTeamUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTeamUsers, null, options, request);
      }
      /// <summary>
      /// List team users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamUserResponse> ListTeamUsersAsync(global::Clarifai.Api.ListTeamUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTeamUsersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List team users
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamUserResponse> ListTeamUsersAsync(global::Clarifai.Api.ListTeamUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTeamUsers, null, options, request);
      }
      /// <summary>
      /// Delete users from a team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTeamUsers(global::Clarifai.Api.DeleteTeamUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTeamUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete users from a team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTeamUsers(global::Clarifai.Api.DeleteTeamUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTeamUsers, null, options, request);
      }
      /// <summary>
      /// Delete users from a team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTeamUsersAsync(global::Clarifai.Api.DeleteTeamUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTeamUsersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete users from a team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTeamUsersAsync(global::Clarifai.Api.DeleteTeamUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTeamUsers, null, options, request);
      }
      /// <summary>
      /// Add applications to team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostTeamApps(global::Clarifai.Api.PostTeamAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTeamApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add applications to team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostTeamApps(global::Clarifai.Api.PostTeamAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostTeamApps, null, options, request);
      }
      /// <summary>
      /// Add applications to team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostTeamAppsAsync(global::Clarifai.Api.PostTeamAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTeamAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add applications to team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostTeamAppsAsync(global::Clarifai.Api.PostTeamAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostTeamApps, null, options, request);
      }
      /// <summary>
      /// List team applications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamAppsResponse ListTeamApps(global::Clarifai.Api.ListTeamAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTeamApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List team applications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTeamAppsResponse ListTeamApps(global::Clarifai.Api.ListTeamAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTeamApps, null, options, request);
      }
      /// <summary>
      /// List team applications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamAppsResponse> ListTeamAppsAsync(global::Clarifai.Api.ListTeamAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTeamAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List team applications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTeamAppsResponse> ListTeamAppsAsync(global::Clarifai.Api.ListTeamAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTeamApps, null, options, request);
      }
      /// <summary>
      /// Remove applications from team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTeamApps(global::Clarifai.Api.DeleteTeamAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTeamApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove applications from team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTeamApps(global::Clarifai.Api.DeleteTeamAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTeamApps, null, options, request);
      }
      /// <summary>
      /// Remove applications from team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTeamAppsAsync(global::Clarifai.Api.DeleteTeamAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTeamAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove applications from team
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTeamAppsAsync(global::Clarifai.Api.DeleteTeamAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTeamApps, null, options, request);
      }
      /// <summary>
      /// List multiple roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiRoleResponse ListRoles(global::Clarifai.Api.ListRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List multiple roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiRoleResponse ListRoles(global::Clarifai.Api.ListRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRoles, null, options, request);
      }
      /// <summary>
      /// List multiple roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiRoleResponse> ListRolesAsync(global::Clarifai.Api.ListRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List multiple roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiRoleResponse> ListRolesAsync(global::Clarifai.Api.ListRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRoles, null, options, request);
      }
      /// <summary>
      /// Get single role
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleRoleResponse GetRole(global::Clarifai.Api.GetRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single role
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleRoleResponse GetRole(global::Clarifai.Api.GetRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRole, null, options, request);
      }
      /// <summary>
      /// Get single role
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleRoleResponse> GetRoleAsync(global::Clarifai.Api.GetRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single role
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleRoleResponse> GetRoleAsync(global::Clarifai.Api.GetRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRole, null, options, request);
      }
      /// <summary>
      /// Get a saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleSearchResponse GetSearch(global::Clarifai.Api.GetSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleSearchResponse GetSearch(global::Clarifai.Api.GetSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSearch, null, options, request);
      }
      /// <summary>
      /// Get a saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleSearchResponse> GetSearchAsync(global::Clarifai.Api.GetSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleSearchResponse> GetSearchAsync(global::Clarifai.Api.GetSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSearch, null, options, request);
      }
      /// <summary>
      /// List all saved legacy searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse ListSearches(global::Clarifai.Api.ListSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all saved legacy searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse ListSearches(global::Clarifai.Api.ListSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSearches, null, options, request);
      }
      /// <summary>
      /// List all saved legacy searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> ListSearchesAsync(global::Clarifai.Api.ListSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all saved legacy searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> ListSearchesAsync(global::Clarifai.Api.ListSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSearches, null, options, request);
      }
      /// <summary>
      /// Patch saved legacy searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PatchSearches(global::Clarifai.Api.PatchSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved legacy searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PatchSearches(global::Clarifai.Api.PatchSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchSearches, null, options, request);
      }
      /// <summary>
      /// Patch saved legacy searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchSearchesAsync(global::Clarifai.Api.PatchSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved legacy searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchSearchesAsync(global::Clarifai.Api.PatchSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchSearches, null, options, request);
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      ///
      /// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearches(global::Clarifai.Api.PostSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      ///
      /// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearches(global::Clarifai.Api.PostSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostSearches, null, options, request);
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      ///
      /// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesAsync(global::Clarifai.Api.PostSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      ///
      /// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesAsync(global::Clarifai.Api.PostSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostSearches, null, options, request);
      }
      /// <summary>
      /// Execute a previously saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearchesByID(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearchesByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a previously saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearchesByID(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostSearchesByID, null, options, request);
      }
      /// <summary>
      /// Execute a previously saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesByIDAsync(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearchesByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a previously saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesByIDAsync(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostSearchesByID, null, options, request);
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse PostAnnotationSearchMetrics(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse PostAnnotationSearchMetrics(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> PostAnnotationSearchMetricsAsync(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> PostAnnotationSearchMetricsAsync(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse GetAnnotationSearchMetrics(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse GetAnnotationSearchMetrics(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> GetAnnotationSearchMetricsAsync(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> GetAnnotationSearchMetricsAsync(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse ListAnnotationSearchMetrics(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse ListAnnotationSearchMetrics(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> ListAnnotationSearchMetricsAsync(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> ListAnnotationSearchMetricsAsync(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// DeleteAnnotationSearchMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotationSearchMetrics(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteAnnotationSearchMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotationSearchMetrics(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// DeleteAnnotationSearchMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationSearchMetricsAsync(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteAnnotationSearchMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationSearchMetricsAsync(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteSearch(global::Clarifai.Api.DeleteSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteSearch(global::Clarifai.Api.DeleteSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSearch, null, options, request);
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteSearchAsync(global::Clarifai.Api.DeleteSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteSearchAsync(global::Clarifai.Api.DeleteSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSearch, null, options, request);
      }
      /// <summary>
      /// Execute an attribute search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostAttributeSearch(global::Clarifai.Api.PostAttributeSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAttributeSearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute an attribute search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostAttributeSearch(global::Clarifai.Api.PostAttributeSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAttributeSearch, null, options, request);
      }
      /// <summary>
      /// Execute an attribute search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostAttributeSearchAsync(global::Clarifai.Api.PostAttributeSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAttributeSearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute an attribute search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostAttributeSearchAsync(global::Clarifai.Api.PostAttributeSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAttributeSearch, null, options, request);
      }
      /// <summary>
      /// List all the annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse ListAnnotationFilters(global::Clarifai.Api.ListAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationFilters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse ListAnnotationFilters(global::Clarifai.Api.ListAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// List all the annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> ListAnnotationFiltersAsync(global::Clarifai.Api.ListAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationFiltersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> ListAnnotationFiltersAsync(global::Clarifai.Api.ListAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Get a specific annotation filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAnnotationFilterResponse GetAnnotationFilter(global::Clarifai.Api.GetAnnotationFilterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationFilter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific annotation filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAnnotationFilterResponse GetAnnotationFilter(global::Clarifai.Api.GetAnnotationFilterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnnotationFilter, null, options, request);
      }
      /// <summary>
      /// Get a specific annotation filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAnnotationFilterResponse> GetAnnotationFilterAsync(global::Clarifai.Api.GetAnnotationFilterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationFilterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific annotation filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAnnotationFilterResponse> GetAnnotationFilterAsync(global::Clarifai.Api.GetAnnotationFilterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnnotationFilter, null, options, request);
      }
      /// <summary>
      /// Add annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse PostAnnotationFilters(global::Clarifai.Api.PostAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationFilters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse PostAnnotationFilters(global::Clarifai.Api.PostAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Add annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> PostAnnotationFiltersAsync(global::Clarifai.Api.PostAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationFiltersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> PostAnnotationFiltersAsync(global::Clarifai.Api.PostAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Patch one or more annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse PatchAnnotationFilters(global::Clarifai.Api.PatchAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationFilters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse PatchAnnotationFilters(global::Clarifai.Api.PatchAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Patch one or more annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> PatchAnnotationFiltersAsync(global::Clarifai.Api.PatchAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationFiltersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> PatchAnnotationFiltersAsync(global::Clarifai.Api.PatchAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Delete one or more annotation filters in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotationFilters(global::Clarifai.Api.DeleteAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationFilters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more annotation filters in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotationFilters(global::Clarifai.Api.DeleteAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Delete one or more annotation filters in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationFiltersAsync(global::Clarifai.Api.DeleteAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationFiltersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more annotation filters in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationFiltersAsync(global::Clarifai.Api.DeleteAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Get a list of clusters in an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiClusterResponse ListClusters(global::Clarifai.Api.ListClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListClusters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a list of clusters in an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiClusterResponse ListClusters(global::Clarifai.Api.ListClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListClusters, null, options, request);
      }
      /// <summary>
      /// Get a list of clusters in an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiClusterResponse> ListClustersAsync(global::Clarifai.Api.ListClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListClustersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a list of clusters in an app
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiClusterResponse> ListClustersAsync(global::Clarifai.Api.ListClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListClusters, null, options, request);
      }
      /// <summary>
      /// List all the annotations for a given cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse ListAnnotationsForCluster(global::Clarifai.Api.ListAnnotationsForClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationsForCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotations for a given cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse ListAnnotationsForCluster(global::Clarifai.Api.ListAnnotationsForClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotationsForCluster, null, options, request);
      }
      /// <summary>
      /// List all the annotations for a given cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotationsForClusterAsync(global::Clarifai.Api.ListAnnotationsForClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationsForClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotations for a given cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotationsForClusterAsync(global::Clarifai.Api.ListAnnotationsForClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotationsForCluster, null, options, request);
      }
      /// <summary>
      /// List all the annotations for a given cluser.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiClusterResponse PostClustersSearches(global::Clarifai.Api.PostClustersSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostClustersSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotations for a given cluser.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiClusterResponse PostClustersSearches(global::Clarifai.Api.PostClustersSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostClustersSearches, null, options, request);
      }
      /// <summary>
      /// List all the annotations for a given cluser.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiClusterResponse> PostClustersSearchesAsync(global::Clarifai.Api.PostClustersSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostClustersSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotations for a given cluser.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiClusterResponse> PostClustersSearchesAsync(global::Clarifai.Api.PostClustersSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostClustersSearches, null, options, request);
      }
      /// <summary>
      /// Verify email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleVerifyEmailResponse PostVerifyEmail(global::Clarifai.Api.PostVerifyEmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostVerifyEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verify email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleVerifyEmailResponse PostVerifyEmail(global::Clarifai.Api.PostVerifyEmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostVerifyEmail, null, options, request);
      }
      /// <summary>
      /// Verify email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleVerifyEmailResponse> PostVerifyEmailAsync(global::Clarifai.Api.PostVerifyEmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostVerifyEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verify email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleVerifyEmailResponse> PostVerifyEmailAsync(global::Clarifai.Api.PostVerifyEmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostVerifyEmail, null, options, request);
      }
      /// <summary>
      /// Request for password reset email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostRequestResetPassword(global::Clarifai.Api.RequestResetPasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRequestResetPassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request for password reset email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostRequestResetPassword(global::Clarifai.Api.RequestResetPasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostRequestResetPassword, null, options, request);
      }
      /// <summary>
      /// Request for password reset email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostRequestResetPasswordAsync(global::Clarifai.Api.RequestResetPasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRequestResetPasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request for password reset email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostRequestResetPasswordAsync(global::Clarifai.Api.RequestResetPasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostRequestResetPassword, null, options, request);
      }
      /// <summary>
      /// Complete reset password
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostCompleteResetPassword(global::Clarifai.Api.CompleteResetPasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCompleteResetPassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Complete reset password
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostCompleteResetPassword(global::Clarifai.Api.CompleteResetPasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostCompleteResetPassword, null, options, request);
      }
      /// <summary>
      /// Complete reset password
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostCompleteResetPasswordAsync(global::Clarifai.Api.CompleteResetPasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCompleteResetPasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Complete reset password
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostCompleteResetPasswordAsync(global::Clarifai.Api.CompleteResetPasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostCompleteResetPassword, null, options, request);
      }
      /// <summary>
      /// Login with user/pass
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLoginResponse PostLogin(global::Clarifai.Api.PostLoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostLogin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Login with user/pass
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLoginResponse PostLogin(global::Clarifai.Api.PostLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostLogin, null, options, request);
      }
      /// <summary>
      /// Login with user/pass
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLoginResponse> PostLoginAsync(global::Clarifai.Api.PostLoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostLoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Login with user/pass
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLoginResponse> PostLoginAsync(global::Clarifai.Api.PostLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostLogin, null, options, request);
      }
      /// <summary>
      /// Signup with account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLoginResponse PostSignup(global::Clarifai.Api.PostSignupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSignup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Signup with account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLoginResponse PostSignup(global::Clarifai.Api.PostSignupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostSignup, null, options, request);
      }
      /// <summary>
      /// Signup with account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLoginResponse> PostSignupAsync(global::Clarifai.Api.PostSignupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSignupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Signup with account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLoginResponse> PostSignupAsync(global::Clarifai.Api.PostSignupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostSignup, null, options, request);
      }
      /// <summary>
      /// Logout use
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLogoutResponse PostLogout(global::Clarifai.Api.PostLogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostLogout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Logout use
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLogoutResponse PostLogout(global::Clarifai.Api.PostLogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostLogout, null, options, request);
      }
      /// <summary>
      /// Logout use
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLogoutResponse> PostLogoutAsync(global::Clarifai.Api.PostLogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostLogoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Logout use
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLogoutResponse> PostLogoutAsync(global::Clarifai.Api.PostLogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostLogout, null, options, request);
      }
      /// <summary>
      /// List available authentication methods, e.g.
      /// * standard auth method - login using user &amp; password
      /// * SAML auth methods - SSO using SAML Identity Providers like Okta, Github, Google GSuite, LinkedIn, etc.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListAuthMethodsResponse ListAuthMethods(global::Clarifai.Api.ListAuthMethodsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAuthMethods(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List available authentication methods, e.g.
      /// * standard auth method - login using user &amp; password
      /// * SAML auth methods - SSO using SAML Identity Providers like Okta, Github, Google GSuite, LinkedIn, etc.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListAuthMethodsResponse ListAuthMethods(global::Clarifai.Api.ListAuthMethodsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAuthMethods, null, options, request);
      }
      /// <summary>
      /// List available authentication methods, e.g.
      /// * standard auth method - login using user &amp; password
      /// * SAML auth methods - SSO using SAML Identity Providers like Okta, Github, Google GSuite, LinkedIn, etc.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListAuthMethodsResponse> ListAuthMethodsAsync(global::Clarifai.Api.ListAuthMethodsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAuthMethodsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List available authentication methods, e.g.
      /// * standard auth method - login using user &amp; password
      /// * SAML auth methods - SSO using SAML Identity Providers like Okta, Github, Google GSuite, LinkedIn, etc.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListAuthMethodsResponse> ListAuthMethodsAsync(global::Clarifai.Api.ListAuthMethodsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAuthMethods, null, options, request);
      }
      /// <summary>
      /// ListOrgAuthMethods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListAuthMethodsResponse ListOrgAuthMethods(global::Clarifai.Api.ListAuthMethodsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrgAuthMethods(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListOrgAuthMethods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListAuthMethodsResponse ListOrgAuthMethods(global::Clarifai.Api.ListAuthMethodsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOrgAuthMethods, null, options, request);
      }
      /// <summary>
      /// ListOrgAuthMethods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListAuthMethodsResponse> ListOrgAuthMethodsAsync(global::Clarifai.Api.ListAuthMethodsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrgAuthMethodsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListOrgAuthMethods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListAuthMethodsResponse> ListOrgAuthMethodsAsync(global::Clarifai.Api.ListAuthMethodsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOrgAuthMethods, null, options, request);
      }
      /// <summary>
      /// ListOrgAuthMethods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostIdLoginFinalizerResponse PostIdLoginFinalizer(global::Clarifai.Api.PostIdLoginFinalizerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostIdLoginFinalizer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListOrgAuthMethods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostIdLoginFinalizerResponse PostIdLoginFinalizer(global::Clarifai.Api.PostIdLoginFinalizerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostIdLoginFinalizer, null, options, request);
      }
      /// <summary>
      /// ListOrgAuthMethods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostIdLoginFinalizerResponse> PostIdLoginFinalizerAsync(global::Clarifai.Api.PostIdLoginFinalizerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostIdLoginFinalizerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListOrgAuthMethods
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostIdLoginFinalizerResponse> PostIdLoginFinalizerAsync(global::Clarifai.Api.PostIdLoginFinalizerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostIdLoginFinalizer, null, options, request);
      }
      /// <summary>
      /// PostLinkIdpUser
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostLinkIdpUserResponse PostLinkIdpUser(global::Clarifai.Api.PostLinkIdpUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostLinkIdpUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostLinkIdpUser
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostLinkIdpUserResponse PostLinkIdpUser(global::Clarifai.Api.PostLinkIdpUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostLinkIdpUser, null, options, request);
      }
      /// <summary>
      /// PostLinkIdpUser
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostLinkIdpUserResponse> PostLinkIdpUserAsync(global::Clarifai.Api.PostLinkIdpUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostLinkIdpUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostLinkIdpUser
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostLinkIdpUserResponse> PostLinkIdpUserAsync(global::Clarifai.Api.PostLinkIdpUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostLinkIdpUser, null, options, request);
      }
      /// <summary>
      /// GetLoginInfo
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetLoginInfoResponse GetLoginInfo(global::Clarifai.Api.GetLoginInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLoginInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetLoginInfo
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetLoginInfoResponse GetLoginInfo(global::Clarifai.Api.GetLoginInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLoginInfo, null, options, request);
      }
      /// <summary>
      /// GetLoginInfo
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetLoginInfoResponse> GetLoginInfoAsync(global::Clarifai.Api.GetLoginInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLoginInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetLoginInfo
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetLoginInfoResponse> GetLoginInfoAsync(global::Clarifai.Api.GetLoginInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLoginInfo, null, options, request);
      }
      /// <summary>
      /// List available 2FA methods in current environment, e.g.
      /// * TOTP auth method - login layer using time synced  codes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.List2FAMethodsResponse ListAuth2FAMethods(global::Clarifai.Api.List2FAMethodsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAuth2FAMethods(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List available 2FA methods in current environment, e.g.
      /// * TOTP auth method - login layer using time synced  codes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.List2FAMethodsResponse ListAuth2FAMethods(global::Clarifai.Api.List2FAMethodsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAuth2FAMethods, null, options, request);
      }
      /// <summary>
      /// List available 2FA methods in current environment, e.g.
      /// * TOTP auth method - login layer using time synced  codes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.List2FAMethodsResponse> ListAuth2FAMethodsAsync(global::Clarifai.Api.List2FAMethodsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAuth2FAMethodsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List available 2FA methods in current environment, e.g.
      /// * TOTP auth method - login layer using time synced  codes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.List2FAMethodsResponse> ListAuth2FAMethodsAsync(global::Clarifai.Api.List2FAMethodsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAuth2FAMethods, null, options, request);
      }
      /// <summary>
      /// Enable Clarifai TOTP 2FA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostAuth2FATotpRegisterEnableResponse PostAuth2FATotpRegisterEnable(global::Clarifai.Api.PostAuth2FATotpRegisterEnableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuth2FATotpRegisterEnable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable Clarifai TOTP 2FA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostAuth2FATotpRegisterEnableResponse PostAuth2FATotpRegisterEnable(global::Clarifai.Api.PostAuth2FATotpRegisterEnableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAuth2FATotpRegisterEnable, null, options, request);
      }
      /// <summary>
      /// Enable Clarifai TOTP 2FA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostAuth2FATotpRegisterEnableResponse> PostAuth2FATotpRegisterEnableAsync(global::Clarifai.Api.PostAuth2FATotpRegisterEnableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuth2FATotpRegisterEnableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable Clarifai TOTP 2FA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostAuth2FATotpRegisterEnableResponse> PostAuth2FATotpRegisterEnableAsync(global::Clarifai.Api.PostAuth2FATotpRegisterEnableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAuth2FATotpRegisterEnable, null, options, request);
      }
      /// <summary>
      /// Verify Clarifai TOTP 2FA activation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostAuth2FATotpRegisterVerifyResponse PostAuth2FATotpRegisterVerify(global::Clarifai.Api.PostAuth2FATotpRegisterVerifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuth2FATotpRegisterVerify(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verify Clarifai TOTP 2FA activation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostAuth2FATotpRegisterVerifyResponse PostAuth2FATotpRegisterVerify(global::Clarifai.Api.PostAuth2FATotpRegisterVerifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAuth2FATotpRegisterVerify, null, options, request);
      }
      /// <summary>
      /// Verify Clarifai TOTP 2FA activation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostAuth2FATotpRegisterVerifyResponse> PostAuth2FATotpRegisterVerifyAsync(global::Clarifai.Api.PostAuth2FATotpRegisterVerifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuth2FATotpRegisterVerifyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verify Clarifai TOTP 2FA activation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostAuth2FATotpRegisterVerifyResponse> PostAuth2FATotpRegisterVerifyAsync(global::Clarifai.Api.PostAuth2FATotpRegisterVerifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAuth2FATotpRegisterVerify, null, options, request);
      }
      /// <summary>
      /// Disable Clarifai TOTP 2FA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostAuth2FATotpDisableResponse PostAuth2FATotpDisable(global::Clarifai.Api.PostAuth2FATotpDisableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuth2FATotpDisable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable Clarifai TOTP 2FA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostAuth2FATotpDisableResponse PostAuth2FATotpDisable(global::Clarifai.Api.PostAuth2FATotpDisableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAuth2FATotpDisable, null, options, request);
      }
      /// <summary>
      /// Disable Clarifai TOTP 2FA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostAuth2FATotpDisableResponse> PostAuth2FATotpDisableAsync(global::Clarifai.Api.PostAuth2FATotpDisableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuth2FATotpDisableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable Clarifai TOTP 2FA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostAuth2FATotpDisableResponse> PostAuth2FATotpDisableAsync(global::Clarifai.Api.PostAuth2FATotpDisableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAuth2FATotpDisable, null, options, request);
      }
      /// <summary>
      /// Login with Clarifai TOTP 2FA activation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLoginResponse PostAuth2FATotpLogin(global::Clarifai.Api.PostAuth2FATotpLoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuth2FATotpLogin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Login with Clarifai TOTP 2FA activation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLoginResponse PostAuth2FATotpLogin(global::Clarifai.Api.PostAuth2FATotpLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAuth2FATotpLogin, null, options, request);
      }
      /// <summary>
      /// Login with Clarifai TOTP 2FA activation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLoginResponse> PostAuth2FATotpLoginAsync(global::Clarifai.Api.PostAuth2FATotpLoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuth2FATotpLoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Login with Clarifai TOTP 2FA activation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLoginResponse> PostAuth2FATotpLoginAsync(global::Clarifai.Api.PostAuth2FATotpLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAuth2FATotpLogin, null, options, request);
      }
      /// <summary>
      /// Recover users Clarifai TOTP 2FA activation through sending an email confirmation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostAuth2FATotpRecoverResponse PostAuth2FATotpRecover(global::Clarifai.Api.PostAuth2FATotpRecoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuth2FATotpRecover(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Recover users Clarifai TOTP 2FA activation through sending an email confirmation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostAuth2FATotpRecoverResponse PostAuth2FATotpRecover(global::Clarifai.Api.PostAuth2FATotpRecoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAuth2FATotpRecover, null, options, request);
      }
      /// <summary>
      /// Recover users Clarifai TOTP 2FA activation through sending an email confirmation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostAuth2FATotpRecoverResponse> PostAuth2FATotpRecoverAsync(global::Clarifai.Api.PostAuth2FATotpRecoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuth2FATotpRecoverAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Recover users Clarifai TOTP 2FA activation through sending an email confirmation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostAuth2FATotpRecoverResponse> PostAuth2FATotpRecoverAsync(global::Clarifai.Api.PostAuth2FATotpRecoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAuth2FATotpRecover, null, options, request);
      }
      /// <summary>
      /// Confirm the recovery of users Clarifai TOTP 2FA. Will be called by user from email link (via portal).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetAuth2FATotpRecoverConfirmResponse GetAuth2FATotpRecoverConfirm(global::Clarifai.Api.GetAuth2FATotpRecoverConfirmRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuth2FATotpRecoverConfirm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Confirm the recovery of users Clarifai TOTP 2FA. Will be called by user from email link (via portal).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetAuth2FATotpRecoverConfirmResponse GetAuth2FATotpRecoverConfirm(global::Clarifai.Api.GetAuth2FATotpRecoverConfirmRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAuth2FATotpRecoverConfirm, null, options, request);
      }
      /// <summary>
      /// Confirm the recovery of users Clarifai TOTP 2FA. Will be called by user from email link (via portal).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetAuth2FATotpRecoverConfirmResponse> GetAuth2FATotpRecoverConfirmAsync(global::Clarifai.Api.GetAuth2FATotpRecoverConfirmRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuth2FATotpRecoverConfirmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Confirm the recovery of users Clarifai TOTP 2FA. Will be called by user from email link (via portal).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetAuth2FATotpRecoverConfirmResponse> GetAuth2FATotpRecoverConfirmAsync(global::Clarifai.Api.GetAuth2FATotpRecoverConfirmRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAuth2FATotpRecoverConfirm, null, options, request);
      }
      /// <summary>
      /// List the subscriptions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleSubscriptionResponse GetSubscription(global::Clarifai.Api.GetSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the subscriptions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleSubscriptionResponse GetSubscription(global::Clarifai.Api.GetSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSubscription, null, options, request);
      }
      /// <summary>
      /// List the subscriptions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleSubscriptionResponse> GetSubscriptionAsync(global::Clarifai.Api.GetSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the subscriptions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleSubscriptionResponse> GetSubscriptionAsync(global::Clarifai.Api.GetSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSubscription, null, options, request);
      }
      /// <summary>
      /// Add a new subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleSubscriptionResponse PostSubscription(global::Clarifai.Api.PostSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleSubscriptionResponse PostSubscription(global::Clarifai.Api.PostSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostSubscription, null, options, request);
      }
      /// <summary>
      /// Add a new subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleSubscriptionResponse> PostSubscriptionAsync(global::Clarifai.Api.PostSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleSubscriptionResponse> PostSubscriptionAsync(global::Clarifai.Api.PostSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostSubscription, null, options, request);
      }
      /// <summary>
      /// List all credit cards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultipleCreditCardResponse ListCreditCards(global::Clarifai.Api.ListCreditCardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCreditCards(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all credit cards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultipleCreditCardResponse ListCreditCards(global::Clarifai.Api.ListCreditCardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCreditCards, null, options, request);
      }
      /// <summary>
      /// List all credit cards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultipleCreditCardResponse> ListCreditCardsAsync(global::Clarifai.Api.ListCreditCardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCreditCardsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all credit cards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultipleCreditCardResponse> ListCreditCardsAsync(global::Clarifai.Api.ListCreditCardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCreditCards, null, options, request);
      }
      /// <summary>
      /// Add a new credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleCreditCardResponse PostCreditCard(global::Clarifai.Api.PostCreditCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCreditCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleCreditCardResponse PostCreditCard(global::Clarifai.Api.PostCreditCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostCreditCard, null, options, request);
      }
      /// <summary>
      /// Add a new credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleCreditCardResponse> PostCreditCardAsync(global::Clarifai.Api.PostCreditCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCreditCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleCreditCardResponse> PostCreditCardAsync(global::Clarifai.Api.PostCreditCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostCreditCard, null, options, request);
      }
      /// <summary>
      /// Delete a credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCreditCard(global::Clarifai.Api.DeleteCreditCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCreditCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCreditCard(global::Clarifai.Api.DeleteCreditCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCreditCard, null, options, request);
      }
      /// <summary>
      /// Delete a credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCreditCardAsync(global::Clarifai.Api.DeleteCreditCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCreditCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCreditCardAsync(global::Clarifai.Api.DeleteCreditCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCreditCard, null, options, request);
      }
      /// <summary>
      /// Update a credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultipleCreditCardResponse PatchCreditCards(global::Clarifai.Api.PatchCreditCardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCreditCards(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultipleCreditCardResponse PatchCreditCards(global::Clarifai.Api.PatchCreditCardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchCreditCards, null, options, request);
      }
      /// <summary>
      /// Update a credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultipleCreditCardResponse> PatchCreditCardsAsync(global::Clarifai.Api.PatchCreditCardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCreditCardsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a credit card.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultipleCreditCardResponse> PatchCreditCardsAsync(global::Clarifai.Api.PatchCreditCardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchCreditCards, null, options, request);
      }
      /// <summary>
      /// Get the shipping address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleShippingAddressResponse GetShippingAddress(global::Clarifai.Api.GetShippingAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetShippingAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the shipping address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleShippingAddressResponse GetShippingAddress(global::Clarifai.Api.GetShippingAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShippingAddress, null, options, request);
      }
      /// <summary>
      /// Get the shipping address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleShippingAddressResponse> GetShippingAddressAsync(global::Clarifai.Api.GetShippingAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetShippingAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the shipping address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleShippingAddressResponse> GetShippingAddressAsync(global::Clarifai.Api.GetShippingAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShippingAddress, null, options, request);
      }
      /// <summary>
      /// Update shipping address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleShippingAddressResponse PutShippingAddress(global::Clarifai.Api.PutShippingAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutShippingAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update shipping address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleShippingAddressResponse PutShippingAddress(global::Clarifai.Api.PutShippingAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutShippingAddress, null, options, request);
      }
      /// <summary>
      /// Update shipping address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleShippingAddressResponse> PutShippingAddressAsync(global::Clarifai.Api.PutShippingAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutShippingAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update shipping address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleShippingAddressResponse> PutShippingAddressAsync(global::Clarifai.Api.PutShippingAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutShippingAddress, null, options, request);
      }
      /// <summary>
      /// ListPlans
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiPlanResponse ListPlans(global::Clarifai.Api.ListPlansRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPlans(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListPlans
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiPlanResponse ListPlans(global::Clarifai.Api.ListPlansRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPlans, null, options, request);
      }
      /// <summary>
      /// ListPlans
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiPlanResponse> ListPlansAsync(global::Clarifai.Api.ListPlansRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPlansAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListPlans
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiPlanResponse> ListPlansAsync(global::Clarifai.Api.ListPlansRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPlans, null, options, request);
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiStatusCodeResponse ListStatusCodes(global::Clarifai.Api.ListStatusCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStatusCodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiStatusCodeResponse ListStatusCodes(global::Clarifai.Api.ListStatusCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListStatusCodes, null, options, request);
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatusCodeResponse> ListStatusCodesAsync(global::Clarifai.Api.ListStatusCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStatusCodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatusCodeResponse> ListStatusCodesAsync(global::Clarifai.Api.ListStatusCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListStatusCodes, null, options, request);
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleStatusCodeResponse GetStatusCode(global::Clarifai.Api.GetStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleStatusCodeResponse GetStatusCode(global::Clarifai.Api.GetStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatusCode, null, options, request);
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleStatusCodeResponse> GetStatusCodeAsync(global::Clarifai.Api.GetStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleStatusCodeResponse> GetStatusCodeAsync(global::Clarifai.Api.GetStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatusCode, null, options, request);
      }
      /// <summary>
      /// Health check endpoint
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetHealthzResponse GetHealthz(global::Clarifai.Api.GetHealthzRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHealthz(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Health check endpoint
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetHealthzResponse GetHealthz(global::Clarifai.Api.GetHealthzRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHealthz, null, options, request);
      }
      /// <summary>
      /// Health check endpoint
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetHealthzResponse> GetHealthzAsync(global::Clarifai.Api.GetHealthzRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHealthzAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Health check endpoint
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetHealthzResponse> GetHealthzAsync(global::Clarifai.Api.GetHealthzRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHealthz, null, options, request);
      }
      /// <summary>
      /// List all billing  cycles - old billing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListUserBillingCyclesResponse ListUserBillingCycles(global::Clarifai.Api.ListUserBillingCyclesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUserBillingCycles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all billing  cycles - old billing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListUserBillingCyclesResponse ListUserBillingCycles(global::Clarifai.Api.ListUserBillingCyclesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUserBillingCycles, null, options, request);
      }
      /// <summary>
      /// List all billing  cycles - old billing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListUserBillingCyclesResponse> ListUserBillingCyclesAsync(global::Clarifai.Api.ListUserBillingCyclesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUserBillingCyclesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all billing  cycles - old billing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListUserBillingCyclesResponse> ListUserBillingCyclesAsync(global::Clarifai.Api.ListUserBillingCyclesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUserBillingCycles, null, options, request);
      }
      /// <summary>
      /// List user usage.cycles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListUserCyclesResponse ListUserCycles(global::Clarifai.Api.ListUserCyclesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUserCycles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List user usage.cycles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListUserCyclesResponse ListUserCycles(global::Clarifai.Api.ListUserCyclesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUserCycles, null, options, request);
      }
      /// <summary>
      /// List user usage.cycles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListUserCyclesResponse> ListUserCyclesAsync(global::Clarifai.Api.ListUserCyclesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUserCyclesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List user usage.cycles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListUserCyclesResponse> ListUserCyclesAsync(global::Clarifai.Api.ListUserCyclesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUserCycles, null, options, request);
      }
      /// <summary>
      /// Gets the billing cycle start and end date as well as invoice items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetBillingUsageResponse GetBillingUsage(global::Clarifai.Api.GetBillingUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBillingUsage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the billing cycle start and end date as well as invoice items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetBillingUsageResponse GetBillingUsage(global::Clarifai.Api.GetBillingUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBillingUsage, null, options, request);
      }
      /// <summary>
      /// Gets the billing cycle start and end date as well as invoice items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetBillingUsageResponse> GetBillingUsageAsync(global::Clarifai.Api.GetBillingUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBillingUsageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the billing cycle start and end date as well as invoice items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetBillingUsageResponse> GetBillingUsageAsync(global::Clarifai.Api.GetBillingUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBillingUsage, null, options, request);
      }
      /// <summary>
      /// Add historical usage. - Billing 1
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostHistoricalUsageResponse PostHistoricalUsage(global::Clarifai.Api.PostHistoricalUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostHistoricalUsage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add historical usage. - Billing 1
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostHistoricalUsageResponse PostHistoricalUsage(global::Clarifai.Api.PostHistoricalUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostHistoricalUsage, null, options, request);
      }
      /// <summary>
      /// Add historical usage. - Billing 1
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostHistoricalUsageResponse> PostHistoricalUsageAsync(global::Clarifai.Api.PostHistoricalUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostHistoricalUsageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add historical usage. - Billing 1
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostHistoricalUsageResponse> PostHistoricalUsageAsync(global::Clarifai.Api.PostHistoricalUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostHistoricalUsage, null, options, request);
      }
      /// <summary>
      /// Get historical usage. - Billing 2
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetHistoricalUsageResponse GetHistoricalUsage(global::Clarifai.Api.GetHistoricalUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHistoricalUsage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get historical usage. - Billing 2
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetHistoricalUsageResponse GetHistoricalUsage(global::Clarifai.Api.GetHistoricalUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHistoricalUsage, null, options, request);
      }
      /// <summary>
      /// Get historical usage. - Billing 2
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetHistoricalUsageResponse> GetHistoricalUsageAsync(global::Clarifai.Api.GetHistoricalUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHistoricalUsageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get historical usage. - Billing 2
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetHistoricalUsageResponse> GetHistoricalUsageAsync(global::Clarifai.Api.GetHistoricalUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHistoricalUsage, null, options, request);
      }
      /// <summary>
      /// Get a list of valid usage intervals
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListUsageIntervalsResponse ListUsageIntervals(global::Clarifai.Api.ListUsageIntervalsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUsageIntervals(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a list of valid usage intervals
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ListUsageIntervalsResponse ListUsageIntervals(global::Clarifai.Api.ListUsageIntervalsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUsageIntervals, null, options, request);
      }
      /// <summary>
      /// Get a list of valid usage intervals
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListUsageIntervalsResponse> ListUsageIntervalsAsync(global::Clarifai.Api.ListUsageIntervalsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUsageIntervalsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a list of valid usage intervals
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListUsageIntervalsResponse> ListUsageIntervalsAsync(global::Clarifai.Api.ListUsageIntervalsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUsageIntervals, null, options, request);
      }
      /// <summary>
      /// Get realtime usage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetRealtimeUsageResponse GetRealtimeUsage(global::Clarifai.Api.GetRealtimeUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRealtimeUsage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get realtime usage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.GetRealtimeUsageResponse GetRealtimeUsage(global::Clarifai.Api.GetRealtimeUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRealtimeUsage, null, options, request);
      }
      /// <summary>
      /// Get realtime usage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetRealtimeUsageResponse> GetRealtimeUsageAsync(global::Clarifai.Api.GetRealtimeUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRealtimeUsageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get realtime usage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetRealtimeUsageResponse> GetRealtimeUsageAsync(global::Clarifai.Api.GetRealtimeUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRealtimeUsage, null, options, request);
      }
      /// <summary>
      /// Post usage to platform. Only called by on prem now.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostUsageResponse PostUsage(global::Clarifai.Api.PostUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUsage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post usage to platform. Only called by on prem now.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostUsageResponse PostUsage(global::Clarifai.Api.PostUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostUsage, null, options, request);
      }
      /// <summary>
      /// Post usage to platform. Only called by on prem now.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostUsageResponse> PostUsageAsync(global::Clarifai.Api.PostUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUsageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post usage to platform. Only called by on prem now.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostUsageResponse> PostUsageAsync(global::Clarifai.Api.PostUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostUsage, null, options, request);
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse ListCollaborators(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse ListCollaborators(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollaborators, null, options, request);
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> ListCollaboratorsAsync(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> ListCollaboratorsAsync(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollaborators, null, options, request);
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PostCollaborators(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PostCollaborators(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostCollaborators, null, options, request);
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PostCollaboratorsAsync(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PostCollaboratorsAsync(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostCollaborators, null, options, request);
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PatchCollaborators(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PatchCollaborators(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchCollaborators, null, options, request);
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PatchCollaboratorsAsync(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PatchCollaboratorsAsync(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchCollaborators, null, options, request);
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollaborators(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollaborators(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCollaborators, null, options, request);
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollaboratorsAsync(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollaboratorsAsync(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCollaborators, null, options, request);
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaborationsResponse ListCollaborations(global::Clarifai.Api.ListCollaborationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaborations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaborationsResponse ListCollaborations(global::Clarifai.Api.ListCollaborationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollaborations, null, options, request);
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaborationsResponse> ListCollaborationsAsync(global::Clarifai.Api.ListCollaborationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaborationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaborationsResponse> ListCollaborationsAsync(global::Clarifai.Api.ListCollaborationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollaborations, null, options, request);
      }
      /// <summary>
      /// Get the license with crypto security.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.FetchLicenseResponse FetchLicense(global::Clarifai.Api.FetchLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchLicense(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the license with crypto security.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.FetchLicenseResponse FetchLicense(global::Clarifai.Api.FetchLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchLicense, null, options, request);
      }
      /// <summary>
      /// Get the license with crypto security.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.FetchLicenseResponse> FetchLicenseAsync(global::Clarifai.Api.FetchLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchLicenseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the license with crypto security.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.FetchLicenseResponse> FetchLicenseAsync(global::Clarifai.Api.FetchLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchLicense, null, options, request);
      }
      /// <summary>
      /// List all licenses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultipleLicensesResponse ListLicenses(global::Clarifai.Api.ListLicensesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLicenses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all licenses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultipleLicensesResponse ListLicenses(global::Clarifai.Api.ListLicensesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLicenses, null, options, request);
      }
      /// <summary>
      /// List all licenses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultipleLicensesResponse> ListLicensesAsync(global::Clarifai.Api.ListLicensesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLicensesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all licenses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultipleLicensesResponse> ListLicensesAsync(global::Clarifai.Api.ListLicensesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLicenses, null, options, request);
      }
      /// <summary>
      /// Get a license
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLicenseResponse GetLicense(global::Clarifai.Api.GetLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLicense(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a license
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLicenseResponse GetLicense(global::Clarifai.Api.GetLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLicense, null, options, request);
      }
      /// <summary>
      /// Get a license
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLicenseResponse> GetLicenseAsync(global::Clarifai.Api.GetLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLicenseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a license
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLicenseResponse> GetLicenseAsync(global::Clarifai.Api.GetLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLicense, null, options, request);
      }
      /// <summary>
      /// Check that a license is still valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ValidateLicenseResponse ValidateLicense(global::Clarifai.Api.ValidateLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateLicense(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check that a license is still valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.ValidateLicenseResponse ValidateLicense(global::Clarifai.Api.ValidateLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateLicense, null, options, request);
      }
      /// <summary>
      /// Check that a license is still valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ValidateLicenseResponse> ValidateLicenseAsync(global::Clarifai.Api.ValidateLicenseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateLicenseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check that a license is still valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ValidateLicenseResponse> ValidateLicenseAsync(global::Clarifai.Api.ValidateLicenseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateLicense, null, options, request);
      }
      /// <summary>
      /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse PostAppDuplications(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppDuplications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse PostAppDuplications(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAppDuplications, null, options, request);
      }
      /// <summary>
      /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> PostAppDuplicationsAsync(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppDuplicationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> PostAppDuplicationsAsync(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAppDuplications, null, options, request);
      }
      /// <summary>
      /// list all the app duplications user triggers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse ListAppDuplications(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppDuplications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// list all the app duplications user triggers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse ListAppDuplications(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAppDuplications, null, options, request);
      }
      /// <summary>
      /// list all the app duplications user triggers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> ListAppDuplicationsAsync(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppDuplicationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// list all the app duplications user triggers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> ListAppDuplicationsAsync(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAppDuplications, null, options, request);
      }
      /// <summary>
      /// get the app duplication status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAppDuplicationResponse GetAppDuplication(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppDuplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get the app duplication status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAppDuplicationResponse GetAppDuplication(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAppDuplication, null, options, request);
      }
      /// <summary>
      /// get the app duplication status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppDuplicationResponse> GetAppDuplicationAsync(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppDuplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get the app duplication status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppDuplicationResponse> GetAppDuplicationAsync(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAppDuplication, null, options, request);
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse PostTasks(global::Clarifai.Api.PostTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse PostTasks(global::Clarifai.Api.PostTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostTasks, null, options, request);
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PostTasksAsync(global::Clarifai.Api.PostTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PostTasksAsync(global::Clarifai.Api.PostTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostTasks, null, options, request);
      }
      /// <summary>
      /// Task annotation count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTaskCountResponse GetTaskAnnotationCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAnnotationCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Task annotation count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTaskCountResponse GetTaskAnnotationCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTaskAnnotationCount, null, options, request);
      }
      /// <summary>
      /// Task annotation count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskCountResponse> GetTaskAnnotationCountAsync(global::Clarifai.Api.GetTaskCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAnnotationCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Task annotation count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskCountResponse> GetTaskAnnotationCountAsync(global::Clarifai.Api.GetTaskCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTaskAnnotationCount, null, options, request);
      }
      /// <summary>
      /// Task Input count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTaskCountResponse GetTaskInputCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskInputCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Task Input count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTaskCountResponse GetTaskInputCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTaskInputCount, null, options, request);
      }
      /// <summary>
      /// Task Input count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskCountResponse> GetTaskInputCountAsync(global::Clarifai.Api.GetTaskCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskInputCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Task Input count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskCountResponse> GetTaskInputCountAsync(global::Clarifai.Api.GetTaskCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTaskInputCount, null, options, request);
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTaskResponse GetTask(global::Clarifai.Api.GetTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTaskResponse GetTask(global::Clarifai.Api.GetTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTask, null, options, request);
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskResponse> GetTaskAsync(global::Clarifai.Api.GetTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskResponse> GetTaskAsync(global::Clarifai.Api.GetTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTask, null, options, request);
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse ListTasks(global::Clarifai.Api.ListTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse ListTasks(global::Clarifai.Api.ListTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTasks, null, options, request);
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> ListTasksAsync(global::Clarifai.Api.ListTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> ListTasksAsync(global::Clarifai.Api.ListTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTasks, null, options, request);
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse PatchTasks(global::Clarifai.Api.PatchTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse PatchTasks(global::Clarifai.Api.PatchTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchTasks, null, options, request);
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PatchTasksAsync(global::Clarifai.Api.PatchTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PatchTasksAsync(global::Clarifai.Api.PatchTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchTasks, null, options, request);
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTasks(global::Clarifai.Api.DeleteTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTasks(global::Clarifai.Api.DeleteTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTasks, null, options, request);
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTasksAsync(global::Clarifai.Api.DeleteTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTasksAsync(global::Clarifai.Api.DeleteTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTasks, null, options, request);
      }
      /// <summary>
      /// Rollup annotation count for task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PatchAnnotationCountsRollup(global::Clarifai.Api.PatchAnnotationCountsRollupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationCountsRollup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rollup annotation count for task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PatchAnnotationCountsRollup(global::Clarifai.Api.PatchAnnotationCountsRollupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnnotationCountsRollup, null, options, request);
      }
      /// <summary>
      /// Rollup annotation count for task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PatchAnnotationCountsRollupAsync(global::Clarifai.Api.PatchAnnotationCountsRollupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationCountsRollupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rollup annotation count for task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PatchAnnotationCountsRollupAsync(global::Clarifai.Api.PatchAnnotationCountsRollupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnnotationCountsRollup, null, options, request);
      }
      /// <summary>
      /// Add Label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiLabelOrderResponse PostLabelOrders(global::Clarifai.Api.PostLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostLabelOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add Label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiLabelOrderResponse PostLabelOrders(global::Clarifai.Api.PostLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostLabelOrders, null, options, request);
      }
      /// <summary>
      /// Add Label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> PostLabelOrdersAsync(global::Clarifai.Api.PostLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostLabelOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add Label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> PostLabelOrdersAsync(global::Clarifai.Api.PostLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostLabelOrders, null, options, request);
      }
      /// <summary>
      /// Get a label order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLabelOrderResponse GetLabelOrder(global::Clarifai.Api.GetLabelOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLabelOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a label order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleLabelOrderResponse GetLabelOrder(global::Clarifai.Api.GetLabelOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLabelOrder, null, options, request);
      }
      /// <summary>
      /// Get a label order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLabelOrderResponse> GetLabelOrderAsync(global::Clarifai.Api.GetLabelOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLabelOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a label order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLabelOrderResponse> GetLabelOrderAsync(global::Clarifai.Api.GetLabelOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLabelOrder, null, options, request);
      }
      /// <summary>
      /// List label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiLabelOrderResponse ListLabelOrders(global::Clarifai.Api.ListLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLabelOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiLabelOrderResponse ListLabelOrders(global::Clarifai.Api.ListLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLabelOrders, null, options, request);
      }
      /// <summary>
      /// List label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> ListLabelOrdersAsync(global::Clarifai.Api.ListLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLabelOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> ListLabelOrdersAsync(global::Clarifai.Api.ListLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLabelOrders, null, options, request);
      }
      /// <summary>
      /// Patch one or more label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiLabelOrderResponse PatchLabelOrders(global::Clarifai.Api.PatchLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchLabelOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiLabelOrderResponse PatchLabelOrders(global::Clarifai.Api.PatchLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchLabelOrders, null, options, request);
      }
      /// <summary>
      /// Patch one or more label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> PatchLabelOrdersAsync(global::Clarifai.Api.PatchLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchLabelOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> PatchLabelOrdersAsync(global::Clarifai.Api.PatchLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchLabelOrders, null, options, request);
      }
      /// <summary>
      /// Delete multiple label orders in one request.
      /// this do not change task status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteLabelOrders(global::Clarifai.Api.DeleteLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLabelOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple label orders in one request.
      /// this do not change task status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteLabelOrders(global::Clarifai.Api.DeleteLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteLabelOrders, null, options, request);
      }
      /// <summary>
      /// Delete multiple label orders in one request.
      /// this do not change task status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteLabelOrdersAsync(global::Clarifai.Api.DeleteLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLabelOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple label orders in one request.
      /// this do not change task status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteLabelOrdersAsync(global::Clarifai.Api.DeleteLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteLabelOrders, null, options, request);
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse PostCollectors(global::Clarifai.Api.PostCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse PostCollectors(global::Clarifai.Api.PostCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostCollectors, null, options, request);
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PostCollectorsAsync(global::Clarifai.Api.PostCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PostCollectorsAsync(global::Clarifai.Api.PostCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostCollectors, null, options, request);
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleCollectorResponse GetCollector(global::Clarifai.Api.GetCollectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCollector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleCollectorResponse GetCollector(global::Clarifai.Api.GetCollectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCollector, null, options, request);
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleCollectorResponse> GetCollectorAsync(global::Clarifai.Api.GetCollectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCollectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleCollectorResponse> GetCollectorAsync(global::Clarifai.Api.GetCollectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCollector, null, options, request);
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse ListCollectors(global::Clarifai.Api.ListCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse ListCollectors(global::Clarifai.Api.ListCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollectors, null, options, request);
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> ListCollectorsAsync(global::Clarifai.Api.ListCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> ListCollectorsAsync(global::Clarifai.Api.ListCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollectors, null, options, request);
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse PatchCollectors(global::Clarifai.Api.PatchCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse PatchCollectors(global::Clarifai.Api.PatchCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchCollectors, null, options, request);
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PatchCollectorsAsync(global::Clarifai.Api.PatchCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PatchCollectorsAsync(global::Clarifai.Api.PatchCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchCollectors, null, options, request);
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollectors(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollectors(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCollectors, null, options, request);
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollectorsAsync(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollectorsAsync(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCollectors, null, options, request);
      }
      /// <summary>
      /// PostStatValues
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiStatValueResponse PostStatValues(global::Clarifai.Api.PostStatValuesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValues(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostStatValues
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiStatValueResponse PostStatValues(global::Clarifai.Api.PostStatValuesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostStatValues, null, options, request);
      }
      /// <summary>
      /// PostStatValues
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueResponse> PostStatValuesAsync(global::Clarifai.Api.PostStatValuesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValuesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostStatValues
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueResponse> PostStatValuesAsync(global::Clarifai.Api.PostStatValuesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostStatValues, null, options, request);
      }
      /// <summary>
      /// PostStatValuesAggregate
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiStatValueAggregateResponse PostStatValuesAggregate(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValuesAggregate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostStatValuesAggregate
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiStatValueAggregateResponse PostStatValuesAggregate(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostStatValuesAggregate, null, options, request);
      }
      /// <summary>
      /// PostStatValuesAggregate
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueAggregateResponse> PostStatValuesAggregateAsync(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValuesAggregateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostStatValuesAggregate
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueAggregateResponse> PostStatValuesAggregateAsync(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostStatValuesAggregate, null, options, request);
      }
      /// <summary>
      /// Add a new analytics entry into our database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostAnalyticsResponse PostAnalytics(global::Clarifai.Api.PostAnalyticsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnalytics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new analytics entry into our database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostAnalyticsResponse PostAnalytics(global::Clarifai.Api.PostAnalyticsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnalytics, null, options, request);
      }
      /// <summary>
      /// Add a new analytics entry into our database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostAnalyticsResponse> PostAnalyticsAsync(global::Clarifai.Api.PostAnalyticsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnalyticsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new analytics entry into our database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostAnalyticsResponse> PostAnalyticsAsync(global::Clarifai.Api.PostAnalyticsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnalytics, null, options, request);
      }
      /// <summary>
      /// Add a new sdk_billing entry into our database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostSDKBillingResponse PostSDKBilling(global::Clarifai.Api.PostSDKBillingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSDKBilling(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new sdk_billing entry into our database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostSDKBillingResponse PostSDKBilling(global::Clarifai.Api.PostSDKBillingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostSDKBilling, null, options, request);
      }
      /// <summary>
      /// Add a new sdk_billing entry into our database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostSDKBillingResponse> PostSDKBillingAsync(global::Clarifai.Api.PostSDKBillingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSDKBillingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new sdk_billing entry into our database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostSDKBillingResponse> PostSDKBillingAsync(global::Clarifai.Api.PostSDKBillingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostSDKBilling, null, options, request);
      }
      /// <summary>
      /// Find annotations duplicates based on an specified attribute of different annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse PostFindDuplicateAnnotationsJobs(global::Clarifai.Api.PostFindDuplicateAnnotationsJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostFindDuplicateAnnotationsJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find annotations duplicates based on an specified attribute of different annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse PostFindDuplicateAnnotationsJobs(global::Clarifai.Api.PostFindDuplicateAnnotationsJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostFindDuplicateAnnotationsJobs, null, options, request);
      }
      /// <summary>
      /// Find annotations duplicates based on an specified attribute of different annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse> PostFindDuplicateAnnotationsJobsAsync(global::Clarifai.Api.PostFindDuplicateAnnotationsJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostFindDuplicateAnnotationsJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find annotations duplicates based on an specified attribute of different annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse> PostFindDuplicateAnnotationsJobsAsync(global::Clarifai.Api.PostFindDuplicateAnnotationsJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostFindDuplicateAnnotationsJobs, null, options, request);
      }
      /// <summary>
      /// Get annotations find duplicates jobs results by id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleFindDuplicateAnnotationsJobResponse GetFindDuplicateAnnotationsJob(global::Clarifai.Api.GetFindDuplicateAnnotationsJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFindDuplicateAnnotationsJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get annotations find duplicates jobs results by id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleFindDuplicateAnnotationsJobResponse GetFindDuplicateAnnotationsJob(global::Clarifai.Api.GetFindDuplicateAnnotationsJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFindDuplicateAnnotationsJob, null, options, request);
      }
      /// <summary>
      /// Get annotations find duplicates jobs results by id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleFindDuplicateAnnotationsJobResponse> GetFindDuplicateAnnotationsJobAsync(global::Clarifai.Api.GetFindDuplicateAnnotationsJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFindDuplicateAnnotationsJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get annotations find duplicates jobs results by id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleFindDuplicateAnnotationsJobResponse> GetFindDuplicateAnnotationsJobAsync(global::Clarifai.Api.GetFindDuplicateAnnotationsJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFindDuplicateAnnotationsJob, null, options, request);
      }
      /// <summary>
      /// List all the annotations find duplicates jobs results
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse ListFindDuplicateAnnotationsJobs(global::Clarifai.Api.ListFindDuplicateAnnotationsJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFindDuplicateAnnotationsJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotations find duplicates jobs results
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse ListFindDuplicateAnnotationsJobs(global::Clarifai.Api.ListFindDuplicateAnnotationsJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFindDuplicateAnnotationsJobs, null, options, request);
      }
      /// <summary>
      /// List all the annotations find duplicates jobs results
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse> ListFindDuplicateAnnotationsJobsAsync(global::Clarifai.Api.ListFindDuplicateAnnotationsJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFindDuplicateAnnotationsJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotations find duplicates jobs results
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse> ListFindDuplicateAnnotationsJobsAsync(global::Clarifai.Api.ListFindDuplicateAnnotationsJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFindDuplicateAnnotationsJobs, null, options, request);
      }
      /// <summary>
      /// DeleteFindDuplicateAnnotationsJobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteFindDuplicateAnnotationsJobs(global::Clarifai.Api.DeleteFindDuplicateAnnotationsJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFindDuplicateAnnotationsJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteFindDuplicateAnnotationsJobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteFindDuplicateAnnotationsJobs(global::Clarifai.Api.DeleteFindDuplicateAnnotationsJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteFindDuplicateAnnotationsJobs, null, options, request);
      }
      /// <summary>
      /// DeleteFindDuplicateAnnotationsJobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteFindDuplicateAnnotationsJobsAsync(global::Clarifai.Api.DeleteFindDuplicateAnnotationsJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFindDuplicateAnnotationsJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteFindDuplicateAnnotationsJobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteFindDuplicateAnnotationsJobsAsync(global::Clarifai.Api.DeleteFindDuplicateAnnotationsJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteFindDuplicateAnnotationsJobs, null, options, request);
      }
      /// <summary>
      /// Increase the view metric for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostTrendingMetricsView(global::Clarifai.Api.PostTrendingMetricsViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTrendingMetricsView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Increase the view metric for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PostTrendingMetricsView(global::Clarifai.Api.PostTrendingMetricsViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostTrendingMetricsView, null, options, request);
      }
      /// <summary>
      /// Increase the view metric for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostTrendingMetricsViewAsync(global::Clarifai.Api.PostTrendingMetricsViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTrendingMetricsViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Increase the view metric for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostTrendingMetricsViewAsync(global::Clarifai.Api.PostTrendingMetricsViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostTrendingMetricsView, null, options, request);
      }
      /// <summary>
      /// List the view metrics for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTrendingMetricsViewResponse ListTrendingMetricsViews(global::Clarifai.Api.ListTrendingMetricsViewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTrendingMetricsViews(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the view metrics for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTrendingMetricsViewResponse ListTrendingMetricsViews(global::Clarifai.Api.ListTrendingMetricsViewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTrendingMetricsViews, null, options, request);
      }
      /// <summary>
      /// List the view metrics for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTrendingMetricsViewResponse> ListTrendingMetricsViewsAsync(global::Clarifai.Api.ListTrendingMetricsViewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTrendingMetricsViewsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the view metrics for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTrendingMetricsViewResponse> ListTrendingMetricsViewsAsync(global::Clarifai.Api.ListTrendingMetricsViewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTrendingMetricsViews, null, options, request);
      }
      /// <summary>
      /// Validates the ids (app and user supported), returns validation errors and recommendations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiIdValidationResponse PostIdValidation(global::Clarifai.Api.PostIdValidationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostIdValidation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validates the ids (app and user supported), returns validation errors and recommendations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiIdValidationResponse PostIdValidation(global::Clarifai.Api.PostIdValidationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostIdValidation, null, options, request);
      }
      /// <summary>
      /// Validates the ids (app and user supported), returns validation errors and recommendations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiIdValidationResponse> PostIdValidationAsync(global::Clarifai.Api.PostIdValidationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostIdValidationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validates the ids (app and user supported), returns validation errors and recommendations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiIdValidationResponse> PostIdValidationAsync(global::Clarifai.Api.PostIdValidationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostIdValidation, null, options, request);
      }
      /// <summary>
      /// List all the available tags for specified object_type grouped by category
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTagCategoryResponse ListTagCategories(global::Clarifai.Api.ListTagCategoriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTagCategories(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the available tags for specified object_type grouped by category
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTagCategoryResponse ListTagCategories(global::Clarifai.Api.ListTagCategoriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTagCategories, null, options, request);
      }
      /// <summary>
      /// List all the available tags for specified object_type grouped by category
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTagCategoryResponse> ListTagCategoriesAsync(global::Clarifai.Api.ListTagCategoriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTagCategoriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the available tags for specified object_type grouped by category
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTagCategoryResponse> ListTagCategoriesAsync(global::Clarifai.Api.ListTagCategoriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTagCategories, null, options, request);
      }
      /// <summary>
      /// List users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWebNotificationResponse ListWebNotifications(global::Clarifai.Api.ListWebNotificationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWebNotifications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWebNotificationResponse ListWebNotifications(global::Clarifai.Api.ListWebNotificationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWebNotifications, null, options, request);
      }
      /// <summary>
      /// List users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWebNotificationResponse> ListWebNotificationsAsync(global::Clarifai.Api.ListWebNotificationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWebNotificationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWebNotificationResponse> ListWebNotificationsAsync(global::Clarifai.Api.ListWebNotificationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWebNotifications, null, options, request);
      }
      /// <summary>
      /// Get a web notification
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWebNotificationResponse GetWebNotification(global::Clarifai.Api.GetWebNotificationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWebNotification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a web notification
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWebNotificationResponse GetWebNotification(global::Clarifai.Api.GetWebNotificationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWebNotification, null, options, request);
      }
      /// <summary>
      /// Get a web notification
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWebNotificationResponse> GetWebNotificationAsync(global::Clarifai.Api.GetWebNotificationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWebNotificationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a web notification
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWebNotificationResponse> GetWebNotificationAsync(global::Clarifai.Api.GetWebNotificationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWebNotification, null, options, request);
      }
      /// <summary>
      /// Update users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWebNotificationResponse PatchWebNotifications(global::Clarifai.Api.PatchWebNotificationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWebNotifications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWebNotificationResponse PatchWebNotifications(global::Clarifai.Api.PatchWebNotificationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchWebNotifications, null, options, request);
      }
      /// <summary>
      /// Update users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWebNotificationResponse> PatchWebNotificationsAsync(global::Clarifai.Api.PatchWebNotificationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWebNotificationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWebNotificationResponse> PatchWebNotificationsAsync(global::Clarifai.Api.PatchWebNotificationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchWebNotifications, null, options, request);
      }
      /// <summary>
      /// Delete users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWebNotifications(global::Clarifai.Api.DeleteWebNotificationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWebNotifications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWebNotifications(global::Clarifai.Api.DeleteWebNotificationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWebNotifications, null, options, request);
      }
      /// <summary>
      /// Delete users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWebNotificationsAsync(global::Clarifai.Api.DeleteWebNotificationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWebNotificationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete users web notifications
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWebNotificationsAsync(global::Clarifai.Api.DeleteWebNotificationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWebNotifications, null, options, request);
      }
      /// <summary>
      /// Get a specific module from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModuleResponse GetModule(global::Clarifai.Api.GetModuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific module from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModuleResponse GetModule(global::Clarifai.Api.GetModuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModule, null, options, request);
      }
      /// <summary>
      /// Get a specific module from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModuleResponse> GetModuleAsync(global::Clarifai.Api.GetModuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific module from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModuleResponse> GetModuleAsync(global::Clarifai.Api.GetModuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModule, null, options, request);
      }
      /// <summary>
      /// List all the modules in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModuleResponse ListModules(global::Clarifai.Api.ListModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the modules in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModuleResponse ListModules(global::Clarifai.Api.ListModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModules, null, options, request);
      }
      /// <summary>
      /// List all the modules in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> ListModulesAsync(global::Clarifai.Api.ListModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the modules in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> ListModulesAsync(global::Clarifai.Api.ListModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModules, null, options, request);
      }
      /// <summary>
      /// Add a modules to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModuleResponse PostModules(global::Clarifai.Api.PostModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a modules to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModuleResponse PostModules(global::Clarifai.Api.PostModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModules, null, options, request);
      }
      /// <summary>
      /// Add a modules to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> PostModulesAsync(global::Clarifai.Api.PostModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a modules to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> PostModulesAsync(global::Clarifai.Api.PostModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModules, null, options, request);
      }
      /// <summary>
      /// Patch one or more modules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModuleResponse PatchModules(global::Clarifai.Api.PatchModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more modules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModuleResponse PatchModules(global::Clarifai.Api.PatchModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModules, null, options, request);
      }
      /// <summary>
      /// Patch one or more modules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> PatchModulesAsync(global::Clarifai.Api.PatchModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more modules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> PatchModulesAsync(global::Clarifai.Api.PatchModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModules, null, options, request);
      }
      /// <summary>
      /// Delete multiple modules in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModules(global::Clarifai.Api.DeleteModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple modules in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModules(global::Clarifai.Api.DeleteModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModules, null, options, request);
      }
      /// <summary>
      /// Delete multiple modules in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModulesAsync(global::Clarifai.Api.DeleteModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple modules in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModulesAsync(global::Clarifai.Api.DeleteModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModules, null, options, request);
      }
      /// <summary>
      /// Get a specific module version for a module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModuleVersionResponse GetModuleVersion(global::Clarifai.Api.GetModuleVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific module version for a module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModuleVersionResponse GetModuleVersion(global::Clarifai.Api.GetModuleVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModuleVersion, null, options, request);
      }
      /// <summary>
      /// Get a specific module version for a module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModuleVersionResponse> GetModuleVersionAsync(global::Clarifai.Api.GetModuleVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific module version for a module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModuleVersionResponse> GetModuleVersionAsync(global::Clarifai.Api.GetModuleVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModuleVersion, null, options, request);
      }
      /// <summary>
      /// List all the modules versions for a given module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModuleVersionResponse ListModuleVersions(global::Clarifai.Api.ListModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the modules versions for a given module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModuleVersionResponse ListModuleVersions(global::Clarifai.Api.ListModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModuleVersions, null, options, request);
      }
      /// <summary>
      /// List all the modules versions for a given module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleVersionResponse> ListModuleVersionsAsync(global::Clarifai.Api.ListModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the modules versions for a given module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleVersionResponse> ListModuleVersionsAsync(global::Clarifai.Api.ListModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModuleVersions, null, options, request);
      }
      /// <summary>
      /// Create a new module version to trigger training of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModuleVersionResponse PostModuleVersions(global::Clarifai.Api.PostModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new module version to trigger training of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModuleVersionResponse PostModuleVersions(global::Clarifai.Api.PostModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModuleVersions, null, options, request);
      }
      /// <summary>
      /// Create a new module version to trigger training of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleVersionResponse> PostModuleVersionsAsync(global::Clarifai.Api.PostModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new module version to trigger training of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleVersionResponse> PostModuleVersionsAsync(global::Clarifai.Api.PostModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModuleVersions, null, options, request);
      }
      /// <summary>
      /// Delete a multiple module version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModuleVersions(global::Clarifai.Api.DeleteModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a multiple module version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModuleVersions(global::Clarifai.Api.DeleteModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModuleVersions, null, options, request);
      }
      /// <summary>
      /// Delete a multiple module version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModuleVersionsAsync(global::Clarifai.Api.DeleteModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a multiple module version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModuleVersionsAsync(global::Clarifai.Api.DeleteModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModuleVersions, null, options, request);
      }
      /// <summary>
      /// Get installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInstalledModuleVersionResponse GetInstalledModuleVersion(global::Clarifai.Api.GetInstalledModuleVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstalledModuleVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInstalledModuleVersionResponse GetInstalledModuleVersion(global::Clarifai.Api.GetInstalledModuleVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstalledModuleVersion, null, options, request);
      }
      /// <summary>
      /// Get installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInstalledModuleVersionResponse> GetInstalledModuleVersionAsync(global::Clarifai.Api.GetInstalledModuleVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstalledModuleVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInstalledModuleVersionResponse> GetInstalledModuleVersionAsync(global::Clarifai.Api.GetInstalledModuleVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstalledModuleVersion, null, options, request);
      }
      /// <summary>
      /// List installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInstalledModuleVersionResponse ListInstalledModuleVersions(global::Clarifai.Api.ListInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstalledModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInstalledModuleVersionResponse ListInstalledModuleVersions(global::Clarifai.Api.ListInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// List installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInstalledModuleVersionResponse> ListInstalledModuleVersionsAsync(global::Clarifai.Api.ListInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstalledModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInstalledModuleVersionResponse> ListInstalledModuleVersionsAsync(global::Clarifai.Api.ListInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInstalledModuleVersionResponse PostInstalledModuleVersions(global::Clarifai.Api.PostInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInstalledModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInstalledModuleVersionResponse PostInstalledModuleVersions(global::Clarifai.Api.PostInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInstalledModuleVersionResponse> PostInstalledModuleVersionsAsync(global::Clarifai.Api.PostInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInstalledModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInstalledModuleVersionResponse> PostInstalledModuleVersionsAsync(global::Clarifai.Api.PostInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
      /// in the url.
      /// This cleaned up any associated caller keys so needs the Keys_Delete scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInstalledModuleVersions(global::Clarifai.Api.DeleteInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInstalledModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
      /// in the url.
      /// This cleaned up any associated caller keys so needs the Keys_Delete scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInstalledModuleVersions(global::Clarifai.Api.DeleteInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
      /// in the url.
      /// This cleaned up any associated caller keys so needs the Keys_Delete scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInstalledModuleVersionsAsync(global::Clarifai.Api.DeleteInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInstalledModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
      /// in the url.
      /// This cleaned up any associated caller keys so needs the Keys_Delete scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInstalledModuleVersionsAsync(global::Clarifai.Api.DeleteInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// Assign a key that the caller owns to be used when accessing this installed module version
      /// If this endpoint is called with a different key then it overwrites what is there.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleKeyResponse PostInstalledModuleVersionsKey(global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInstalledModuleVersionsKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Assign a key that the caller owns to be used when accessing this installed module version
      /// If this endpoint is called with a different key then it overwrites what is there.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleKeyResponse PostInstalledModuleVersionsKey(global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInstalledModuleVersionsKey, null, options, request);
      }
      /// <summary>
      /// Assign a key that the caller owns to be used when accessing this installed module version
      /// If this endpoint is called with a different key then it overwrites what is there.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleKeyResponse> PostInstalledModuleVersionsKeyAsync(global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInstalledModuleVersionsKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Assign a key that the caller owns to be used when accessing this installed module version
      /// If this endpoint is called with a different key then it overwrites what is there.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleKeyResponse> PostInstalledModuleVersionsKeyAsync(global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInstalledModuleVersionsKey, null, options, request);
      }
      /// <summary>
      /// Perform bulk operations on a list of inputs based on input source.
      /// Operation include add, update, delete of concepts, metadata and geo data.
      /// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse PostBulkOperations(global::Clarifai.Api.PostBulkOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostBulkOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Perform bulk operations on a list of inputs based on input source.
      /// Operation include add, update, delete of concepts, metadata and geo data.
      /// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse PostBulkOperations(global::Clarifai.Api.PostBulkOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostBulkOperations, null, options, request);
      }
      /// <summary>
      /// Perform bulk operations on a list of inputs based on input source.
      /// Operation include add, update, delete of concepts, metadata and geo data.
      /// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> PostBulkOperationsAsync(global::Clarifai.Api.PostBulkOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostBulkOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Perform bulk operations on a list of inputs based on input source.
      /// Operation include add, update, delete of concepts, metadata and geo data.
      /// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> PostBulkOperationsAsync(global::Clarifai.Api.PostBulkOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostBulkOperations, null, options, request);
      }
      /// <summary>
      /// List all the bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse ListBulkOperations(global::Clarifai.Api.ListBulkOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBulkOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse ListBulkOperations(global::Clarifai.Api.ListBulkOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBulkOperations, null, options, request);
      }
      /// <summary>
      /// List all the bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> ListBulkOperationsAsync(global::Clarifai.Api.ListBulkOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBulkOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> ListBulkOperationsAsync(global::Clarifai.Api.ListBulkOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBulkOperations, null, options, request);
      }
      /// <summary>
      /// Get the bulk operation details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleBulkOperationsResponse GetBulkOperation(global::Clarifai.Api.GetBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBulkOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the bulk operation details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleBulkOperationsResponse GetBulkOperation(global::Clarifai.Api.GetBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBulkOperation, null, options, request);
      }
      /// <summary>
      /// Get the bulk operation details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleBulkOperationsResponse> GetBulkOperationAsync(global::Clarifai.Api.GetBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBulkOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the bulk operation details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleBulkOperationsResponse> GetBulkOperationAsync(global::Clarifai.Api.GetBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBulkOperation, null, options, request);
      }
      /// <summary>
      /// Cancel one or more bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse CancelBulkOperations(global::Clarifai.Api.CancelBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelBulkOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel one or more bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse CancelBulkOperations(global::Clarifai.Api.CancelBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelBulkOperations, null, options, request);
      }
      /// <summary>
      /// Cancel one or more bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> CancelBulkOperationsAsync(global::Clarifai.Api.CancelBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelBulkOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel one or more bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> CancelBulkOperationsAsync(global::Clarifai.Api.CancelBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelBulkOperations, null, options, request);
      }
      /// <summary>
      /// delete one or more terminated bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteBulkOperations(global::Clarifai.Api.DeleteBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBulkOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// delete one or more terminated bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteBulkOperations(global::Clarifai.Api.DeleteBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteBulkOperations, null, options, request);
      }
      /// <summary>
      /// delete one or more terminated bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteBulkOperationsAsync(global::Clarifai.Api.DeleteBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBulkOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// delete one or more terminated bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteBulkOperationsAsync(global::Clarifai.Api.DeleteBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteBulkOperations, null, options, request);
      }
      /// <summary>
      /// Get a specific job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleDatasetInputsSearchAddJobResponse GetDatasetInputsSearchAddJob(global::Clarifai.Api.GetDatasetInputsSearchAddJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetInputsSearchAddJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleDatasetInputsSearchAddJobResponse GetDatasetInputsSearchAddJob(global::Clarifai.Api.GetDatasetInputsSearchAddJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatasetInputsSearchAddJob, null, options, request);
      }
      /// <summary>
      /// Get a specific job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetInputsSearchAddJobResponse> GetDatasetInputsSearchAddJobAsync(global::Clarifai.Api.GetDatasetInputsSearchAddJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetInputsSearchAddJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific job.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetInputsSearchAddJobResponse> GetDatasetInputsSearchAddJobAsync(global::Clarifai.Api.GetDatasetInputsSearchAddJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatasetInputsSearchAddJob, null, options, request);
      }
      /// <summary>
      /// List next non-labeled and unassigned inputs from task's dataset
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse ListNextTaskAssignments(global::Clarifai.Api.ListNextTaskAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNextTaskAssignments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List next non-labeled and unassigned inputs from task's dataset
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse ListNextTaskAssignments(global::Clarifai.Api.ListNextTaskAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNextTaskAssignments, null, options, request);
      }
      /// <summary>
      /// List next non-labeled and unassigned inputs from task's dataset
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListNextTaskAssignmentsAsync(global::Clarifai.Api.ListNextTaskAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNextTaskAssignmentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List next non-labeled and unassigned inputs from task's dataset
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListNextTaskAssignmentsAsync(global::Clarifai.Api.ListNextTaskAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNextTaskAssignments, null, options, request);
      }
      /// <summary>
      /// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PutTaskAssignments(global::Clarifai.Api.PutTaskAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutTaskAssignments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse PutTaskAssignments(global::Clarifai.Api.PutTaskAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutTaskAssignments, null, options, request);
      }
      /// <summary>
      /// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PutTaskAssignmentsAsync(global::Clarifai.Api.PutTaskAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutTaskAssignmentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PutTaskAssignmentsAsync(global::Clarifai.Api.PutTaskAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutTaskAssignments, null, options, request);
      }
      /// <summary>
      /// PostWaitlistEmails adds new e-mail addresses to a feature waiting list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWaitlistEmailResponse PostWaitlistEmails(global::Clarifai.Api.PostWaitlistEmailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWaitlistEmails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostWaitlistEmails adds new e-mail addresses to a feature waiting list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWaitlistEmailResponse PostWaitlistEmails(global::Clarifai.Api.PostWaitlistEmailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWaitlistEmails, null, options, request);
      }
      /// <summary>
      /// PostWaitlistEmails adds new e-mail addresses to a feature waiting list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWaitlistEmailResponse> PostWaitlistEmailsAsync(global::Clarifai.Api.PostWaitlistEmailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWaitlistEmailsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostWaitlistEmails adds new e-mail addresses to a feature waiting list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWaitlistEmailResponse> PostWaitlistEmailsAsync(global::Clarifai.Api.PostWaitlistEmailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWaitlistEmails, null, options, request);
      }
      /// <summary>
      /// GetSampledPredictResults get sampled prediction metrics by model id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSampledPredictMetricsResponse GetSampledPredictMetrics(global::Clarifai.Api.GetSampledPredictMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSampledPredictMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSampledPredictResults get sampled prediction metrics by model id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSampledPredictMetricsResponse GetSampledPredictMetrics(global::Clarifai.Api.GetSampledPredictMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSampledPredictMetrics, null, options, request);
      }
      /// <summary>
      /// GetSampledPredictResults get sampled prediction metrics by model id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSampledPredictMetricsResponse> GetSampledPredictMetricsAsync(global::Clarifai.Api.GetSampledPredictMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSampledPredictMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSampledPredictResults get sampled prediction metrics by model id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSampledPredictMetricsResponse> GetSampledPredictMetricsAsync(global::Clarifai.Api.GetSampledPredictMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSampledPredictMetrics, null, options, request);
      }
      /// <summary>
      /// Create a job to add inputs from a cloud storage to an app on the clarifai platform
      /// This is an Asynchronous process. Use ListInputsAddJobs or GetInputsJob to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputsAddJobResponse PostInputsAddJobs(global::Clarifai.Api.PostInputsAddJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsAddJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a job to add inputs from a cloud storage to an app on the clarifai platform
      /// This is an Asynchronous process. Use ListInputsAddJobs or GetInputsJob to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputsAddJobResponse PostInputsAddJobs(global::Clarifai.Api.PostInputsAddJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputsAddJobs, null, options, request);
      }
      /// <summary>
      /// Create a job to add inputs from a cloud storage to an app on the clarifai platform
      /// This is an Asynchronous process. Use ListInputsAddJobs or GetInputsJob to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsAddJobResponse> PostInputsAddJobsAsync(global::Clarifai.Api.PostInputsAddJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsAddJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a job to add inputs from a cloud storage to an app on the clarifai platform
      /// This is an Asynchronous process. Use ListInputsAddJobs or GetInputsJob to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsAddJobResponse> PostInputsAddJobsAsync(global::Clarifai.Api.PostInputsAddJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputsAddJobs, null, options, request);
      }
      /// <summary>
      /// List all the inputs add jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputsAddJobResponse ListInputsAddJobs(global::Clarifai.Api.ListInputsAddJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputsAddJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs add jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputsAddJobResponse ListInputsAddJobs(global::Clarifai.Api.ListInputsAddJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInputsAddJobs, null, options, request);
      }
      /// <summary>
      /// List all the inputs add jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsAddJobResponse> ListInputsAddJobsAsync(global::Clarifai.Api.ListInputsAddJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputsAddJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs add jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsAddJobResponse> ListInputsAddJobsAsync(global::Clarifai.Api.ListInputsAddJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInputsAddJobs, null, options, request);
      }
      /// <summary>
      /// Get the input add job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputsAddJobResponse GetInputsAddJob(global::Clarifai.Api.GetInputsAddJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputsAddJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the input add job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputsAddJobResponse GetInputsAddJob(global::Clarifai.Api.GetInputsAddJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInputsAddJob, null, options, request);
      }
      /// <summary>
      /// Get the input add job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputsAddJobResponse> GetInputsAddJobAsync(global::Clarifai.Api.GetInputsAddJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputsAddJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the input add job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputsAddJobResponse> GetInputsAddJobAsync(global::Clarifai.Api.GetInputsAddJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInputsAddJob, null, options, request);
      }
      /// <summary>
      /// cancel the input add job by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputsAddJobResponse CancelInputsAddJob(global::Clarifai.Api.CancelInputsAddJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelInputsAddJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// cancel the input add job by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputsAddJobResponse CancelInputsAddJob(global::Clarifai.Api.CancelInputsAddJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelInputsAddJob, null, options, request);
      }
      /// <summary>
      /// cancel the input add job by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputsAddJobResponse> CancelInputsAddJobAsync(global::Clarifai.Api.CancelInputsAddJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelInputsAddJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// cancel the input add job by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputsAddJobResponse> CancelInputsAddJobAsync(global::Clarifai.Api.CancelInputsAddJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelInputsAddJob, null, options, request);
      }
      public virtual global::Clarifai.Api.MultiUploadResponse PostUploads(global::Clarifai.Api.PostUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUploads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.MultiUploadResponse PostUploads(global::Clarifai.Api.PostUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostUploads, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUploadResponse> PostUploadsAsync(global::Clarifai.Api.PostUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUploadsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUploadResponse> PostUploadsAsync(global::Clarifai.Api.PostUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostUploads, null, options, request);
      }
      public virtual global::Clarifai.Api.SingleUploadResponse PutUploadContentParts(global::Clarifai.Api.PutUploadContentPartsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutUploadContentParts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.SingleUploadResponse PutUploadContentParts(global::Clarifai.Api.PutUploadContentPartsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutUploadContentParts, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUploadResponse> PutUploadContentPartsAsync(global::Clarifai.Api.PutUploadContentPartsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutUploadContentPartsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUploadResponse> PutUploadContentPartsAsync(global::Clarifai.Api.PutUploadContentPartsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutUploadContentParts, null, options, request);
      }
      public virtual global::Clarifai.Api.SingleUploadResponse GetUpload(global::Clarifai.Api.GetUploadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUpload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.SingleUploadResponse GetUpload(global::Clarifai.Api.GetUploadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUpload, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUploadResponse> GetUploadAsync(global::Clarifai.Api.GetUploadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUploadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUploadResponse> GetUploadAsync(global::Clarifai.Api.GetUploadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUpload, null, options, request);
      }
      public virtual global::Clarifai.Api.MultiUploadResponse ListUploads(global::Clarifai.Api.ListUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUploads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.MultiUploadResponse ListUploads(global::Clarifai.Api.ListUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUploads, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUploadResponse> ListUploadsAsync(global::Clarifai.Api.ListUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUploadsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUploadResponse> ListUploadsAsync(global::Clarifai.Api.ListUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUploads, null, options, request);
      }
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteUploads(global::Clarifai.Api.DeleteUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUploads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteUploads(global::Clarifai.Api.DeleteUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteUploads, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteUploadsAsync(global::Clarifai.Api.DeleteUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUploadsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteUploadsAsync(global::Clarifai.Api.DeleteUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteUploads, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override V2Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new V2Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(V2Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Echo, serviceImpl.Echo)
          .AddMethod(__Method_ListConceptRelations, serviceImpl.ListConceptRelations)
          .AddMethod(__Method_PostConceptRelations, serviceImpl.PostConceptRelations)
          .AddMethod(__Method_DeleteConceptRelations, serviceImpl.DeleteConceptRelations)
          .AddMethod(__Method_GetConceptCounts, serviceImpl.GetConceptCounts)
          .AddMethod(__Method_GetConcept, serviceImpl.GetConcept)
          .AddMethod(__Method_ListConcepts, serviceImpl.ListConcepts)
          .AddMethod(__Method_ListModelConcepts, serviceImpl.ListModelConcepts)
          .AddMethod(__Method_PostConceptsSearches, serviceImpl.PostConceptsSearches)
          .AddMethod(__Method_PostConcepts, serviceImpl.PostConcepts)
          .AddMethod(__Method_PatchConcepts, serviceImpl.PatchConcepts)
          .AddMethod(__Method_GetVocab, serviceImpl.GetVocab)
          .AddMethod(__Method_ListVocabs, serviceImpl.ListVocabs)
          .AddMethod(__Method_PostVocabs, serviceImpl.PostVocabs)
          .AddMethod(__Method_PatchVocabs, serviceImpl.PatchVocabs)
          .AddMethod(__Method_DeleteVocab, serviceImpl.DeleteVocab)
          .AddMethod(__Method_DeleteVocabs, serviceImpl.DeleteVocabs)
          .AddMethod(__Method_ListVocabConcepts, serviceImpl.ListVocabConcepts)
          .AddMethod(__Method_PostVocabConcepts, serviceImpl.PostVocabConcepts)
          .AddMethod(__Method_DeleteVocabConcept, serviceImpl.DeleteVocabConcept)
          .AddMethod(__Method_DeleteVocabConcepts, serviceImpl.DeleteVocabConcepts)
          .AddMethod(__Method_GetConceptLanguage, serviceImpl.GetConceptLanguage)
          .AddMethod(__Method_ListConceptLanguages, serviceImpl.ListConceptLanguages)
          .AddMethod(__Method_PostConceptLanguages, serviceImpl.PostConceptLanguages)
          .AddMethod(__Method_PatchConceptLanguages, serviceImpl.PatchConceptLanguages)
          .AddMethod(__Method_ListConceptReferences, serviceImpl.ListConceptReferences)
          .AddMethod(__Method_ListKnowledgeGraphs, serviceImpl.ListKnowledgeGraphs)
          .AddMethod(__Method_PostKnowledgeGraphs, serviceImpl.PostKnowledgeGraphs)
          .AddMethod(__Method_PostConceptMappingJobs, serviceImpl.PostConceptMappingJobs)
          .AddMethod(__Method_ListConceptMappings, serviceImpl.ListConceptMappings)
          .AddMethod(__Method_PostConceptMappings, serviceImpl.PostConceptMappings)
          .AddMethod(__Method_GetAnnotation, serviceImpl.GetAnnotation)
          .AddMethod(__Method_ListAnnotations, serviceImpl.ListAnnotations)
          .AddMethod(__Method_PostAnnotations, serviceImpl.PostAnnotations)
          .AddMethod(__Method_PatchAnnotations, serviceImpl.PatchAnnotations)
          .AddMethod(__Method_PatchAnnotationsStatus, serviceImpl.PatchAnnotationsStatus)
          .AddMethod(__Method_DeleteAnnotation, serviceImpl.DeleteAnnotation)
          .AddMethod(__Method_DeleteAnnotations, serviceImpl.DeleteAnnotations)
          .AddMethod(__Method_PatchAnnotationsSearches, serviceImpl.PatchAnnotationsSearches)
          .AddMethod(__Method_PostAnnotationsSearches, serviceImpl.PostAnnotationsSearches)
          .AddMethod(__Method_GetInputCount, serviceImpl.GetInputCount)
          .AddMethod(__Method_StreamInputs, serviceImpl.StreamInputs)
          .AddMethod(__Method_GetInputSamples, serviceImpl.GetInputSamples)
          .AddMethod(__Method_GetInput, serviceImpl.GetInput)
          .AddMethod(__Method_ListInputs, serviceImpl.ListInputs)
          .AddMethod(__Method_PostInputs, serviceImpl.PostInputs)
          .AddMethod(__Method_PostInputsFile, serviceImpl.PostInputsFile)
          .AddMethod(__Method_PostInputsNiFi, serviceImpl.PostInputsNiFi)
          .AddMethod(__Method_PostInputsDocument, serviceImpl.PostInputsDocument)
          .AddMethod(__Method_PatchInputs, serviceImpl.PatchInputs)
          .AddMethod(__Method_DeleteInput, serviceImpl.DeleteInput)
          .AddMethod(__Method_DeleteInputs, serviceImpl.DeleteInputs)
          .AddMethod(__Method_PatchInputsSearches, serviceImpl.PatchInputsSearches)
          .AddMethod(__Method_PostInputsSearches, serviceImpl.PostInputsSearches)
          .AddMethod(__Method_PostModelOutputs, serviceImpl.PostModelOutputs)
          .AddMethod(__Method_ListDatasets, serviceImpl.ListDatasets)
          .AddMethod(__Method_GetDataset, serviceImpl.GetDataset)
          .AddMethod(__Method_PostDatasets, serviceImpl.PostDatasets)
          .AddMethod(__Method_PatchDatasets, serviceImpl.PatchDatasets)
          .AddMethod(__Method_PatchDatasetIds, serviceImpl.PatchDatasetIds)
          .AddMethod(__Method_DeleteDatasets, serviceImpl.DeleteDatasets)
          .AddMethod(__Method_ListDatasetInputs, serviceImpl.ListDatasetInputs)
          .AddMethod(__Method_GetDatasetInput, serviceImpl.GetDatasetInput)
          .AddMethod(__Method_PostDatasetInputs, serviceImpl.PostDatasetInputs)
          .AddMethod(__Method_DeleteDatasetInputs, serviceImpl.DeleteDatasetInputs)
          .AddMethod(__Method_ListDatasetVersions, serviceImpl.ListDatasetVersions)
          .AddMethod(__Method_GetDatasetVersion, serviceImpl.GetDatasetVersion)
          .AddMethod(__Method_ListDatasetVersionMetricsGroups, serviceImpl.ListDatasetVersionMetricsGroups)
          .AddMethod(__Method_PostDatasetVersions, serviceImpl.PostDatasetVersions)
          .AddMethod(__Method_PatchDatasetVersions, serviceImpl.PatchDatasetVersions)
          .AddMethod(__Method_DeleteDatasetVersions, serviceImpl.DeleteDatasetVersions)
          .AddMethod(__Method_PutDatasetVersionExports, serviceImpl.PutDatasetVersionExports)
          .AddMethod(__Method_GetModelType, serviceImpl.GetModelType)
          .AddMethod(__Method_ListOpenSourceLicenses, serviceImpl.ListOpenSourceLicenses)
          .AddMethod(__Method_ListModelTypes, serviceImpl.ListModelTypes)
          .AddMethod(__Method_GetModel, serviceImpl.GetModel)
          .AddMethod(__Method_GetModelOutputInfo, serviceImpl.GetModelOutputInfo)
          .AddMethod(__Method_ListModels, serviceImpl.ListModels)
          .AddMethod(__Method_PostModelsSearches, serviceImpl.PostModelsSearches)
          .AddMethod(__Method_PostModels, serviceImpl.PostModels)
          .AddMethod(__Method_PatchModels, serviceImpl.PatchModels)
          .AddMethod(__Method_PatchModelIds, serviceImpl.PatchModelIds)
          .AddMethod(__Method_DeleteModel, serviceImpl.DeleteModel)
          .AddMethod(__Method_DeleteModels, serviceImpl.DeleteModels)
          .AddMethod(__Method_PatchModelCheckConsents, serviceImpl.PatchModelCheckConsents)
          .AddMethod(__Method_PatchModelToolkits, serviceImpl.PatchModelToolkits)
          .AddMethod(__Method_PatchModelUseCases, serviceImpl.PatchModelUseCases)
          .AddMethod(__Method_PatchModelLanguages, serviceImpl.PatchModelLanguages)
          .AddMethod(__Method_ListModelInputs, serviceImpl.ListModelInputs)
          .AddMethod(__Method_GetModelVersion, serviceImpl.GetModelVersion)
          .AddMethod(__Method_ListModelVersions, serviceImpl.ListModelVersions)
          .AddMethod(__Method_PostWorkflowVersionsUnPublish, serviceImpl.PostWorkflowVersionsUnPublish)
          .AddMethod(__Method_PostWorkflowVersionsPublish, serviceImpl.PostWorkflowVersionsPublish)
          .AddMethod(__Method_PostModelVersionsPublish, serviceImpl.PostModelVersionsPublish)
          .AddMethod(__Method_PostModelVersionsUnPublish, serviceImpl.PostModelVersionsUnPublish)
          .AddMethod(__Method_PostModelVersions, serviceImpl.PostModelVersions)
          .AddMethod(__Method_PatchModelVersions, serviceImpl.PatchModelVersions)
          .AddMethod(__Method_DeleteModelVersion, serviceImpl.DeleteModelVersion)
          .AddMethod(__Method_GetModelVersionMetrics, serviceImpl.GetModelVersionMetrics)
          .AddMethod(__Method_PostModelVersionMetrics, serviceImpl.PostModelVersionMetrics)
          .AddMethod(__Method_ListModelReferences, serviceImpl.ListModelReferences)
          .AddMethod(__Method_PostModelReferences, serviceImpl.PostModelReferences)
          .AddMethod(__Method_DeleteModelReferences, serviceImpl.DeleteModelReferences)
          .AddMethod(__Method_GetModelVersionInputExample, serviceImpl.GetModelVersionInputExample)
          .AddMethod(__Method_ListModelVersionInputExamples, serviceImpl.ListModelVersionInputExamples)
          .AddMethod(__Method_PostModelVersionInputExamples, serviceImpl.PostModelVersionInputExamples)
          .AddMethod(__Method_DeleteModelVersionInputExamples, serviceImpl.DeleteModelVersionInputExamples)
          .AddMethod(__Method_PostModelStars, serviceImpl.PostModelStars)
          .AddMethod(__Method_DeleteModelStars, serviceImpl.DeleteModelStars)
          .AddMethod(__Method_PostUserStars, serviceImpl.PostUserStars)
          .AddMethod(__Method_DeleteUserStars, serviceImpl.DeleteUserStars)
          .AddMethod(__Method_PostWorkflowStars, serviceImpl.PostWorkflowStars)
          .AddMethod(__Method_DeleteWorkflowStars, serviceImpl.DeleteWorkflowStars)
          .AddMethod(__Method_PostAppStars, serviceImpl.PostAppStars)
          .AddMethod(__Method_DeleteAppStars, serviceImpl.DeleteAppStars)
          .AddMethod(__Method_GetWorkflow, serviceImpl.GetWorkflow)
          .AddMethod(__Method_ListWorkflows, serviceImpl.ListWorkflows)
          .AddMethod(__Method_ListPublicWorkflows, serviceImpl.ListPublicWorkflows)
          .AddMethod(__Method_PostWorkflows, serviceImpl.PostWorkflows)
          .AddMethod(__Method_PatchWorkflows, serviceImpl.PatchWorkflows)
          .AddMethod(__Method_PatchWorkflowIds, serviceImpl.PatchWorkflowIds)
          .AddMethod(__Method_DeleteWorkflow, serviceImpl.DeleteWorkflow)
          .AddMethod(__Method_DeleteWorkflows, serviceImpl.DeleteWorkflows)
          .AddMethod(__Method_PostWorkflowResults, serviceImpl.PostWorkflowResults)
          .AddMethod(__Method_PostWorkflowResultsSimilarity, serviceImpl.PostWorkflowResultsSimilarity)
          .AddMethod(__Method_ListWorkflowVersions, serviceImpl.ListWorkflowVersions)
          .AddMethod(__Method_GetWorkflowVersion, serviceImpl.GetWorkflowVersion)
          .AddMethod(__Method_DeleteWorkflowVersions, serviceImpl.DeleteWorkflowVersions)
          .AddMethod(__Method_PatchWorkflowVersions, serviceImpl.PatchWorkflowVersions)
          .AddMethod(__Method_PostWorkflowMetrics, serviceImpl.PostWorkflowMetrics)
          .AddMethod(__Method_GetWorkflowMetrics, serviceImpl.GetWorkflowMetrics)
          .AddMethod(__Method_GetWorkflowNodeMetrics, serviceImpl.GetWorkflowNodeMetrics)
          .AddMethod(__Method_ListWorkflowMetrics, serviceImpl.ListWorkflowMetrics)
          .AddMethod(__Method_DeleteWorkflowMetrics, serviceImpl.DeleteWorkflowMetrics)
          .AddMethod(__Method_GetKey, serviceImpl.GetKey)
          .AddMethod(__Method_ListKeys, serviceImpl.ListKeys)
          .AddMethod(__Method_ListAppKeys, serviceImpl.ListAppKeys)
          .AddMethod(__Method_DeleteKey, serviceImpl.DeleteKey)
          .AddMethod(__Method_PostKeys, serviceImpl.PostKeys)
          .AddMethod(__Method_PatchKeys, serviceImpl.PatchKeys)
          .AddMethod(__Method_MyScopes, serviceImpl.MyScopes)
          .AddMethod(__Method_MyScopesUser, serviceImpl.MyScopesUser)
          .AddMethod(__Method_MyScopesRoot, serviceImpl.MyScopesRoot)
          .AddMethod(__Method_ListScopes, serviceImpl.ListScopes)
          .AddMethod(__Method_GetApp, serviceImpl.GetApp)
          .AddMethod(__Method_ListApps, serviceImpl.ListApps)
          .AddMethod(__Method_DeleteApp, serviceImpl.DeleteApp)
          .AddMethod(__Method_PostApps, serviceImpl.PostApps)
          .AddMethod(__Method_PatchApps, serviceImpl.PatchApps)
          .AddMethod(__Method_PatchAppsIds, serviceImpl.PatchAppsIds)
          .AddMethod(__Method_PatchApp, serviceImpl.PatchApp)
          .AddMethod(__Method_PatchAppOwner, serviceImpl.PatchAppOwner)
          .AddMethod(__Method_PostAppsSearches, serviceImpl.PostAppsSearches)
          .AddMethod(__Method_GetUser, serviceImpl.GetUser)
          .AddMethod(__Method_ListUsers, serviceImpl.ListUsers)
          .AddMethod(__Method_PostUserConsent, serviceImpl.PostUserConsent)
          .AddMethod(__Method_PatchUser, serviceImpl.PatchUser)
          .AddMethod(__Method_PostUserAccess, serviceImpl.PostUserAccess)
          .AddMethod(__Method_GetUserAccess, serviceImpl.GetUserAccess)
          .AddMethod(__Method_PostEmails, serviceImpl.PostEmails)
          .AddMethod(__Method_ListEmails, serviceImpl.ListEmails)
          .AddMethod(__Method_PostResendVerifyEmail, serviceImpl.PostResendVerifyEmail)
          .AddMethod(__Method_DeleteEmail, serviceImpl.DeleteEmail)
          .AddMethod(__Method_PostPrimaryEmail, serviceImpl.PostPrimaryEmail)
          .AddMethod(__Method_PostValidatePassword, serviceImpl.PostValidatePassword)
          .AddMethod(__Method_ListGlobalPasswordPolicies, serviceImpl.ListGlobalPasswordPolicies)
          .AddMethod(__Method_ListPasswordPolicies, serviceImpl.ListPasswordPolicies)
          .AddMethod(__Method_PostPasswordPolicies, serviceImpl.PostPasswordPolicies)
          .AddMethod(__Method_PatchPasswordPolicies, serviceImpl.PatchPasswordPolicies)
          .AddMethod(__Method_DeletePasswordPolicies, serviceImpl.DeletePasswordPolicies)
          .AddMethod(__Method_GetUserFeatureConfig, serviceImpl.GetUserFeatureConfig)
          .AddMethod(__Method_PostOrganizations, serviceImpl.PostOrganizations)
          .AddMethod(__Method_ListUsersOrganizations, serviceImpl.ListUsersOrganizations)
          .AddMethod(__Method_ListOrganizations, serviceImpl.ListOrganizations)
          .AddMethod(__Method_GetOrganization, serviceImpl.GetOrganization)
          .AddMethod(__Method_PatchOrganization, serviceImpl.PatchOrganization)
          .AddMethod(__Method_DeleteOrganization, serviceImpl.DeleteOrganization)
          .AddMethod(__Method_ListOrganizationMembers, serviceImpl.ListOrganizationMembers)
          .AddMethod(__Method_ListOrganizationAppMembers, serviceImpl.ListOrganizationAppMembers)
          .AddMethod(__Method_PostOrganizationMember, serviceImpl.PostOrganizationMember)
          .AddMethod(__Method_PatchOrganizationMember, serviceImpl.PatchOrganizationMember)
          .AddMethod(__Method_DeleteOrganizationMember, serviceImpl.DeleteOrganizationMember)
          .AddMethod(__Method_PostOrganizationInvitations, serviceImpl.PostOrganizationInvitations)
          .AddMethod(__Method_PatchOrganizationInvitations, serviceImpl.PatchOrganizationInvitations)
          .AddMethod(__Method_ListOrganizationInvitations, serviceImpl.ListOrganizationInvitations)
          .AddMethod(__Method_GetOrganizationInvitation, serviceImpl.GetOrganizationInvitation)
          .AddMethod(__Method_PostDeclineOrganizationInvitation, serviceImpl.PostDeclineOrganizationInvitation)
          .AddMethod(__Method_PostAcceptOrganizationInvitation, serviceImpl.PostAcceptOrganizationInvitation)
          .AddMethod(__Method_GetOrganizationInvitationPublic, serviceImpl.GetOrganizationInvitationPublic)
          .AddMethod(__Method_DeleteRequestingUserFromOrganization, serviceImpl.DeleteRequestingUserFromOrganization)
          .AddMethod(__Method_PostIdentityProviders, serviceImpl.PostIdentityProviders)
          .AddMethod(__Method_ListIdentityProviders, serviceImpl.ListIdentityProviders)
          .AddMethod(__Method_GetIdentityProvider, serviceImpl.GetIdentityProvider)
          .AddMethod(__Method_PatchIdentityProviders, serviceImpl.PatchIdentityProviders)
          .AddMethod(__Method_DeleteIdentityProviders, serviceImpl.DeleteIdentityProviders)
          .AddMethod(__Method_PostTeams, serviceImpl.PostTeams)
          .AddMethod(__Method_ListTeams, serviceImpl.ListTeams)
          .AddMethod(__Method_GetTeam, serviceImpl.GetTeam)
          .AddMethod(__Method_PatchTeams, serviceImpl.PatchTeams)
          .AddMethod(__Method_DeleteTeams, serviceImpl.DeleteTeams)
          .AddMethod(__Method_PostTeamUsers, serviceImpl.PostTeamUsers)
          .AddMethod(__Method_ListTeamUsers, serviceImpl.ListTeamUsers)
          .AddMethod(__Method_DeleteTeamUsers, serviceImpl.DeleteTeamUsers)
          .AddMethod(__Method_PostTeamApps, serviceImpl.PostTeamApps)
          .AddMethod(__Method_ListTeamApps, serviceImpl.ListTeamApps)
          .AddMethod(__Method_DeleteTeamApps, serviceImpl.DeleteTeamApps)
          .AddMethod(__Method_ListRoles, serviceImpl.ListRoles)
          .AddMethod(__Method_GetRole, serviceImpl.GetRole)
          .AddMethod(__Method_GetSearch, serviceImpl.GetSearch)
          .AddMethod(__Method_ListSearches, serviceImpl.ListSearches)
          .AddMethod(__Method_PatchSearches, serviceImpl.PatchSearches)
          .AddMethod(__Method_PostSearches, serviceImpl.PostSearches)
          .AddMethod(__Method_PostSearchesByID, serviceImpl.PostSearchesByID)
          .AddMethod(__Method_PostAnnotationSearchMetrics, serviceImpl.PostAnnotationSearchMetrics)
          .AddMethod(__Method_GetAnnotationSearchMetrics, serviceImpl.GetAnnotationSearchMetrics)
          .AddMethod(__Method_ListAnnotationSearchMetrics, serviceImpl.ListAnnotationSearchMetrics)
          .AddMethod(__Method_DeleteAnnotationSearchMetrics, serviceImpl.DeleteAnnotationSearchMetrics)
          .AddMethod(__Method_DeleteSearch, serviceImpl.DeleteSearch)
          .AddMethod(__Method_PostAttributeSearch, serviceImpl.PostAttributeSearch)
          .AddMethod(__Method_ListAnnotationFilters, serviceImpl.ListAnnotationFilters)
          .AddMethod(__Method_GetAnnotationFilter, serviceImpl.GetAnnotationFilter)
          .AddMethod(__Method_PostAnnotationFilters, serviceImpl.PostAnnotationFilters)
          .AddMethod(__Method_PatchAnnotationFilters, serviceImpl.PatchAnnotationFilters)
          .AddMethod(__Method_DeleteAnnotationFilters, serviceImpl.DeleteAnnotationFilters)
          .AddMethod(__Method_ListClusters, serviceImpl.ListClusters)
          .AddMethod(__Method_ListAnnotationsForCluster, serviceImpl.ListAnnotationsForCluster)
          .AddMethod(__Method_PostClustersSearches, serviceImpl.PostClustersSearches)
          .AddMethod(__Method_PostVerifyEmail, serviceImpl.PostVerifyEmail)
          .AddMethod(__Method_PostRequestResetPassword, serviceImpl.PostRequestResetPassword)
          .AddMethod(__Method_PostCompleteResetPassword, serviceImpl.PostCompleteResetPassword)
          .AddMethod(__Method_PostLogin, serviceImpl.PostLogin)
          .AddMethod(__Method_PostSignup, serviceImpl.PostSignup)
          .AddMethod(__Method_PostLogout, serviceImpl.PostLogout)
          .AddMethod(__Method_ListAuthMethods, serviceImpl.ListAuthMethods)
          .AddMethod(__Method_ListOrgAuthMethods, serviceImpl.ListOrgAuthMethods)
          .AddMethod(__Method_PostIdLoginFinalizer, serviceImpl.PostIdLoginFinalizer)
          .AddMethod(__Method_PostLinkIdpUser, serviceImpl.PostLinkIdpUser)
          .AddMethod(__Method_GetLoginInfo, serviceImpl.GetLoginInfo)
          .AddMethod(__Method_ListAuth2FAMethods, serviceImpl.ListAuth2FAMethods)
          .AddMethod(__Method_PostAuth2FATotpRegisterEnable, serviceImpl.PostAuth2FATotpRegisterEnable)
          .AddMethod(__Method_PostAuth2FATotpRegisterVerify, serviceImpl.PostAuth2FATotpRegisterVerify)
          .AddMethod(__Method_PostAuth2FATotpDisable, serviceImpl.PostAuth2FATotpDisable)
          .AddMethod(__Method_PostAuth2FATotpLogin, serviceImpl.PostAuth2FATotpLogin)
          .AddMethod(__Method_PostAuth2FATotpRecover, serviceImpl.PostAuth2FATotpRecover)
          .AddMethod(__Method_GetAuth2FATotpRecoverConfirm, serviceImpl.GetAuth2FATotpRecoverConfirm)
          .AddMethod(__Method_GetSubscription, serviceImpl.GetSubscription)
          .AddMethod(__Method_PostSubscription, serviceImpl.PostSubscription)
          .AddMethod(__Method_ListCreditCards, serviceImpl.ListCreditCards)
          .AddMethod(__Method_PostCreditCard, serviceImpl.PostCreditCard)
          .AddMethod(__Method_DeleteCreditCard, serviceImpl.DeleteCreditCard)
          .AddMethod(__Method_PatchCreditCards, serviceImpl.PatchCreditCards)
          .AddMethod(__Method_GetShippingAddress, serviceImpl.GetShippingAddress)
          .AddMethod(__Method_PutShippingAddress, serviceImpl.PutShippingAddress)
          .AddMethod(__Method_ListPlans, serviceImpl.ListPlans)
          .AddMethod(__Method_ListStatusCodes, serviceImpl.ListStatusCodes)
          .AddMethod(__Method_GetStatusCode, serviceImpl.GetStatusCode)
          .AddMethod(__Method_GetHealthz, serviceImpl.GetHealthz)
          .AddMethod(__Method_ListUserBillingCycles, serviceImpl.ListUserBillingCycles)
          .AddMethod(__Method_ListUserCycles, serviceImpl.ListUserCycles)
          .AddMethod(__Method_GetBillingUsage, serviceImpl.GetBillingUsage)
          .AddMethod(__Method_PostHistoricalUsage, serviceImpl.PostHistoricalUsage)
          .AddMethod(__Method_GetHistoricalUsage, serviceImpl.GetHistoricalUsage)
          .AddMethod(__Method_ListUsageIntervals, serviceImpl.ListUsageIntervals)
          .AddMethod(__Method_GetRealtimeUsage, serviceImpl.GetRealtimeUsage)
          .AddMethod(__Method_PostUsage, serviceImpl.PostUsage)
          .AddMethod(__Method_ListCollaborators, serviceImpl.ListCollaborators)
          .AddMethod(__Method_PostCollaborators, serviceImpl.PostCollaborators)
          .AddMethod(__Method_PatchCollaborators, serviceImpl.PatchCollaborators)
          .AddMethod(__Method_DeleteCollaborators, serviceImpl.DeleteCollaborators)
          .AddMethod(__Method_ListCollaborations, serviceImpl.ListCollaborations)
          .AddMethod(__Method_FetchLicense, serviceImpl.FetchLicense)
          .AddMethod(__Method_ListLicenses, serviceImpl.ListLicenses)
          .AddMethod(__Method_GetLicense, serviceImpl.GetLicense)
          .AddMethod(__Method_ValidateLicense, serviceImpl.ValidateLicense)
          .AddMethod(__Method_PostAppDuplications, serviceImpl.PostAppDuplications)
          .AddMethod(__Method_ListAppDuplications, serviceImpl.ListAppDuplications)
          .AddMethod(__Method_GetAppDuplication, serviceImpl.GetAppDuplication)
          .AddMethod(__Method_PostTasks, serviceImpl.PostTasks)
          .AddMethod(__Method_GetTaskAnnotationCount, serviceImpl.GetTaskAnnotationCount)
          .AddMethod(__Method_GetTaskInputCount, serviceImpl.GetTaskInputCount)
          .AddMethod(__Method_GetTask, serviceImpl.GetTask)
          .AddMethod(__Method_ListTasks, serviceImpl.ListTasks)
          .AddMethod(__Method_PatchTasks, serviceImpl.PatchTasks)
          .AddMethod(__Method_DeleteTasks, serviceImpl.DeleteTasks)
          .AddMethod(__Method_PatchAnnotationCountsRollup, serviceImpl.PatchAnnotationCountsRollup)
          .AddMethod(__Method_PostLabelOrders, serviceImpl.PostLabelOrders)
          .AddMethod(__Method_GetLabelOrder, serviceImpl.GetLabelOrder)
          .AddMethod(__Method_ListLabelOrders, serviceImpl.ListLabelOrders)
          .AddMethod(__Method_PatchLabelOrders, serviceImpl.PatchLabelOrders)
          .AddMethod(__Method_DeleteLabelOrders, serviceImpl.DeleteLabelOrders)
          .AddMethod(__Method_PostCollectors, serviceImpl.PostCollectors)
          .AddMethod(__Method_GetCollector, serviceImpl.GetCollector)
          .AddMethod(__Method_ListCollectors, serviceImpl.ListCollectors)
          .AddMethod(__Method_PatchCollectors, serviceImpl.PatchCollectors)
          .AddMethod(__Method_DeleteCollectors, serviceImpl.DeleteCollectors)
          .AddMethod(__Method_PostStatValues, serviceImpl.PostStatValues)
          .AddMethod(__Method_PostStatValuesAggregate, serviceImpl.PostStatValuesAggregate)
          .AddMethod(__Method_PostAnalytics, serviceImpl.PostAnalytics)
          .AddMethod(__Method_PostSDKBilling, serviceImpl.PostSDKBilling)
          .AddMethod(__Method_PostFindDuplicateAnnotationsJobs, serviceImpl.PostFindDuplicateAnnotationsJobs)
          .AddMethod(__Method_GetFindDuplicateAnnotationsJob, serviceImpl.GetFindDuplicateAnnotationsJob)
          .AddMethod(__Method_ListFindDuplicateAnnotationsJobs, serviceImpl.ListFindDuplicateAnnotationsJobs)
          .AddMethod(__Method_DeleteFindDuplicateAnnotationsJobs, serviceImpl.DeleteFindDuplicateAnnotationsJobs)
          .AddMethod(__Method_PostTrendingMetricsView, serviceImpl.PostTrendingMetricsView)
          .AddMethod(__Method_ListTrendingMetricsViews, serviceImpl.ListTrendingMetricsViews)
          .AddMethod(__Method_PostIdValidation, serviceImpl.PostIdValidation)
          .AddMethod(__Method_ListTagCategories, serviceImpl.ListTagCategories)
          .AddMethod(__Method_ListWebNotifications, serviceImpl.ListWebNotifications)
          .AddMethod(__Method_GetWebNotification, serviceImpl.GetWebNotification)
          .AddMethod(__Method_PatchWebNotifications, serviceImpl.PatchWebNotifications)
          .AddMethod(__Method_DeleteWebNotifications, serviceImpl.DeleteWebNotifications)
          .AddMethod(__Method_GetModule, serviceImpl.GetModule)
          .AddMethod(__Method_ListModules, serviceImpl.ListModules)
          .AddMethod(__Method_PostModules, serviceImpl.PostModules)
          .AddMethod(__Method_PatchModules, serviceImpl.PatchModules)
          .AddMethod(__Method_DeleteModules, serviceImpl.DeleteModules)
          .AddMethod(__Method_GetModuleVersion, serviceImpl.GetModuleVersion)
          .AddMethod(__Method_ListModuleVersions, serviceImpl.ListModuleVersions)
          .AddMethod(__Method_PostModuleVersions, serviceImpl.PostModuleVersions)
          .AddMethod(__Method_DeleteModuleVersions, serviceImpl.DeleteModuleVersions)
          .AddMethod(__Method_GetInstalledModuleVersion, serviceImpl.GetInstalledModuleVersion)
          .AddMethod(__Method_ListInstalledModuleVersions, serviceImpl.ListInstalledModuleVersions)
          .AddMethod(__Method_PostInstalledModuleVersions, serviceImpl.PostInstalledModuleVersions)
          .AddMethod(__Method_DeleteInstalledModuleVersions, serviceImpl.DeleteInstalledModuleVersions)
          .AddMethod(__Method_PostInstalledModuleVersionsKey, serviceImpl.PostInstalledModuleVersionsKey)
          .AddMethod(__Method_PostBulkOperations, serviceImpl.PostBulkOperations)
          .AddMethod(__Method_ListBulkOperations, serviceImpl.ListBulkOperations)
          .AddMethod(__Method_GetBulkOperation, serviceImpl.GetBulkOperation)
          .AddMethod(__Method_CancelBulkOperations, serviceImpl.CancelBulkOperations)
          .AddMethod(__Method_DeleteBulkOperations, serviceImpl.DeleteBulkOperations)
          .AddMethod(__Method_GetDatasetInputsSearchAddJob, serviceImpl.GetDatasetInputsSearchAddJob)
          .AddMethod(__Method_ListNextTaskAssignments, serviceImpl.ListNextTaskAssignments)
          .AddMethod(__Method_PutTaskAssignments, serviceImpl.PutTaskAssignments)
          .AddMethod(__Method_PostWaitlistEmails, serviceImpl.PostWaitlistEmails)
          .AddMethod(__Method_GetSampledPredictMetrics, serviceImpl.GetSampledPredictMetrics)
          .AddMethod(__Method_PostInputsAddJobs, serviceImpl.PostInputsAddJobs)
          .AddMethod(__Method_ListInputsAddJobs, serviceImpl.ListInputsAddJobs)
          .AddMethod(__Method_GetInputsAddJob, serviceImpl.GetInputsAddJob)
          .AddMethod(__Method_CancelInputsAddJob, serviceImpl.CancelInputsAddJob)
          .AddMethod(__Method_PostUploads, serviceImpl.PostUploads)
          .AddMethod(__Method_PutUploadContentParts, serviceImpl.PutUploadContentParts)
          .AddMethod(__Method_GetUpload, serviceImpl.GetUpload)
          .AddMethod(__Method_ListUploads, serviceImpl.ListUploads)
          .AddMethod(__Method_DeleteUploads, serviceImpl.DeleteUploads).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, V2Base serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Echo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.TestMessage, global::Clarifai.Api.TestMessage>(serviceImpl.Echo));
      serviceBinder.AddMethod(__Method_ListConceptRelations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(serviceImpl.ListConceptRelations));
      serviceBinder.AddMethod(__Method_PostConceptRelations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(serviceImpl.PostConceptRelations));
      serviceBinder.AddMethod(__Method_DeleteConceptRelations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteConceptRelationsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteConceptRelations));
      serviceBinder.AddMethod(__Method_GetConceptCounts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetConceptCountsRequest, global::Clarifai.Api.MultiConceptCountResponse>(serviceImpl.GetConceptCounts));
      serviceBinder.AddMethod(__Method_GetConcept, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetConceptRequest, global::Clarifai.Api.SingleConceptResponse>(serviceImpl.GetConcept));
      serviceBinder.AddMethod(__Method_ListConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.ListConcepts));
      serviceBinder.AddMethod(__Method_ListModelConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.ListModelConcepts));
      serviceBinder.AddMethod(__Method_PostConceptsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptsSearchesRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.PostConceptsSearches));
      serviceBinder.AddMethod(__Method_PostConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.PostConcepts));
      serviceBinder.AddMethod(__Method_PatchConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.PatchConcepts));
      serviceBinder.AddMethod(__Method_GetVocab, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetVocabRequest, global::Clarifai.Api.SingleVocabResponse>(serviceImpl.GetVocab));
      serviceBinder.AddMethod(__Method_ListVocabs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListVocabsRequest, global::Clarifai.Api.MultiVocabResponse>(serviceImpl.ListVocabs));
      serviceBinder.AddMethod(__Method_PostVocabs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostVocabsRequest, global::Clarifai.Api.MultiVocabResponse>(serviceImpl.PostVocabs));
      serviceBinder.AddMethod(__Method_PatchVocabs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchVocabsRequest, global::Clarifai.Api.MultiVocabResponse>(serviceImpl.PatchVocabs));
      serviceBinder.AddMethod(__Method_DeleteVocab, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteVocabRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteVocab));
      serviceBinder.AddMethod(__Method_DeleteVocabs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteVocabsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteVocabs));
      serviceBinder.AddMethod(__Method_ListVocabConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListVocabConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.ListVocabConcepts));
      serviceBinder.AddMethod(__Method_PostVocabConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostVocabConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.PostVocabConcepts));
      serviceBinder.AddMethod(__Method_DeleteVocabConcept, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteVocabConceptRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteVocabConcept));
      serviceBinder.AddMethod(__Method_DeleteVocabConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteVocabConceptsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteVocabConcepts));
      serviceBinder.AddMethod(__Method_GetConceptLanguage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetConceptLanguageRequest, global::Clarifai.Api.SingleConceptLanguageResponse>(serviceImpl.GetConceptLanguage));
      serviceBinder.AddMethod(__Method_ListConceptLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(serviceImpl.ListConceptLanguages));
      serviceBinder.AddMethod(__Method_PostConceptLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(serviceImpl.PostConceptLanguages));
      serviceBinder.AddMethod(__Method_PatchConceptLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(serviceImpl.PatchConceptLanguages));
      serviceBinder.AddMethod(__Method_ListConceptReferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptReferencesRequest, global::Clarifai.Api.MultiConceptReferenceResponse>(serviceImpl.ListConceptReferences));
      serviceBinder.AddMethod(__Method_ListKnowledgeGraphs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(serviceImpl.ListKnowledgeGraphs));
      serviceBinder.AddMethod(__Method_PostKnowledgeGraphs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(serviceImpl.PostKnowledgeGraphs));
      serviceBinder.AddMethod(__Method_PostConceptMappingJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptMappingJobsRequest, global::Clarifai.Api.MultiConceptMappingJobResponse>(serviceImpl.PostConceptMappingJobs));
      serviceBinder.AddMethod(__Method_ListConceptMappings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptMappingsRequest, global::Clarifai.Api.MultiConceptMappingResponse>(serviceImpl.ListConceptMappings));
      serviceBinder.AddMethod(__Method_PostConceptMappings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptMappingsRequest, global::Clarifai.Api.MultiConceptMappingResponse>(serviceImpl.PostConceptMappings));
      serviceBinder.AddMethod(__Method_GetAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAnnotationRequest, global::Clarifai.Api.SingleAnnotationResponse>(serviceImpl.GetAnnotation));
      serviceBinder.AddMethod(__Method_ListAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(serviceImpl.ListAnnotations));
      serviceBinder.AddMethod(__Method_PostAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(serviceImpl.PostAnnotations));
      serviceBinder.AddMethod(__Method_PatchAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(serviceImpl.PatchAnnotations));
      serviceBinder.AddMethod(__Method_PatchAnnotationsStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAnnotationsStatusRequest, global::Clarifai.Api.PatchAnnotationsStatusResponse>(serviceImpl.PatchAnnotationsStatus));
      serviceBinder.AddMethod(__Method_DeleteAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotation));
      serviceBinder.AddMethod(__Method_DeleteAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotations));
      serviceBinder.AddMethod(__Method_PatchAnnotationsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PatchAnnotationsSearches));
      serviceBinder.AddMethod(__Method_PostAnnotationsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostAnnotationsSearches));
      serviceBinder.AddMethod(__Method_GetInputCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputCountRequest, global::Clarifai.Api.SingleInputCountResponse>(serviceImpl.GetInputCount));
      serviceBinder.AddMethod(__Method_StreamInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.StreamInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.StreamInputs));
      serviceBinder.AddMethod(__Method_GetInputSamples, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputSamplesRequest, global::Clarifai.Api.MultiInputAnnotationResponse>(serviceImpl.GetInputSamples));
      serviceBinder.AddMethod(__Method_GetInput, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputRequest, global::Clarifai.Api.SingleInputResponse>(serviceImpl.GetInput));
      serviceBinder.AddMethod(__Method_ListInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.ListInputs));
      serviceBinder.AddMethod(__Method_PostInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.PostInputs));
      serviceBinder.AddMethod(__Method_PostInputsFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsFileRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.PostInputsFile));
      serviceBinder.AddMethod(__Method_PostInputsNiFi, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsNiFiRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.PostInputsNiFi));
      serviceBinder.AddMethod(__Method_PostInputsDocument, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsDocumentRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.PostInputsDocument));
      serviceBinder.AddMethod(__Method_PatchInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.PatchInputs));
      serviceBinder.AddMethod(__Method_DeleteInput, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteInputRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteInput));
      serviceBinder.AddMethod(__Method_DeleteInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteInputsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteInputs));
      serviceBinder.AddMethod(__Method_PatchInputsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PatchInputsSearches));
      serviceBinder.AddMethod(__Method_PostInputsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostInputsSearches));
      serviceBinder.AddMethod(__Method_PostModelOutputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelOutputsRequest, global::Clarifai.Api.MultiOutputResponse>(serviceImpl.PostModelOutputs));
      serviceBinder.AddMethod(__Method_ListDatasets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(serviceImpl.ListDatasets));
      serviceBinder.AddMethod(__Method_GetDataset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetDatasetRequest, global::Clarifai.Api.SingleDatasetResponse>(serviceImpl.GetDataset));
      serviceBinder.AddMethod(__Method_PostDatasets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(serviceImpl.PostDatasets));
      serviceBinder.AddMethod(__Method_PatchDatasets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(serviceImpl.PatchDatasets));
      serviceBinder.AddMethod(__Method_PatchDatasetIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchDatasetIdsRequest, global::Clarifai.Api.MultiDatasetResponse>(serviceImpl.PatchDatasetIds));
      serviceBinder.AddMethod(__Method_DeleteDatasets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteDatasetsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteDatasets));
      serviceBinder.AddMethod(__Method_ListDatasetInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse>(serviceImpl.ListDatasetInputs));
      serviceBinder.AddMethod(__Method_GetDatasetInput, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetDatasetInputRequest, global::Clarifai.Api.SingleDatasetInputResponse>(serviceImpl.GetDatasetInput));
      serviceBinder.AddMethod(__Method_PostDatasetInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse>(serviceImpl.PostDatasetInputs));
      serviceBinder.AddMethod(__Method_DeleteDatasetInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteDatasetInputsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteDatasetInputs));
      serviceBinder.AddMethod(__Method_ListDatasetVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(serviceImpl.ListDatasetVersions));
      serviceBinder.AddMethod(__Method_GetDatasetVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetDatasetVersionRequest, global::Clarifai.Api.SingleDatasetVersionResponse>(serviceImpl.GetDatasetVersion));
      serviceBinder.AddMethod(__Method_ListDatasetVersionMetricsGroups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest, global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse>(serviceImpl.ListDatasetVersionMetricsGroups));
      serviceBinder.AddMethod(__Method_PostDatasetVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(serviceImpl.PostDatasetVersions));
      serviceBinder.AddMethod(__Method_PatchDatasetVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(serviceImpl.PatchDatasetVersions));
      serviceBinder.AddMethod(__Method_DeleteDatasetVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteDatasetVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteDatasetVersions));
      serviceBinder.AddMethod(__Method_PutDatasetVersionExports, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PutDatasetVersionExportsRequest, global::Clarifai.Api.MultiDatasetVersionExportResponse>(serviceImpl.PutDatasetVersionExports));
      serviceBinder.AddMethod(__Method_GetModelType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelTypeRequest, global::Clarifai.Api.SingleModelTypeResponse>(serviceImpl.GetModelType));
      serviceBinder.AddMethod(__Method_ListOpenSourceLicenses, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListOpenSourceLicensesRequest, global::Clarifai.Api.ListOpenSourceLicensesResponse>(serviceImpl.ListOpenSourceLicenses));
      serviceBinder.AddMethod(__Method_ListModelTypes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelTypesRequest, global::Clarifai.Api.MultiModelTypeResponse>(serviceImpl.ListModelTypes));
      serviceBinder.AddMethod(__Method_GetModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.GetModel));
      serviceBinder.AddMethod(__Method_GetModelOutputInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.GetModelOutputInfo));
      serviceBinder.AddMethod(__Method_ListModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelsRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.ListModels));
      serviceBinder.AddMethod(__Method_PostModelsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelsSearchesRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.PostModelsSearches));
      serviceBinder.AddMethod(__Method_PostModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelsRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.PostModels));
      serviceBinder.AddMethod(__Method_PatchModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelsRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.PatchModels));
      serviceBinder.AddMethod(__Method_PatchModelIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelIdsRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.PatchModelIds));
      serviceBinder.AddMethod(__Method_DeleteModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModel));
      serviceBinder.AddMethod(__Method_DeleteModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModels));
      serviceBinder.AddMethod(__Method_PatchModelCheckConsents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelCheckConsentsRequest, global::Clarifai.Api.MultiModelCheckConsentResponse>(serviceImpl.PatchModelCheckConsents));
      serviceBinder.AddMethod(__Method_PatchModelToolkits, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelToolkitsRequest, global::Clarifai.Api.MultiModelToolkitResponse>(serviceImpl.PatchModelToolkits));
      serviceBinder.AddMethod(__Method_PatchModelUseCases, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelUseCasesRequest, global::Clarifai.Api.MultiModelUseCaseResponse>(serviceImpl.PatchModelUseCases));
      serviceBinder.AddMethod(__Method_PatchModelLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelLanguagesRequest, global::Clarifai.Api.MultiModelLanguageResponse>(serviceImpl.PatchModelLanguages));
      serviceBinder.AddMethod(__Method_ListModelInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.ListModelInputs));
      serviceBinder.AddMethod(__Method_GetModelVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelVersionRequest, global::Clarifai.Api.SingleModelVersionResponse>(serviceImpl.GetModelVersion));
      serviceBinder.AddMethod(__Method_ListModelVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse>(serviceImpl.ListModelVersions));
      serviceBinder.AddMethod(__Method_PostWorkflowVersionsUnPublish, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostWorkflowVersionsUnPublish));
      serviceBinder.AddMethod(__Method_PostWorkflowVersionsPublish, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostWorkflowVersionsPublish));
      serviceBinder.AddMethod(__Method_PostModelVersionsPublish, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostModelVersionsPublish));
      serviceBinder.AddMethod(__Method_PostModelVersionsUnPublish, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostModelVersionsUnPublish));
      serviceBinder.AddMethod(__Method_PostModelVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionsRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.PostModelVersions));
      serviceBinder.AddMethod(__Method_PatchModelVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse>(serviceImpl.PatchModelVersions));
      serviceBinder.AddMethod(__Method_DeleteModelVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelVersionRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModelVersion));
      serviceBinder.AddMethod(__Method_GetModelVersionMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(serviceImpl.GetModelVersionMetrics));
      serviceBinder.AddMethod(__Method_PostModelVersionMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(serviceImpl.PostModelVersionMetrics));
      serviceBinder.AddMethod(__Method_ListModelReferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelReferencesRequest, global::Clarifai.Api.MultiModelReferenceResponse>(serviceImpl.ListModelReferences));
      serviceBinder.AddMethod(__Method_PostModelReferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelReferencesRequest, global::Clarifai.Api.MultiModelReferenceResponse>(serviceImpl.PostModelReferences));
      serviceBinder.AddMethod(__Method_DeleteModelReferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelReferencesRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModelReferences));
      serviceBinder.AddMethod(__Method_GetModelVersionInputExample, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelVersionInputExampleRequest, global::Clarifai.Api.SingleModelVersionInputExampleResponse>(serviceImpl.GetModelVersionInputExample));
      serviceBinder.AddMethod(__Method_ListModelVersionInputExamples, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelVersionInputExamplesRequest, global::Clarifai.Api.MultiModelVersionInputExampleResponse>(serviceImpl.ListModelVersionInputExamples));
      serviceBinder.AddMethod(__Method_PostModelVersionInputExamples, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionInputExamplesRequest, global::Clarifai.Api.MultiModelVersionInputExampleResponse>(serviceImpl.PostModelVersionInputExamples));
      serviceBinder.AddMethod(__Method_DeleteModelVersionInputExamples, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelVersionInputExamplesRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModelVersionInputExamples));
      serviceBinder.AddMethod(__Method_PostModelStars, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelStarsRequest, global::Clarifai.Api.MultiModelStarResponse>(serviceImpl.PostModelStars));
      serviceBinder.AddMethod(__Method_DeleteModelStars, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelStarsRequest, global::Clarifai.Api.DeleteModelStarsResponse>(serviceImpl.DeleteModelStars));
      serviceBinder.AddMethod(__Method_PostUserStars, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostUserStarsRequest, global::Clarifai.Api.MultiUserStarResponse>(serviceImpl.PostUserStars));
      serviceBinder.AddMethod(__Method_DeleteUserStars, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteUserStarsRequest, global::Clarifai.Api.DeleteUserStarsResponse>(serviceImpl.DeleteUserStars));
      serviceBinder.AddMethod(__Method_PostWorkflowStars, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowStarsRequest, global::Clarifai.Api.MultiWorkflowStarResponse>(serviceImpl.PostWorkflowStars));
      serviceBinder.AddMethod(__Method_DeleteWorkflowStars, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWorkflowStarsRequest, global::Clarifai.Api.DeleteWorkflowStarsResponse>(serviceImpl.DeleteWorkflowStars));
      serviceBinder.AddMethod(__Method_PostAppStars, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAppStarsRequest, global::Clarifai.Api.MultiAppStarResponse>(serviceImpl.PostAppStars));
      serviceBinder.AddMethod(__Method_DeleteAppStars, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAppStarsRequest, global::Clarifai.Api.DeleteAppStarsResponse>(serviceImpl.DeleteAppStars));
      serviceBinder.AddMethod(__Method_GetWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetWorkflowRequest, global::Clarifai.Api.SingleWorkflowResponse>(serviceImpl.GetWorkflow));
      serviceBinder.AddMethod(__Method_ListWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.ListWorkflows));
      serviceBinder.AddMethod(__Method_ListPublicWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListPublicWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.ListPublicWorkflows));
      serviceBinder.AddMethod(__Method_PostWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.PostWorkflows));
      serviceBinder.AddMethod(__Method_PatchWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.PatchWorkflows));
      serviceBinder.AddMethod(__Method_PatchWorkflowIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchWorkflowIdsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.PatchWorkflowIds));
      serviceBinder.AddMethod(__Method_DeleteWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWorkflowRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteWorkflow));
      serviceBinder.AddMethod(__Method_DeleteWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWorkflowsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteWorkflows));
      serviceBinder.AddMethod(__Method_PostWorkflowResults, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowResultsRequest, global::Clarifai.Api.PostWorkflowResultsResponse>(serviceImpl.PostWorkflowResults));
      serviceBinder.AddMethod(__Method_PostWorkflowResultsSimilarity, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse>(serviceImpl.PostWorkflowResultsSimilarity));
      serviceBinder.AddMethod(__Method_ListWorkflowVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse>(serviceImpl.ListWorkflowVersions));
      serviceBinder.AddMethod(__Method_GetWorkflowVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetWorkflowVersionRequest, global::Clarifai.Api.SingleWorkflowVersionResponse>(serviceImpl.GetWorkflowVersion));
      serviceBinder.AddMethod(__Method_DeleteWorkflowVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWorkflowVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteWorkflowVersions));
      serviceBinder.AddMethod(__Method_PatchWorkflowVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse>(serviceImpl.PatchWorkflowVersions));
      serviceBinder.AddMethod(__Method_PostWorkflowMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowMetricsRequest, global::Clarifai.Api.MultiWorkflowMetricsResponse>(serviceImpl.PostWorkflowMetrics));
      serviceBinder.AddMethod(__Method_GetWorkflowMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetWorkflowMetricsRequest, global::Clarifai.Api.SingleWorkflowMetricsResponse>(serviceImpl.GetWorkflowMetrics));
      serviceBinder.AddMethod(__Method_GetWorkflowNodeMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetWorkflowNodeMetricsRequest, global::Clarifai.Api.SingleWorkflowNodeMetricsResponse>(serviceImpl.GetWorkflowNodeMetrics));
      serviceBinder.AddMethod(__Method_ListWorkflowMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListWorkflowMetricsRequest, global::Clarifai.Api.MultiWorkflowMetricsResponse>(serviceImpl.ListWorkflowMetrics));
      serviceBinder.AddMethod(__Method_DeleteWorkflowMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWorkflowMetricsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteWorkflowMetrics));
      serviceBinder.AddMethod(__Method_GetKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetKeyRequest, global::Clarifai.Api.SingleKeyResponse>(serviceImpl.GetKey));
      serviceBinder.AddMethod(__Method_ListKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.ListKeys));
      serviceBinder.AddMethod(__Method_ListAppKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAppKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.ListAppKeys));
      serviceBinder.AddMethod(__Method_DeleteKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteKeyRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteKey));
      serviceBinder.AddMethod(__Method_PostKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.PostKeys));
      serviceBinder.AddMethod(__Method_PatchKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.PatchKeys));
      serviceBinder.AddMethod(__Method_MyScopes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.MyScopesRequest, global::Clarifai.Api.MultiScopeResponse>(serviceImpl.MyScopes));
      serviceBinder.AddMethod(__Method_MyScopesUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.MyScopesUserRequest, global::Clarifai.Api.MultiScopeUserResponse>(serviceImpl.MyScopesUser));
      serviceBinder.AddMethod(__Method_MyScopesRoot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.MyScopesRootRequest, global::Clarifai.Api.MultiScopeRootResponse>(serviceImpl.MyScopesRoot));
      serviceBinder.AddMethod(__Method_ListScopes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListScopesRequest, global::Clarifai.Api.MultiScopeDepsResponse>(serviceImpl.ListScopes));
      serviceBinder.AddMethod(__Method_GetApp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAppRequest, global::Clarifai.Api.SingleAppResponse>(serviceImpl.GetApp));
      serviceBinder.AddMethod(__Method_ListApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAppsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.ListApps));
      serviceBinder.AddMethod(__Method_DeleteApp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAppRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteApp));
      serviceBinder.AddMethod(__Method_PostApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAppsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PostApps));
      serviceBinder.AddMethod(__Method_PatchApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAppsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PatchApps));
      serviceBinder.AddMethod(__Method_PatchAppsIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAppsIdsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PatchAppsIds));
      serviceBinder.AddMethod(__Method_PatchApp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAppRequest, global::Clarifai.Api.SingleAppResponse>(serviceImpl.PatchApp));
      serviceBinder.AddMethod(__Method_PatchAppOwner, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAppOwnerRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PatchAppOwner));
      serviceBinder.AddMethod(__Method_PostAppsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAppsSearchesRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PostAppsSearches));
      serviceBinder.AddMethod(__Method_GetUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetUserRequest, global::Clarifai.Api.SingleUserResponse>(serviceImpl.GetUser));
      serviceBinder.AddMethod(__Method_ListUsers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListUsersRequest, global::Clarifai.Api.MultiUserResponse>(serviceImpl.ListUsers));
      serviceBinder.AddMethod(__Method_PostUserConsent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostUserConsentRequest, global::Clarifai.Api.SingleUserResponse>(serviceImpl.PostUserConsent));
      serviceBinder.AddMethod(__Method_PatchUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchUserRequest, global::Clarifai.Api.SingleUserResponse>(serviceImpl.PatchUser));
      serviceBinder.AddMethod(__Method_PostUserAccess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostUserAccessRequest, global::Clarifai.Api.MultiUserAccessResponse>(serviceImpl.PostUserAccess));
      serviceBinder.AddMethod(__Method_GetUserAccess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetUserAccessRequest, global::Clarifai.Api.SingleUserAccessResponse>(serviceImpl.GetUserAccess));
      serviceBinder.AddMethod(__Method_PostEmails, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostEmailsRequest, global::Clarifai.Api.MultipleEmailResponse>(serviceImpl.PostEmails));
      serviceBinder.AddMethod(__Method_ListEmails, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListEmailsRequest, global::Clarifai.Api.MultipleEmailResponse>(serviceImpl.ListEmails));
      serviceBinder.AddMethod(__Method_PostResendVerifyEmail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostResendVerifyRequest, global::Clarifai.Api.SingleResendVerifyResponse>(serviceImpl.PostResendVerifyEmail));
      serviceBinder.AddMethod(__Method_DeleteEmail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteEmailRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteEmail));
      serviceBinder.AddMethod(__Method_PostPrimaryEmail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostPrimaryEmailRequest, global::Clarifai.Api.SingleEmailResponse>(serviceImpl.PostPrimaryEmail));
      serviceBinder.AddMethod(__Method_PostValidatePassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostValidatePasswordRequest, global::Clarifai.Api.SinglePasswordValidationResponse>(serviceImpl.PostValidatePassword));
      serviceBinder.AddMethod(__Method_ListGlobalPasswordPolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListGlobalPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse>(serviceImpl.ListGlobalPasswordPolicies));
      serviceBinder.AddMethod(__Method_ListPasswordPolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse>(serviceImpl.ListPasswordPolicies));
      serviceBinder.AddMethod(__Method_PostPasswordPolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse>(serviceImpl.PostPasswordPolicies));
      serviceBinder.AddMethod(__Method_PatchPasswordPolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchPasswordPoliciesRequest, global::Clarifai.Api.MultiplePasswordPoliciesResponse>(serviceImpl.PatchPasswordPolicies));
      serviceBinder.AddMethod(__Method_DeletePasswordPolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeletePasswordPoliciesRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeletePasswordPolicies));
      serviceBinder.AddMethod(__Method_GetUserFeatureConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.UserFeatureConfigRequest, global::Clarifai.Api.SingleUserFeatureConfigResponse>(serviceImpl.GetUserFeatureConfig));
      serviceBinder.AddMethod(__Method_PostOrganizations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostOrganizationsRequest, global::Clarifai.Api.MultiOrganizationResponse>(serviceImpl.PostOrganizations));
      serviceBinder.AddMethod(__Method_ListUsersOrganizations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListUsersOrganizationsRequest, global::Clarifai.Api.MultiUsersOrganizationsResponse>(serviceImpl.ListUsersOrganizations));
      serviceBinder.AddMethod(__Method_ListOrganizations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListOrganizationsRequest, global::Clarifai.Api.MultiOrganizationResponse>(serviceImpl.ListOrganizations));
      serviceBinder.AddMethod(__Method_GetOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetOrganizationRequest, global::Clarifai.Api.SingleOrganizationResponse>(serviceImpl.GetOrganization));
      serviceBinder.AddMethod(__Method_PatchOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchOrganizationRequest, global::Clarifai.Api.SingleOrganizationResponse>(serviceImpl.PatchOrganization));
      serviceBinder.AddMethod(__Method_DeleteOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteOrganizationRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteOrganization));
      serviceBinder.AddMethod(__Method_ListOrganizationMembers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListOrganizationMembersRequest, global::Clarifai.Api.MultiOrganizationMemberResponse>(serviceImpl.ListOrganizationMembers));
      serviceBinder.AddMethod(__Method_ListOrganizationAppMembers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListOrganizationAppMembersRequest, global::Clarifai.Api.MultiOrganizationMemberResponse>(serviceImpl.ListOrganizationAppMembers));
      serviceBinder.AddMethod(__Method_PostOrganizationMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostOrganizationMemberRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostOrganizationMember));
      serviceBinder.AddMethod(__Method_PatchOrganizationMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchOrganizationMembersRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PatchOrganizationMember));
      serviceBinder.AddMethod(__Method_DeleteOrganizationMember, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteOrganizationMemberRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteOrganizationMember));
      serviceBinder.AddMethod(__Method_PostOrganizationInvitations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostOrganizationInvitationsRequest, global::Clarifai.Api.MultiOrganizationInvitationResponse>(serviceImpl.PostOrganizationInvitations));
      serviceBinder.AddMethod(__Method_PatchOrganizationInvitations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchOrganizationInvitationsRequest, global::Clarifai.Api.MultiOrganizationInvitationResponse>(serviceImpl.PatchOrganizationInvitations));
      serviceBinder.AddMethod(__Method_ListOrganizationInvitations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListOrganizationInvitationsRequest, global::Clarifai.Api.MultiOrganizationInvitationResponse>(serviceImpl.ListOrganizationInvitations));
      serviceBinder.AddMethod(__Method_GetOrganizationInvitation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetOrganizationInvitationRequest, global::Clarifai.Api.SingleOrganizationInvitationResponse>(serviceImpl.GetOrganizationInvitation));
      serviceBinder.AddMethod(__Method_PostDeclineOrganizationInvitation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostDeclineOrganizationInvitationRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostDeclineOrganizationInvitation));
      serviceBinder.AddMethod(__Method_PostAcceptOrganizationInvitation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAcceptOrganizationInvitationRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostAcceptOrganizationInvitation));
      serviceBinder.AddMethod(__Method_GetOrganizationInvitationPublic, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetOrganizationInvitationPublicRequest, global::Clarifai.Api.SingleOrganizationInvitationResponse>(serviceImpl.GetOrganizationInvitationPublic));
      serviceBinder.AddMethod(__Method_DeleteRequestingUserFromOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteRequestingUserFromOrganizationRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteRequestingUserFromOrganization));
      serviceBinder.AddMethod(__Method_PostIdentityProviders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostIdentityProvidersRequest, global::Clarifai.Api.MultiIdentityProviderResponse>(serviceImpl.PostIdentityProviders));
      serviceBinder.AddMethod(__Method_ListIdentityProviders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListIdentityProvidersRequest, global::Clarifai.Api.MultiIdentityProviderResponse>(serviceImpl.ListIdentityProviders));
      serviceBinder.AddMethod(__Method_GetIdentityProvider, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetIdentityProviderRequest, global::Clarifai.Api.SingleIdentityProviderResponse>(serviceImpl.GetIdentityProvider));
      serviceBinder.AddMethod(__Method_PatchIdentityProviders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchIdentityProvidersRequest, global::Clarifai.Api.MultiIdentityProviderResponse>(serviceImpl.PatchIdentityProviders));
      serviceBinder.AddMethod(__Method_DeleteIdentityProviders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteIdentityProvidersRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteIdentityProviders));
      serviceBinder.AddMethod(__Method_PostTeams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostTeamsRequest, global::Clarifai.Api.MultiTeamResponse>(serviceImpl.PostTeams));
      serviceBinder.AddMethod(__Method_ListTeams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListTeamsRequest, global::Clarifai.Api.MultiTeamResponse>(serviceImpl.ListTeams));
      serviceBinder.AddMethod(__Method_GetTeam, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetTeamRequest, global::Clarifai.Api.SingleTeamResponse>(serviceImpl.GetTeam));
      serviceBinder.AddMethod(__Method_PatchTeams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchTeamsRequest, global::Clarifai.Api.MultiTeamResponse>(serviceImpl.PatchTeams));
      serviceBinder.AddMethod(__Method_DeleteTeams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteTeamsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteTeams));
      serviceBinder.AddMethod(__Method_PostTeamUsers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostTeamUsersRequest, global::Clarifai.Api.MultiTeamUserResponse>(serviceImpl.PostTeamUsers));
      serviceBinder.AddMethod(__Method_ListTeamUsers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListTeamUsersRequest, global::Clarifai.Api.MultiTeamUserResponse>(serviceImpl.ListTeamUsers));
      serviceBinder.AddMethod(__Method_DeleteTeamUsers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteTeamUsersRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteTeamUsers));
      serviceBinder.AddMethod(__Method_PostTeamApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostTeamAppsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostTeamApps));
      serviceBinder.AddMethod(__Method_ListTeamApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListTeamAppsRequest, global::Clarifai.Api.MultiTeamAppsResponse>(serviceImpl.ListTeamApps));
      serviceBinder.AddMethod(__Method_DeleteTeamApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteTeamAppsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteTeamApps));
      serviceBinder.AddMethod(__Method_ListRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListRolesRequest, global::Clarifai.Api.MultiRoleResponse>(serviceImpl.ListRoles));
      serviceBinder.AddMethod(__Method_GetRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetRoleRequest, global::Clarifai.Api.SingleRoleResponse>(serviceImpl.GetRole));
      serviceBinder.AddMethod(__Method_GetSearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetSearchRequest, global::Clarifai.Api.SingleSearchResponse>(serviceImpl.GetSearch));
      serviceBinder.AddMethod(__Method_ListSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.ListSearches));
      serviceBinder.AddMethod(__Method_PatchSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PatchSearches));
      serviceBinder.AddMethod(__Method_PostSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostSearches));
      serviceBinder.AddMethod(__Method_PostSearchesByID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostSearchesByIDRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostSearchesByID));
      serviceBinder.AddMethod(__Method_PostAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(serviceImpl.PostAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_GetAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(serviceImpl.GetAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_ListAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(serviceImpl.ListAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_DeleteAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_DeleteSearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteSearchRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteSearch));
      serviceBinder.AddMethod(__Method_PostAttributeSearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAttributeSearchRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostAttributeSearch));
      serviceBinder.AddMethod(__Method_ListAnnotationFilters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(serviceImpl.ListAnnotationFilters));
      serviceBinder.AddMethod(__Method_GetAnnotationFilter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAnnotationFilterRequest, global::Clarifai.Api.SingleAnnotationFilterResponse>(serviceImpl.GetAnnotationFilter));
      serviceBinder.AddMethod(__Method_PostAnnotationFilters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(serviceImpl.PostAnnotationFilters));
      serviceBinder.AddMethod(__Method_PatchAnnotationFilters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(serviceImpl.PatchAnnotationFilters));
      serviceBinder.AddMethod(__Method_DeleteAnnotationFilters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationFiltersRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotationFilters));
      serviceBinder.AddMethod(__Method_ListClusters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListClustersRequest, global::Clarifai.Api.MultiClusterResponse>(serviceImpl.ListClusters));
      serviceBinder.AddMethod(__Method_ListAnnotationsForCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAnnotationsForClusterRequest, global::Clarifai.Api.MultiAnnotationResponse>(serviceImpl.ListAnnotationsForCluster));
      serviceBinder.AddMethod(__Method_PostClustersSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostClustersSearchesRequest, global::Clarifai.Api.MultiClusterResponse>(serviceImpl.PostClustersSearches));
      serviceBinder.AddMethod(__Method_PostVerifyEmail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostVerifyEmailRequest, global::Clarifai.Api.SingleVerifyEmailResponse>(serviceImpl.PostVerifyEmail));
      serviceBinder.AddMethod(__Method_PostRequestResetPassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.RequestResetPasswordRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostRequestResetPassword));
      serviceBinder.AddMethod(__Method_PostCompleteResetPassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.CompleteResetPasswordRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostCompleteResetPassword));
      serviceBinder.AddMethod(__Method_PostLogin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostLoginRequest, global::Clarifai.Api.SingleLoginResponse>(serviceImpl.PostLogin));
      serviceBinder.AddMethod(__Method_PostSignup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostSignupRequest, global::Clarifai.Api.SingleLoginResponse>(serviceImpl.PostSignup));
      serviceBinder.AddMethod(__Method_PostLogout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostLogoutRequest, global::Clarifai.Api.SingleLogoutResponse>(serviceImpl.PostLogout));
      serviceBinder.AddMethod(__Method_ListAuthMethods, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAuthMethodsRequest, global::Clarifai.Api.ListAuthMethodsResponse>(serviceImpl.ListAuthMethods));
      serviceBinder.AddMethod(__Method_ListOrgAuthMethods, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAuthMethodsRequest, global::Clarifai.Api.ListAuthMethodsResponse>(serviceImpl.ListOrgAuthMethods));
      serviceBinder.AddMethod(__Method_PostIdLoginFinalizer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostIdLoginFinalizerRequest, global::Clarifai.Api.PostIdLoginFinalizerResponse>(serviceImpl.PostIdLoginFinalizer));
      serviceBinder.AddMethod(__Method_PostLinkIdpUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostLinkIdpUserRequest, global::Clarifai.Api.PostLinkIdpUserResponse>(serviceImpl.PostLinkIdpUser));
      serviceBinder.AddMethod(__Method_GetLoginInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetLoginInfoRequest, global::Clarifai.Api.GetLoginInfoResponse>(serviceImpl.GetLoginInfo));
      serviceBinder.AddMethod(__Method_ListAuth2FAMethods, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.List2FAMethodsRequest, global::Clarifai.Api.List2FAMethodsResponse>(serviceImpl.ListAuth2FAMethods));
      serviceBinder.AddMethod(__Method_PostAuth2FATotpRegisterEnable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAuth2FATotpRegisterEnableRequest, global::Clarifai.Api.PostAuth2FATotpRegisterEnableResponse>(serviceImpl.PostAuth2FATotpRegisterEnable));
      serviceBinder.AddMethod(__Method_PostAuth2FATotpRegisterVerify, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAuth2FATotpRegisterVerifyRequest, global::Clarifai.Api.PostAuth2FATotpRegisterVerifyResponse>(serviceImpl.PostAuth2FATotpRegisterVerify));
      serviceBinder.AddMethod(__Method_PostAuth2FATotpDisable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAuth2FATotpDisableRequest, global::Clarifai.Api.PostAuth2FATotpDisableResponse>(serviceImpl.PostAuth2FATotpDisable));
      serviceBinder.AddMethod(__Method_PostAuth2FATotpLogin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAuth2FATotpLoginRequest, global::Clarifai.Api.SingleLoginResponse>(serviceImpl.PostAuth2FATotpLogin));
      serviceBinder.AddMethod(__Method_PostAuth2FATotpRecover, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAuth2FATotpRecoverRequest, global::Clarifai.Api.PostAuth2FATotpRecoverResponse>(serviceImpl.PostAuth2FATotpRecover));
      serviceBinder.AddMethod(__Method_GetAuth2FATotpRecoverConfirm, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAuth2FATotpRecoverConfirmRequest, global::Clarifai.Api.GetAuth2FATotpRecoverConfirmResponse>(serviceImpl.GetAuth2FATotpRecoverConfirm));
      serviceBinder.AddMethod(__Method_GetSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetSubscriptionRequest, global::Clarifai.Api.SingleSubscriptionResponse>(serviceImpl.GetSubscription));
      serviceBinder.AddMethod(__Method_PostSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostSubscriptionRequest, global::Clarifai.Api.SingleSubscriptionResponse>(serviceImpl.PostSubscription));
      serviceBinder.AddMethod(__Method_ListCreditCards, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListCreditCardsRequest, global::Clarifai.Api.MultipleCreditCardResponse>(serviceImpl.ListCreditCards));
      serviceBinder.AddMethod(__Method_PostCreditCard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostCreditCardRequest, global::Clarifai.Api.SingleCreditCardResponse>(serviceImpl.PostCreditCard));
      serviceBinder.AddMethod(__Method_DeleteCreditCard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteCreditCardRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteCreditCard));
      serviceBinder.AddMethod(__Method_PatchCreditCards, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchCreditCardsRequest, global::Clarifai.Api.MultipleCreditCardResponse>(serviceImpl.PatchCreditCards));
      serviceBinder.AddMethod(__Method_GetShippingAddress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetShippingAddressRequest, global::Clarifai.Api.SingleShippingAddressResponse>(serviceImpl.GetShippingAddress));
      serviceBinder.AddMethod(__Method_PutShippingAddress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PutShippingAddressRequest, global::Clarifai.Api.SingleShippingAddressResponse>(serviceImpl.PutShippingAddress));
      serviceBinder.AddMethod(__Method_ListPlans, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListPlansRequest, global::Clarifai.Api.MultiPlanResponse>(serviceImpl.ListPlans));
      serviceBinder.AddMethod(__Method_ListStatusCodes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListStatusCodesRequest, global::Clarifai.Api.MultiStatusCodeResponse>(serviceImpl.ListStatusCodes));
      serviceBinder.AddMethod(__Method_GetStatusCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetStatusCodeRequest, global::Clarifai.Api.SingleStatusCodeResponse>(serviceImpl.GetStatusCode));
      serviceBinder.AddMethod(__Method_GetHealthz, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetHealthzRequest, global::Clarifai.Api.GetHealthzResponse>(serviceImpl.GetHealthz));
      serviceBinder.AddMethod(__Method_ListUserBillingCycles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListUserBillingCyclesRequest, global::Clarifai.Api.ListUserBillingCyclesResponse>(serviceImpl.ListUserBillingCycles));
      serviceBinder.AddMethod(__Method_ListUserCycles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListUserCyclesRequest, global::Clarifai.Api.ListUserCyclesResponse>(serviceImpl.ListUserCycles));
      serviceBinder.AddMethod(__Method_GetBillingUsage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetBillingUsageRequest, global::Clarifai.Api.GetBillingUsageResponse>(serviceImpl.GetBillingUsage));
      serviceBinder.AddMethod(__Method_PostHistoricalUsage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostHistoricalUsageRequest, global::Clarifai.Api.PostHistoricalUsageResponse>(serviceImpl.PostHistoricalUsage));
      serviceBinder.AddMethod(__Method_GetHistoricalUsage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetHistoricalUsageRequest, global::Clarifai.Api.GetHistoricalUsageResponse>(serviceImpl.GetHistoricalUsage));
      serviceBinder.AddMethod(__Method_ListUsageIntervals, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListUsageIntervalsRequest, global::Clarifai.Api.ListUsageIntervalsResponse>(serviceImpl.ListUsageIntervals));
      serviceBinder.AddMethod(__Method_GetRealtimeUsage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetRealtimeUsageRequest, global::Clarifai.Api.GetRealtimeUsageResponse>(serviceImpl.GetRealtimeUsage));
      serviceBinder.AddMethod(__Method_PostUsage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostUsageRequest, global::Clarifai.Api.PostUsageResponse>(serviceImpl.PostUsage));
      serviceBinder.AddMethod(__Method_ListCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(serviceImpl.ListCollaborators));
      serviceBinder.AddMethod(__Method_PostCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(serviceImpl.PostCollaborators));
      serviceBinder.AddMethod(__Method_PatchCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(serviceImpl.PatchCollaborators));
      serviceBinder.AddMethod(__Method_DeleteCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteCollaboratorsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteCollaborators));
      serviceBinder.AddMethod(__Method_ListCollaborations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListCollaborationsRequest, global::Clarifai.Api.MultiCollaborationsResponse>(serviceImpl.ListCollaborations));
      serviceBinder.AddMethod(__Method_FetchLicense, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.FetchLicenseRequest, global::Clarifai.Api.FetchLicenseResponse>(serviceImpl.FetchLicense));
      serviceBinder.AddMethod(__Method_ListLicenses, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListLicensesRequest, global::Clarifai.Api.MultipleLicensesResponse>(serviceImpl.ListLicenses));
      serviceBinder.AddMethod(__Method_GetLicense, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetLicenseRequest, global::Clarifai.Api.SingleLicenseResponse>(serviceImpl.GetLicense));
      serviceBinder.AddMethod(__Method_ValidateLicense, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ValidateLicenseRequest, global::Clarifai.Api.ValidateLicenseResponse>(serviceImpl.ValidateLicense));
      serviceBinder.AddMethod(__Method_PostAppDuplications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(serviceImpl.PostAppDuplications));
      serviceBinder.AddMethod(__Method_ListAppDuplications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(serviceImpl.ListAppDuplications));
      serviceBinder.AddMethod(__Method_GetAppDuplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAppDuplicationRequest, global::Clarifai.Api.SingleAppDuplicationResponse>(serviceImpl.GetAppDuplication));
      serviceBinder.AddMethod(__Method_PostTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostTasksRequest, global::Clarifai.Api.MultiTaskResponse>(serviceImpl.PostTasks));
      serviceBinder.AddMethod(__Method_GetTaskAnnotationCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse>(serviceImpl.GetTaskAnnotationCount));
      serviceBinder.AddMethod(__Method_GetTaskInputCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse>(serviceImpl.GetTaskInputCount));
      serviceBinder.AddMethod(__Method_GetTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetTaskRequest, global::Clarifai.Api.SingleTaskResponse>(serviceImpl.GetTask));
      serviceBinder.AddMethod(__Method_ListTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListTasksRequest, global::Clarifai.Api.MultiTaskResponse>(serviceImpl.ListTasks));
      serviceBinder.AddMethod(__Method_PatchTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchTasksRequest, global::Clarifai.Api.MultiTaskResponse>(serviceImpl.PatchTasks));
      serviceBinder.AddMethod(__Method_DeleteTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteTasksRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteTasks));
      serviceBinder.AddMethod(__Method_PatchAnnotationCountsRollup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAnnotationCountsRollupRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PatchAnnotationCountsRollup));
      serviceBinder.AddMethod(__Method_PostLabelOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(serviceImpl.PostLabelOrders));
      serviceBinder.AddMethod(__Method_GetLabelOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetLabelOrderRequest, global::Clarifai.Api.SingleLabelOrderResponse>(serviceImpl.GetLabelOrder));
      serviceBinder.AddMethod(__Method_ListLabelOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(serviceImpl.ListLabelOrders));
      serviceBinder.AddMethod(__Method_PatchLabelOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(serviceImpl.PatchLabelOrders));
      serviceBinder.AddMethod(__Method_DeleteLabelOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteLabelOrdersRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteLabelOrders));
      serviceBinder.AddMethod(__Method_PostCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(serviceImpl.PostCollectors));
      serviceBinder.AddMethod(__Method_GetCollector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetCollectorRequest, global::Clarifai.Api.SingleCollectorResponse>(serviceImpl.GetCollector));
      serviceBinder.AddMethod(__Method_ListCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(serviceImpl.ListCollectors));
      serviceBinder.AddMethod(__Method_PatchCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(serviceImpl.PatchCollectors));
      serviceBinder.AddMethod(__Method_DeleteCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteCollectorsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteCollectors));
      serviceBinder.AddMethod(__Method_PostStatValues, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostStatValuesRequest, global::Clarifai.Api.MultiStatValueResponse>(serviceImpl.PostStatValues));
      serviceBinder.AddMethod(__Method_PostStatValuesAggregate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostStatValuesAggregateRequest, global::Clarifai.Api.MultiStatValueAggregateResponse>(serviceImpl.PostStatValuesAggregate));
      serviceBinder.AddMethod(__Method_PostAnalytics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnalyticsRequest, global::Clarifai.Api.PostAnalyticsResponse>(serviceImpl.PostAnalytics));
      serviceBinder.AddMethod(__Method_PostSDKBilling, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostSDKBillingRequest, global::Clarifai.Api.PostSDKBillingResponse>(serviceImpl.PostSDKBilling));
      serviceBinder.AddMethod(__Method_PostFindDuplicateAnnotationsJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostFindDuplicateAnnotationsJobsRequest, global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse>(serviceImpl.PostFindDuplicateAnnotationsJobs));
      serviceBinder.AddMethod(__Method_GetFindDuplicateAnnotationsJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetFindDuplicateAnnotationsJobRequest, global::Clarifai.Api.SingleFindDuplicateAnnotationsJobResponse>(serviceImpl.GetFindDuplicateAnnotationsJob));
      serviceBinder.AddMethod(__Method_ListFindDuplicateAnnotationsJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListFindDuplicateAnnotationsJobsRequest, global::Clarifai.Api.MultiFindDuplicateAnnotationsJobResponse>(serviceImpl.ListFindDuplicateAnnotationsJobs));
      serviceBinder.AddMethod(__Method_DeleteFindDuplicateAnnotationsJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteFindDuplicateAnnotationsJobsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteFindDuplicateAnnotationsJobs));
      serviceBinder.AddMethod(__Method_PostTrendingMetricsView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostTrendingMetricsViewRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostTrendingMetricsView));
      serviceBinder.AddMethod(__Method_ListTrendingMetricsViews, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListTrendingMetricsViewsRequest, global::Clarifai.Api.MultiTrendingMetricsViewResponse>(serviceImpl.ListTrendingMetricsViews));
      serviceBinder.AddMethod(__Method_PostIdValidation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostIdValidationRequest, global::Clarifai.Api.MultiIdValidationResponse>(serviceImpl.PostIdValidation));
      serviceBinder.AddMethod(__Method_ListTagCategories, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListTagCategoriesRequest, global::Clarifai.Api.MultiTagCategoryResponse>(serviceImpl.ListTagCategories));
      serviceBinder.AddMethod(__Method_ListWebNotifications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListWebNotificationsRequest, global::Clarifai.Api.MultiWebNotificationResponse>(serviceImpl.ListWebNotifications));
      serviceBinder.AddMethod(__Method_GetWebNotification, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetWebNotificationRequest, global::Clarifai.Api.SingleWebNotificationResponse>(serviceImpl.GetWebNotification));
      serviceBinder.AddMethod(__Method_PatchWebNotifications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchWebNotificationsRequest, global::Clarifai.Api.MultiWebNotificationResponse>(serviceImpl.PatchWebNotifications));
      serviceBinder.AddMethod(__Method_DeleteWebNotifications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWebNotificationsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteWebNotifications));
      serviceBinder.AddMethod(__Method_GetModule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModuleRequest, global::Clarifai.Api.SingleModuleResponse>(serviceImpl.GetModule));
      serviceBinder.AddMethod(__Method_ListModules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModulesRequest, global::Clarifai.Api.MultiModuleResponse>(serviceImpl.ListModules));
      serviceBinder.AddMethod(__Method_PostModules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModulesRequest, global::Clarifai.Api.MultiModuleResponse>(serviceImpl.PostModules));
      serviceBinder.AddMethod(__Method_PatchModules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModulesRequest, global::Clarifai.Api.MultiModuleResponse>(serviceImpl.PatchModules));
      serviceBinder.AddMethod(__Method_DeleteModules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModulesRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModules));
      serviceBinder.AddMethod(__Method_GetModuleVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModuleVersionRequest, global::Clarifai.Api.SingleModuleVersionResponse>(serviceImpl.GetModuleVersion));
      serviceBinder.AddMethod(__Method_ListModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse>(serviceImpl.ListModuleVersions));
      serviceBinder.AddMethod(__Method_PostModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse>(serviceImpl.PostModuleVersions));
      serviceBinder.AddMethod(__Method_DeleteModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModuleVersions));
      serviceBinder.AddMethod(__Method_GetInstalledModuleVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInstalledModuleVersionRequest, global::Clarifai.Api.SingleInstalledModuleVersionResponse>(serviceImpl.GetInstalledModuleVersion));
      serviceBinder.AddMethod(__Method_ListInstalledModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse>(serviceImpl.ListInstalledModuleVersions));
      serviceBinder.AddMethod(__Method_PostInstalledModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse>(serviceImpl.PostInstalledModuleVersions));
      serviceBinder.AddMethod(__Method_DeleteInstalledModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteInstalledModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteInstalledModuleVersions));
      serviceBinder.AddMethod(__Method_PostInstalledModuleVersionsKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest, global::Clarifai.Api.SingleKeyResponse>(serviceImpl.PostInstalledModuleVersionsKey));
      serviceBinder.AddMethod(__Method_PostBulkOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(serviceImpl.PostBulkOperations));
      serviceBinder.AddMethod(__Method_ListBulkOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(serviceImpl.ListBulkOperations));
      serviceBinder.AddMethod(__Method_GetBulkOperation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetBulkOperationRequest, global::Clarifai.Api.SingleBulkOperationsResponse>(serviceImpl.GetBulkOperation));
      serviceBinder.AddMethod(__Method_CancelBulkOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.CancelBulkOperationRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(serviceImpl.CancelBulkOperations));
      serviceBinder.AddMethod(__Method_DeleteBulkOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteBulkOperationRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteBulkOperations));
      serviceBinder.AddMethod(__Method_GetDatasetInputsSearchAddJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetDatasetInputsSearchAddJobRequest, global::Clarifai.Api.SingleDatasetInputsSearchAddJobResponse>(serviceImpl.GetDatasetInputsSearchAddJob));
      serviceBinder.AddMethod(__Method_ListNextTaskAssignments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListNextTaskAssignmentsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.ListNextTaskAssignments));
      serviceBinder.AddMethod(__Method_PutTaskAssignments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PutTaskAssignmentsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PutTaskAssignments));
      serviceBinder.AddMethod(__Method_PostWaitlistEmails, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWaitlistEmailsRequest, global::Clarifai.Api.MultiWaitlistEmailResponse>(serviceImpl.PostWaitlistEmails));
      serviceBinder.AddMethod(__Method_GetSampledPredictMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetSampledPredictMetricsRequest, global::Clarifai.Api.MultiSampledPredictMetricsResponse>(serviceImpl.GetSampledPredictMetrics));
      serviceBinder.AddMethod(__Method_PostInputsAddJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsAddJobsRequest, global::Clarifai.Api.MultiInputsAddJobResponse>(serviceImpl.PostInputsAddJobs));
      serviceBinder.AddMethod(__Method_ListInputsAddJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListInputsAddJobsRequest, global::Clarifai.Api.MultiInputsAddJobResponse>(serviceImpl.ListInputsAddJobs));
      serviceBinder.AddMethod(__Method_GetInputsAddJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse>(serviceImpl.GetInputsAddJob));
      serviceBinder.AddMethod(__Method_CancelInputsAddJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.CancelInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse>(serviceImpl.CancelInputsAddJob));
      serviceBinder.AddMethod(__Method_PostUploads, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostUploadsRequest, global::Clarifai.Api.MultiUploadResponse>(serviceImpl.PostUploads));
      serviceBinder.AddMethod(__Method_PutUploadContentParts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PutUploadContentPartsRequest, global::Clarifai.Api.SingleUploadResponse>(serviceImpl.PutUploadContentParts));
      serviceBinder.AddMethod(__Method_GetUpload, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetUploadRequest, global::Clarifai.Api.SingleUploadResponse>(serviceImpl.GetUpload));
      serviceBinder.AddMethod(__Method_ListUploads, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListUploadsRequest, global::Clarifai.Api.MultiUploadResponse>(serviceImpl.ListUploads));
      serviceBinder.AddMethod(__Method_DeleteUploads, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteUploadsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteUploads));
    }

  }
}
#endregion
