// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/clarifai/api/service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Clarifai.Api {
  public static partial class V2
  {
    static readonly string __ServiceName = "clarifai.api.V2";

    static readonly grpc::Marshaller<global::Clarifai.Api.GetConceptCountsRequest> __Marshaller_clarifai_api_GetConceptCountsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetConceptCountsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptCountResponse> __Marshaller_clarifai_api_MultiConceptCountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiConceptCountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetConceptRequest> __Marshaller_clarifai_api_GetConceptRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetConceptRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleConceptResponse> __Marshaller_clarifai_api_SingleConceptResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleConceptResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptsRequest> __Marshaller_clarifai_api_ListConceptsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListConceptsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptResponse> __Marshaller_clarifai_api_MultiConceptResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiConceptResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptsSearchesRequest> __Marshaller_clarifai_api_PostConceptsSearchesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostConceptsSearchesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptsRequest> __Marshaller_clarifai_api_PostConceptsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostConceptsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchConceptsRequest> __Marshaller_clarifai_api_PatchConceptsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchConceptsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetConceptLanguageRequest> __Marshaller_clarifai_api_GetConceptLanguageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetConceptLanguageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleConceptLanguageResponse> __Marshaller_clarifai_api_SingleConceptLanguageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleConceptLanguageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptLanguagesRequest> __Marshaller_clarifai_api_ListConceptLanguagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListConceptLanguagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptLanguageResponse> __Marshaller_clarifai_api_MultiConceptLanguageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiConceptLanguageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptLanguagesRequest> __Marshaller_clarifai_api_PostConceptLanguagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostConceptLanguagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchConceptLanguagesRequest> __Marshaller_clarifai_api_PatchConceptLanguagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchConceptLanguagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptRelationsRequest> __Marshaller_clarifai_api_ListConceptRelationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListConceptRelationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptRelationResponse> __Marshaller_clarifai_api_MultiConceptRelationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiConceptRelationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptRelationsRequest> __Marshaller_clarifai_api_PostConceptRelationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostConceptRelationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteConceptRelationsRequest> __Marshaller_clarifai_api_DeleteConceptRelationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteConceptRelationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.Status.BaseResponse> __Marshaller_clarifai_api_status_BaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.Status.BaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListKnowledgeGraphsRequest> __Marshaller_clarifai_api_ListKnowledgeGraphsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListKnowledgeGraphsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiKnowledgeGraphResponse> __Marshaller_clarifai_api_MultiKnowledgeGraphResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiKnowledgeGraphResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostKnowledgeGraphsRequest> __Marshaller_clarifai_api_PostKnowledgeGraphsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostKnowledgeGraphsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptMappingJobsRequest> __Marshaller_clarifai_api_PostConceptMappingJobsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostConceptMappingJobsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptMappingJobResponse> __Marshaller_clarifai_api_MultiConceptMappingJobResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiConceptMappingJobResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAnnotationRequest> __Marshaller_clarifai_api_GetAnnotationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetAnnotationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAnnotationResponse> __Marshaller_clarifai_api_SingleAnnotationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleAnnotationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAnnotationsRequest> __Marshaller_clarifai_api_ListAnnotationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListAnnotationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAnnotationResponse> __Marshaller_clarifai_api_MultiAnnotationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiAnnotationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationsRequest> __Marshaller_clarifai_api_PostAnnotationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostAnnotationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationsRequest> __Marshaller_clarifai_api_PatchAnnotationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchAnnotationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationRequest> __Marshaller_clarifai_api_DeleteAnnotationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteAnnotationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationsRequest> __Marshaller_clarifai_api_DeleteAnnotationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteAnnotationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationsSearchesRequest> __Marshaller_clarifai_api_PostAnnotationsSearchesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostAnnotationsSearchesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiSearchResponse> __Marshaller_clarifai_api_MultiSearchResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiSearchResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputCountRequest> __Marshaller_clarifai_api_GetInputCountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetInputCountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInputCountResponse> __Marshaller_clarifai_api_SingleInputCountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleInputCountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.StreamInputsRequest> __Marshaller_clarifai_api_StreamInputsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.StreamInputsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiInputResponse> __Marshaller_clarifai_api_MultiInputResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiInputResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputRequest> __Marshaller_clarifai_api_GetInputRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetInputRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInputResponse> __Marshaller_clarifai_api_SingleInputResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleInputResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListInputsRequest> __Marshaller_clarifai_api_ListInputsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListInputsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsRequest> __Marshaller_clarifai_api_PostInputsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostInputsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchInputsRequest> __Marshaller_clarifai_api_PatchInputsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchInputsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteInputRequest> __Marshaller_clarifai_api_DeleteInputRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteInputRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteInputsRequest> __Marshaller_clarifai_api_DeleteInputsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteInputsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsSearchesRequest> __Marshaller_clarifai_api_PostInputsSearchesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostInputsSearchesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelOutputsRequest> __Marshaller_clarifai_api_PostModelOutputsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostModelOutputsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiOutputResponse> __Marshaller_clarifai_api_MultiOutputResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiOutputResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelTypeRequest> __Marshaller_clarifai_api_GetModelTypeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetModelTypeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelTypeResponse> __Marshaller_clarifai_api_SingleModelTypeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleModelTypeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelTypesRequest> __Marshaller_clarifai_api_ListModelTypesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListModelTypesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelTypeResponse> __Marshaller_clarifai_api_MultiModelTypeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiModelTypeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelRequest> __Marshaller_clarifai_api_GetModelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetModelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelResponse> __Marshaller_clarifai_api_SingleModelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleModelResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelsRequest> __Marshaller_clarifai_api_ListModelsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListModelsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelResponse> __Marshaller_clarifai_api_MultiModelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiModelResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelsSearchesRequest> __Marshaller_clarifai_api_PostModelsSearchesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostModelsSearchesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelsRequest> __Marshaller_clarifai_api_PostModelsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostModelsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelsRequest> __Marshaller_clarifai_api_PatchModelsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchModelsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelRequest> __Marshaller_clarifai_api_DeleteModelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteModelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelsRequest> __Marshaller_clarifai_api_DeleteModelsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteModelsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelInputsRequest> __Marshaller_clarifai_api_ListModelInputsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListModelInputsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelVersionRequest> __Marshaller_clarifai_api_GetModelVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetModelVersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelVersionResponse> __Marshaller_clarifai_api_SingleModelVersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleModelVersionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelVersionsRequest> __Marshaller_clarifai_api_ListModelVersionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListModelVersionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelVersionResponse> __Marshaller_clarifai_api_MultiModelVersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiModelVersionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionsRequest> __Marshaller_clarifai_api_PostModelVersionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostModelVersionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelVersionRequest> __Marshaller_clarifai_api_DeleteModelVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteModelVersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelVersionMetricsRequest> __Marshaller_clarifai_api_GetModelVersionMetricsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetModelVersionMetricsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionMetricsRequest> __Marshaller_clarifai_api_PostModelVersionMetricsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostModelVersionMetricsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetWorkflowRequest> __Marshaller_clarifai_api_GetWorkflowRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetWorkflowRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleWorkflowResponse> __Marshaller_clarifai_api_SingleWorkflowResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleWorkflowResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListWorkflowsRequest> __Marshaller_clarifai_api_ListWorkflowsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListWorkflowsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiWorkflowResponse> __Marshaller_clarifai_api_MultiWorkflowResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiWorkflowResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowsRequest> __Marshaller_clarifai_api_PostWorkflowsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostWorkflowsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchWorkflowsRequest> __Marshaller_clarifai_api_PatchWorkflowsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchWorkflowsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowRequest> __Marshaller_clarifai_api_DeleteWorkflowRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteWorkflowRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowsRequest> __Marshaller_clarifai_api_DeleteWorkflowsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteWorkflowsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsRequest> __Marshaller_clarifai_api_PostWorkflowResultsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostWorkflowResultsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsResponse> __Marshaller_clarifai_api_PostWorkflowResultsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostWorkflowResultsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest> __Marshaller_clarifai_api_PostWorkflowResultsSimilarityRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostWorkflowResultsSimilarityRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> __Marshaller_clarifai_api_PostWorkflowResultsSimilarityResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostWorkflowResultsSimilarityResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetKeyRequest> __Marshaller_clarifai_api_GetKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleKeyResponse> __Marshaller_clarifai_api_SingleKeyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleKeyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListKeysRequest> __Marshaller_clarifai_api_ListKeysRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListKeysRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiKeyResponse> __Marshaller_clarifai_api_MultiKeyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiKeyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAppKeysRequest> __Marshaller_clarifai_api_ListAppKeysRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListAppKeysRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteKeyRequest> __Marshaller_clarifai_api_DeleteKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostKeysRequest> __Marshaller_clarifai_api_PostKeysRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostKeysRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchKeysRequest> __Marshaller_clarifai_api_PatchKeysRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchKeysRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MyScopesRequest> __Marshaller_clarifai_api_MyScopesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MyScopesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiScopeResponse> __Marshaller_clarifai_api_MultiScopeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiScopeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListScopesRequest> __Marshaller_clarifai_api_ListScopesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListScopesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiScopeDepsResponse> __Marshaller_clarifai_api_MultiScopeDepsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiScopeDepsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAppRequest> __Marshaller_clarifai_api_GetAppRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetAppRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAppResponse> __Marshaller_clarifai_api_SingleAppResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleAppResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAppsRequest> __Marshaller_clarifai_api_ListAppsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListAppsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAppResponse> __Marshaller_clarifai_api_MultiAppResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiAppResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAppRequest> __Marshaller_clarifai_api_DeleteAppRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteAppRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAppsRequest> __Marshaller_clarifai_api_PostAppsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostAppsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAppsRequest> __Marshaller_clarifai_api_PatchAppsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchAppsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAppsSearchesRequest> __Marshaller_clarifai_api_PostAppsSearchesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostAppsSearchesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostValidatePasswordRequest> __Marshaller_clarifai_api_PostValidatePasswordRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostValidatePasswordRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SinglePasswordValidationResponse> __Marshaller_clarifai_api_SinglePasswordValidationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SinglePasswordValidationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetSearchRequest> __Marshaller_clarifai_api_GetSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleSearchResponse> __Marshaller_clarifai_api_SingleSearchResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleSearchResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListSearchesRequest> __Marshaller_clarifai_api_ListSearchesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListSearchesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostSearchesRequest> __Marshaller_clarifai_api_PostSearchesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostSearchesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostSearchesByIDRequest> __Marshaller_clarifai_api_PostSearchesByIDRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostSearchesByIDRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_PostAnnotationSearchMetricsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostAnnotationSearchMetricsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiAnnotationSearchMetricsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_GetAnnotationSearchMetricsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetAnnotationSearchMetricsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_ListAnnotationSearchMetricsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListAnnotationSearchMetricsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_DeleteAnnotationSearchMetricsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteSearchRequest> __Marshaller_clarifai_api_DeleteSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListStatusCodesRequest> __Marshaller_clarifai_api_ListStatusCodesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListStatusCodesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiStatusCodeResponse> __Marshaller_clarifai_api_MultiStatusCodeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiStatusCodeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetStatusCodeRequest> __Marshaller_clarifai_api_GetStatusCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetStatusCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleStatusCodeResponse> __Marshaller_clarifai_api_SingleStatusCodeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleStatusCodeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListCollaboratorsRequest> __Marshaller_clarifai_api_ListCollaboratorsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListCollaboratorsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiCollaboratorsResponse> __Marshaller_clarifai_api_MultiCollaboratorsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiCollaboratorsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostCollaboratorsRequest> __Marshaller_clarifai_api_PostCollaboratorsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostCollaboratorsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchCollaboratorsRequest> __Marshaller_clarifai_api_PatchCollaboratorsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchCollaboratorsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteCollaboratorsRequest> __Marshaller_clarifai_api_DeleteCollaboratorsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteCollaboratorsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListCollaborationsRequest> __Marshaller_clarifai_api_ListCollaborationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListCollaborationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiCollaborationsResponse> __Marshaller_clarifai_api_MultiCollaborationsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiCollaborationsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAppDuplicationsRequest> __Marshaller_clarifai_api_PostAppDuplicationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostAppDuplicationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAppDuplicationsResponse> __Marshaller_clarifai_api_MultiAppDuplicationsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiAppDuplicationsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAppDuplicationsRequest> __Marshaller_clarifai_api_ListAppDuplicationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListAppDuplicationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAppDuplicationRequest> __Marshaller_clarifai_api_GetAppDuplicationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetAppDuplicationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAppDuplicationResponse> __Marshaller_clarifai_api_SingleAppDuplicationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleAppDuplicationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostTasksRequest> __Marshaller_clarifai_api_PostTasksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostTasksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiTaskResponse> __Marshaller_clarifai_api_MultiTaskResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiTaskResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetTaskAnnotationsCountRequest> __Marshaller_clarifai_api_GetTaskAnnotationsCountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetTaskAnnotationsCountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleTaskAnnotationsCountResponse> __Marshaller_clarifai_api_SingleTaskAnnotationsCountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleTaskAnnotationsCountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetTaskRequest> __Marshaller_clarifai_api_GetTaskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetTaskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleTaskResponse> __Marshaller_clarifai_api_SingleTaskResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleTaskResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListTasksRequest> __Marshaller_clarifai_api_ListTasksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListTasksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchTasksRequest> __Marshaller_clarifai_api_PatchTasksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchTasksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteTasksRequest> __Marshaller_clarifai_api_DeleteTasksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteTasksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostCollectorsRequest> __Marshaller_clarifai_api_PostCollectorsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostCollectorsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiCollectorResponse> __Marshaller_clarifai_api_MultiCollectorResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiCollectorResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.GetCollectorRequest> __Marshaller_clarifai_api_GetCollectorRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.GetCollectorRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleCollectorResponse> __Marshaller_clarifai_api_SingleCollectorResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.SingleCollectorResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.ListCollectorsRequest> __Marshaller_clarifai_api_ListCollectorsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.ListCollectorsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchCollectorsRequest> __Marshaller_clarifai_api_PatchCollectorsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PatchCollectorsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteCollectorsRequest> __Marshaller_clarifai_api_DeleteCollectorsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.DeleteCollectorsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostStatValuesRequest> __Marshaller_clarifai_api_PostStatValuesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostStatValuesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiStatValueResponse> __Marshaller_clarifai_api_MultiStatValueResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiStatValueResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.PostStatValuesAggregateRequest> __Marshaller_clarifai_api_PostStatValuesAggregateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.PostStatValuesAggregateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiStatValueAggregateResponse> __Marshaller_clarifai_api_MultiStatValueAggregateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Clarifai.Api.MultiStatValueAggregateResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Clarifai.Api.GetConceptCountsRequest, global::Clarifai.Api.MultiConceptCountResponse> __Method_GetConceptCounts = new grpc::Method<global::Clarifai.Api.GetConceptCountsRequest, global::Clarifai.Api.MultiConceptCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConceptCounts",
        __Marshaller_clarifai_api_GetConceptCountsRequest,
        __Marshaller_clarifai_api_MultiConceptCountResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetConceptRequest, global::Clarifai.Api.SingleConceptResponse> __Method_GetConcept = new grpc::Method<global::Clarifai.Api.GetConceptRequest, global::Clarifai.Api.SingleConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConcept",
        __Marshaller_clarifai_api_GetConceptRequest,
        __Marshaller_clarifai_api_SingleConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_ListConcepts = new grpc::Method<global::Clarifai.Api.ListConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConcepts",
        __Marshaller_clarifai_api_ListConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptsSearchesRequest, global::Clarifai.Api.MultiConceptResponse> __Method_PostConceptsSearches = new grpc::Method<global::Clarifai.Api.PostConceptsSearchesRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptsSearches",
        __Marshaller_clarifai_api_PostConceptsSearchesRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_PostConcepts = new grpc::Method<global::Clarifai.Api.PostConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConcepts",
        __Marshaller_clarifai_api_PostConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_PatchConcepts = new grpc::Method<global::Clarifai.Api.PatchConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchConcepts",
        __Marshaller_clarifai_api_PatchConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetConceptLanguageRequest, global::Clarifai.Api.SingleConceptLanguageResponse> __Method_GetConceptLanguage = new grpc::Method<global::Clarifai.Api.GetConceptLanguageRequest, global::Clarifai.Api.SingleConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConceptLanguage",
        __Marshaller_clarifai_api_GetConceptLanguageRequest,
        __Marshaller_clarifai_api_SingleConceptLanguageResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse> __Method_ListConceptLanguages = new grpc::Method<global::Clarifai.Api.ListConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConceptLanguages",
        __Marshaller_clarifai_api_ListConceptLanguagesRequest,
        __Marshaller_clarifai_api_MultiConceptLanguageResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse> __Method_PostConceptLanguages = new grpc::Method<global::Clarifai.Api.PostConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptLanguages",
        __Marshaller_clarifai_api_PostConceptLanguagesRequest,
        __Marshaller_clarifai_api_MultiConceptLanguageResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse> __Method_PatchConceptLanguages = new grpc::Method<global::Clarifai.Api.PatchConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchConceptLanguages",
        __Marshaller_clarifai_api_PatchConceptLanguagesRequest,
        __Marshaller_clarifai_api_MultiConceptLanguageResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse> __Method_ListConceptRelations = new grpc::Method<global::Clarifai.Api.ListConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConceptRelations",
        __Marshaller_clarifai_api_ListConceptRelationsRequest,
        __Marshaller_clarifai_api_MultiConceptRelationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse> __Method_PostConceptRelations = new grpc::Method<global::Clarifai.Api.PostConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptRelations",
        __Marshaller_clarifai_api_PostConceptRelationsRequest,
        __Marshaller_clarifai_api_MultiConceptRelationResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteConceptRelationsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteConceptRelations = new grpc::Method<global::Clarifai.Api.DeleteConceptRelationsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConceptRelations",
        __Marshaller_clarifai_api_DeleteConceptRelationsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse> __Method_ListKnowledgeGraphs = new grpc::Method<global::Clarifai.Api.ListKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListKnowledgeGraphs",
        __Marshaller_clarifai_api_ListKnowledgeGraphsRequest,
        __Marshaller_clarifai_api_MultiKnowledgeGraphResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse> __Method_PostKnowledgeGraphs = new grpc::Method<global::Clarifai.Api.PostKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostKnowledgeGraphs",
        __Marshaller_clarifai_api_PostKnowledgeGraphsRequest,
        __Marshaller_clarifai_api_MultiKnowledgeGraphResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostConceptMappingJobsRequest, global::Clarifai.Api.MultiConceptMappingJobResponse> __Method_PostConceptMappingJobs = new grpc::Method<global::Clarifai.Api.PostConceptMappingJobsRequest, global::Clarifai.Api.MultiConceptMappingJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptMappingJobs",
        __Marshaller_clarifai_api_PostConceptMappingJobsRequest,
        __Marshaller_clarifai_api_MultiConceptMappingJobResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetAnnotationRequest, global::Clarifai.Api.SingleAnnotationResponse> __Method_GetAnnotation = new grpc::Method<global::Clarifai.Api.GetAnnotationRequest, global::Clarifai.Api.SingleAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnnotation",
        __Marshaller_clarifai_api_GetAnnotationRequest,
        __Marshaller_clarifai_api_SingleAnnotationResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse> __Method_ListAnnotations = new grpc::Method<global::Clarifai.Api.ListAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotations",
        __Marshaller_clarifai_api_ListAnnotationsRequest,
        __Marshaller_clarifai_api_MultiAnnotationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse> __Method_PostAnnotations = new grpc::Method<global::Clarifai.Api.PostAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotations",
        __Marshaller_clarifai_api_PostAnnotationsRequest,
        __Marshaller_clarifai_api_MultiAnnotationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse> __Method_PatchAnnotations = new grpc::Method<global::Clarifai.Api.PatchAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnnotations",
        __Marshaller_clarifai_api_PatchAnnotationsRequest,
        __Marshaller_clarifai_api_MultiAnnotationResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotation = new grpc::Method<global::Clarifai.Api.DeleteAnnotationRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotation",
        __Marshaller_clarifai_api_DeleteAnnotationRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotations = new grpc::Method<global::Clarifai.Api.DeleteAnnotationsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotations",
        __Marshaller_clarifai_api_DeleteAnnotationsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostAnnotationsSearches = new grpc::Method<global::Clarifai.Api.PostAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotationsSearches",
        __Marshaller_clarifai_api_PostAnnotationsSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetInputCountRequest, global::Clarifai.Api.SingleInputCountResponse> __Method_GetInputCount = new grpc::Method<global::Clarifai.Api.GetInputCountRequest, global::Clarifai.Api.SingleInputCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInputCount",
        __Marshaller_clarifai_api_GetInputCountRequest,
        __Marshaller_clarifai_api_SingleInputCountResponse);

    static readonly grpc::Method<global::Clarifai.Api.StreamInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_StreamInputs = new grpc::Method<global::Clarifai.Api.StreamInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StreamInputs",
        __Marshaller_clarifai_api_StreamInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetInputRequest, global::Clarifai.Api.SingleInputResponse> __Method_GetInput = new grpc::Method<global::Clarifai.Api.GetInputRequest, global::Clarifai.Api.SingleInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInput",
        __Marshaller_clarifai_api_GetInputRequest,
        __Marshaller_clarifai_api_SingleInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_ListInputs = new grpc::Method<global::Clarifai.Api.ListInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInputs",
        __Marshaller_clarifai_api_ListInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_PostInputs = new grpc::Method<global::Clarifai.Api.PostInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputs",
        __Marshaller_clarifai_api_PostInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_PatchInputs = new grpc::Method<global::Clarifai.Api.PatchInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchInputs",
        __Marshaller_clarifai_api_PatchInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteInputRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteInput = new grpc::Method<global::Clarifai.Api.DeleteInputRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInput",
        __Marshaller_clarifai_api_DeleteInputRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteInputsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteInputs = new grpc::Method<global::Clarifai.Api.DeleteInputsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInputs",
        __Marshaller_clarifai_api_DeleteInputsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostInputsSearches = new grpc::Method<global::Clarifai.Api.PostInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputsSearches",
        __Marshaller_clarifai_api_PostInputsSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelOutputsRequest, global::Clarifai.Api.MultiOutputResponse> __Method_PostModelOutputs = new grpc::Method<global::Clarifai.Api.PostModelOutputsRequest, global::Clarifai.Api.MultiOutputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelOutputs",
        __Marshaller_clarifai_api_PostModelOutputsRequest,
        __Marshaller_clarifai_api_MultiOutputResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelTypeRequest, global::Clarifai.Api.SingleModelTypeResponse> __Method_GetModelType = new grpc::Method<global::Clarifai.Api.GetModelTypeRequest, global::Clarifai.Api.SingleModelTypeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelType",
        __Marshaller_clarifai_api_GetModelTypeRequest,
        __Marshaller_clarifai_api_SingleModelTypeResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelTypesRequest, global::Clarifai.Api.MultiModelTypeResponse> __Method_ListModelTypes = new grpc::Method<global::Clarifai.Api.ListModelTypesRequest, global::Clarifai.Api.MultiModelTypeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelTypes",
        __Marshaller_clarifai_api_ListModelTypesRequest,
        __Marshaller_clarifai_api_MultiModelTypeResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse> __Method_GetModel = new grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModel",
        __Marshaller_clarifai_api_GetModelRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse> __Method_GetModelOutputInfo = new grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelOutputInfo",
        __Marshaller_clarifai_api_GetModelRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelsRequest, global::Clarifai.Api.MultiModelResponse> __Method_ListModels = new grpc::Method<global::Clarifai.Api.ListModelsRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModels",
        __Marshaller_clarifai_api_ListModelsRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelsSearchesRequest, global::Clarifai.Api.MultiModelResponse> __Method_PostModelsSearches = new grpc::Method<global::Clarifai.Api.PostModelsSearchesRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelsSearches",
        __Marshaller_clarifai_api_PostModelsSearchesRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelsRequest, global::Clarifai.Api.SingleModelResponse> __Method_PostModels = new grpc::Method<global::Clarifai.Api.PostModelsRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModels",
        __Marshaller_clarifai_api_PostModelsRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchModelsRequest, global::Clarifai.Api.MultiModelResponse> __Method_PatchModels = new grpc::Method<global::Clarifai.Api.PatchModelsRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModels",
        __Marshaller_clarifai_api_PatchModelsRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModelRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModel = new grpc::Method<global::Clarifai.Api.DeleteModelRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModel",
        __Marshaller_clarifai_api_DeleteModelRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModelsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModels = new grpc::Method<global::Clarifai.Api.DeleteModelsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModels",
        __Marshaller_clarifai_api_DeleteModelsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_ListModelInputs = new grpc::Method<global::Clarifai.Api.ListModelInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelInputs",
        __Marshaller_clarifai_api_ListModelInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelVersionRequest, global::Clarifai.Api.SingleModelVersionResponse> __Method_GetModelVersion = new grpc::Method<global::Clarifai.Api.GetModelVersionRequest, global::Clarifai.Api.SingleModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelVersion",
        __Marshaller_clarifai_api_GetModelVersionRequest,
        __Marshaller_clarifai_api_SingleModelVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse> __Method_ListModelVersions = new grpc::Method<global::Clarifai.Api.ListModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelVersions",
        __Marshaller_clarifai_api_ListModelVersionsRequest,
        __Marshaller_clarifai_api_MultiModelVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionsRequest, global::Clarifai.Api.SingleModelResponse> __Method_PostModelVersions = new grpc::Method<global::Clarifai.Api.PostModelVersionsRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersions",
        __Marshaller_clarifai_api_PostModelVersionsRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteModelVersionRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModelVersion = new grpc::Method<global::Clarifai.Api.DeleteModelVersionRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModelVersion",
        __Marshaller_clarifai_api_DeleteModelVersionRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse> __Method_GetModelVersionMetrics = new grpc::Method<global::Clarifai.Api.GetModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelVersionMetrics",
        __Marshaller_clarifai_api_GetModelVersionMetricsRequest,
        __Marshaller_clarifai_api_SingleModelVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse> __Method_PostModelVersionMetrics = new grpc::Method<global::Clarifai.Api.PostModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersionMetrics",
        __Marshaller_clarifai_api_PostModelVersionMetricsRequest,
        __Marshaller_clarifai_api_SingleModelVersionResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetWorkflowRequest, global::Clarifai.Api.SingleWorkflowResponse> __Method_GetWorkflow = new grpc::Method<global::Clarifai.Api.GetWorkflowRequest, global::Clarifai.Api.SingleWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflow",
        __Marshaller_clarifai_api_GetWorkflowRequest,
        __Marshaller_clarifai_api_SingleWorkflowResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_ListWorkflows = new grpc::Method<global::Clarifai.Api.ListWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkflows",
        __Marshaller_clarifai_api_ListWorkflowsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_PostWorkflows = new grpc::Method<global::Clarifai.Api.PostWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflows",
        __Marshaller_clarifai_api_PostWorkflowsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_PatchWorkflows = new grpc::Method<global::Clarifai.Api.PatchWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchWorkflows",
        __Marshaller_clarifai_api_PatchWorkflowsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteWorkflowRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteWorkflow = new grpc::Method<global::Clarifai.Api.DeleteWorkflowRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflow",
        __Marshaller_clarifai_api_DeleteWorkflowRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteWorkflowsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteWorkflows = new grpc::Method<global::Clarifai.Api.DeleteWorkflowsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflows",
        __Marshaller_clarifai_api_DeleteWorkflowsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowResultsRequest, global::Clarifai.Api.PostWorkflowResultsResponse> __Method_PostWorkflowResults = new grpc::Method<global::Clarifai.Api.PostWorkflowResultsRequest, global::Clarifai.Api.PostWorkflowResultsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowResults",
        __Marshaller_clarifai_api_PostWorkflowResultsRequest,
        __Marshaller_clarifai_api_PostWorkflowResultsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> __Method_PostWorkflowResultsSimilarity = new grpc::Method<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowResultsSimilarity",
        __Marshaller_clarifai_api_PostWorkflowResultsSimilarityRequest,
        __Marshaller_clarifai_api_PostWorkflowResultsSimilarityResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetKeyRequest, global::Clarifai.Api.SingleKeyResponse> __Method_GetKey = new grpc::Method<global::Clarifai.Api.GetKeyRequest, global::Clarifai.Api.SingleKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetKey",
        __Marshaller_clarifai_api_GetKeyRequest,
        __Marshaller_clarifai_api_SingleKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_ListKeys = new grpc::Method<global::Clarifai.Api.ListKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListKeys",
        __Marshaller_clarifai_api_ListKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAppKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_ListAppKeys = new grpc::Method<global::Clarifai.Api.ListAppKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAppKeys",
        __Marshaller_clarifai_api_ListAppKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteKeyRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteKey = new grpc::Method<global::Clarifai.Api.DeleteKeyRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteKey",
        __Marshaller_clarifai_api_DeleteKeyRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_PostKeys = new grpc::Method<global::Clarifai.Api.PostKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostKeys",
        __Marshaller_clarifai_api_PostKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_PatchKeys = new grpc::Method<global::Clarifai.Api.PatchKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchKeys",
        __Marshaller_clarifai_api_PatchKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    static readonly grpc::Method<global::Clarifai.Api.MyScopesRequest, global::Clarifai.Api.MultiScopeResponse> __Method_MyScopes = new grpc::Method<global::Clarifai.Api.MyScopesRequest, global::Clarifai.Api.MultiScopeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MyScopes",
        __Marshaller_clarifai_api_MyScopesRequest,
        __Marshaller_clarifai_api_MultiScopeResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListScopesRequest, global::Clarifai.Api.MultiScopeDepsResponse> __Method_ListScopes = new grpc::Method<global::Clarifai.Api.ListScopesRequest, global::Clarifai.Api.MultiScopeDepsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListScopes",
        __Marshaller_clarifai_api_ListScopesRequest,
        __Marshaller_clarifai_api_MultiScopeDepsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetAppRequest, global::Clarifai.Api.SingleAppResponse> __Method_GetApp = new grpc::Method<global::Clarifai.Api.GetAppRequest, global::Clarifai.Api.SingleAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApp",
        __Marshaller_clarifai_api_GetAppRequest,
        __Marshaller_clarifai_api_SingleAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAppsRequest, global::Clarifai.Api.MultiAppResponse> __Method_ListApps = new grpc::Method<global::Clarifai.Api.ListAppsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListApps",
        __Marshaller_clarifai_api_ListAppsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteAppRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteApp = new grpc::Method<global::Clarifai.Api.DeleteAppRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteApp",
        __Marshaller_clarifai_api_DeleteAppRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAppsRequest, global::Clarifai.Api.MultiAppResponse> __Method_PostApps = new grpc::Method<global::Clarifai.Api.PostAppsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostApps",
        __Marshaller_clarifai_api_PostAppsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchAppsRequest, global::Clarifai.Api.MultiAppResponse> __Method_PatchApps = new grpc::Method<global::Clarifai.Api.PatchAppsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchApps",
        __Marshaller_clarifai_api_PatchAppsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAppsSearchesRequest, global::Clarifai.Api.MultiAppResponse> __Method_PostAppsSearches = new grpc::Method<global::Clarifai.Api.PostAppsSearchesRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAppsSearches",
        __Marshaller_clarifai_api_PostAppsSearchesRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostValidatePasswordRequest, global::Clarifai.Api.SinglePasswordValidationResponse> __Method_PostValidatePassword = new grpc::Method<global::Clarifai.Api.PostValidatePasswordRequest, global::Clarifai.Api.SinglePasswordValidationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostValidatePassword",
        __Marshaller_clarifai_api_PostValidatePasswordRequest,
        __Marshaller_clarifai_api_SinglePasswordValidationResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetSearchRequest, global::Clarifai.Api.SingleSearchResponse> __Method_GetSearch = new grpc::Method<global::Clarifai.Api.GetSearchRequest, global::Clarifai.Api.SingleSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSearch",
        __Marshaller_clarifai_api_GetSearchRequest,
        __Marshaller_clarifai_api_SingleSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_ListSearches = new grpc::Method<global::Clarifai.Api.ListSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSearches",
        __Marshaller_clarifai_api_ListSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostSearches = new grpc::Method<global::Clarifai.Api.PostSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostSearches",
        __Marshaller_clarifai_api_PostSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostSearchesByIDRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostSearchesByID = new grpc::Method<global::Clarifai.Api.PostSearchesByIDRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostSearchesByID",
        __Marshaller_clarifai_api_PostSearchesByIDRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Method_PostAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.PostAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotationSearchMetrics",
        __Marshaller_clarifai_api_PostAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Method_GetAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.GetAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnnotationSearchMetrics",
        __Marshaller_clarifai_api_GetAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Method_ListAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.ListAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotationSearchMetrics",
        __Marshaller_clarifai_api_ListAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotationSearchMetrics",
        __Marshaller_clarifai_api_DeleteAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteSearchRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteSearch = new grpc::Method<global::Clarifai.Api.DeleteSearchRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSearch",
        __Marshaller_clarifai_api_DeleteSearchRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListStatusCodesRequest, global::Clarifai.Api.MultiStatusCodeResponse> __Method_ListStatusCodes = new grpc::Method<global::Clarifai.Api.ListStatusCodesRequest, global::Clarifai.Api.MultiStatusCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListStatusCodes",
        __Marshaller_clarifai_api_ListStatusCodesRequest,
        __Marshaller_clarifai_api_MultiStatusCodeResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetStatusCodeRequest, global::Clarifai.Api.SingleStatusCodeResponse> __Method_GetStatusCode = new grpc::Method<global::Clarifai.Api.GetStatusCodeRequest, global::Clarifai.Api.SingleStatusCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatusCode",
        __Marshaller_clarifai_api_GetStatusCodeRequest,
        __Marshaller_clarifai_api_SingleStatusCodeResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse> __Method_ListCollaborators = new grpc::Method<global::Clarifai.Api.ListCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollaborators",
        __Marshaller_clarifai_api_ListCollaboratorsRequest,
        __Marshaller_clarifai_api_MultiCollaboratorsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse> __Method_PostCollaborators = new grpc::Method<global::Clarifai.Api.PostCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostCollaborators",
        __Marshaller_clarifai_api_PostCollaboratorsRequest,
        __Marshaller_clarifai_api_MultiCollaboratorsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse> __Method_PatchCollaborators = new grpc::Method<global::Clarifai.Api.PatchCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchCollaborators",
        __Marshaller_clarifai_api_PatchCollaboratorsRequest,
        __Marshaller_clarifai_api_MultiCollaboratorsResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteCollaboratorsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteCollaborators = new grpc::Method<global::Clarifai.Api.DeleteCollaboratorsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCollaborators",
        __Marshaller_clarifai_api_DeleteCollaboratorsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListCollaborationsRequest, global::Clarifai.Api.MultiCollaborationsResponse> __Method_ListCollaborations = new grpc::Method<global::Clarifai.Api.ListCollaborationsRequest, global::Clarifai.Api.MultiCollaborationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollaborations",
        __Marshaller_clarifai_api_ListCollaborationsRequest,
        __Marshaller_clarifai_api_MultiCollaborationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse> __Method_PostAppDuplications = new grpc::Method<global::Clarifai.Api.PostAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAppDuplications",
        __Marshaller_clarifai_api_PostAppDuplicationsRequest,
        __Marshaller_clarifai_api_MultiAppDuplicationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse> __Method_ListAppDuplications = new grpc::Method<global::Clarifai.Api.ListAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAppDuplications",
        __Marshaller_clarifai_api_ListAppDuplicationsRequest,
        __Marshaller_clarifai_api_MultiAppDuplicationsResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetAppDuplicationRequest, global::Clarifai.Api.SingleAppDuplicationResponse> __Method_GetAppDuplication = new grpc::Method<global::Clarifai.Api.GetAppDuplicationRequest, global::Clarifai.Api.SingleAppDuplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAppDuplication",
        __Marshaller_clarifai_api_GetAppDuplicationRequest,
        __Marshaller_clarifai_api_SingleAppDuplicationResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostTasksRequest, global::Clarifai.Api.MultiTaskResponse> __Method_PostTasks = new grpc::Method<global::Clarifai.Api.PostTasksRequest, global::Clarifai.Api.MultiTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostTasks",
        __Marshaller_clarifai_api_PostTasksRequest,
        __Marshaller_clarifai_api_MultiTaskResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetTaskAnnotationsCountRequest, global::Clarifai.Api.SingleTaskAnnotationsCountResponse> __Method_GetTaskAnnotationsCount = new grpc::Method<global::Clarifai.Api.GetTaskAnnotationsCountRequest, global::Clarifai.Api.SingleTaskAnnotationsCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTaskAnnotationsCount",
        __Marshaller_clarifai_api_GetTaskAnnotationsCountRequest,
        __Marshaller_clarifai_api_SingleTaskAnnotationsCountResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetTaskRequest, global::Clarifai.Api.SingleTaskResponse> __Method_GetTask = new grpc::Method<global::Clarifai.Api.GetTaskRequest, global::Clarifai.Api.SingleTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTask",
        __Marshaller_clarifai_api_GetTaskRequest,
        __Marshaller_clarifai_api_SingleTaskResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListTasksRequest, global::Clarifai.Api.MultiTaskResponse> __Method_ListTasks = new grpc::Method<global::Clarifai.Api.ListTasksRequest, global::Clarifai.Api.MultiTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTasks",
        __Marshaller_clarifai_api_ListTasksRequest,
        __Marshaller_clarifai_api_MultiTaskResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchTasksRequest, global::Clarifai.Api.MultiTaskResponse> __Method_PatchTasks = new grpc::Method<global::Clarifai.Api.PatchTasksRequest, global::Clarifai.Api.MultiTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchTasks",
        __Marshaller_clarifai_api_PatchTasksRequest,
        __Marshaller_clarifai_api_MultiTaskResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteTasksRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteTasks = new grpc::Method<global::Clarifai.Api.DeleteTasksRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTasks",
        __Marshaller_clarifai_api_DeleteTasksRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse> __Method_PostCollectors = new grpc::Method<global::Clarifai.Api.PostCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostCollectors",
        __Marshaller_clarifai_api_PostCollectorsRequest,
        __Marshaller_clarifai_api_MultiCollectorResponse);

    static readonly grpc::Method<global::Clarifai.Api.GetCollectorRequest, global::Clarifai.Api.SingleCollectorResponse> __Method_GetCollector = new grpc::Method<global::Clarifai.Api.GetCollectorRequest, global::Clarifai.Api.SingleCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCollector",
        __Marshaller_clarifai_api_GetCollectorRequest,
        __Marshaller_clarifai_api_SingleCollectorResponse);

    static readonly grpc::Method<global::Clarifai.Api.ListCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse> __Method_ListCollectors = new grpc::Method<global::Clarifai.Api.ListCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollectors",
        __Marshaller_clarifai_api_ListCollectorsRequest,
        __Marshaller_clarifai_api_MultiCollectorResponse);

    static readonly grpc::Method<global::Clarifai.Api.PatchCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse> __Method_PatchCollectors = new grpc::Method<global::Clarifai.Api.PatchCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchCollectors",
        __Marshaller_clarifai_api_PatchCollectorsRequest,
        __Marshaller_clarifai_api_MultiCollectorResponse);

    static readonly grpc::Method<global::Clarifai.Api.DeleteCollectorsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteCollectors = new grpc::Method<global::Clarifai.Api.DeleteCollectorsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCollectors",
        __Marshaller_clarifai_api_DeleteCollectorsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostStatValuesRequest, global::Clarifai.Api.MultiStatValueResponse> __Method_PostStatValues = new grpc::Method<global::Clarifai.Api.PostStatValuesRequest, global::Clarifai.Api.MultiStatValueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostStatValues",
        __Marshaller_clarifai_api_PostStatValuesRequest,
        __Marshaller_clarifai_api_MultiStatValueResponse);

    static readonly grpc::Method<global::Clarifai.Api.PostStatValuesAggregateRequest, global::Clarifai.Api.MultiStatValueAggregateResponse> __Method_PostStatValuesAggregate = new grpc::Method<global::Clarifai.Api.PostStatValuesAggregateRequest, global::Clarifai.Api.MultiStatValueAggregateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostStatValuesAggregate",
        __Marshaller_clarifai_api_PostStatValuesAggregateRequest,
        __Marshaller_clarifai_api_MultiStatValueAggregateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Clarifai.Api.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of V2</summary>
    [grpc::BindServiceMethod(typeof(V2), "BindService")]
    public abstract partial class V2Base
    {
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptCountResponse> GetConceptCounts(global::Clarifai.Api.GetConceptCountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleConceptResponse> GetConcept(global::Clarifai.Api.GetConceptRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> ListConcepts(global::Clarifai.Api.ListConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> PostConceptsSearches(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> PostConcepts(global::Clarifai.Api.PostConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> PatchConcepts(global::Clarifai.Api.PatchConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleConceptLanguageResponse> GetConceptLanguage(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptLanguageResponse> ListConceptLanguages(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new tranlsation for this concept.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptLanguageResponse> PostConceptLanguages(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptLanguageResponse> PatchConceptLanguages(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List concept relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptRelationResponse> ListConceptRelations(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptRelationResponse> PostConceptRelations(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteConceptRelations(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKnowledgeGraphResponse> ListKnowledgeGraphs(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKnowledgeGraphResponse> PostKnowledgeGraphs(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptMappingJobResponse> PostConceptMappingJobs(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAnnotationResponse> GetAnnotation(global::Clarifai.Api.GetAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotations(global::Clarifai.Api.ListAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationResponse> PostAnnotations(global::Clarifai.Api.PostAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationResponse> PatchAnnotations(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotation(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotations(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a search over annotation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostAnnotationsSearches(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputCountResponse> GetInputCount(global::Clarifai.Api.GetInputCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> StreamInputs(global::Clarifai.Api.StreamInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputResponse> GetInput(global::Clarifai.Api.GetInputRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> ListInputs(global::Clarifai.Api.ListInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add an input (or set of inputs) to an app.
      /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      /// it is asynchronous.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> PostInputs(global::Clarifai.Api.PostInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> PatchInputs(global::Clarifai.Api.PatchInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single input.  This call is synchronous.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteInput(global::Clarifai.Api.DeleteInputRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous. Use DeleteInput if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteInputs(global::Clarifai.Api.DeleteInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a search over input
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostInputsSearches(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiOutputResponse> PostModelOutputs(global::Clarifai.Api.PostModelOutputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelTypeResponse> GetModelType(global::Clarifai.Api.GetModelTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the model types available in the platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelTypeResponse> ListModelTypes(global::Clarifai.Api.ListModelTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> GetModel(global::Clarifai.Api.GetModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> GetModelOutputInfo(global::Clarifai.Api.GetModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> ListModels(global::Clarifai.Api.ListModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> PostModelsSearches(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a models to an app.
      /// FIXME(zeiler): this should have been a plural response.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> PostModels(global::Clarifai.Api.PostModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> PatchModels(global::Clarifai.Api.PatchModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModel(global::Clarifai.Api.DeleteModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModels(global::Clarifai.Api.DeleteModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> ListModelInputs(global::Clarifai.Api.ListModelInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersion(global::Clarifai.Api.GetModelVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelVersionResponse> ListModelVersions(global::Clarifai.Api.ListModelVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// FIXME(zeiler): this should have been a plural response.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> PostModelVersions(global::Clarifai.Api.PostModelVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersion(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionMetrics(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionResponse> PostModelVersionMetrics(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleWorkflowResponse> GetWorkflow(global::Clarifai.Api.GetWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> ListWorkflows(global::Clarifai.Api.ListWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> PostWorkflows(global::Clarifai.Api.PostWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflows(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflow(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflows(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostWorkflowResultsResponse> PostWorkflowResults(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> PostWorkflowResultsSimilarity(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleKeyResponse> GetKey(global::Clarifai.Api.GetKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> ListKeys(global::Clarifai.Api.ListKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> ListAppKeys(global::Clarifai.Api.ListAppKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteKey(global::Clarifai.Api.DeleteKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> PostKeys(global::Clarifai.Api.PostKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> PatchKeys(global::Clarifai.Api.PatchKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiScopeResponse> MyScopes(global::Clarifai.Api.MyScopesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all auth scopes available.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiScopeDepsResponse> ListScopes(global::Clarifai.Api.ListScopesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAppResponse> GetApp(global::Clarifai.Api.GetAppRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> ListApps(global::Clarifai.Api.ListAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteApp(global::Clarifai.Api.DeleteAppRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PostApps(global::Clarifai.Api.PostAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PatchApps(global::Clarifai.Api.PatchAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PostAppsSearches(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SinglePasswordValidationResponse> PostValidatePassword(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a saved search.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleSearchResponse> GetSearch(global::Clarifai.Api.GetSearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all saved searches.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> ListSearches(global::Clarifai.Api.ListSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a new search and optionally save it.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostSearches(global::Clarifai.Api.PostSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a previously saved search.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostSearchesByID(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> PostAnnotationSearchMetrics(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> GetAnnotationSearchMetrics(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> ListAnnotationSearchMetrics(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationSearchMetrics(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteSearch(global::Clarifai.Api.DeleteSearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiStatusCodeResponse> ListStatusCodes(global::Clarifai.Api.ListStatusCodesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleStatusCodeResponse> GetStatusCode(global::Clarifai.Api.GetStatusCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaboratorsResponse> ListCollaborators(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaboratorsResponse> PostCollaborators(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaboratorsResponse> PatchCollaborators(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteCollaborators(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaborationsResponse> ListCollaborations(global::Clarifai.Api.ListCollaborationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppDuplicationsResponse> PostAppDuplications(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// list all the app duplications user triggers
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppDuplicationsResponse> ListAppDuplications(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get the app duplication status
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAppDuplicationResponse> GetAppDuplication(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTaskResponse> PostTasks(global::Clarifai.Api.PostTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Task annotation counts
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleTaskAnnotationsCountResponse> GetTaskAnnotationsCount(global::Clarifai.Api.GetTaskAnnotationsCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleTaskResponse> GetTask(global::Clarifai.Api.GetTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTaskResponse> ListTasks(global::Clarifai.Api.ListTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTaskResponse> PatchTasks(global::Clarifai.Api.PatchTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteTasks(global::Clarifai.Api.DeleteTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollectorResponse> PostCollectors(global::Clarifai.Api.PostCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleCollectorResponse> GetCollector(global::Clarifai.Api.GetCollectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollectorResponse> ListCollectors(global::Clarifai.Api.ListCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollectorResponse> PatchCollectors(global::Clarifai.Api.PatchCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteCollectors(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiStatValueResponse> PostStatValues(global::Clarifai.Api.PostStatValuesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiStatValueAggregateResponse> PostStatValuesAggregate(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for V2</summary>
    public partial class V2Client : grpc::ClientBase<V2Client>
    {
      /// <summary>Creates a new client for V2</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public V2Client(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for V2 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public V2Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected V2Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected V2Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptCountResponse GetConceptCounts(global::Clarifai.Api.GetConceptCountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptCounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptCountResponse GetConceptCounts(global::Clarifai.Api.GetConceptCountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConceptCounts, null, options, request);
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptCountResponse> GetConceptCountsAsync(global::Clarifai.Api.GetConceptCountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptCountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptCountResponse> GetConceptCountsAsync(global::Clarifai.Api.GetConceptCountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConceptCounts, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleConceptResponse GetConcept(global::Clarifai.Api.GetConceptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConcept(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleConceptResponse GetConcept(global::Clarifai.Api.GetConceptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConcept, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptResponse> GetConceptAsync(global::Clarifai.Api.GetConceptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptResponse> GetConceptAsync(global::Clarifai.Api.GetConceptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConcept, null, options, request);
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse ListConcepts(global::Clarifai.Api.ListConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse ListConcepts(global::Clarifai.Api.ListConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConcepts, null, options, request);
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListConceptsAsync(global::Clarifai.Api.ListConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListConceptsAsync(global::Clarifai.Api.ListConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConcepts, null, options, request);
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PostConceptsSearches(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PostConceptsSearches(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptsSearches, null, options, request);
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsSearchesAsync(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsSearchesAsync(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptsSearches, null, options, request);
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PostConcepts(global::Clarifai.Api.PostConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PostConcepts(global::Clarifai.Api.PostConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConcepts, null, options, request);
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsAsync(global::Clarifai.Api.PostConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsAsync(global::Clarifai.Api.PostConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConcepts, null, options, request);
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PatchConcepts(global::Clarifai.Api.PatchConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptResponse PatchConcepts(global::Clarifai.Api.PatchConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchConcepts, null, options, request);
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PatchConceptsAsync(global::Clarifai.Api.PatchConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PatchConceptsAsync(global::Clarifai.Api.PatchConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchConcepts, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleConceptLanguageResponse GetConceptLanguage(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptLanguage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleConceptLanguageResponse GetConceptLanguage(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConceptLanguage, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptLanguageResponse> GetConceptLanguageAsync(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptLanguageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptLanguageResponse> GetConceptLanguageAsync(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConceptLanguage, null, options, request);
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse ListConceptLanguages(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse ListConceptLanguages(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConceptLanguages, null, options, request);
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> ListConceptLanguagesAsync(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> ListConceptLanguagesAsync(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Add a new tranlsation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PostConceptLanguages(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new tranlsation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PostConceptLanguages(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Add a new tranlsation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PostConceptLanguagesAsync(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new tranlsation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PostConceptLanguagesAsync(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PatchConceptLanguages(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConceptLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PatchConceptLanguages(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PatchConceptLanguagesAsync(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConceptLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PatchConceptLanguagesAsync(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchConceptLanguages, null, options, request);
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptRelationResponse ListConceptRelations(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptRelations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptRelationResponse ListConceptRelations(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConceptRelations, null, options, request);
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> ListConceptRelationsAsync(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptRelationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> ListConceptRelationsAsync(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptRelationResponse PostConceptRelations(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptRelations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptRelationResponse PostConceptRelations(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> PostConceptRelationsAsync(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptRelationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> PostConceptRelationsAsync(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteConceptRelations(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConceptRelations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteConceptRelations(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteConceptRelationsAsync(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConceptRelationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteConceptRelationsAsync(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConceptRelations, null, options, request);
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse ListKnowledgeGraphs(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKnowledgeGraphs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse ListKnowledgeGraphs(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> ListKnowledgeGraphsAsync(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKnowledgeGraphsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> ListKnowledgeGraphsAsync(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse PostKnowledgeGraphs(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKnowledgeGraphs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse PostKnowledgeGraphs(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> PostKnowledgeGraphsAsync(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKnowledgeGraphsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> PostKnowledgeGraphsAsync(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptMappingJobResponse PostConceptMappingJobs(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptMappingJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiConceptMappingJobResponse PostConceptMappingJobs(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptMappingJobs, null, options, request);
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptMappingJobResponse> PostConceptMappingJobsAsync(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptMappingJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptMappingJobResponse> PostConceptMappingJobsAsync(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptMappingJobs, null, options, request);
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAnnotationResponse GetAnnotation(global::Clarifai.Api.GetAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAnnotationResponse GetAnnotation(global::Clarifai.Api.GetAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnnotation, null, options, request);
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAnnotationResponse> GetAnnotationAsync(global::Clarifai.Api.GetAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAnnotationResponse> GetAnnotationAsync(global::Clarifai.Api.GetAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnnotation, null, options, request);
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse ListAnnotations(global::Clarifai.Api.ListAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse ListAnnotations(global::Clarifai.Api.ListAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotations, null, options, request);
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotationsAsync(global::Clarifai.Api.ListAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotationsAsync(global::Clarifai.Api.ListAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotations, null, options, request);
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse PostAnnotations(global::Clarifai.Api.PostAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse PostAnnotations(global::Clarifai.Api.PostAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotations, null, options, request);
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PostAnnotationsAsync(global::Clarifai.Api.PostAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PostAnnotationsAsync(global::Clarifai.Api.PostAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotations, null, options, request);
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse PatchAnnotations(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationResponse PatchAnnotations(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnnotations, null, options, request);
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PatchAnnotationsAsync(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PatchAnnotationsAsync(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnnotations, null, options, request);
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotation(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotation(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotation, null, options, request);
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationAsync(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationAsync(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotation, null, options, request);
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotations(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotations(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotations, null, options, request);
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationsAsync(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationsAsync(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotations, null, options, request);
      }
      /// <summary>
      /// Execute a search over annotation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostAnnotationsSearches(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over annotation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostAnnotationsSearches(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotationsSearches, null, options, request);
      }
      /// <summary>
      /// Execute a search over annotation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostAnnotationsSearchesAsync(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over annotation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostAnnotationsSearchesAsync(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotationsSearches, null, options, request);
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputCountResponse GetInputCount(global::Clarifai.Api.GetInputCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputCountResponse GetInputCount(global::Clarifai.Api.GetInputCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInputCount, null, options, request);
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputCountResponse> GetInputCountAsync(global::Clarifai.Api.GetInputCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputCountResponse> GetInputCountAsync(global::Clarifai.Api.GetInputCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInputCount, null, options, request);
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse StreamInputs(global::Clarifai.Api.StreamInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse StreamInputs(global::Clarifai.Api.StreamInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StreamInputs, null, options, request);
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> StreamInputsAsync(global::Clarifai.Api.StreamInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> StreamInputsAsync(global::Clarifai.Api.StreamInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StreamInputs, null, options, request);
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputResponse GetInput(global::Clarifai.Api.GetInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInput(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleInputResponse GetInput(global::Clarifai.Api.GetInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInput, null, options, request);
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputResponse> GetInputAsync(global::Clarifai.Api.GetInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputResponse> GetInputAsync(global::Clarifai.Api.GetInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInput, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse ListInputs(global::Clarifai.Api.ListInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse ListInputs(global::Clarifai.Api.ListInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInputs, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListInputsAsync(global::Clarifai.Api.ListInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListInputsAsync(global::Clarifai.Api.ListInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInputs, null, options, request);
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app.
      /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      /// it is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PostInputs(global::Clarifai.Api.PostInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app.
      /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      /// it is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PostInputs(global::Clarifai.Api.PostInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputs, null, options, request);
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app.
      /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      /// it is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsAsync(global::Clarifai.Api.PostInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add an input (or set of inputs) to an app.
      /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      /// it is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsAsync(global::Clarifai.Api.PostInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputs, null, options, request);
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PatchInputs(global::Clarifai.Api.PatchInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse PatchInputs(global::Clarifai.Api.PatchInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchInputs, null, options, request);
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PatchInputsAsync(global::Clarifai.Api.PatchInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PatchInputsAsync(global::Clarifai.Api.PatchInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchInputs, null, options, request);
      }
      /// <summary>
      /// Delete a single input.  This call is synchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInput(global::Clarifai.Api.DeleteInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInput(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single input.  This call is synchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInput(global::Clarifai.Api.DeleteInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInput, null, options, request);
      }
      /// <summary>
      /// Delete a single input.  This call is synchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputAsync(global::Clarifai.Api.DeleteInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInputAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single input.  This call is synchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputAsync(global::Clarifai.Api.DeleteInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInput, null, options, request);
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous. Use DeleteInput if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInputs(global::Clarifai.Api.DeleteInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous. Use DeleteInput if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInputs(global::Clarifai.Api.DeleteInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInputs, null, options, request);
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous. Use DeleteInput if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputsAsync(global::Clarifai.Api.DeleteInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous. Use DeleteInput if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputsAsync(global::Clarifai.Api.DeleteInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInputs, null, options, request);
      }
      /// <summary>
      /// Execute a search over input
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostInputsSearches(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over input
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostInputsSearches(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputsSearches, null, options, request);
      }
      /// <summary>
      /// Execute a search over input
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostInputsSearchesAsync(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over input
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostInputsSearchesAsync(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputsSearches, null, options, request);
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOutputResponse PostModelOutputs(global::Clarifai.Api.PostModelOutputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelOutputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiOutputResponse PostModelOutputs(global::Clarifai.Api.PostModelOutputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelOutputs, null, options, request);
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOutputResponse> PostModelOutputsAsync(global::Clarifai.Api.PostModelOutputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelOutputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOutputResponse> PostModelOutputsAsync(global::Clarifai.Api.PostModelOutputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelOutputs, null, options, request);
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelTypeResponse GetModelType(global::Clarifai.Api.GetModelTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelTypeResponse GetModelType(global::Clarifai.Api.GetModelTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelType, null, options, request);
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelTypeResponse> GetModelTypeAsync(global::Clarifai.Api.GetModelTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelTypeResponse> GetModelTypeAsync(global::Clarifai.Api.GetModelTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelType, null, options, request);
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelTypeResponse ListModelTypes(global::Clarifai.Api.ListModelTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelTypes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelTypeResponse ListModelTypes(global::Clarifai.Api.ListModelTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelTypes, null, options, request);
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelTypeResponse> ListModelTypesAsync(global::Clarifai.Api.ListModelTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelTypesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelTypeResponse> ListModelTypesAsync(global::Clarifai.Api.ListModelTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelTypes, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse GetModel(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse GetModel(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModel, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelAsync(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelAsync(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModel, null, options, request);
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse GetModelOutputInfo(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelOutputInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse GetModelOutputInfo(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelOutputInfo, null, options, request);
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelOutputInfoAsync(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelOutputInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelOutputInfoAsync(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelOutputInfo, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse ListModels(global::Clarifai.Api.ListModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse ListModels(global::Clarifai.Api.ListModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModels, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> ListModelsAsync(global::Clarifai.Api.ListModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> ListModelsAsync(global::Clarifai.Api.ListModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModels, null, options, request);
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse PostModelsSearches(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse PostModelsSearches(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelsSearches, null, options, request);
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PostModelsSearchesAsync(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PostModelsSearchesAsync(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelsSearches, null, options, request);
      }
      /// <summary>
      /// Add a models to an app.
      /// FIXME(zeiler): this should have been a plural response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse PostModels(global::Clarifai.Api.PostModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a models to an app.
      /// FIXME(zeiler): this should have been a plural response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse PostModels(global::Clarifai.Api.PostModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModels, null, options, request);
      }
      /// <summary>
      /// Add a models to an app.
      /// FIXME(zeiler): this should have been a plural response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelsAsync(global::Clarifai.Api.PostModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a models to an app.
      /// FIXME(zeiler): this should have been a plural response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelsAsync(global::Clarifai.Api.PostModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModels, null, options, request);
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse PatchModels(global::Clarifai.Api.PatchModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelResponse PatchModels(global::Clarifai.Api.PatchModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModels, null, options, request);
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PatchModelsAsync(global::Clarifai.Api.PatchModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PatchModelsAsync(global::Clarifai.Api.PatchModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModels, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModel(global::Clarifai.Api.DeleteModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModel(global::Clarifai.Api.DeleteModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModel, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelAsync(global::Clarifai.Api.DeleteModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelAsync(global::Clarifai.Api.DeleteModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModel, null, options, request);
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModels(global::Clarifai.Api.DeleteModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModels(global::Clarifai.Api.DeleteModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModels, null, options, request);
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelsAsync(global::Clarifai.Api.DeleteModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelsAsync(global::Clarifai.Api.DeleteModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModels, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse ListModelInputs(global::Clarifai.Api.ListModelInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiInputResponse ListModelInputs(global::Clarifai.Api.ListModelInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelInputs, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListModelInputsAsync(global::Clarifai.Api.ListModelInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListModelInputsAsync(global::Clarifai.Api.ListModelInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelInputs, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersion(global::Clarifai.Api.GetModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersion(global::Clarifai.Api.GetModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelVersion, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionAsync(global::Clarifai.Api.GetModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionAsync(global::Clarifai.Api.GetModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelVersion, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelVersionResponse ListModelVersions(global::Clarifai.Api.ListModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiModelVersionResponse ListModelVersions(global::Clarifai.Api.ListModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelVersions, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionResponse> ListModelVersionsAsync(global::Clarifai.Api.ListModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionResponse> ListModelVersionsAsync(global::Clarifai.Api.ListModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelVersions, null, options, request);
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// FIXME(zeiler): this should have been a plural response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse PostModelVersions(global::Clarifai.Api.PostModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// FIXME(zeiler): this should have been a plural response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelResponse PostModelVersions(global::Clarifai.Api.PostModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersions, null, options, request);
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// FIXME(zeiler): this should have been a plural response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelVersionsAsync(global::Clarifai.Api.PostModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// FIXME(zeiler): this should have been a plural response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelVersionsAsync(global::Clarifai.Api.PostModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersions, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModelVersion(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModelVersion(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModelVersion, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersionAsync(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersionAsync(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModelVersion, null, options, request);
      }
      /// <summary>
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersionMetrics(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersionMetrics(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionMetricsAsync(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionMetricsAsync(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse PostModelVersionMetrics(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleModelVersionResponse PostModelVersionMetrics(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> PostModelVersionMetricsAsync(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> PostModelVersionMetricsAsync(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWorkflowResponse GetWorkflow(global::Clarifai.Api.GetWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleWorkflowResponse GetWorkflow(global::Clarifai.Api.GetWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflow, null, options, request);
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowResponse> GetWorkflowAsync(global::Clarifai.Api.GetWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowResponse> GetWorkflowAsync(global::Clarifai.Api.GetWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflow, null, options, request);
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse ListWorkflows(global::Clarifai.Api.ListWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse ListWorkflows(global::Clarifai.Api.ListWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkflows, null, options, request);
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> ListWorkflowsAsync(global::Clarifai.Api.ListWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> ListWorkflowsAsync(global::Clarifai.Api.ListWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkflows, null, options, request);
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse PostWorkflows(global::Clarifai.Api.PostWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse PostWorkflows(global::Clarifai.Api.PostWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflows, null, options, request);
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PostWorkflowsAsync(global::Clarifai.Api.PostWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PostWorkflowsAsync(global::Clarifai.Api.PostWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflows, null, options, request);
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse PatchWorkflows(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiWorkflowResponse PatchWorkflows(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchWorkflows, null, options, request);
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowsAsync(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowsAsync(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchWorkflows, null, options, request);
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflow(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflow(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflow, null, options, request);
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowAsync(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowAsync(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflow, null, options, request);
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflows(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflows(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflows, null, options, request);
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowsAsync(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowsAsync(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflows, null, options, request);
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostWorkflowResultsResponse PostWorkflowResults(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResults(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.PostWorkflowResultsResponse PostWorkflowResults(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowResults, null, options, request);
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsResponse> PostWorkflowResultsAsync(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResultsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsResponse> PostWorkflowResultsAsync(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowResults, null, options, request);
      }
      public virtual global::Clarifai.Api.PostWorkflowResultsSimilarityResponse PostWorkflowResultsSimilarity(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResultsSimilarity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.PostWorkflowResultsSimilarityResponse PostWorkflowResultsSimilarity(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowResultsSimilarity, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> PostWorkflowResultsSimilarityAsync(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResultsSimilarityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> PostWorkflowResultsSimilarityAsync(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowResultsSimilarity, null, options, request);
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleKeyResponse GetKey(global::Clarifai.Api.GetKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleKeyResponse GetKey(global::Clarifai.Api.GetKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetKey, null, options, request);
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleKeyResponse> GetKeyAsync(global::Clarifai.Api.GetKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleKeyResponse> GetKeyAsync(global::Clarifai.Api.GetKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetKey, null, options, request);
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse ListKeys(global::Clarifai.Api.ListKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse ListKeys(global::Clarifai.Api.ListKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListKeys, null, options, request);
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListKeysAsync(global::Clarifai.Api.ListKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListKeysAsync(global::Clarifai.Api.ListKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListKeys, null, options, request);
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse ListAppKeys(global::Clarifai.Api.ListAppKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse ListAppKeys(global::Clarifai.Api.ListAppKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAppKeys, null, options, request);
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListAppKeysAsync(global::Clarifai.Api.ListAppKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListAppKeysAsync(global::Clarifai.Api.ListAppKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAppKeys, null, options, request);
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteKey(global::Clarifai.Api.DeleteKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteKey(global::Clarifai.Api.DeleteKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteKey, null, options, request);
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteKeyAsync(global::Clarifai.Api.DeleteKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteKeyAsync(global::Clarifai.Api.DeleteKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteKey, null, options, request);
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse PostKeys(global::Clarifai.Api.PostKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse PostKeys(global::Clarifai.Api.PostKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostKeys, null, options, request);
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PostKeysAsync(global::Clarifai.Api.PostKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PostKeysAsync(global::Clarifai.Api.PostKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostKeys, null, options, request);
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse PatchKeys(global::Clarifai.Api.PatchKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiKeyResponse PatchKeys(global::Clarifai.Api.PatchKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchKeys, null, options, request);
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PatchKeysAsync(global::Clarifai.Api.PatchKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PatchKeysAsync(global::Clarifai.Api.PatchKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchKeys, null, options, request);
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiScopeResponse MyScopes(global::Clarifai.Api.MyScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiScopeResponse MyScopes(global::Clarifai.Api.MyScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MyScopes, null, options, request);
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeResponse> MyScopesAsync(global::Clarifai.Api.MyScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeResponse> MyScopesAsync(global::Clarifai.Api.MyScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MyScopes, null, options, request);
      }
      /// <summary>
      /// List all auth scopes available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiScopeDepsResponse ListScopes(global::Clarifai.Api.ListScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScopes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all auth scopes available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiScopeDepsResponse ListScopes(global::Clarifai.Api.ListScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListScopes, null, options, request);
      }
      /// <summary>
      /// List all auth scopes available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeDepsResponse> ListScopesAsync(global::Clarifai.Api.ListScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScopesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all auth scopes available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeDepsResponse> ListScopesAsync(global::Clarifai.Api.ListScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListScopes, null, options, request);
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAppResponse GetApp(global::Clarifai.Api.GetAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAppResponse GetApp(global::Clarifai.Api.GetAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApp, null, options, request);
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppResponse> GetAppAsync(global::Clarifai.Api.GetAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppResponse> GetAppAsync(global::Clarifai.Api.GetAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApp, null, options, request);
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse ListApps(global::Clarifai.Api.ListAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse ListApps(global::Clarifai.Api.ListAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListApps, null, options, request);
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> ListAppsAsync(global::Clarifai.Api.ListAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> ListAppsAsync(global::Clarifai.Api.ListAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListApps, null, options, request);
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteApp(global::Clarifai.Api.DeleteAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteApp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteApp(global::Clarifai.Api.DeleteAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteApp, null, options, request);
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAppAsync(global::Clarifai.Api.DeleteAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAppAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAppAsync(global::Clarifai.Api.DeleteAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteApp, null, options, request);
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PostApps(global::Clarifai.Api.PostAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PostApps(global::Clarifai.Api.PostAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostApps, null, options, request);
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsAsync(global::Clarifai.Api.PostAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsAsync(global::Clarifai.Api.PostAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostApps, null, options, request);
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PatchApps(global::Clarifai.Api.PatchAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PatchApps(global::Clarifai.Api.PatchAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchApps, null, options, request);
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PatchAppsAsync(global::Clarifai.Api.PatchAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PatchAppsAsync(global::Clarifai.Api.PatchAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchApps, null, options, request);
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PostAppsSearches(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppResponse PostAppsSearches(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAppsSearches, null, options, request);
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsSearchesAsync(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsSearchesAsync(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAppsSearches, null, options, request);
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SinglePasswordValidationResponse PostValidatePassword(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostValidatePassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SinglePasswordValidationResponse PostValidatePassword(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostValidatePassword, null, options, request);
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SinglePasswordValidationResponse> PostValidatePasswordAsync(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostValidatePasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SinglePasswordValidationResponse> PostValidatePasswordAsync(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostValidatePassword, null, options, request);
      }
      /// <summary>
      /// Get a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleSearchResponse GetSearch(global::Clarifai.Api.GetSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleSearchResponse GetSearch(global::Clarifai.Api.GetSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSearch, null, options, request);
      }
      /// <summary>
      /// Get a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleSearchResponse> GetSearchAsync(global::Clarifai.Api.GetSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleSearchResponse> GetSearchAsync(global::Clarifai.Api.GetSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSearch, null, options, request);
      }
      /// <summary>
      /// List all saved searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse ListSearches(global::Clarifai.Api.ListSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all saved searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse ListSearches(global::Clarifai.Api.ListSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSearches, null, options, request);
      }
      /// <summary>
      /// List all saved searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> ListSearchesAsync(global::Clarifai.Api.ListSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all saved searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> ListSearchesAsync(global::Clarifai.Api.ListSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSearches, null, options, request);
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearches(global::Clarifai.Api.PostSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearches(global::Clarifai.Api.PostSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostSearches, null, options, request);
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesAsync(global::Clarifai.Api.PostSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesAsync(global::Clarifai.Api.PostSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostSearches, null, options, request);
      }
      /// <summary>
      /// Execute a previously saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearchesByID(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearchesByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a previously saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearchesByID(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostSearchesByID, null, options, request);
      }
      /// <summary>
      /// Execute a previously saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesByIDAsync(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearchesByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a previously saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesByIDAsync(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostSearchesByID, null, options, request);
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse PostAnnotationSearchMetrics(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse PostAnnotationSearchMetrics(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> PostAnnotationSearchMetricsAsync(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> PostAnnotationSearchMetricsAsync(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse GetAnnotationSearchMetrics(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse GetAnnotationSearchMetrics(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> GetAnnotationSearchMetricsAsync(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> GetAnnotationSearchMetricsAsync(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse ListAnnotationSearchMetrics(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse ListAnnotationSearchMetrics(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> ListAnnotationSearchMetricsAsync(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> ListAnnotationSearchMetricsAsync(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotationSearchMetrics, null, options, request);
      }
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotationSearchMetrics(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotationSearchMetrics(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotationSearchMetrics, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationSearchMetricsAsync(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationSearchMetricsAsync(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteSearch(global::Clarifai.Api.DeleteSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteSearch(global::Clarifai.Api.DeleteSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSearch, null, options, request);
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteSearchAsync(global::Clarifai.Api.DeleteSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteSearchAsync(global::Clarifai.Api.DeleteSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSearch, null, options, request);
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiStatusCodeResponse ListStatusCodes(global::Clarifai.Api.ListStatusCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStatusCodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiStatusCodeResponse ListStatusCodes(global::Clarifai.Api.ListStatusCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListStatusCodes, null, options, request);
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatusCodeResponse> ListStatusCodesAsync(global::Clarifai.Api.ListStatusCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStatusCodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatusCodeResponse> ListStatusCodesAsync(global::Clarifai.Api.ListStatusCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListStatusCodes, null, options, request);
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleStatusCodeResponse GetStatusCode(global::Clarifai.Api.GetStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleStatusCodeResponse GetStatusCode(global::Clarifai.Api.GetStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatusCode, null, options, request);
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleStatusCodeResponse> GetStatusCodeAsync(global::Clarifai.Api.GetStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleStatusCodeResponse> GetStatusCodeAsync(global::Clarifai.Api.GetStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatusCode, null, options, request);
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse ListCollaborators(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse ListCollaborators(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollaborators, null, options, request);
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> ListCollaboratorsAsync(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> ListCollaboratorsAsync(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollaborators, null, options, request);
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PostCollaborators(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PostCollaborators(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostCollaborators, null, options, request);
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PostCollaboratorsAsync(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PostCollaboratorsAsync(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostCollaborators, null, options, request);
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PatchCollaborators(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PatchCollaborators(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchCollaborators, null, options, request);
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PatchCollaboratorsAsync(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PatchCollaboratorsAsync(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchCollaborators, null, options, request);
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollaborators(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollaborators(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCollaborators, null, options, request);
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollaboratorsAsync(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollaboratorsAsync(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCollaborators, null, options, request);
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaborationsResponse ListCollaborations(global::Clarifai.Api.ListCollaborationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaborations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollaborationsResponse ListCollaborations(global::Clarifai.Api.ListCollaborationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollaborations, null, options, request);
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaborationsResponse> ListCollaborationsAsync(global::Clarifai.Api.ListCollaborationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaborationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaborationsResponse> ListCollaborationsAsync(global::Clarifai.Api.ListCollaborationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollaborations, null, options, request);
      }
      /// <summary>
      /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse PostAppDuplications(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppDuplications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse PostAppDuplications(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAppDuplications, null, options, request);
      }
      /// <summary>
      /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> PostAppDuplicationsAsync(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppDuplicationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> PostAppDuplicationsAsync(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAppDuplications, null, options, request);
      }
      /// <summary>
      /// list all the app duplications user triggers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse ListAppDuplications(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppDuplications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// list all the app duplications user triggers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse ListAppDuplications(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAppDuplications, null, options, request);
      }
      /// <summary>
      /// list all the app duplications user triggers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> ListAppDuplicationsAsync(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppDuplicationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// list all the app duplications user triggers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> ListAppDuplicationsAsync(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAppDuplications, null, options, request);
      }
      /// <summary>
      /// get the app duplication status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAppDuplicationResponse GetAppDuplication(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppDuplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get the app duplication status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleAppDuplicationResponse GetAppDuplication(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAppDuplication, null, options, request);
      }
      /// <summary>
      /// get the app duplication status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppDuplicationResponse> GetAppDuplicationAsync(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppDuplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get the app duplication status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppDuplicationResponse> GetAppDuplicationAsync(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAppDuplication, null, options, request);
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse PostTasks(global::Clarifai.Api.PostTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse PostTasks(global::Clarifai.Api.PostTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostTasks, null, options, request);
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PostTasksAsync(global::Clarifai.Api.PostTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PostTasksAsync(global::Clarifai.Api.PostTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostTasks, null, options, request);
      }
      /// <summary>
      /// Task annotation counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTaskAnnotationsCountResponse GetTaskAnnotationsCount(global::Clarifai.Api.GetTaskAnnotationsCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAnnotationsCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Task annotation counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTaskAnnotationsCountResponse GetTaskAnnotationsCount(global::Clarifai.Api.GetTaskAnnotationsCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTaskAnnotationsCount, null, options, request);
      }
      /// <summary>
      /// Task annotation counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskAnnotationsCountResponse> GetTaskAnnotationsCountAsync(global::Clarifai.Api.GetTaskAnnotationsCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAnnotationsCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Task annotation counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskAnnotationsCountResponse> GetTaskAnnotationsCountAsync(global::Clarifai.Api.GetTaskAnnotationsCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTaskAnnotationsCount, null, options, request);
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTaskResponse GetTask(global::Clarifai.Api.GetTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleTaskResponse GetTask(global::Clarifai.Api.GetTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTask, null, options, request);
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskResponse> GetTaskAsync(global::Clarifai.Api.GetTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskResponse> GetTaskAsync(global::Clarifai.Api.GetTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTask, null, options, request);
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse ListTasks(global::Clarifai.Api.ListTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse ListTasks(global::Clarifai.Api.ListTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTasks, null, options, request);
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> ListTasksAsync(global::Clarifai.Api.ListTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> ListTasksAsync(global::Clarifai.Api.ListTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTasks, null, options, request);
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse PatchTasks(global::Clarifai.Api.PatchTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiTaskResponse PatchTasks(global::Clarifai.Api.PatchTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchTasks, null, options, request);
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PatchTasksAsync(global::Clarifai.Api.PatchTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PatchTasksAsync(global::Clarifai.Api.PatchTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchTasks, null, options, request);
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTasks(global::Clarifai.Api.DeleteTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTasks(global::Clarifai.Api.DeleteTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTasks, null, options, request);
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTasksAsync(global::Clarifai.Api.DeleteTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTasksAsync(global::Clarifai.Api.DeleteTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTasks, null, options, request);
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse PostCollectors(global::Clarifai.Api.PostCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse PostCollectors(global::Clarifai.Api.PostCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostCollectors, null, options, request);
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PostCollectorsAsync(global::Clarifai.Api.PostCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PostCollectorsAsync(global::Clarifai.Api.PostCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostCollectors, null, options, request);
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleCollectorResponse GetCollector(global::Clarifai.Api.GetCollectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCollector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.SingleCollectorResponse GetCollector(global::Clarifai.Api.GetCollectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCollector, null, options, request);
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleCollectorResponse> GetCollectorAsync(global::Clarifai.Api.GetCollectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCollectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleCollectorResponse> GetCollectorAsync(global::Clarifai.Api.GetCollectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCollector, null, options, request);
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse ListCollectors(global::Clarifai.Api.ListCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse ListCollectors(global::Clarifai.Api.ListCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollectors, null, options, request);
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> ListCollectorsAsync(global::Clarifai.Api.ListCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> ListCollectorsAsync(global::Clarifai.Api.ListCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollectors, null, options, request);
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse PatchCollectors(global::Clarifai.Api.PatchCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.MultiCollectorResponse PatchCollectors(global::Clarifai.Api.PatchCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchCollectors, null, options, request);
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PatchCollectorsAsync(global::Clarifai.Api.PatchCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PatchCollectorsAsync(global::Clarifai.Api.PatchCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchCollectors, null, options, request);
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollectors(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollectors(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCollectors, null, options, request);
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollectorsAsync(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollectorsAsync(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCollectors, null, options, request);
      }
      public virtual global::Clarifai.Api.MultiStatValueResponse PostStatValues(global::Clarifai.Api.PostStatValuesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValues(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.MultiStatValueResponse PostStatValues(global::Clarifai.Api.PostStatValuesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostStatValues, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueResponse> PostStatValuesAsync(global::Clarifai.Api.PostStatValuesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValuesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueResponse> PostStatValuesAsync(global::Clarifai.Api.PostStatValuesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostStatValues, null, options, request);
      }
      public virtual global::Clarifai.Api.MultiStatValueAggregateResponse PostStatValuesAggregate(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValuesAggregate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Clarifai.Api.MultiStatValueAggregateResponse PostStatValuesAggregate(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostStatValuesAggregate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueAggregateResponse> PostStatValuesAggregateAsync(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValuesAggregateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueAggregateResponse> PostStatValuesAggregateAsync(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostStatValuesAggregate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override V2Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new V2Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(V2Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetConceptCounts, serviceImpl.GetConceptCounts)
          .AddMethod(__Method_GetConcept, serviceImpl.GetConcept)
          .AddMethod(__Method_ListConcepts, serviceImpl.ListConcepts)
          .AddMethod(__Method_PostConceptsSearches, serviceImpl.PostConceptsSearches)
          .AddMethod(__Method_PostConcepts, serviceImpl.PostConcepts)
          .AddMethod(__Method_PatchConcepts, serviceImpl.PatchConcepts)
          .AddMethod(__Method_GetConceptLanguage, serviceImpl.GetConceptLanguage)
          .AddMethod(__Method_ListConceptLanguages, serviceImpl.ListConceptLanguages)
          .AddMethod(__Method_PostConceptLanguages, serviceImpl.PostConceptLanguages)
          .AddMethod(__Method_PatchConceptLanguages, serviceImpl.PatchConceptLanguages)
          .AddMethod(__Method_ListConceptRelations, serviceImpl.ListConceptRelations)
          .AddMethod(__Method_PostConceptRelations, serviceImpl.PostConceptRelations)
          .AddMethod(__Method_DeleteConceptRelations, serviceImpl.DeleteConceptRelations)
          .AddMethod(__Method_ListKnowledgeGraphs, serviceImpl.ListKnowledgeGraphs)
          .AddMethod(__Method_PostKnowledgeGraphs, serviceImpl.PostKnowledgeGraphs)
          .AddMethod(__Method_PostConceptMappingJobs, serviceImpl.PostConceptMappingJobs)
          .AddMethod(__Method_GetAnnotation, serviceImpl.GetAnnotation)
          .AddMethod(__Method_ListAnnotations, serviceImpl.ListAnnotations)
          .AddMethod(__Method_PostAnnotations, serviceImpl.PostAnnotations)
          .AddMethod(__Method_PatchAnnotations, serviceImpl.PatchAnnotations)
          .AddMethod(__Method_DeleteAnnotation, serviceImpl.DeleteAnnotation)
          .AddMethod(__Method_DeleteAnnotations, serviceImpl.DeleteAnnotations)
          .AddMethod(__Method_PostAnnotationsSearches, serviceImpl.PostAnnotationsSearches)
          .AddMethod(__Method_GetInputCount, serviceImpl.GetInputCount)
          .AddMethod(__Method_StreamInputs, serviceImpl.StreamInputs)
          .AddMethod(__Method_GetInput, serviceImpl.GetInput)
          .AddMethod(__Method_ListInputs, serviceImpl.ListInputs)
          .AddMethod(__Method_PostInputs, serviceImpl.PostInputs)
          .AddMethod(__Method_PatchInputs, serviceImpl.PatchInputs)
          .AddMethod(__Method_DeleteInput, serviceImpl.DeleteInput)
          .AddMethod(__Method_DeleteInputs, serviceImpl.DeleteInputs)
          .AddMethod(__Method_PostInputsSearches, serviceImpl.PostInputsSearches)
          .AddMethod(__Method_PostModelOutputs, serviceImpl.PostModelOutputs)
          .AddMethod(__Method_GetModelType, serviceImpl.GetModelType)
          .AddMethod(__Method_ListModelTypes, serviceImpl.ListModelTypes)
          .AddMethod(__Method_GetModel, serviceImpl.GetModel)
          .AddMethod(__Method_GetModelOutputInfo, serviceImpl.GetModelOutputInfo)
          .AddMethod(__Method_ListModels, serviceImpl.ListModels)
          .AddMethod(__Method_PostModelsSearches, serviceImpl.PostModelsSearches)
          .AddMethod(__Method_PostModels, serviceImpl.PostModels)
          .AddMethod(__Method_PatchModels, serviceImpl.PatchModels)
          .AddMethod(__Method_DeleteModel, serviceImpl.DeleteModel)
          .AddMethod(__Method_DeleteModels, serviceImpl.DeleteModels)
          .AddMethod(__Method_ListModelInputs, serviceImpl.ListModelInputs)
          .AddMethod(__Method_GetModelVersion, serviceImpl.GetModelVersion)
          .AddMethod(__Method_ListModelVersions, serviceImpl.ListModelVersions)
          .AddMethod(__Method_PostModelVersions, serviceImpl.PostModelVersions)
          .AddMethod(__Method_DeleteModelVersion, serviceImpl.DeleteModelVersion)
          .AddMethod(__Method_GetModelVersionMetrics, serviceImpl.GetModelVersionMetrics)
          .AddMethod(__Method_PostModelVersionMetrics, serviceImpl.PostModelVersionMetrics)
          .AddMethod(__Method_GetWorkflow, serviceImpl.GetWorkflow)
          .AddMethod(__Method_ListWorkflows, serviceImpl.ListWorkflows)
          .AddMethod(__Method_PostWorkflows, serviceImpl.PostWorkflows)
          .AddMethod(__Method_PatchWorkflows, serviceImpl.PatchWorkflows)
          .AddMethod(__Method_DeleteWorkflow, serviceImpl.DeleteWorkflow)
          .AddMethod(__Method_DeleteWorkflows, serviceImpl.DeleteWorkflows)
          .AddMethod(__Method_PostWorkflowResults, serviceImpl.PostWorkflowResults)
          .AddMethod(__Method_PostWorkflowResultsSimilarity, serviceImpl.PostWorkflowResultsSimilarity)
          .AddMethod(__Method_GetKey, serviceImpl.GetKey)
          .AddMethod(__Method_ListKeys, serviceImpl.ListKeys)
          .AddMethod(__Method_ListAppKeys, serviceImpl.ListAppKeys)
          .AddMethod(__Method_DeleteKey, serviceImpl.DeleteKey)
          .AddMethod(__Method_PostKeys, serviceImpl.PostKeys)
          .AddMethod(__Method_PatchKeys, serviceImpl.PatchKeys)
          .AddMethod(__Method_MyScopes, serviceImpl.MyScopes)
          .AddMethod(__Method_ListScopes, serviceImpl.ListScopes)
          .AddMethod(__Method_GetApp, serviceImpl.GetApp)
          .AddMethod(__Method_ListApps, serviceImpl.ListApps)
          .AddMethod(__Method_DeleteApp, serviceImpl.DeleteApp)
          .AddMethod(__Method_PostApps, serviceImpl.PostApps)
          .AddMethod(__Method_PatchApps, serviceImpl.PatchApps)
          .AddMethod(__Method_PostAppsSearches, serviceImpl.PostAppsSearches)
          .AddMethod(__Method_PostValidatePassword, serviceImpl.PostValidatePassword)
          .AddMethod(__Method_GetSearch, serviceImpl.GetSearch)
          .AddMethod(__Method_ListSearches, serviceImpl.ListSearches)
          .AddMethod(__Method_PostSearches, serviceImpl.PostSearches)
          .AddMethod(__Method_PostSearchesByID, serviceImpl.PostSearchesByID)
          .AddMethod(__Method_PostAnnotationSearchMetrics, serviceImpl.PostAnnotationSearchMetrics)
          .AddMethod(__Method_GetAnnotationSearchMetrics, serviceImpl.GetAnnotationSearchMetrics)
          .AddMethod(__Method_ListAnnotationSearchMetrics, serviceImpl.ListAnnotationSearchMetrics)
          .AddMethod(__Method_DeleteAnnotationSearchMetrics, serviceImpl.DeleteAnnotationSearchMetrics)
          .AddMethod(__Method_DeleteSearch, serviceImpl.DeleteSearch)
          .AddMethod(__Method_ListStatusCodes, serviceImpl.ListStatusCodes)
          .AddMethod(__Method_GetStatusCode, serviceImpl.GetStatusCode)
          .AddMethod(__Method_ListCollaborators, serviceImpl.ListCollaborators)
          .AddMethod(__Method_PostCollaborators, serviceImpl.PostCollaborators)
          .AddMethod(__Method_PatchCollaborators, serviceImpl.PatchCollaborators)
          .AddMethod(__Method_DeleteCollaborators, serviceImpl.DeleteCollaborators)
          .AddMethod(__Method_ListCollaborations, serviceImpl.ListCollaborations)
          .AddMethod(__Method_PostAppDuplications, serviceImpl.PostAppDuplications)
          .AddMethod(__Method_ListAppDuplications, serviceImpl.ListAppDuplications)
          .AddMethod(__Method_GetAppDuplication, serviceImpl.GetAppDuplication)
          .AddMethod(__Method_PostTasks, serviceImpl.PostTasks)
          .AddMethod(__Method_GetTaskAnnotationsCount, serviceImpl.GetTaskAnnotationsCount)
          .AddMethod(__Method_GetTask, serviceImpl.GetTask)
          .AddMethod(__Method_ListTasks, serviceImpl.ListTasks)
          .AddMethod(__Method_PatchTasks, serviceImpl.PatchTasks)
          .AddMethod(__Method_DeleteTasks, serviceImpl.DeleteTasks)
          .AddMethod(__Method_PostCollectors, serviceImpl.PostCollectors)
          .AddMethod(__Method_GetCollector, serviceImpl.GetCollector)
          .AddMethod(__Method_ListCollectors, serviceImpl.ListCollectors)
          .AddMethod(__Method_PatchCollectors, serviceImpl.PatchCollectors)
          .AddMethod(__Method_DeleteCollectors, serviceImpl.DeleteCollectors)
          .AddMethod(__Method_PostStatValues, serviceImpl.PostStatValues)
          .AddMethod(__Method_PostStatValuesAggregate, serviceImpl.PostStatValuesAggregate).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, V2Base serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetConceptCounts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetConceptCountsRequest, global::Clarifai.Api.MultiConceptCountResponse>(serviceImpl.GetConceptCounts));
      serviceBinder.AddMethod(__Method_GetConcept, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetConceptRequest, global::Clarifai.Api.SingleConceptResponse>(serviceImpl.GetConcept));
      serviceBinder.AddMethod(__Method_ListConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.ListConcepts));
      serviceBinder.AddMethod(__Method_PostConceptsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptsSearchesRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.PostConceptsSearches));
      serviceBinder.AddMethod(__Method_PostConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.PostConcepts));
      serviceBinder.AddMethod(__Method_PatchConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.PatchConcepts));
      serviceBinder.AddMethod(__Method_GetConceptLanguage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetConceptLanguageRequest, global::Clarifai.Api.SingleConceptLanguageResponse>(serviceImpl.GetConceptLanguage));
      serviceBinder.AddMethod(__Method_ListConceptLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(serviceImpl.ListConceptLanguages));
      serviceBinder.AddMethod(__Method_PostConceptLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(serviceImpl.PostConceptLanguages));
      serviceBinder.AddMethod(__Method_PatchConceptLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(serviceImpl.PatchConceptLanguages));
      serviceBinder.AddMethod(__Method_ListConceptRelations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(serviceImpl.ListConceptRelations));
      serviceBinder.AddMethod(__Method_PostConceptRelations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(serviceImpl.PostConceptRelations));
      serviceBinder.AddMethod(__Method_DeleteConceptRelations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteConceptRelationsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteConceptRelations));
      serviceBinder.AddMethod(__Method_ListKnowledgeGraphs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(serviceImpl.ListKnowledgeGraphs));
      serviceBinder.AddMethod(__Method_PostKnowledgeGraphs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(serviceImpl.PostKnowledgeGraphs));
      serviceBinder.AddMethod(__Method_PostConceptMappingJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptMappingJobsRequest, global::Clarifai.Api.MultiConceptMappingJobResponse>(serviceImpl.PostConceptMappingJobs));
      serviceBinder.AddMethod(__Method_GetAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAnnotationRequest, global::Clarifai.Api.SingleAnnotationResponse>(serviceImpl.GetAnnotation));
      serviceBinder.AddMethod(__Method_ListAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(serviceImpl.ListAnnotations));
      serviceBinder.AddMethod(__Method_PostAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(serviceImpl.PostAnnotations));
      serviceBinder.AddMethod(__Method_PatchAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(serviceImpl.PatchAnnotations));
      serviceBinder.AddMethod(__Method_DeleteAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotation));
      serviceBinder.AddMethod(__Method_DeleteAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotations));
      serviceBinder.AddMethod(__Method_PostAnnotationsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostAnnotationsSearches));
      serviceBinder.AddMethod(__Method_GetInputCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputCountRequest, global::Clarifai.Api.SingleInputCountResponse>(serviceImpl.GetInputCount));
      serviceBinder.AddMethod(__Method_StreamInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.StreamInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.StreamInputs));
      serviceBinder.AddMethod(__Method_GetInput, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputRequest, global::Clarifai.Api.SingleInputResponse>(serviceImpl.GetInput));
      serviceBinder.AddMethod(__Method_ListInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.ListInputs));
      serviceBinder.AddMethod(__Method_PostInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.PostInputs));
      serviceBinder.AddMethod(__Method_PatchInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.PatchInputs));
      serviceBinder.AddMethod(__Method_DeleteInput, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteInputRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteInput));
      serviceBinder.AddMethod(__Method_DeleteInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteInputsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteInputs));
      serviceBinder.AddMethod(__Method_PostInputsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostInputsSearches));
      serviceBinder.AddMethod(__Method_PostModelOutputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelOutputsRequest, global::Clarifai.Api.MultiOutputResponse>(serviceImpl.PostModelOutputs));
      serviceBinder.AddMethod(__Method_GetModelType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelTypeRequest, global::Clarifai.Api.SingleModelTypeResponse>(serviceImpl.GetModelType));
      serviceBinder.AddMethod(__Method_ListModelTypes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelTypesRequest, global::Clarifai.Api.MultiModelTypeResponse>(serviceImpl.ListModelTypes));
      serviceBinder.AddMethod(__Method_GetModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.GetModel));
      serviceBinder.AddMethod(__Method_GetModelOutputInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.GetModelOutputInfo));
      serviceBinder.AddMethod(__Method_ListModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelsRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.ListModels));
      serviceBinder.AddMethod(__Method_PostModelsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelsSearchesRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.PostModelsSearches));
      serviceBinder.AddMethod(__Method_PostModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelsRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.PostModels));
      serviceBinder.AddMethod(__Method_PatchModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelsRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.PatchModels));
      serviceBinder.AddMethod(__Method_DeleteModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModel));
      serviceBinder.AddMethod(__Method_DeleteModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModels));
      serviceBinder.AddMethod(__Method_ListModelInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.ListModelInputs));
      serviceBinder.AddMethod(__Method_GetModelVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelVersionRequest, global::Clarifai.Api.SingleModelVersionResponse>(serviceImpl.GetModelVersion));
      serviceBinder.AddMethod(__Method_ListModelVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse>(serviceImpl.ListModelVersions));
      serviceBinder.AddMethod(__Method_PostModelVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionsRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.PostModelVersions));
      serviceBinder.AddMethod(__Method_DeleteModelVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelVersionRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModelVersion));
      serviceBinder.AddMethod(__Method_GetModelVersionMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(serviceImpl.GetModelVersionMetrics));
      serviceBinder.AddMethod(__Method_PostModelVersionMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(serviceImpl.PostModelVersionMetrics));
      serviceBinder.AddMethod(__Method_GetWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetWorkflowRequest, global::Clarifai.Api.SingleWorkflowResponse>(serviceImpl.GetWorkflow));
      serviceBinder.AddMethod(__Method_ListWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.ListWorkflows));
      serviceBinder.AddMethod(__Method_PostWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.PostWorkflows));
      serviceBinder.AddMethod(__Method_PatchWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.PatchWorkflows));
      serviceBinder.AddMethod(__Method_DeleteWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWorkflowRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteWorkflow));
      serviceBinder.AddMethod(__Method_DeleteWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWorkflowsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteWorkflows));
      serviceBinder.AddMethod(__Method_PostWorkflowResults, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowResultsRequest, global::Clarifai.Api.PostWorkflowResultsResponse>(serviceImpl.PostWorkflowResults));
      serviceBinder.AddMethod(__Method_PostWorkflowResultsSimilarity, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse>(serviceImpl.PostWorkflowResultsSimilarity));
      serviceBinder.AddMethod(__Method_GetKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetKeyRequest, global::Clarifai.Api.SingleKeyResponse>(serviceImpl.GetKey));
      serviceBinder.AddMethod(__Method_ListKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.ListKeys));
      serviceBinder.AddMethod(__Method_ListAppKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAppKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.ListAppKeys));
      serviceBinder.AddMethod(__Method_DeleteKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteKeyRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteKey));
      serviceBinder.AddMethod(__Method_PostKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.PostKeys));
      serviceBinder.AddMethod(__Method_PatchKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.PatchKeys));
      serviceBinder.AddMethod(__Method_MyScopes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.MyScopesRequest, global::Clarifai.Api.MultiScopeResponse>(serviceImpl.MyScopes));
      serviceBinder.AddMethod(__Method_ListScopes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListScopesRequest, global::Clarifai.Api.MultiScopeDepsResponse>(serviceImpl.ListScopes));
      serviceBinder.AddMethod(__Method_GetApp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAppRequest, global::Clarifai.Api.SingleAppResponse>(serviceImpl.GetApp));
      serviceBinder.AddMethod(__Method_ListApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAppsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.ListApps));
      serviceBinder.AddMethod(__Method_DeleteApp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAppRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteApp));
      serviceBinder.AddMethod(__Method_PostApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAppsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PostApps));
      serviceBinder.AddMethod(__Method_PatchApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAppsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PatchApps));
      serviceBinder.AddMethod(__Method_PostAppsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAppsSearchesRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PostAppsSearches));
      serviceBinder.AddMethod(__Method_PostValidatePassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostValidatePasswordRequest, global::Clarifai.Api.SinglePasswordValidationResponse>(serviceImpl.PostValidatePassword));
      serviceBinder.AddMethod(__Method_GetSearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetSearchRequest, global::Clarifai.Api.SingleSearchResponse>(serviceImpl.GetSearch));
      serviceBinder.AddMethod(__Method_ListSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.ListSearches));
      serviceBinder.AddMethod(__Method_PostSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostSearches));
      serviceBinder.AddMethod(__Method_PostSearchesByID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostSearchesByIDRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostSearchesByID));
      serviceBinder.AddMethod(__Method_PostAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(serviceImpl.PostAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_GetAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(serviceImpl.GetAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_ListAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(serviceImpl.ListAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_DeleteAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_DeleteSearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteSearchRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteSearch));
      serviceBinder.AddMethod(__Method_ListStatusCodes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListStatusCodesRequest, global::Clarifai.Api.MultiStatusCodeResponse>(serviceImpl.ListStatusCodes));
      serviceBinder.AddMethod(__Method_GetStatusCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetStatusCodeRequest, global::Clarifai.Api.SingleStatusCodeResponse>(serviceImpl.GetStatusCode));
      serviceBinder.AddMethod(__Method_ListCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(serviceImpl.ListCollaborators));
      serviceBinder.AddMethod(__Method_PostCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(serviceImpl.PostCollaborators));
      serviceBinder.AddMethod(__Method_PatchCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(serviceImpl.PatchCollaborators));
      serviceBinder.AddMethod(__Method_DeleteCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteCollaboratorsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteCollaborators));
      serviceBinder.AddMethod(__Method_ListCollaborations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListCollaborationsRequest, global::Clarifai.Api.MultiCollaborationsResponse>(serviceImpl.ListCollaborations));
      serviceBinder.AddMethod(__Method_PostAppDuplications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(serviceImpl.PostAppDuplications));
      serviceBinder.AddMethod(__Method_ListAppDuplications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(serviceImpl.ListAppDuplications));
      serviceBinder.AddMethod(__Method_GetAppDuplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAppDuplicationRequest, global::Clarifai.Api.SingleAppDuplicationResponse>(serviceImpl.GetAppDuplication));
      serviceBinder.AddMethod(__Method_PostTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostTasksRequest, global::Clarifai.Api.MultiTaskResponse>(serviceImpl.PostTasks));
      serviceBinder.AddMethod(__Method_GetTaskAnnotationsCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetTaskAnnotationsCountRequest, global::Clarifai.Api.SingleTaskAnnotationsCountResponse>(serviceImpl.GetTaskAnnotationsCount));
      serviceBinder.AddMethod(__Method_GetTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetTaskRequest, global::Clarifai.Api.SingleTaskResponse>(serviceImpl.GetTask));
      serviceBinder.AddMethod(__Method_ListTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListTasksRequest, global::Clarifai.Api.MultiTaskResponse>(serviceImpl.ListTasks));
      serviceBinder.AddMethod(__Method_PatchTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchTasksRequest, global::Clarifai.Api.MultiTaskResponse>(serviceImpl.PatchTasks));
      serviceBinder.AddMethod(__Method_DeleteTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteTasksRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteTasks));
      serviceBinder.AddMethod(__Method_PostCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(serviceImpl.PostCollectors));
      serviceBinder.AddMethod(__Method_GetCollector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetCollectorRequest, global::Clarifai.Api.SingleCollectorResponse>(serviceImpl.GetCollector));
      serviceBinder.AddMethod(__Method_ListCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(serviceImpl.ListCollectors));
      serviceBinder.AddMethod(__Method_PatchCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(serviceImpl.PatchCollectors));
      serviceBinder.AddMethod(__Method_DeleteCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteCollectorsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteCollectors));
      serviceBinder.AddMethod(__Method_PostStatValues, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostStatValuesRequest, global::Clarifai.Api.MultiStatValueResponse>(serviceImpl.PostStatValues));
      serviceBinder.AddMethod(__Method_PostStatValuesAggregate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostStatValuesAggregateRequest, global::Clarifai.Api.MultiStatValueAggregateResponse>(serviceImpl.PostStatValuesAggregate));
    }

  }
}
#endregion
