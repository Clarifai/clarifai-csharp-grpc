// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/clarifai/api/service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Clarifai.Api {
  public static partial class V2
  {
    static readonly string __ServiceName = "clarifai.api.V2";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptRelationsRequest> __Marshaller_clarifai_api_ListConceptRelationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListConceptRelationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptRelationResponse> __Marshaller_clarifai_api_MultiConceptRelationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptRelationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptRelationsRequest> __Marshaller_clarifai_api_PostConceptRelationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptRelationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteConceptRelationsRequest> __Marshaller_clarifai_api_DeleteConceptRelationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteConceptRelationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.Status.BaseResponse> __Marshaller_clarifai_api_status_BaseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.Status.BaseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetConceptCountsRequest> __Marshaller_clarifai_api_GetConceptCountsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetConceptCountsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptCountResponse> __Marshaller_clarifai_api_MultiConceptCountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptCountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetConceptRequest> __Marshaller_clarifai_api_GetConceptRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetConceptRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleConceptResponse> __Marshaller_clarifai_api_SingleConceptResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleConceptResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptsRequest> __Marshaller_clarifai_api_ListConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListConceptsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptResponse> __Marshaller_clarifai_api_MultiConceptResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelConceptsRequest> __Marshaller_clarifai_api_ListModelConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelConceptsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptsSearchesRequest> __Marshaller_clarifai_api_PostConceptsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptsSearchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptsRequest> __Marshaller_clarifai_api_PostConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchConceptsRequest> __Marshaller_clarifai_api_PatchConceptsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchConceptsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetConceptLanguageRequest> __Marshaller_clarifai_api_GetConceptLanguageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetConceptLanguageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleConceptLanguageResponse> __Marshaller_clarifai_api_SingleConceptLanguageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleConceptLanguageResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListConceptLanguagesRequest> __Marshaller_clarifai_api_ListConceptLanguagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListConceptLanguagesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptLanguageResponse> __Marshaller_clarifai_api_MultiConceptLanguageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptLanguageResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptLanguagesRequest> __Marshaller_clarifai_api_PostConceptLanguagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptLanguagesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchConceptLanguagesRequest> __Marshaller_clarifai_api_PatchConceptLanguagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchConceptLanguagesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListKnowledgeGraphsRequest> __Marshaller_clarifai_api_ListKnowledgeGraphsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListKnowledgeGraphsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiKnowledgeGraphResponse> __Marshaller_clarifai_api_MultiKnowledgeGraphResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiKnowledgeGraphResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostKnowledgeGraphsRequest> __Marshaller_clarifai_api_PostKnowledgeGraphsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostKnowledgeGraphsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostConceptMappingJobsRequest> __Marshaller_clarifai_api_PostConceptMappingJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostConceptMappingJobsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiConceptMappingJobResponse> __Marshaller_clarifai_api_MultiConceptMappingJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiConceptMappingJobResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAnnotationRequest> __Marshaller_clarifai_api_GetAnnotationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAnnotationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAnnotationResponse> __Marshaller_clarifai_api_SingleAnnotationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleAnnotationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAnnotationsRequest> __Marshaller_clarifai_api_ListAnnotationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAnnotationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAnnotationResponse> __Marshaller_clarifai_api_MultiAnnotationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAnnotationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationsRequest> __Marshaller_clarifai_api_PostAnnotationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAnnotationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationsRequest> __Marshaller_clarifai_api_PatchAnnotationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationsStatusRequest> __Marshaller_clarifai_api_PatchAnnotationsStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationsStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationsStatusResponse> __Marshaller_clarifai_api_PatchAnnotationsStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationsStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationRequest> __Marshaller_clarifai_api_DeleteAnnotationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAnnotationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationsRequest> __Marshaller_clarifai_api_DeleteAnnotationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAnnotationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationsSearchesRequest> __Marshaller_clarifai_api_PatchAnnotationsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationsSearchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiSearchResponse> __Marshaller_clarifai_api_MultiSearchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiSearchResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationsSearchesRequest> __Marshaller_clarifai_api_PostAnnotationsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAnnotationsSearchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAnnotationWorkersRequest> __Marshaller_clarifai_api_ListAnnotationWorkersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAnnotationWorkersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiWorkerResponse> __Marshaller_clarifai_api_MultiWorkerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiWorkerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputCountRequest> __Marshaller_clarifai_api_GetInputCountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInputCountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInputCountResponse> __Marshaller_clarifai_api_SingleInputCountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleInputCountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.StreamInputsRequest> __Marshaller_clarifai_api_StreamInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.StreamInputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiInputResponse> __Marshaller_clarifai_api_MultiInputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiInputResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputSamplesRequest> __Marshaller_clarifai_api_GetInputSamplesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInputSamplesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiInputAnnotationResponse> __Marshaller_clarifai_api_MultiInputAnnotationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiInputAnnotationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputRequest> __Marshaller_clarifai_api_GetInputRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInputRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInputResponse> __Marshaller_clarifai_api_SingleInputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleInputResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetVideoManifestRequest> __Marshaller_clarifai_api_GetVideoManifestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetVideoManifestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetVideoManifestResponse> __Marshaller_clarifai_api_GetVideoManifestResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetVideoManifestResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListInputsRequest> __Marshaller_clarifai_api_ListInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListInputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsRequest> __Marshaller_clarifai_api_PostInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchInputsRequest> __Marshaller_clarifai_api_PatchInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchInputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteInputRequest> __Marshaller_clarifai_api_DeleteInputRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteInputRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteInputsRequest> __Marshaller_clarifai_api_DeleteInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteInputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchInputsSearchesRequest> __Marshaller_clarifai_api_PatchInputsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchInputsSearchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsSearchesRequest> __Marshaller_clarifai_api_PostInputsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInputsSearchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelOutputsRequest> __Marshaller_clarifai_api_PostModelOutputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelOutputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiOutputResponse> __Marshaller_clarifai_api_MultiOutputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiOutputResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListDatasetsRequest> __Marshaller_clarifai_api_ListDatasetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListDatasetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiDatasetResponse> __Marshaller_clarifai_api_MultiDatasetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiDatasetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetDatasetRequest> __Marshaller_clarifai_api_GetDatasetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetDatasetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleDatasetResponse> __Marshaller_clarifai_api_SingleDatasetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleDatasetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostDatasetsRequest> __Marshaller_clarifai_api_PostDatasetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostDatasetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchDatasetsRequest> __Marshaller_clarifai_api_PatchDatasetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchDatasetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteDatasetsRequest> __Marshaller_clarifai_api_DeleteDatasetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteDatasetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListDatasetInputsRequest> __Marshaller_clarifai_api_ListDatasetInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListDatasetInputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiDatasetInputResponse> __Marshaller_clarifai_api_MultiDatasetInputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiDatasetInputResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetDatasetInputRequest> __Marshaller_clarifai_api_GetDatasetInputRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetDatasetInputRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleDatasetInputResponse> __Marshaller_clarifai_api_SingleDatasetInputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleDatasetInputResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostDatasetInputsRequest> __Marshaller_clarifai_api_PostDatasetInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostDatasetInputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteDatasetInputsRequest> __Marshaller_clarifai_api_DeleteDatasetInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteDatasetInputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListDatasetVersionsRequest> __Marshaller_clarifai_api_ListDatasetVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListDatasetVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiDatasetVersionResponse> __Marshaller_clarifai_api_MultiDatasetVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiDatasetVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetDatasetVersionRequest> __Marshaller_clarifai_api_GetDatasetVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetDatasetVersionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleDatasetVersionResponse> __Marshaller_clarifai_api_SingleDatasetVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleDatasetVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest> __Marshaller_clarifai_api_ListDatasetVersionMetricsGroupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse> __Marshaller_clarifai_api_MultiDatasetVersionMetricsGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostDatasetVersionsRequest> __Marshaller_clarifai_api_PostDatasetVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostDatasetVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchDatasetVersionsRequest> __Marshaller_clarifai_api_PatchDatasetVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchDatasetVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteDatasetVersionsRequest> __Marshaller_clarifai_api_DeleteDatasetVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteDatasetVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PutDatasetVersionExportsRequest> __Marshaller_clarifai_api_PutDatasetVersionExportsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PutDatasetVersionExportsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiDatasetVersionExportResponse> __Marshaller_clarifai_api_MultiDatasetVersionExportResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiDatasetVersionExportResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelTypeRequest> __Marshaller_clarifai_api_GetModelTypeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelTypeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelTypeResponse> __Marshaller_clarifai_api_SingleModelTypeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModelTypeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListOpenSourceLicensesRequest> __Marshaller_clarifai_api_ListOpenSourceLicensesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListOpenSourceLicensesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListOpenSourceLicensesResponse> __Marshaller_clarifai_api_ListOpenSourceLicensesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListOpenSourceLicensesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelTypesRequest> __Marshaller_clarifai_api_ListModelTypesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelTypesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelTypeResponse> __Marshaller_clarifai_api_MultiModelTypeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelTypeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelRequest> __Marshaller_clarifai_api_GetModelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelResponse> __Marshaller_clarifai_api_SingleModelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModelResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelsRequest> __Marshaller_clarifai_api_ListModelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelResponse> __Marshaller_clarifai_api_MultiModelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetResourceCountsRequest> __Marshaller_clarifai_api_GetResourceCountsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetResourceCountsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetResourceCountsResponse> __Marshaller_clarifai_api_GetResourceCountsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetResourceCountsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelsSearchesRequest> __Marshaller_clarifai_api_PostModelsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelsSearchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelsRequest> __Marshaller_clarifai_api_PostModelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelsRequest> __Marshaller_clarifai_api_PatchModelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelIdsRequest> __Marshaller_clarifai_api_PatchModelIdsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelIdsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelRequest> __Marshaller_clarifai_api_DeleteModelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelsRequest> __Marshaller_clarifai_api_DeleteModelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModelsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelCheckConsentsRequest> __Marshaller_clarifai_api_PatchModelCheckConsentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelCheckConsentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelCheckConsentResponse> __Marshaller_clarifai_api_MultiModelCheckConsentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelCheckConsentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelToolkitsRequest> __Marshaller_clarifai_api_PatchModelToolkitsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelToolkitsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelToolkitResponse> __Marshaller_clarifai_api_MultiModelToolkitResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelToolkitResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelUseCasesRequest> __Marshaller_clarifai_api_PatchModelUseCasesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelUseCasesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelUseCaseResponse> __Marshaller_clarifai_api_MultiModelUseCaseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelUseCaseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelLanguagesRequest> __Marshaller_clarifai_api_PatchModelLanguagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelLanguagesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelLanguageResponse> __Marshaller_clarifai_api_MultiModelLanguageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelLanguageResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelInputsRequest> __Marshaller_clarifai_api_ListModelInputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelInputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelVersionRequest> __Marshaller_clarifai_api_GetModelVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelVersionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelVersionResponse> __Marshaller_clarifai_api_SingleModelVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModelVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelVersionsRequest> __Marshaller_clarifai_api_ListModelVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelVersionResponse> __Marshaller_clarifai_api_MultiModelVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest> __Marshaller_clarifai_api_PostWorkflowVersionsUnPublishRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowVersionsPublishRequest> __Marshaller_clarifai_api_PostWorkflowVersionsPublishRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowVersionsPublishRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionsPublishRequest> __Marshaller_clarifai_api_PostModelVersionsPublishRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionsPublishRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionsUnPublishRequest> __Marshaller_clarifai_api_PostModelVersionsUnPublishRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionsUnPublishRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionsRequest> __Marshaller_clarifai_api_PostModelVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModelVersionsRequest> __Marshaller_clarifai_api_PatchModelVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModelVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModelVersionRequest> __Marshaller_clarifai_api_DeleteModelVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModelVersionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelVersionMetricsRequest> __Marshaller_clarifai_api_GetModelVersionMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelVersionMetricsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionMetricsRequest> __Marshaller_clarifai_api_PostModelVersionMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionMetricsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionEvaluationsRequest> __Marshaller_clarifai_api_PostModelVersionEvaluationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionEvaluationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiEvalMetricsResponse> __Marshaller_clarifai_api_MultiEvalMetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiEvalMetricsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelVersionEvaluationsRequest> __Marshaller_clarifai_api_ListModelVersionEvaluationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelVersionEvaluationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelVersionEvaluationRequest> __Marshaller_clarifai_api_GetModelVersionEvaluationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelVersionEvaluationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleEvalMetricsResponse> __Marshaller_clarifai_api_SingleEvalMetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleEvalMetricsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostEvaluationsRequest> __Marshaller_clarifai_api_PostEvaluationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostEvaluationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListEvaluationsRequest> __Marshaller_clarifai_api_ListEvaluationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListEvaluationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetEvaluationRequest> __Marshaller_clarifai_api_GetEvaluationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetEvaluationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelReferencesRequest> __Marshaller_clarifai_api_ListModelReferencesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelReferencesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelReferenceResponse> __Marshaller_clarifai_api_MultiModelReferenceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelReferenceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModelVersionInputExampleRequest> __Marshaller_clarifai_api_GetModelVersionInputExampleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModelVersionInputExampleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModelVersionInputExampleResponse> __Marshaller_clarifai_api_SingleModelVersionInputExampleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModelVersionInputExampleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModelVersionInputExamplesRequest> __Marshaller_clarifai_api_ListModelVersionInputExamplesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModelVersionInputExamplesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModelVersionInputExampleResponse> __Marshaller_clarifai_api_MultiModelVersionInputExampleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModelVersionInputExampleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetWorkflowRequest> __Marshaller_clarifai_api_GetWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetWorkflowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleWorkflowResponse> __Marshaller_clarifai_api_SingleWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleWorkflowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListWorkflowsRequest> __Marshaller_clarifai_api_ListWorkflowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListWorkflowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiWorkflowResponse> __Marshaller_clarifai_api_MultiWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiWorkflowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowsRequest> __Marshaller_clarifai_api_PostWorkflowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchWorkflowsRequest> __Marshaller_clarifai_api_PatchWorkflowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchWorkflowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchWorkflowIdsRequest> __Marshaller_clarifai_api_PatchWorkflowIdsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchWorkflowIdsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowRequest> __Marshaller_clarifai_api_DeleteWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteWorkflowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowsRequest> __Marshaller_clarifai_api_DeleteWorkflowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteWorkflowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsRequest> __Marshaller_clarifai_api_PostWorkflowResultsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowResultsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsResponse> __Marshaller_clarifai_api_PostWorkflowResultsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowResultsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest> __Marshaller_clarifai_api_PostWorkflowResultsSimilarityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowResultsSimilarityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> __Marshaller_clarifai_api_PostWorkflowResultsSimilarityResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListWorkflowVersionsRequest> __Marshaller_clarifai_api_ListWorkflowVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListWorkflowVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiWorkflowVersionResponse> __Marshaller_clarifai_api_MultiWorkflowVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiWorkflowVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetWorkflowVersionRequest> __Marshaller_clarifai_api_GetWorkflowVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetWorkflowVersionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleWorkflowVersionResponse> __Marshaller_clarifai_api_SingleWorkflowVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleWorkflowVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteWorkflowVersionsRequest> __Marshaller_clarifai_api_DeleteWorkflowVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteWorkflowVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchWorkflowVersionsRequest> __Marshaller_clarifai_api_PatchWorkflowVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchWorkflowVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetKeyRequest> __Marshaller_clarifai_api_GetKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleKeyResponse> __Marshaller_clarifai_api_SingleKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListKeysRequest> __Marshaller_clarifai_api_ListKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiKeyResponse> __Marshaller_clarifai_api_MultiKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAppKeysRequest> __Marshaller_clarifai_api_ListAppKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAppKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteKeyRequest> __Marshaller_clarifai_api_DeleteKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostKeysRequest> __Marshaller_clarifai_api_PostKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchKeysRequest> __Marshaller_clarifai_api_PatchKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MyScopesRequest> __Marshaller_clarifai_api_MyScopesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MyScopesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiScopeResponse> __Marshaller_clarifai_api_MultiScopeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiScopeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MyScopesUserRequest> __Marshaller_clarifai_api_MyScopesUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MyScopesUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiScopeUserResponse> __Marshaller_clarifai_api_MultiScopeUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiScopeUserResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MyScopesRootRequest> __Marshaller_clarifai_api_MyScopesRootRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MyScopesRootRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiScopeRootResponse> __Marshaller_clarifai_api_MultiScopeRootResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiScopeRootResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListScopesRequest> __Marshaller_clarifai_api_ListScopesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListScopesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiScopeDepsResponse> __Marshaller_clarifai_api_MultiScopeDepsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiScopeDepsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAppRequest> __Marshaller_clarifai_api_GetAppRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAppRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAppResponse> __Marshaller_clarifai_api_SingleAppResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleAppResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAppsRequest> __Marshaller_clarifai_api_ListAppsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAppsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAppResponse> __Marshaller_clarifai_api_MultiAppResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAppResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAppRequest> __Marshaller_clarifai_api_DeleteAppRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAppRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAppsRequest> __Marshaller_clarifai_api_PostAppsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAppsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAppsRequest> __Marshaller_clarifai_api_PatchAppsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAppsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAppsIdsRequest> __Marshaller_clarifai_api_PatchAppsIdsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAppsIdsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAppRequest> __Marshaller_clarifai_api_PatchAppRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAppRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAppsSearchesRequest> __Marshaller_clarifai_api_PostAppsSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAppsSearchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetUserRequest> __Marshaller_clarifai_api_GetUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleUserResponse> __Marshaller_clarifai_api_SingleUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleUserResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostValidatePasswordRequest> __Marshaller_clarifai_api_PostValidatePasswordRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostValidatePasswordRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SinglePasswordValidationResponse> __Marshaller_clarifai_api_SinglePasswordValidationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SinglePasswordValidationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetSearchRequest> __Marshaller_clarifai_api_GetSearchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetSearchRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleSearchResponse> __Marshaller_clarifai_api_SingleSearchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleSearchResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListSearchesRequest> __Marshaller_clarifai_api_ListSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListSearchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchSearchesRequest> __Marshaller_clarifai_api_PatchSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchSearchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostSearchesRequest> __Marshaller_clarifai_api_PostSearchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostSearchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostSearchesByIDRequest> __Marshaller_clarifai_api_PostSearchesByIDRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostSearchesByIDRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_PostAnnotationSearchMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAnnotationSearchMetricsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_GetAnnotationSearchMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAnnotationSearchMetricsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_ListAnnotationSearchMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAnnotationSearchMetricsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest> __Marshaller_clarifai_api_DeleteAnnotationSearchMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteSearchRequest> __Marshaller_clarifai_api_DeleteSearchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteSearchRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAnnotationFiltersRequest> __Marshaller_clarifai_api_ListAnnotationFiltersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAnnotationFiltersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAnnotationFilterResponse> __Marshaller_clarifai_api_MultiAnnotationFilterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAnnotationFilterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAnnotationFilterRequest> __Marshaller_clarifai_api_GetAnnotationFilterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAnnotationFilterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAnnotationFilterResponse> __Marshaller_clarifai_api_SingleAnnotationFilterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleAnnotationFilterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAnnotationFiltersRequest> __Marshaller_clarifai_api_PostAnnotationFiltersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAnnotationFiltersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchAnnotationFiltersRequest> __Marshaller_clarifai_api_PatchAnnotationFiltersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchAnnotationFiltersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteAnnotationFiltersRequest> __Marshaller_clarifai_api_DeleteAnnotationFiltersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteAnnotationFiltersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListStatusCodesRequest> __Marshaller_clarifai_api_ListStatusCodesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListStatusCodesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiStatusCodeResponse> __Marshaller_clarifai_api_MultiStatusCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiStatusCodeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetStatusCodeRequest> __Marshaller_clarifai_api_GetStatusCodeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetStatusCodeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleStatusCodeResponse> __Marshaller_clarifai_api_SingleStatusCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleStatusCodeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListCollaboratorsRequest> __Marshaller_clarifai_api_ListCollaboratorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListCollaboratorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiCollaboratorsResponse> __Marshaller_clarifai_api_MultiCollaboratorsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiCollaboratorsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostCollaboratorsRequest> __Marshaller_clarifai_api_PostCollaboratorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostCollaboratorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchCollaboratorsRequest> __Marshaller_clarifai_api_PatchCollaboratorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchCollaboratorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteCollaboratorsRequest> __Marshaller_clarifai_api_DeleteCollaboratorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteCollaboratorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListCollaborationsRequest> __Marshaller_clarifai_api_ListCollaborationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListCollaborationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiCollaborationsResponse> __Marshaller_clarifai_api_MultiCollaborationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiCollaborationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostAppDuplicationsRequest> __Marshaller_clarifai_api_PostAppDuplicationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostAppDuplicationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiAppDuplicationsResponse> __Marshaller_clarifai_api_MultiAppDuplicationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiAppDuplicationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListAppDuplicationsRequest> __Marshaller_clarifai_api_ListAppDuplicationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListAppDuplicationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetAppDuplicationRequest> __Marshaller_clarifai_api_GetAppDuplicationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetAppDuplicationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleAppDuplicationResponse> __Marshaller_clarifai_api_SingleAppDuplicationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleAppDuplicationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostTasksRequest> __Marshaller_clarifai_api_PostTasksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostTasksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiTaskResponse> __Marshaller_clarifai_api_MultiTaskResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiTaskResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetTaskCountRequest> __Marshaller_clarifai_api_GetTaskCountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetTaskCountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleTaskCountResponse> __Marshaller_clarifai_api_SingleTaskCountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleTaskCountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetTaskRequest> __Marshaller_clarifai_api_GetTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetTaskRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleTaskResponse> __Marshaller_clarifai_api_SingleTaskResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleTaskResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListTasksRequest> __Marshaller_clarifai_api_ListTasksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListTasksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchTasksRequest> __Marshaller_clarifai_api_PatchTasksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchTasksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteTasksRequest> __Marshaller_clarifai_api_DeleteTasksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteTasksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostLabelOrdersRequest> __Marshaller_clarifai_api_PostLabelOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostLabelOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiLabelOrderResponse> __Marshaller_clarifai_api_MultiLabelOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiLabelOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetLabelOrderRequest> __Marshaller_clarifai_api_GetLabelOrderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetLabelOrderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleLabelOrderResponse> __Marshaller_clarifai_api_SingleLabelOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleLabelOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListLabelOrdersRequest> __Marshaller_clarifai_api_ListLabelOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListLabelOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchLabelOrdersRequest> __Marshaller_clarifai_api_PatchLabelOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchLabelOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteLabelOrdersRequest> __Marshaller_clarifai_api_DeleteLabelOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteLabelOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostCollectorsRequest> __Marshaller_clarifai_api_PostCollectorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostCollectorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiCollectorResponse> __Marshaller_clarifai_api_MultiCollectorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiCollectorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetCollectorRequest> __Marshaller_clarifai_api_GetCollectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetCollectorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleCollectorResponse> __Marshaller_clarifai_api_SingleCollectorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleCollectorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListCollectorsRequest> __Marshaller_clarifai_api_ListCollectorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListCollectorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchCollectorsRequest> __Marshaller_clarifai_api_PatchCollectorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchCollectorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteCollectorsRequest> __Marshaller_clarifai_api_DeleteCollectorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteCollectorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostStatValuesRequest> __Marshaller_clarifai_api_PostStatValuesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostStatValuesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiStatValueResponse> __Marshaller_clarifai_api_MultiStatValueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiStatValueResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostStatValuesAggregateRequest> __Marshaller_clarifai_api_PostStatValuesAggregateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostStatValuesAggregateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiStatValueAggregateResponse> __Marshaller_clarifai_api_MultiStatValueAggregateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiStatValueAggregateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostTrendingMetricsViewRequest> __Marshaller_clarifai_api_PostTrendingMetricsViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostTrendingMetricsViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListTrendingMetricsViewsRequest> __Marshaller_clarifai_api_ListTrendingMetricsViewsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListTrendingMetricsViewsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiTrendingMetricsViewResponse> __Marshaller_clarifai_api_MultiTrendingMetricsViewResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiTrendingMetricsViewResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModuleRequest> __Marshaller_clarifai_api_GetModuleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModuleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModuleResponse> __Marshaller_clarifai_api_SingleModuleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModuleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModulesRequest> __Marshaller_clarifai_api_ListModulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModuleResponse> __Marshaller_clarifai_api_MultiModuleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModuleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModulesRequest> __Marshaller_clarifai_api_PostModulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PatchModulesRequest> __Marshaller_clarifai_api_PatchModulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PatchModulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModulesRequest> __Marshaller_clarifai_api_DeleteModulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetModuleVersionRequest> __Marshaller_clarifai_api_GetModuleVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetModuleVersionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleModuleVersionResponse> __Marshaller_clarifai_api_SingleModuleVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleModuleVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListModuleVersionsRequest> __Marshaller_clarifai_api_ListModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListModuleVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiModuleVersionResponse> __Marshaller_clarifai_api_MultiModuleVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiModuleVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModuleVersionsRequest> __Marshaller_clarifai_api_PostModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModuleVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteModuleVersionsRequest> __Marshaller_clarifai_api_DeleteModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteModuleVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInstalledModuleVersionRequest> __Marshaller_clarifai_api_GetInstalledModuleVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInstalledModuleVersionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInstalledModuleVersionResponse> __Marshaller_clarifai_api_SingleInstalledModuleVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleInstalledModuleVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListInstalledModuleVersionsRequest> __Marshaller_clarifai_api_ListInstalledModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListInstalledModuleVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiInstalledModuleVersionResponse> __Marshaller_clarifai_api_MultiInstalledModuleVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiInstalledModuleVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInstalledModuleVersionsRequest> __Marshaller_clarifai_api_PostInstalledModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInstalledModuleVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteInstalledModuleVersionsRequest> __Marshaller_clarifai_api_DeleteInstalledModuleVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteInstalledModuleVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest> __Marshaller_clarifai_api_PostInstalledModuleVersionsKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostBulkOperationsRequest> __Marshaller_clarifai_api_PostBulkOperationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostBulkOperationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiBulkOperationsResponse> __Marshaller_clarifai_api_MultiBulkOperationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiBulkOperationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListBulkOperationsRequest> __Marshaller_clarifai_api_ListBulkOperationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListBulkOperationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetBulkOperationRequest> __Marshaller_clarifai_api_GetBulkOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetBulkOperationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleBulkOperationsResponse> __Marshaller_clarifai_api_SingleBulkOperationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleBulkOperationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.CancelBulkOperationRequest> __Marshaller_clarifai_api_CancelBulkOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.CancelBulkOperationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteBulkOperationRequest> __Marshaller_clarifai_api_DeleteBulkOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteBulkOperationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListNextTaskAssignmentsRequest> __Marshaller_clarifai_api_ListNextTaskAssignmentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListNextTaskAssignmentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PutTaskAssignmentsRequest> __Marshaller_clarifai_api_PutTaskAssignmentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PutTaskAssignmentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListInputsAddJobsRequest> __Marshaller_clarifai_api_ListInputsAddJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListInputsAddJobsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiInputsAddJobResponse> __Marshaller_clarifai_api_MultiInputsAddJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiInputsAddJobResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputsAddJobRequest> __Marshaller_clarifai_api_GetInputsAddJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInputsAddJobRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInputsAddJobResponse> __Marshaller_clarifai_api_SingleInputsAddJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleInputsAddJobResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.CancelInputsAddJobRequest> __Marshaller_clarifai_api_CancelInputsAddJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.CancelInputsAddJobRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostUploadsRequest> __Marshaller_clarifai_api_PostUploadsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostUploadsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiUploadResponse> __Marshaller_clarifai_api_MultiUploadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiUploadResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PutUploadContentPartsRequest> __Marshaller_clarifai_api_PutUploadContentPartsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PutUploadContentPartsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleUploadResponse> __Marshaller_clarifai_api_SingleUploadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleUploadResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetUploadRequest> __Marshaller_clarifai_api_GetUploadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetUploadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListUploadsRequest> __Marshaller_clarifai_api_ListUploadsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListUploadsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteUploadsRequest> __Marshaller_clarifai_api_DeleteUploadsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteUploadsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsDataSourcesRequest> __Marshaller_clarifai_api_PostInputsDataSourcesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInputsDataSourcesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetInputsExtractionJobRequest> __Marshaller_clarifai_api_GetInputsExtractionJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetInputsExtractionJobRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleInputsExtractionJobResponse> __Marshaller_clarifai_api_SingleInputsExtractionJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleInputsExtractionJobResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListInputsExtractionJobsRequest> __Marshaller_clarifai_api_ListInputsExtractionJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListInputsExtractionJobsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiInputsExtractionJobResponse> __Marshaller_clarifai_api_MultiInputsExtractionJobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiInputsExtractionJobResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.CancelInputsExtractionJobsRequest> __Marshaller_clarifai_api_CancelInputsExtractionJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.CancelInputsExtractionJobsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostInputsUploadsRequest> __Marshaller_clarifai_api_PostInputsUploadsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostInputsUploadsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.GetRunnerRequest> __Marshaller_clarifai_api_GetRunnerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.GetRunnerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.SingleRunnerResponse> __Marshaller_clarifai_api_SingleRunnerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.SingleRunnerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListRunnersRequest> __Marshaller_clarifai_api_ListRunnersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListRunnersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiRunnerResponse> __Marshaller_clarifai_api_MultiRunnerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiRunnerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostRunnersRequest> __Marshaller_clarifai_api_PostRunnersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostRunnersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.DeleteRunnersRequest> __Marshaller_clarifai_api_DeleteRunnersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.DeleteRunnersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.ListRunnerItemsRequest> __Marshaller_clarifai_api_ListRunnerItemsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.ListRunnerItemsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiRunnerItemResponse> __Marshaller_clarifai_api_MultiRunnerItemResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiRunnerItemResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostRunnerItemOutputsRequest> __Marshaller_clarifai_api_PostRunnerItemOutputsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostRunnerItemOutputsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiRunnerItemOutputResponse> __Marshaller_clarifai_api_MultiRunnerItemOutputResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiRunnerItemOutputResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.PostModelVersionsTrainingTimeEstimateRequest> __Marshaller_clarifai_api_PostModelVersionsTrainingTimeEstimateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.PostModelVersionsTrainingTimeEstimateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Clarifai.Api.MultiTrainingTimeEstimateResponse> __Marshaller_clarifai_api_MultiTrainingTimeEstimateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Clarifai.Api.MultiTrainingTimeEstimateResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse> __Method_ListConceptRelations = new grpc::Method<global::Clarifai.Api.ListConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConceptRelations",
        __Marshaller_clarifai_api_ListConceptRelationsRequest,
        __Marshaller_clarifai_api_MultiConceptRelationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse> __Method_PostConceptRelations = new grpc::Method<global::Clarifai.Api.PostConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptRelations",
        __Marshaller_clarifai_api_PostConceptRelationsRequest,
        __Marshaller_clarifai_api_MultiConceptRelationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteConceptRelationsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteConceptRelations = new grpc::Method<global::Clarifai.Api.DeleteConceptRelationsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConceptRelations",
        __Marshaller_clarifai_api_DeleteConceptRelationsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetConceptCountsRequest, global::Clarifai.Api.MultiConceptCountResponse> __Method_GetConceptCounts = new grpc::Method<global::Clarifai.Api.GetConceptCountsRequest, global::Clarifai.Api.MultiConceptCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConceptCounts",
        __Marshaller_clarifai_api_GetConceptCountsRequest,
        __Marshaller_clarifai_api_MultiConceptCountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetConceptRequest, global::Clarifai.Api.SingleConceptResponse> __Method_GetConcept = new grpc::Method<global::Clarifai.Api.GetConceptRequest, global::Clarifai.Api.SingleConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConcept",
        __Marshaller_clarifai_api_GetConceptRequest,
        __Marshaller_clarifai_api_SingleConceptResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_ListConcepts = new grpc::Method<global::Clarifai.Api.ListConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConcepts",
        __Marshaller_clarifai_api_ListConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListModelConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_ListModelConcepts = new grpc::Method<global::Clarifai.Api.ListModelConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelConcepts",
        __Marshaller_clarifai_api_ListModelConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostConceptsSearchesRequest, global::Clarifai.Api.MultiConceptResponse> __Method_PostConceptsSearches = new grpc::Method<global::Clarifai.Api.PostConceptsSearchesRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptsSearches",
        __Marshaller_clarifai_api_PostConceptsSearchesRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_PostConcepts = new grpc::Method<global::Clarifai.Api.PostConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConcepts",
        __Marshaller_clarifai_api_PostConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchConceptsRequest, global::Clarifai.Api.MultiConceptResponse> __Method_PatchConcepts = new grpc::Method<global::Clarifai.Api.PatchConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchConcepts",
        __Marshaller_clarifai_api_PatchConceptsRequest,
        __Marshaller_clarifai_api_MultiConceptResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetConceptLanguageRequest, global::Clarifai.Api.SingleConceptLanguageResponse> __Method_GetConceptLanguage = new grpc::Method<global::Clarifai.Api.GetConceptLanguageRequest, global::Clarifai.Api.SingleConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConceptLanguage",
        __Marshaller_clarifai_api_GetConceptLanguageRequest,
        __Marshaller_clarifai_api_SingleConceptLanguageResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse> __Method_ListConceptLanguages = new grpc::Method<global::Clarifai.Api.ListConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConceptLanguages",
        __Marshaller_clarifai_api_ListConceptLanguagesRequest,
        __Marshaller_clarifai_api_MultiConceptLanguageResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse> __Method_PostConceptLanguages = new grpc::Method<global::Clarifai.Api.PostConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptLanguages",
        __Marshaller_clarifai_api_PostConceptLanguagesRequest,
        __Marshaller_clarifai_api_MultiConceptLanguageResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse> __Method_PatchConceptLanguages = new grpc::Method<global::Clarifai.Api.PatchConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchConceptLanguages",
        __Marshaller_clarifai_api_PatchConceptLanguagesRequest,
        __Marshaller_clarifai_api_MultiConceptLanguageResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse> __Method_ListKnowledgeGraphs = new grpc::Method<global::Clarifai.Api.ListKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListKnowledgeGraphs",
        __Marshaller_clarifai_api_ListKnowledgeGraphsRequest,
        __Marshaller_clarifai_api_MultiKnowledgeGraphResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse> __Method_PostKnowledgeGraphs = new grpc::Method<global::Clarifai.Api.PostKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostKnowledgeGraphs",
        __Marshaller_clarifai_api_PostKnowledgeGraphsRequest,
        __Marshaller_clarifai_api_MultiKnowledgeGraphResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostConceptMappingJobsRequest, global::Clarifai.Api.MultiConceptMappingJobResponse> __Method_PostConceptMappingJobs = new grpc::Method<global::Clarifai.Api.PostConceptMappingJobsRequest, global::Clarifai.Api.MultiConceptMappingJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConceptMappingJobs",
        __Marshaller_clarifai_api_PostConceptMappingJobsRequest,
        __Marshaller_clarifai_api_MultiConceptMappingJobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetAnnotationRequest, global::Clarifai.Api.SingleAnnotationResponse> __Method_GetAnnotation = new grpc::Method<global::Clarifai.Api.GetAnnotationRequest, global::Clarifai.Api.SingleAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnnotation",
        __Marshaller_clarifai_api_GetAnnotationRequest,
        __Marshaller_clarifai_api_SingleAnnotationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse> __Method_ListAnnotations = new grpc::Method<global::Clarifai.Api.ListAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotations",
        __Marshaller_clarifai_api_ListAnnotationsRequest,
        __Marshaller_clarifai_api_MultiAnnotationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse> __Method_PostAnnotations = new grpc::Method<global::Clarifai.Api.PostAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotations",
        __Marshaller_clarifai_api_PostAnnotationsRequest,
        __Marshaller_clarifai_api_MultiAnnotationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse> __Method_PatchAnnotations = new grpc::Method<global::Clarifai.Api.PatchAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnnotations",
        __Marshaller_clarifai_api_PatchAnnotationsRequest,
        __Marshaller_clarifai_api_MultiAnnotationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchAnnotationsStatusRequest, global::Clarifai.Api.PatchAnnotationsStatusResponse> __Method_PatchAnnotationsStatus = new grpc::Method<global::Clarifai.Api.PatchAnnotationsStatusRequest, global::Clarifai.Api.PatchAnnotationsStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnnotationsStatus",
        __Marshaller_clarifai_api_PatchAnnotationsStatusRequest,
        __Marshaller_clarifai_api_PatchAnnotationsStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotation = new grpc::Method<global::Clarifai.Api.DeleteAnnotationRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotation",
        __Marshaller_clarifai_api_DeleteAnnotationRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotations = new grpc::Method<global::Clarifai.Api.DeleteAnnotationsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotations",
        __Marshaller_clarifai_api_DeleteAnnotationsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PatchAnnotationsSearches = new grpc::Method<global::Clarifai.Api.PatchAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnnotationsSearches",
        __Marshaller_clarifai_api_PatchAnnotationsSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostAnnotationsSearches = new grpc::Method<global::Clarifai.Api.PostAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotationsSearches",
        __Marshaller_clarifai_api_PostAnnotationsSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListAnnotationWorkersRequest, global::Clarifai.Api.MultiWorkerResponse> __Method_ListAnnotationWorkers = new grpc::Method<global::Clarifai.Api.ListAnnotationWorkersRequest, global::Clarifai.Api.MultiWorkerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotationWorkers",
        __Marshaller_clarifai_api_ListAnnotationWorkersRequest,
        __Marshaller_clarifai_api_MultiWorkerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetInputCountRequest, global::Clarifai.Api.SingleInputCountResponse> __Method_GetInputCount = new grpc::Method<global::Clarifai.Api.GetInputCountRequest, global::Clarifai.Api.SingleInputCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInputCount",
        __Marshaller_clarifai_api_GetInputCountRequest,
        __Marshaller_clarifai_api_SingleInputCountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.StreamInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_StreamInputs = new grpc::Method<global::Clarifai.Api.StreamInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StreamInputs",
        __Marshaller_clarifai_api_StreamInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetInputSamplesRequest, global::Clarifai.Api.MultiInputAnnotationResponse> __Method_GetInputSamples = new grpc::Method<global::Clarifai.Api.GetInputSamplesRequest, global::Clarifai.Api.MultiInputAnnotationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInputSamples",
        __Marshaller_clarifai_api_GetInputSamplesRequest,
        __Marshaller_clarifai_api_MultiInputAnnotationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetInputRequest, global::Clarifai.Api.SingleInputResponse> __Method_GetInput = new grpc::Method<global::Clarifai.Api.GetInputRequest, global::Clarifai.Api.SingleInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInput",
        __Marshaller_clarifai_api_GetInputRequest,
        __Marshaller_clarifai_api_SingleInputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetVideoManifestRequest, global::Clarifai.Api.GetVideoManifestResponse> __Method_GetInputVideoManifest = new grpc::Method<global::Clarifai.Api.GetVideoManifestRequest, global::Clarifai.Api.GetVideoManifestResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInputVideoManifest",
        __Marshaller_clarifai_api_GetVideoManifestRequest,
        __Marshaller_clarifai_api_GetVideoManifestResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_ListInputs = new grpc::Method<global::Clarifai.Api.ListInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInputs",
        __Marshaller_clarifai_api_ListInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_PostInputs = new grpc::Method<global::Clarifai.Api.PostInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputs",
        __Marshaller_clarifai_api_PostInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_PatchInputs = new grpc::Method<global::Clarifai.Api.PatchInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchInputs",
        __Marshaller_clarifai_api_PatchInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteInputRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteInput = new grpc::Method<global::Clarifai.Api.DeleteInputRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInput",
        __Marshaller_clarifai_api_DeleteInputRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteInputsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteInputs = new grpc::Method<global::Clarifai.Api.DeleteInputsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInputs",
        __Marshaller_clarifai_api_DeleteInputsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PatchInputsSearches = new grpc::Method<global::Clarifai.Api.PatchInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchInputsSearches",
        __Marshaller_clarifai_api_PatchInputsSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostInputsSearches = new grpc::Method<global::Clarifai.Api.PostInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputsSearches",
        __Marshaller_clarifai_api_PostInputsSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModelOutputsRequest, global::Clarifai.Api.MultiOutputResponse> __Method_PostModelOutputs = new grpc::Method<global::Clarifai.Api.PostModelOutputsRequest, global::Clarifai.Api.MultiOutputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelOutputs",
        __Marshaller_clarifai_api_PostModelOutputsRequest,
        __Marshaller_clarifai_api_MultiOutputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse> __Method_ListDatasets = new grpc::Method<global::Clarifai.Api.ListDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatasets",
        __Marshaller_clarifai_api_ListDatasetsRequest,
        __Marshaller_clarifai_api_MultiDatasetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetDatasetRequest, global::Clarifai.Api.SingleDatasetResponse> __Method_GetDataset = new grpc::Method<global::Clarifai.Api.GetDatasetRequest, global::Clarifai.Api.SingleDatasetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDataset",
        __Marshaller_clarifai_api_GetDatasetRequest,
        __Marshaller_clarifai_api_SingleDatasetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse> __Method_PostDatasets = new grpc::Method<global::Clarifai.Api.PostDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostDatasets",
        __Marshaller_clarifai_api_PostDatasetsRequest,
        __Marshaller_clarifai_api_MultiDatasetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse> __Method_PatchDatasets = new grpc::Method<global::Clarifai.Api.PatchDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchDatasets",
        __Marshaller_clarifai_api_PatchDatasetsRequest,
        __Marshaller_clarifai_api_MultiDatasetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteDatasetsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteDatasets = new grpc::Method<global::Clarifai.Api.DeleteDatasetsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDatasets",
        __Marshaller_clarifai_api_DeleteDatasetsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse> __Method_ListDatasetInputs = new grpc::Method<global::Clarifai.Api.ListDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatasetInputs",
        __Marshaller_clarifai_api_ListDatasetInputsRequest,
        __Marshaller_clarifai_api_MultiDatasetInputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetDatasetInputRequest, global::Clarifai.Api.SingleDatasetInputResponse> __Method_GetDatasetInput = new grpc::Method<global::Clarifai.Api.GetDatasetInputRequest, global::Clarifai.Api.SingleDatasetInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatasetInput",
        __Marshaller_clarifai_api_GetDatasetInputRequest,
        __Marshaller_clarifai_api_SingleDatasetInputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse> __Method_PostDatasetInputs = new grpc::Method<global::Clarifai.Api.PostDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostDatasetInputs",
        __Marshaller_clarifai_api_PostDatasetInputsRequest,
        __Marshaller_clarifai_api_MultiDatasetInputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteDatasetInputsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteDatasetInputs = new grpc::Method<global::Clarifai.Api.DeleteDatasetInputsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDatasetInputs",
        __Marshaller_clarifai_api_DeleteDatasetInputsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse> __Method_ListDatasetVersions = new grpc::Method<global::Clarifai.Api.ListDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatasetVersions",
        __Marshaller_clarifai_api_ListDatasetVersionsRequest,
        __Marshaller_clarifai_api_MultiDatasetVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetDatasetVersionRequest, global::Clarifai.Api.SingleDatasetVersionResponse> __Method_GetDatasetVersion = new grpc::Method<global::Clarifai.Api.GetDatasetVersionRequest, global::Clarifai.Api.SingleDatasetVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatasetVersion",
        __Marshaller_clarifai_api_GetDatasetVersionRequest,
        __Marshaller_clarifai_api_SingleDatasetVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest, global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse> __Method_ListDatasetVersionMetricsGroups = new grpc::Method<global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest, global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatasetVersionMetricsGroups",
        __Marshaller_clarifai_api_ListDatasetVersionMetricsGroupsRequest,
        __Marshaller_clarifai_api_MultiDatasetVersionMetricsGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse> __Method_PostDatasetVersions = new grpc::Method<global::Clarifai.Api.PostDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostDatasetVersions",
        __Marshaller_clarifai_api_PostDatasetVersionsRequest,
        __Marshaller_clarifai_api_MultiDatasetVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse> __Method_PatchDatasetVersions = new grpc::Method<global::Clarifai.Api.PatchDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchDatasetVersions",
        __Marshaller_clarifai_api_PatchDatasetVersionsRequest,
        __Marshaller_clarifai_api_MultiDatasetVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteDatasetVersionsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteDatasetVersions = new grpc::Method<global::Clarifai.Api.DeleteDatasetVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDatasetVersions",
        __Marshaller_clarifai_api_DeleteDatasetVersionsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PutDatasetVersionExportsRequest, global::Clarifai.Api.MultiDatasetVersionExportResponse> __Method_PutDatasetVersionExports = new grpc::Method<global::Clarifai.Api.PutDatasetVersionExportsRequest, global::Clarifai.Api.MultiDatasetVersionExportResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutDatasetVersionExports",
        __Marshaller_clarifai_api_PutDatasetVersionExportsRequest,
        __Marshaller_clarifai_api_MultiDatasetVersionExportResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetModelTypeRequest, global::Clarifai.Api.SingleModelTypeResponse> __Method_GetModelType = new grpc::Method<global::Clarifai.Api.GetModelTypeRequest, global::Clarifai.Api.SingleModelTypeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelType",
        __Marshaller_clarifai_api_GetModelTypeRequest,
        __Marshaller_clarifai_api_SingleModelTypeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListOpenSourceLicensesRequest, global::Clarifai.Api.ListOpenSourceLicensesResponse> __Method_ListOpenSourceLicenses = new grpc::Method<global::Clarifai.Api.ListOpenSourceLicensesRequest, global::Clarifai.Api.ListOpenSourceLicensesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOpenSourceLicenses",
        __Marshaller_clarifai_api_ListOpenSourceLicensesRequest,
        __Marshaller_clarifai_api_ListOpenSourceLicensesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListModelTypesRequest, global::Clarifai.Api.MultiModelTypeResponse> __Method_ListModelTypes = new grpc::Method<global::Clarifai.Api.ListModelTypesRequest, global::Clarifai.Api.MultiModelTypeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelTypes",
        __Marshaller_clarifai_api_ListModelTypesRequest,
        __Marshaller_clarifai_api_MultiModelTypeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse> __Method_GetModel = new grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModel",
        __Marshaller_clarifai_api_GetModelRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse> __Method_GetModelOutputInfo = new grpc::Method<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelOutputInfo",
        __Marshaller_clarifai_api_GetModelRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListModelsRequest, global::Clarifai.Api.MultiModelResponse> __Method_ListModels = new grpc::Method<global::Clarifai.Api.ListModelsRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModels",
        __Marshaller_clarifai_api_ListModelsRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetResourceCountsRequest, global::Clarifai.Api.GetResourceCountsResponse> __Method_GetResourceCounts = new grpc::Method<global::Clarifai.Api.GetResourceCountsRequest, global::Clarifai.Api.GetResourceCountsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetResourceCounts",
        __Marshaller_clarifai_api_GetResourceCountsRequest,
        __Marshaller_clarifai_api_GetResourceCountsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModelsSearchesRequest, global::Clarifai.Api.MultiModelResponse> __Method_PostModelsSearches = new grpc::Method<global::Clarifai.Api.PostModelsSearchesRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelsSearches",
        __Marshaller_clarifai_api_PostModelsSearchesRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModelsRequest, global::Clarifai.Api.SingleModelResponse> __Method_PostModels = new grpc::Method<global::Clarifai.Api.PostModelsRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModels",
        __Marshaller_clarifai_api_PostModelsRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchModelsRequest, global::Clarifai.Api.MultiModelResponse> __Method_PatchModels = new grpc::Method<global::Clarifai.Api.PatchModelsRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModels",
        __Marshaller_clarifai_api_PatchModelsRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchModelIdsRequest, global::Clarifai.Api.MultiModelResponse> __Method_PatchModelIds = new grpc::Method<global::Clarifai.Api.PatchModelIdsRequest, global::Clarifai.Api.MultiModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelIds",
        __Marshaller_clarifai_api_PatchModelIdsRequest,
        __Marshaller_clarifai_api_MultiModelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteModelRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModel = new grpc::Method<global::Clarifai.Api.DeleteModelRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModel",
        __Marshaller_clarifai_api_DeleteModelRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteModelsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModels = new grpc::Method<global::Clarifai.Api.DeleteModelsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModels",
        __Marshaller_clarifai_api_DeleteModelsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchModelCheckConsentsRequest, global::Clarifai.Api.MultiModelCheckConsentResponse> __Method_PatchModelCheckConsents = new grpc::Method<global::Clarifai.Api.PatchModelCheckConsentsRequest, global::Clarifai.Api.MultiModelCheckConsentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelCheckConsents",
        __Marshaller_clarifai_api_PatchModelCheckConsentsRequest,
        __Marshaller_clarifai_api_MultiModelCheckConsentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchModelToolkitsRequest, global::Clarifai.Api.MultiModelToolkitResponse> __Method_PatchModelToolkits = new grpc::Method<global::Clarifai.Api.PatchModelToolkitsRequest, global::Clarifai.Api.MultiModelToolkitResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelToolkits",
        __Marshaller_clarifai_api_PatchModelToolkitsRequest,
        __Marshaller_clarifai_api_MultiModelToolkitResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchModelUseCasesRequest, global::Clarifai.Api.MultiModelUseCaseResponse> __Method_PatchModelUseCases = new grpc::Method<global::Clarifai.Api.PatchModelUseCasesRequest, global::Clarifai.Api.MultiModelUseCaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelUseCases",
        __Marshaller_clarifai_api_PatchModelUseCasesRequest,
        __Marshaller_clarifai_api_MultiModelUseCaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchModelLanguagesRequest, global::Clarifai.Api.MultiModelLanguageResponse> __Method_PatchModelLanguages = new grpc::Method<global::Clarifai.Api.PatchModelLanguagesRequest, global::Clarifai.Api.MultiModelLanguageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelLanguages",
        __Marshaller_clarifai_api_PatchModelLanguagesRequest,
        __Marshaller_clarifai_api_MultiModelLanguageResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListModelInputsRequest, global::Clarifai.Api.MultiInputResponse> __Method_ListModelInputs = new grpc::Method<global::Clarifai.Api.ListModelInputsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelInputs",
        __Marshaller_clarifai_api_ListModelInputsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetModelVersionRequest, global::Clarifai.Api.SingleModelVersionResponse> __Method_GetModelVersion = new grpc::Method<global::Clarifai.Api.GetModelVersionRequest, global::Clarifai.Api.SingleModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelVersion",
        __Marshaller_clarifai_api_GetModelVersionRequest,
        __Marshaller_clarifai_api_SingleModelVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse> __Method_ListModelVersions = new grpc::Method<global::Clarifai.Api.ListModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelVersions",
        __Marshaller_clarifai_api_ListModelVersionsRequest,
        __Marshaller_clarifai_api_MultiModelVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostWorkflowVersionsUnPublish = new grpc::Method<global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowVersionsUnPublish",
        __Marshaller_clarifai_api_PostWorkflowVersionsUnPublishRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostWorkflowVersionsPublish = new grpc::Method<global::Clarifai.Api.PostWorkflowVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowVersionsPublish",
        __Marshaller_clarifai_api_PostWorkflowVersionsPublishRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostModelVersionsPublish = new grpc::Method<global::Clarifai.Api.PostModelVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersionsPublish",
        __Marshaller_clarifai_api_PostModelVersionsPublishRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostModelVersionsUnPublish = new grpc::Method<global::Clarifai.Api.PostModelVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersionsUnPublish",
        __Marshaller_clarifai_api_PostModelVersionsUnPublishRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionsRequest, global::Clarifai.Api.SingleModelResponse> __Method_PostModelVersions = new grpc::Method<global::Clarifai.Api.PostModelVersionsRequest, global::Clarifai.Api.SingleModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersions",
        __Marshaller_clarifai_api_PostModelVersionsRequest,
        __Marshaller_clarifai_api_SingleModelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse> __Method_PatchModelVersions = new grpc::Method<global::Clarifai.Api.PatchModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModelVersions",
        __Marshaller_clarifai_api_PatchModelVersionsRequest,
        __Marshaller_clarifai_api_MultiModelVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteModelVersionRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModelVersion = new grpc::Method<global::Clarifai.Api.DeleteModelVersionRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModelVersion",
        __Marshaller_clarifai_api_DeleteModelVersionRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse> __Method_GetModelVersionMetrics = new grpc::Method<global::Clarifai.Api.GetModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelVersionMetrics",
        __Marshaller_clarifai_api_GetModelVersionMetricsRequest,
        __Marshaller_clarifai_api_SingleModelVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse> __Method_PostModelVersionMetrics = new grpc::Method<global::Clarifai.Api.PostModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersionMetrics",
        __Marshaller_clarifai_api_PostModelVersionMetricsRequest,
        __Marshaller_clarifai_api_SingleModelVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse> __Method_PostModelVersionEvaluations = new grpc::Method<global::Clarifai.Api.PostModelVersionEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersionEvaluations",
        __Marshaller_clarifai_api_PostModelVersionEvaluationsRequest,
        __Marshaller_clarifai_api_MultiEvalMetricsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListModelVersionEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse> __Method_ListModelVersionEvaluations = new grpc::Method<global::Clarifai.Api.ListModelVersionEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelVersionEvaluations",
        __Marshaller_clarifai_api_ListModelVersionEvaluationsRequest,
        __Marshaller_clarifai_api_MultiEvalMetricsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetModelVersionEvaluationRequest, global::Clarifai.Api.SingleEvalMetricsResponse> __Method_GetModelVersionEvaluation = new grpc::Method<global::Clarifai.Api.GetModelVersionEvaluationRequest, global::Clarifai.Api.SingleEvalMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelVersionEvaluation",
        __Marshaller_clarifai_api_GetModelVersionEvaluationRequest,
        __Marshaller_clarifai_api_SingleEvalMetricsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse> __Method_PostEvaluations = new grpc::Method<global::Clarifai.Api.PostEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostEvaluations",
        __Marshaller_clarifai_api_PostEvaluationsRequest,
        __Marshaller_clarifai_api_MultiEvalMetricsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse> __Method_ListEvaluations = new grpc::Method<global::Clarifai.Api.ListEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListEvaluations",
        __Marshaller_clarifai_api_ListEvaluationsRequest,
        __Marshaller_clarifai_api_MultiEvalMetricsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetEvaluationRequest, global::Clarifai.Api.SingleEvalMetricsResponse> __Method_GetEvaluation = new grpc::Method<global::Clarifai.Api.GetEvaluationRequest, global::Clarifai.Api.SingleEvalMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEvaluation",
        __Marshaller_clarifai_api_GetEvaluationRequest,
        __Marshaller_clarifai_api_SingleEvalMetricsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListModelReferencesRequest, global::Clarifai.Api.MultiModelReferenceResponse> __Method_ListModelReferences = new grpc::Method<global::Clarifai.Api.ListModelReferencesRequest, global::Clarifai.Api.MultiModelReferenceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelReferences",
        __Marshaller_clarifai_api_ListModelReferencesRequest,
        __Marshaller_clarifai_api_MultiModelReferenceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetModelVersionInputExampleRequest, global::Clarifai.Api.SingleModelVersionInputExampleResponse> __Method_GetModelVersionInputExample = new grpc::Method<global::Clarifai.Api.GetModelVersionInputExampleRequest, global::Clarifai.Api.SingleModelVersionInputExampleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModelVersionInputExample",
        __Marshaller_clarifai_api_GetModelVersionInputExampleRequest,
        __Marshaller_clarifai_api_SingleModelVersionInputExampleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListModelVersionInputExamplesRequest, global::Clarifai.Api.MultiModelVersionInputExampleResponse> __Method_ListModelVersionInputExamples = new grpc::Method<global::Clarifai.Api.ListModelVersionInputExamplesRequest, global::Clarifai.Api.MultiModelVersionInputExampleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModelVersionInputExamples",
        __Marshaller_clarifai_api_ListModelVersionInputExamplesRequest,
        __Marshaller_clarifai_api_MultiModelVersionInputExampleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetWorkflowRequest, global::Clarifai.Api.SingleWorkflowResponse> __Method_GetWorkflow = new grpc::Method<global::Clarifai.Api.GetWorkflowRequest, global::Clarifai.Api.SingleWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflow",
        __Marshaller_clarifai_api_GetWorkflowRequest,
        __Marshaller_clarifai_api_SingleWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_ListWorkflows = new grpc::Method<global::Clarifai.Api.ListWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkflows",
        __Marshaller_clarifai_api_ListWorkflowsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_PostWorkflows = new grpc::Method<global::Clarifai.Api.PostWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflows",
        __Marshaller_clarifai_api_PostWorkflowsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_PatchWorkflows = new grpc::Method<global::Clarifai.Api.PatchWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchWorkflows",
        __Marshaller_clarifai_api_PatchWorkflowsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchWorkflowIdsRequest, global::Clarifai.Api.MultiWorkflowResponse> __Method_PatchWorkflowIds = new grpc::Method<global::Clarifai.Api.PatchWorkflowIdsRequest, global::Clarifai.Api.MultiWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchWorkflowIds",
        __Marshaller_clarifai_api_PatchWorkflowIdsRequest,
        __Marshaller_clarifai_api_MultiWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteWorkflowRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteWorkflow = new grpc::Method<global::Clarifai.Api.DeleteWorkflowRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflow",
        __Marshaller_clarifai_api_DeleteWorkflowRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteWorkflowsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteWorkflows = new grpc::Method<global::Clarifai.Api.DeleteWorkflowsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflows",
        __Marshaller_clarifai_api_DeleteWorkflowsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowResultsRequest, global::Clarifai.Api.PostWorkflowResultsResponse> __Method_PostWorkflowResults = new grpc::Method<global::Clarifai.Api.PostWorkflowResultsRequest, global::Clarifai.Api.PostWorkflowResultsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowResults",
        __Marshaller_clarifai_api_PostWorkflowResultsRequest,
        __Marshaller_clarifai_api_PostWorkflowResultsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> __Method_PostWorkflowResultsSimilarity = new grpc::Method<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostWorkflowResultsSimilarity",
        __Marshaller_clarifai_api_PostWorkflowResultsSimilarityRequest,
        __Marshaller_clarifai_api_PostWorkflowResultsSimilarityResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse> __Method_ListWorkflowVersions = new grpc::Method<global::Clarifai.Api.ListWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkflowVersions",
        __Marshaller_clarifai_api_ListWorkflowVersionsRequest,
        __Marshaller_clarifai_api_MultiWorkflowVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetWorkflowVersionRequest, global::Clarifai.Api.SingleWorkflowVersionResponse> __Method_GetWorkflowVersion = new grpc::Method<global::Clarifai.Api.GetWorkflowVersionRequest, global::Clarifai.Api.SingleWorkflowVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowVersion",
        __Marshaller_clarifai_api_GetWorkflowVersionRequest,
        __Marshaller_clarifai_api_SingleWorkflowVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteWorkflowVersionsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteWorkflowVersions = new grpc::Method<global::Clarifai.Api.DeleteWorkflowVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflowVersions",
        __Marshaller_clarifai_api_DeleteWorkflowVersionsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse> __Method_PatchWorkflowVersions = new grpc::Method<global::Clarifai.Api.PatchWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchWorkflowVersions",
        __Marshaller_clarifai_api_PatchWorkflowVersionsRequest,
        __Marshaller_clarifai_api_MultiWorkflowVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetKeyRequest, global::Clarifai.Api.SingleKeyResponse> __Method_GetKey = new grpc::Method<global::Clarifai.Api.GetKeyRequest, global::Clarifai.Api.SingleKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetKey",
        __Marshaller_clarifai_api_GetKeyRequest,
        __Marshaller_clarifai_api_SingleKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_ListKeys = new grpc::Method<global::Clarifai.Api.ListKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListKeys",
        __Marshaller_clarifai_api_ListKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListAppKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_ListAppKeys = new grpc::Method<global::Clarifai.Api.ListAppKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAppKeys",
        __Marshaller_clarifai_api_ListAppKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteKeyRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteKey = new grpc::Method<global::Clarifai.Api.DeleteKeyRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteKey",
        __Marshaller_clarifai_api_DeleteKeyRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_PostKeys = new grpc::Method<global::Clarifai.Api.PostKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostKeys",
        __Marshaller_clarifai_api_PostKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchKeysRequest, global::Clarifai.Api.MultiKeyResponse> __Method_PatchKeys = new grpc::Method<global::Clarifai.Api.PatchKeysRequest, global::Clarifai.Api.MultiKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchKeys",
        __Marshaller_clarifai_api_PatchKeysRequest,
        __Marshaller_clarifai_api_MultiKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.MyScopesRequest, global::Clarifai.Api.MultiScopeResponse> __Method_MyScopes = new grpc::Method<global::Clarifai.Api.MyScopesRequest, global::Clarifai.Api.MultiScopeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MyScopes",
        __Marshaller_clarifai_api_MyScopesRequest,
        __Marshaller_clarifai_api_MultiScopeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.MyScopesUserRequest, global::Clarifai.Api.MultiScopeUserResponse> __Method_MyScopesUser = new grpc::Method<global::Clarifai.Api.MyScopesUserRequest, global::Clarifai.Api.MultiScopeUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MyScopesUser",
        __Marshaller_clarifai_api_MyScopesUserRequest,
        __Marshaller_clarifai_api_MultiScopeUserResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.MyScopesRootRequest, global::Clarifai.Api.MultiScopeRootResponse> __Method_MyScopesRoot = new grpc::Method<global::Clarifai.Api.MyScopesRootRequest, global::Clarifai.Api.MultiScopeRootResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MyScopesRoot",
        __Marshaller_clarifai_api_MyScopesRootRequest,
        __Marshaller_clarifai_api_MultiScopeRootResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListScopesRequest, global::Clarifai.Api.MultiScopeDepsResponse> __Method_ListScopes = new grpc::Method<global::Clarifai.Api.ListScopesRequest, global::Clarifai.Api.MultiScopeDepsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListScopes",
        __Marshaller_clarifai_api_ListScopesRequest,
        __Marshaller_clarifai_api_MultiScopeDepsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetAppRequest, global::Clarifai.Api.SingleAppResponse> __Method_GetApp = new grpc::Method<global::Clarifai.Api.GetAppRequest, global::Clarifai.Api.SingleAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApp",
        __Marshaller_clarifai_api_GetAppRequest,
        __Marshaller_clarifai_api_SingleAppResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListAppsRequest, global::Clarifai.Api.MultiAppResponse> __Method_ListApps = new grpc::Method<global::Clarifai.Api.ListAppsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListApps",
        __Marshaller_clarifai_api_ListAppsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteAppRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteApp = new grpc::Method<global::Clarifai.Api.DeleteAppRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteApp",
        __Marshaller_clarifai_api_DeleteAppRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostAppsRequest, global::Clarifai.Api.MultiAppResponse> __Method_PostApps = new grpc::Method<global::Clarifai.Api.PostAppsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostApps",
        __Marshaller_clarifai_api_PostAppsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchAppsRequest, global::Clarifai.Api.MultiAppResponse> __Method_PatchApps = new grpc::Method<global::Clarifai.Api.PatchAppsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchApps",
        __Marshaller_clarifai_api_PatchAppsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchAppsIdsRequest, global::Clarifai.Api.MultiAppResponse> __Method_PatchAppsIds = new grpc::Method<global::Clarifai.Api.PatchAppsIdsRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAppsIds",
        __Marshaller_clarifai_api_PatchAppsIdsRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchAppRequest, global::Clarifai.Api.SingleAppResponse> __Method_PatchApp = new grpc::Method<global::Clarifai.Api.PatchAppRequest, global::Clarifai.Api.SingleAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchApp",
        __Marshaller_clarifai_api_PatchAppRequest,
        __Marshaller_clarifai_api_SingleAppResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostAppsSearchesRequest, global::Clarifai.Api.MultiAppResponse> __Method_PostAppsSearches = new grpc::Method<global::Clarifai.Api.PostAppsSearchesRequest, global::Clarifai.Api.MultiAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAppsSearches",
        __Marshaller_clarifai_api_PostAppsSearchesRequest,
        __Marshaller_clarifai_api_MultiAppResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetUserRequest, global::Clarifai.Api.SingleUserResponse> __Method_GetUser = new grpc::Method<global::Clarifai.Api.GetUserRequest, global::Clarifai.Api.SingleUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUser",
        __Marshaller_clarifai_api_GetUserRequest,
        __Marshaller_clarifai_api_SingleUserResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostValidatePasswordRequest, global::Clarifai.Api.SinglePasswordValidationResponse> __Method_PostValidatePassword = new grpc::Method<global::Clarifai.Api.PostValidatePasswordRequest, global::Clarifai.Api.SinglePasswordValidationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostValidatePassword",
        __Marshaller_clarifai_api_PostValidatePasswordRequest,
        __Marshaller_clarifai_api_SinglePasswordValidationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetSearchRequest, global::Clarifai.Api.SingleSearchResponse> __Method_GetSearch = new grpc::Method<global::Clarifai.Api.GetSearchRequest, global::Clarifai.Api.SingleSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSearch",
        __Marshaller_clarifai_api_GetSearchRequest,
        __Marshaller_clarifai_api_SingleSearchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_ListSearches = new grpc::Method<global::Clarifai.Api.ListSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSearches",
        __Marshaller_clarifai_api_ListSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PatchSearches = new grpc::Method<global::Clarifai.Api.PatchSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchSearches",
        __Marshaller_clarifai_api_PatchSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostSearchesRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostSearches = new grpc::Method<global::Clarifai.Api.PostSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostSearches",
        __Marshaller_clarifai_api_PostSearchesRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostSearchesByIDRequest, global::Clarifai.Api.MultiSearchResponse> __Method_PostSearchesByID = new grpc::Method<global::Clarifai.Api.PostSearchesByIDRequest, global::Clarifai.Api.MultiSearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostSearchesByID",
        __Marshaller_clarifai_api_PostSearchesByIDRequest,
        __Marshaller_clarifai_api_MultiSearchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Method_PostAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.PostAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotationSearchMetrics",
        __Marshaller_clarifai_api_PostAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Method_GetAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.GetAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnnotationSearchMetrics",
        __Marshaller_clarifai_api_GetAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> __Method_ListAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.ListAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotationSearchMetrics",
        __Marshaller_clarifai_api_ListAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_MultiAnnotationSearchMetricsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotationSearchMetrics = new grpc::Method<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotationSearchMetrics",
        __Marshaller_clarifai_api_DeleteAnnotationSearchMetricsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteSearchRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteSearch = new grpc::Method<global::Clarifai.Api.DeleteSearchRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSearch",
        __Marshaller_clarifai_api_DeleteSearchRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse> __Method_ListAnnotationFilters = new grpc::Method<global::Clarifai.Api.ListAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotationFilters",
        __Marshaller_clarifai_api_ListAnnotationFiltersRequest,
        __Marshaller_clarifai_api_MultiAnnotationFilterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetAnnotationFilterRequest, global::Clarifai.Api.SingleAnnotationFilterResponse> __Method_GetAnnotationFilter = new grpc::Method<global::Clarifai.Api.GetAnnotationFilterRequest, global::Clarifai.Api.SingleAnnotationFilterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnnotationFilter",
        __Marshaller_clarifai_api_GetAnnotationFilterRequest,
        __Marshaller_clarifai_api_SingleAnnotationFilterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse> __Method_PostAnnotationFilters = new grpc::Method<global::Clarifai.Api.PostAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnnotationFilters",
        __Marshaller_clarifai_api_PostAnnotationFiltersRequest,
        __Marshaller_clarifai_api_MultiAnnotationFilterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse> __Method_PatchAnnotationFilters = new grpc::Method<global::Clarifai.Api.PatchAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnnotationFilters",
        __Marshaller_clarifai_api_PatchAnnotationFiltersRequest,
        __Marshaller_clarifai_api_MultiAnnotationFilterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteAnnotationFiltersRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteAnnotationFilters = new grpc::Method<global::Clarifai.Api.DeleteAnnotationFiltersRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotationFilters",
        __Marshaller_clarifai_api_DeleteAnnotationFiltersRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListStatusCodesRequest, global::Clarifai.Api.MultiStatusCodeResponse> __Method_ListStatusCodes = new grpc::Method<global::Clarifai.Api.ListStatusCodesRequest, global::Clarifai.Api.MultiStatusCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListStatusCodes",
        __Marshaller_clarifai_api_ListStatusCodesRequest,
        __Marshaller_clarifai_api_MultiStatusCodeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetStatusCodeRequest, global::Clarifai.Api.SingleStatusCodeResponse> __Method_GetStatusCode = new grpc::Method<global::Clarifai.Api.GetStatusCodeRequest, global::Clarifai.Api.SingleStatusCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatusCode",
        __Marshaller_clarifai_api_GetStatusCodeRequest,
        __Marshaller_clarifai_api_SingleStatusCodeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse> __Method_ListCollaborators = new grpc::Method<global::Clarifai.Api.ListCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollaborators",
        __Marshaller_clarifai_api_ListCollaboratorsRequest,
        __Marshaller_clarifai_api_MultiCollaboratorsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse> __Method_PostCollaborators = new grpc::Method<global::Clarifai.Api.PostCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostCollaborators",
        __Marshaller_clarifai_api_PostCollaboratorsRequest,
        __Marshaller_clarifai_api_MultiCollaboratorsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse> __Method_PatchCollaborators = new grpc::Method<global::Clarifai.Api.PatchCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchCollaborators",
        __Marshaller_clarifai_api_PatchCollaboratorsRequest,
        __Marshaller_clarifai_api_MultiCollaboratorsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteCollaboratorsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteCollaborators = new grpc::Method<global::Clarifai.Api.DeleteCollaboratorsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCollaborators",
        __Marshaller_clarifai_api_DeleteCollaboratorsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListCollaborationsRequest, global::Clarifai.Api.MultiCollaborationsResponse> __Method_ListCollaborations = new grpc::Method<global::Clarifai.Api.ListCollaborationsRequest, global::Clarifai.Api.MultiCollaborationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollaborations",
        __Marshaller_clarifai_api_ListCollaborationsRequest,
        __Marshaller_clarifai_api_MultiCollaborationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse> __Method_PostAppDuplications = new grpc::Method<global::Clarifai.Api.PostAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAppDuplications",
        __Marshaller_clarifai_api_PostAppDuplicationsRequest,
        __Marshaller_clarifai_api_MultiAppDuplicationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse> __Method_ListAppDuplications = new grpc::Method<global::Clarifai.Api.ListAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAppDuplications",
        __Marshaller_clarifai_api_ListAppDuplicationsRequest,
        __Marshaller_clarifai_api_MultiAppDuplicationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetAppDuplicationRequest, global::Clarifai.Api.SingleAppDuplicationResponse> __Method_GetAppDuplication = new grpc::Method<global::Clarifai.Api.GetAppDuplicationRequest, global::Clarifai.Api.SingleAppDuplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAppDuplication",
        __Marshaller_clarifai_api_GetAppDuplicationRequest,
        __Marshaller_clarifai_api_SingleAppDuplicationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostTasksRequest, global::Clarifai.Api.MultiTaskResponse> __Method_PostTasks = new grpc::Method<global::Clarifai.Api.PostTasksRequest, global::Clarifai.Api.MultiTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostTasks",
        __Marshaller_clarifai_api_PostTasksRequest,
        __Marshaller_clarifai_api_MultiTaskResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse> __Method_GetTaskAnnotationCount = new grpc::Method<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTaskAnnotationCount",
        __Marshaller_clarifai_api_GetTaskCountRequest,
        __Marshaller_clarifai_api_SingleTaskCountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse> __Method_GetTaskInputCount = new grpc::Method<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTaskInputCount",
        __Marshaller_clarifai_api_GetTaskCountRequest,
        __Marshaller_clarifai_api_SingleTaskCountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetTaskRequest, global::Clarifai.Api.SingleTaskResponse> __Method_GetTask = new grpc::Method<global::Clarifai.Api.GetTaskRequest, global::Clarifai.Api.SingleTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTask",
        __Marshaller_clarifai_api_GetTaskRequest,
        __Marshaller_clarifai_api_SingleTaskResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListTasksRequest, global::Clarifai.Api.MultiTaskResponse> __Method_ListTasks = new grpc::Method<global::Clarifai.Api.ListTasksRequest, global::Clarifai.Api.MultiTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTasks",
        __Marshaller_clarifai_api_ListTasksRequest,
        __Marshaller_clarifai_api_MultiTaskResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchTasksRequest, global::Clarifai.Api.MultiTaskResponse> __Method_PatchTasks = new grpc::Method<global::Clarifai.Api.PatchTasksRequest, global::Clarifai.Api.MultiTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchTasks",
        __Marshaller_clarifai_api_PatchTasksRequest,
        __Marshaller_clarifai_api_MultiTaskResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteTasksRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteTasks = new grpc::Method<global::Clarifai.Api.DeleteTasksRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTasks",
        __Marshaller_clarifai_api_DeleteTasksRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse> __Method_PostLabelOrders = new grpc::Method<global::Clarifai.Api.PostLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostLabelOrders",
        __Marshaller_clarifai_api_PostLabelOrdersRequest,
        __Marshaller_clarifai_api_MultiLabelOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetLabelOrderRequest, global::Clarifai.Api.SingleLabelOrderResponse> __Method_GetLabelOrder = new grpc::Method<global::Clarifai.Api.GetLabelOrderRequest, global::Clarifai.Api.SingleLabelOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLabelOrder",
        __Marshaller_clarifai_api_GetLabelOrderRequest,
        __Marshaller_clarifai_api_SingleLabelOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse> __Method_ListLabelOrders = new grpc::Method<global::Clarifai.Api.ListLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLabelOrders",
        __Marshaller_clarifai_api_ListLabelOrdersRequest,
        __Marshaller_clarifai_api_MultiLabelOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse> __Method_PatchLabelOrders = new grpc::Method<global::Clarifai.Api.PatchLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchLabelOrders",
        __Marshaller_clarifai_api_PatchLabelOrdersRequest,
        __Marshaller_clarifai_api_MultiLabelOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteLabelOrdersRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteLabelOrders = new grpc::Method<global::Clarifai.Api.DeleteLabelOrdersRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteLabelOrders",
        __Marshaller_clarifai_api_DeleteLabelOrdersRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse> __Method_PostCollectors = new grpc::Method<global::Clarifai.Api.PostCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostCollectors",
        __Marshaller_clarifai_api_PostCollectorsRequest,
        __Marshaller_clarifai_api_MultiCollectorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetCollectorRequest, global::Clarifai.Api.SingleCollectorResponse> __Method_GetCollector = new grpc::Method<global::Clarifai.Api.GetCollectorRequest, global::Clarifai.Api.SingleCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCollector",
        __Marshaller_clarifai_api_GetCollectorRequest,
        __Marshaller_clarifai_api_SingleCollectorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse> __Method_ListCollectors = new grpc::Method<global::Clarifai.Api.ListCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollectors",
        __Marshaller_clarifai_api_ListCollectorsRequest,
        __Marshaller_clarifai_api_MultiCollectorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse> __Method_PatchCollectors = new grpc::Method<global::Clarifai.Api.PatchCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchCollectors",
        __Marshaller_clarifai_api_PatchCollectorsRequest,
        __Marshaller_clarifai_api_MultiCollectorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteCollectorsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteCollectors = new grpc::Method<global::Clarifai.Api.DeleteCollectorsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCollectors",
        __Marshaller_clarifai_api_DeleteCollectorsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostStatValuesRequest, global::Clarifai.Api.MultiStatValueResponse> __Method_PostStatValues = new grpc::Method<global::Clarifai.Api.PostStatValuesRequest, global::Clarifai.Api.MultiStatValueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostStatValues",
        __Marshaller_clarifai_api_PostStatValuesRequest,
        __Marshaller_clarifai_api_MultiStatValueResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostStatValuesAggregateRequest, global::Clarifai.Api.MultiStatValueAggregateResponse> __Method_PostStatValuesAggregate = new grpc::Method<global::Clarifai.Api.PostStatValuesAggregateRequest, global::Clarifai.Api.MultiStatValueAggregateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostStatValuesAggregate",
        __Marshaller_clarifai_api_PostStatValuesAggregateRequest,
        __Marshaller_clarifai_api_MultiStatValueAggregateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostTrendingMetricsViewRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PostTrendingMetricsView = new grpc::Method<global::Clarifai.Api.PostTrendingMetricsViewRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostTrendingMetricsView",
        __Marshaller_clarifai_api_PostTrendingMetricsViewRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListTrendingMetricsViewsRequest, global::Clarifai.Api.MultiTrendingMetricsViewResponse> __Method_ListTrendingMetricsViews = new grpc::Method<global::Clarifai.Api.ListTrendingMetricsViewsRequest, global::Clarifai.Api.MultiTrendingMetricsViewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTrendingMetricsViews",
        __Marshaller_clarifai_api_ListTrendingMetricsViewsRequest,
        __Marshaller_clarifai_api_MultiTrendingMetricsViewResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetModuleRequest, global::Clarifai.Api.SingleModuleResponse> __Method_GetModule = new grpc::Method<global::Clarifai.Api.GetModuleRequest, global::Clarifai.Api.SingleModuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModule",
        __Marshaller_clarifai_api_GetModuleRequest,
        __Marshaller_clarifai_api_SingleModuleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListModulesRequest, global::Clarifai.Api.MultiModuleResponse> __Method_ListModules = new grpc::Method<global::Clarifai.Api.ListModulesRequest, global::Clarifai.Api.MultiModuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModules",
        __Marshaller_clarifai_api_ListModulesRequest,
        __Marshaller_clarifai_api_MultiModuleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModulesRequest, global::Clarifai.Api.MultiModuleResponse> __Method_PostModules = new grpc::Method<global::Clarifai.Api.PostModulesRequest, global::Clarifai.Api.MultiModuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModules",
        __Marshaller_clarifai_api_PostModulesRequest,
        __Marshaller_clarifai_api_MultiModuleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PatchModulesRequest, global::Clarifai.Api.MultiModuleResponse> __Method_PatchModules = new grpc::Method<global::Clarifai.Api.PatchModulesRequest, global::Clarifai.Api.MultiModuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchModules",
        __Marshaller_clarifai_api_PatchModulesRequest,
        __Marshaller_clarifai_api_MultiModuleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteModulesRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModules = new grpc::Method<global::Clarifai.Api.DeleteModulesRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModules",
        __Marshaller_clarifai_api_DeleteModulesRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetModuleVersionRequest, global::Clarifai.Api.SingleModuleVersionResponse> __Method_GetModuleVersion = new grpc::Method<global::Clarifai.Api.GetModuleVersionRequest, global::Clarifai.Api.SingleModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModuleVersion",
        __Marshaller_clarifai_api_GetModuleVersionRequest,
        __Marshaller_clarifai_api_SingleModuleVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse> __Method_ListModuleVersions = new grpc::Method<global::Clarifai.Api.ListModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListModuleVersions",
        __Marshaller_clarifai_api_ListModuleVersionsRequest,
        __Marshaller_clarifai_api_MultiModuleVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse> __Method_PostModuleVersions = new grpc::Method<global::Clarifai.Api.PostModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModuleVersions",
        __Marshaller_clarifai_api_PostModuleVersionsRequest,
        __Marshaller_clarifai_api_MultiModuleVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteModuleVersions = new grpc::Method<global::Clarifai.Api.DeleteModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteModuleVersions",
        __Marshaller_clarifai_api_DeleteModuleVersionsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetInstalledModuleVersionRequest, global::Clarifai.Api.SingleInstalledModuleVersionResponse> __Method_GetInstalledModuleVersion = new grpc::Method<global::Clarifai.Api.GetInstalledModuleVersionRequest, global::Clarifai.Api.SingleInstalledModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInstalledModuleVersion",
        __Marshaller_clarifai_api_GetInstalledModuleVersionRequest,
        __Marshaller_clarifai_api_SingleInstalledModuleVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse> __Method_ListInstalledModuleVersions = new grpc::Method<global::Clarifai.Api.ListInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInstalledModuleVersions",
        __Marshaller_clarifai_api_ListInstalledModuleVersionsRequest,
        __Marshaller_clarifai_api_MultiInstalledModuleVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse> __Method_PostInstalledModuleVersions = new grpc::Method<global::Clarifai.Api.PostInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInstalledModuleVersions",
        __Marshaller_clarifai_api_PostInstalledModuleVersionsRequest,
        __Marshaller_clarifai_api_MultiInstalledModuleVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteInstalledModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteInstalledModuleVersions = new grpc::Method<global::Clarifai.Api.DeleteInstalledModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInstalledModuleVersions",
        __Marshaller_clarifai_api_DeleteInstalledModuleVersionsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest, global::Clarifai.Api.SingleKeyResponse> __Method_PostInstalledModuleVersionsKey = new grpc::Method<global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest, global::Clarifai.Api.SingleKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInstalledModuleVersionsKey",
        __Marshaller_clarifai_api_PostInstalledModuleVersionsKeyRequest,
        __Marshaller_clarifai_api_SingleKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse> __Method_PostBulkOperations = new grpc::Method<global::Clarifai.Api.PostBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostBulkOperations",
        __Marshaller_clarifai_api_PostBulkOperationsRequest,
        __Marshaller_clarifai_api_MultiBulkOperationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse> __Method_ListBulkOperations = new grpc::Method<global::Clarifai.Api.ListBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBulkOperations",
        __Marshaller_clarifai_api_ListBulkOperationsRequest,
        __Marshaller_clarifai_api_MultiBulkOperationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetBulkOperationRequest, global::Clarifai.Api.SingleBulkOperationsResponse> __Method_GetBulkOperation = new grpc::Method<global::Clarifai.Api.GetBulkOperationRequest, global::Clarifai.Api.SingleBulkOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBulkOperation",
        __Marshaller_clarifai_api_GetBulkOperationRequest,
        __Marshaller_clarifai_api_SingleBulkOperationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.CancelBulkOperationRequest, global::Clarifai.Api.MultiBulkOperationsResponse> __Method_CancelBulkOperations = new grpc::Method<global::Clarifai.Api.CancelBulkOperationRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelBulkOperations",
        __Marshaller_clarifai_api_CancelBulkOperationRequest,
        __Marshaller_clarifai_api_MultiBulkOperationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteBulkOperationRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteBulkOperations = new grpc::Method<global::Clarifai.Api.DeleteBulkOperationRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteBulkOperations",
        __Marshaller_clarifai_api_DeleteBulkOperationRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListNextTaskAssignmentsRequest, global::Clarifai.Api.MultiInputResponse> __Method_ListNextTaskAssignments = new grpc::Method<global::Clarifai.Api.ListNextTaskAssignmentsRequest, global::Clarifai.Api.MultiInputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNextTaskAssignments",
        __Marshaller_clarifai_api_ListNextTaskAssignmentsRequest,
        __Marshaller_clarifai_api_MultiInputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PutTaskAssignmentsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_PutTaskAssignments = new grpc::Method<global::Clarifai.Api.PutTaskAssignmentsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutTaskAssignments",
        __Marshaller_clarifai_api_PutTaskAssignmentsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListInputsAddJobsRequest, global::Clarifai.Api.MultiInputsAddJobResponse> __Method_ListInputsAddJobs = new grpc::Method<global::Clarifai.Api.ListInputsAddJobsRequest, global::Clarifai.Api.MultiInputsAddJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInputsAddJobs",
        __Marshaller_clarifai_api_ListInputsAddJobsRequest,
        __Marshaller_clarifai_api_MultiInputsAddJobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse> __Method_GetInputsAddJob = new grpc::Method<global::Clarifai.Api.GetInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInputsAddJob",
        __Marshaller_clarifai_api_GetInputsAddJobRequest,
        __Marshaller_clarifai_api_SingleInputsAddJobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.CancelInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse> __Method_CancelInputsAddJob = new grpc::Method<global::Clarifai.Api.CancelInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelInputsAddJob",
        __Marshaller_clarifai_api_CancelInputsAddJobRequest,
        __Marshaller_clarifai_api_SingleInputsAddJobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostUploadsRequest, global::Clarifai.Api.MultiUploadResponse> __Method_PostUploads = new grpc::Method<global::Clarifai.Api.PostUploadsRequest, global::Clarifai.Api.MultiUploadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostUploads",
        __Marshaller_clarifai_api_PostUploadsRequest,
        __Marshaller_clarifai_api_MultiUploadResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PutUploadContentPartsRequest, global::Clarifai.Api.SingleUploadResponse> __Method_PutUploadContentParts = new grpc::Method<global::Clarifai.Api.PutUploadContentPartsRequest, global::Clarifai.Api.SingleUploadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutUploadContentParts",
        __Marshaller_clarifai_api_PutUploadContentPartsRequest,
        __Marshaller_clarifai_api_SingleUploadResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetUploadRequest, global::Clarifai.Api.SingleUploadResponse> __Method_GetUpload = new grpc::Method<global::Clarifai.Api.GetUploadRequest, global::Clarifai.Api.SingleUploadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUpload",
        __Marshaller_clarifai_api_GetUploadRequest,
        __Marshaller_clarifai_api_SingleUploadResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListUploadsRequest, global::Clarifai.Api.MultiUploadResponse> __Method_ListUploads = new grpc::Method<global::Clarifai.Api.ListUploadsRequest, global::Clarifai.Api.MultiUploadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUploads",
        __Marshaller_clarifai_api_ListUploadsRequest,
        __Marshaller_clarifai_api_MultiUploadResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteUploadsRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteUploads = new grpc::Method<global::Clarifai.Api.DeleteUploadsRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUploads",
        __Marshaller_clarifai_api_DeleteUploadsRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostInputsDataSourcesRequest, global::Clarifai.Api.MultiInputsAddJobResponse> __Method_PostInputsDataSources = new grpc::Method<global::Clarifai.Api.PostInputsDataSourcesRequest, global::Clarifai.Api.MultiInputsAddJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputsDataSources",
        __Marshaller_clarifai_api_PostInputsDataSourcesRequest,
        __Marshaller_clarifai_api_MultiInputsAddJobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetInputsExtractionJobRequest, global::Clarifai.Api.SingleInputsExtractionJobResponse> __Method_GetInputsExtractionJob = new grpc::Method<global::Clarifai.Api.GetInputsExtractionJobRequest, global::Clarifai.Api.SingleInputsExtractionJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInputsExtractionJob",
        __Marshaller_clarifai_api_GetInputsExtractionJobRequest,
        __Marshaller_clarifai_api_SingleInputsExtractionJobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListInputsExtractionJobsRequest, global::Clarifai.Api.MultiInputsExtractionJobResponse> __Method_ListInputsExtractionJobs = new grpc::Method<global::Clarifai.Api.ListInputsExtractionJobsRequest, global::Clarifai.Api.MultiInputsExtractionJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInputsExtractionJobs",
        __Marshaller_clarifai_api_ListInputsExtractionJobsRequest,
        __Marshaller_clarifai_api_MultiInputsExtractionJobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.CancelInputsExtractionJobsRequest, global::Clarifai.Api.MultiInputsExtractionJobResponse> __Method_CancelInputsExtractionJobs = new grpc::Method<global::Clarifai.Api.CancelInputsExtractionJobsRequest, global::Clarifai.Api.MultiInputsExtractionJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelInputsExtractionJobs",
        __Marshaller_clarifai_api_CancelInputsExtractionJobsRequest,
        __Marshaller_clarifai_api_MultiInputsExtractionJobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostInputsUploadsRequest, global::Clarifai.Api.MultiInputsAddJobResponse> __Method_PostInputsUploads = new grpc::Method<global::Clarifai.Api.PostInputsUploadsRequest, global::Clarifai.Api.MultiInputsAddJobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostInputsUploads",
        __Marshaller_clarifai_api_PostInputsUploadsRequest,
        __Marshaller_clarifai_api_MultiInputsAddJobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.GetRunnerRequest, global::Clarifai.Api.SingleRunnerResponse> __Method_GetRunner = new grpc::Method<global::Clarifai.Api.GetRunnerRequest, global::Clarifai.Api.SingleRunnerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRunner",
        __Marshaller_clarifai_api_GetRunnerRequest,
        __Marshaller_clarifai_api_SingleRunnerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListRunnersRequest, global::Clarifai.Api.MultiRunnerResponse> __Method_ListRunners = new grpc::Method<global::Clarifai.Api.ListRunnersRequest, global::Clarifai.Api.MultiRunnerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRunners",
        __Marshaller_clarifai_api_ListRunnersRequest,
        __Marshaller_clarifai_api_MultiRunnerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostRunnersRequest, global::Clarifai.Api.MultiRunnerResponse> __Method_PostRunners = new grpc::Method<global::Clarifai.Api.PostRunnersRequest, global::Clarifai.Api.MultiRunnerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostRunners",
        __Marshaller_clarifai_api_PostRunnersRequest,
        __Marshaller_clarifai_api_MultiRunnerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.DeleteRunnersRequest, global::Clarifai.Api.Status.BaseResponse> __Method_DeleteRunners = new grpc::Method<global::Clarifai.Api.DeleteRunnersRequest, global::Clarifai.Api.Status.BaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRunners",
        __Marshaller_clarifai_api_DeleteRunnersRequest,
        __Marshaller_clarifai_api_status_BaseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.ListRunnerItemsRequest, global::Clarifai.Api.MultiRunnerItemResponse> __Method_ListRunnerItems = new grpc::Method<global::Clarifai.Api.ListRunnerItemsRequest, global::Clarifai.Api.MultiRunnerItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRunnerItems",
        __Marshaller_clarifai_api_ListRunnerItemsRequest,
        __Marshaller_clarifai_api_MultiRunnerItemResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostRunnerItemOutputsRequest, global::Clarifai.Api.MultiRunnerItemOutputResponse> __Method_PostRunnerItemOutputs = new grpc::Method<global::Clarifai.Api.PostRunnerItemOutputsRequest, global::Clarifai.Api.MultiRunnerItemOutputResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostRunnerItemOutputs",
        __Marshaller_clarifai_api_PostRunnerItemOutputsRequest,
        __Marshaller_clarifai_api_MultiRunnerItemOutputResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Clarifai.Api.PostModelVersionsTrainingTimeEstimateRequest, global::Clarifai.Api.MultiTrainingTimeEstimateResponse> __Method_PostModelVersionsTrainingTimeEstimate = new grpc::Method<global::Clarifai.Api.PostModelVersionsTrainingTimeEstimateRequest, global::Clarifai.Api.MultiTrainingTimeEstimateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostModelVersionsTrainingTimeEstimate",
        __Marshaller_clarifai_api_PostModelVersionsTrainingTimeEstimateRequest,
        __Marshaller_clarifai_api_MultiTrainingTimeEstimateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Clarifai.Api.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of V2</summary>
    [grpc::BindServiceMethod(typeof(V2), "BindService")]
    public abstract partial class V2Base
    {
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// MUST be above ListConcepts so that if concept_id is empty this will still match
      /// /concepts/relations to list all the concept relations in the app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptRelationResponse> ListConceptRelations(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptRelationResponse> PostConceptRelations(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteConceptRelations(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptCountResponse> GetConceptCounts(global::Clarifai.Api.GetConceptCountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleConceptResponse> GetConcept(global::Clarifai.Api.GetConceptRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> ListConcepts(global::Clarifai.Api.ListConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List models concepts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> ListModelConcepts(global::Clarifai.Api.ListModelConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> PostConceptsSearches(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> PostConcepts(global::Clarifai.Api.PostConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptResponse> PatchConcepts(global::Clarifai.Api.PatchConceptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleConceptLanguageResponse> GetConceptLanguage(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptLanguageResponse> ListConceptLanguages(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new translation for this concept.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptLanguageResponse> PostConceptLanguages(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptLanguageResponse> PatchConceptLanguages(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKnowledgeGraphResponse> ListKnowledgeGraphs(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKnowledgeGraphResponse> PostKnowledgeGraphs(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiConceptMappingJobResponse> PostConceptMappingJobs(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAnnotationResponse> GetAnnotation(global::Clarifai.Api.GetAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotations(global::Clarifai.Api.ListAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationResponse> PostAnnotations(global::Clarifai.Api.PostAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationResponse> PatchAnnotations(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch annotations status by worker id and task id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PatchAnnotationsStatusResponse> PatchAnnotationsStatus(global::Clarifai.Api.PatchAnnotationsStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotation(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotations(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch saved annotations searches by ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PatchAnnotationsSearches(global::Clarifai.Api.PatchAnnotationsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a search over annotations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostAnnotationsSearches(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListAnnotationWorkers lists users, models, and workflows (collectively
      /// known as "workers") that have added annotations to the application.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkerResponse> ListAnnotationWorkers(global::Clarifai.Api.ListAnnotationWorkersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get input count per status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputCountResponse> GetInputCount(global::Clarifai.Api.GetInputCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> StreamInputs(global::Clarifai.Api.StreamInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputAnnotationResponse> GetInputSamples(global::Clarifai.Api.GetInputSamplesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputResponse> GetInput(global::Clarifai.Api.GetInputRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a video input manifest.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.GetVideoManifestResponse> GetInputVideoManifest(global::Clarifai.Api.GetVideoManifestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> ListInputs(global::Clarifai.Api.ListInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add 1 or more input to an app.
      /// The actual inputs processing is asynchronous.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> PostInputs(global::Clarifai.Api.PostInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> PatchInputs(global::Clarifai.Api.PatchInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single input asynchronously.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteInput(global::Clarifai.Api.DeleteInputRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteInputs(global::Clarifai.Api.DeleteInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch saved inputs searches by ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PatchInputsSearches(global::Clarifai.Api.PatchInputsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a search over inputs
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostInputsSearches(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiOutputResponse> PostModelOutputs(global::Clarifai.Api.PostModelOutputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the datasets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetResponse> ListDatasets(global::Clarifai.Api.ListDatasetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific dataset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleDatasetResponse> GetDataset(global::Clarifai.Api.GetDatasetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add datasets to an app.
      /// The process is atomic, i.e. either all or no datasets are added.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetResponse> PostDatasets(global::Clarifai.Api.PostDatasetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more datasets.
      /// The process is atomic, i.e. either all or no datasets are patched.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetResponse> PatchDatasets(global::Clarifai.Api.PatchDatasetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete one or more datasets in a single request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteDatasets(global::Clarifai.Api.DeleteDatasetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the dataset inputs in a dataset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetInputResponse> ListDatasetInputs(global::Clarifai.Api.ListDatasetInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific dataset input.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleDatasetInputResponse> GetDatasetInput(global::Clarifai.Api.GetDatasetInputRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add dataset inputs to a dataset.
      /// The process is not atomic, i.e. if there are errors with some dataset
      /// inputs, others might still be added. The response reports
      ///   - SUCCESS if all dataset inputs were added,
      ///   - MIXED_STATUS if only some dataset inputs were added, and
      ///   - FAILURE if no dataset inputs were added.
      /// Each individual dataset input in the response has the status set to
      /// indicate if it was successful or if there was an error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetInputResponse> PostDatasetInputs(global::Clarifai.Api.PostDatasetInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete one or more dataset inputs in a single request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetInputs(global::Clarifai.Api.DeleteDatasetInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the dataset versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetVersionResponse> ListDatasetVersions(global::Clarifai.Api.ListDatasetVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific dataset version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleDatasetVersionResponse> GetDatasetVersion(global::Clarifai.Api.GetDatasetVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse> ListDatasetVersionMetricsGroups(global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add dataset versions to a dataset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetVersionResponse> PostDatasetVersions(global::Clarifai.Api.PostDatasetVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more dataset versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetVersionResponse> PatchDatasetVersions(global::Clarifai.Api.PatchDatasetVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete one or more dataset versions in a single request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetVersions(global::Clarifai.Api.DeleteDatasetVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create export of a dataset version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiDatasetVersionExportResponse> PutDatasetVersionExports(global::Clarifai.Api.PutDatasetVersionExportsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelTypeResponse> GetModelType(global::Clarifai.Api.GetModelTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the supported open source licenses in the platform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.ListOpenSourceLicensesResponse> ListOpenSourceLicenses(global::Clarifai.Api.ListOpenSourceLicensesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the model types available in the platform.
      /// This MUST be above ListModels so that the /models/types endpoint takes precedence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelTypeResponse> ListModelTypes(global::Clarifai.Api.ListModelTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> GetModel(global::Clarifai.Api.GetModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> GetModelOutputInfo(global::Clarifai.Api.GetModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> ListModels(global::Clarifai.Api.ListModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the resource counts for the app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.GetResourceCountsResponse> GetResourceCounts(global::Clarifai.Api.GetResourceCountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> PostModelsSearches(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a models to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> PostModels(global::Clarifai.Api.PostModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> PatchModels(global::Clarifai.Api.PatchModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more models ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelResponse> PatchModelIds(global::Clarifai.Api.PatchModelIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModel(global::Clarifai.Api.DeleteModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModels(global::Clarifai.Api.DeleteModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update model check consents
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelCheckConsentResponse> PatchModelCheckConsents(global::Clarifai.Api.PatchModelCheckConsentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update model toolkits tags
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelToolkitResponse> PatchModelToolkits(global::Clarifai.Api.PatchModelToolkitsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update model use_cases tags
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelUseCaseResponse> PatchModelUseCases(global::Clarifai.Api.PatchModelUseCasesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update model languages tags
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelLanguageResponse> PatchModelLanguages(global::Clarifai.Api.PatchModelLanguagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> ListModelInputs(global::Clarifai.Api.ListModelInputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersion(global::Clarifai.Api.GetModelVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelVersionResponse> ListModelVersions(global::Clarifai.Api.ListModelVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsUnPublish(global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsPublish(global::Clarifai.Api.PostWorkflowVersionsPublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostModelVersionsPublish
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsPublish(global::Clarifai.Api.PostModelVersionsPublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostModelVersionsUnPublish
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsUnPublish(global::Clarifai.Api.PostModelVersionsUnPublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelResponse> PostModelVersions(global::Clarifai.Api.PostModelVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PatchModelVersions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelVersionResponse> PatchModelVersions(global::Clarifai.Api.PatchModelVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersion(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deprecated: Use GetEvaluation instead
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionMetrics(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deprecated, use PostEvaluations instead
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionResponse> PostModelVersionMetrics(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deprecated, use PostEvaluations instead
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiEvalMetricsResponse> PostModelVersionEvaluations(global::Clarifai.Api.PostModelVersionEvaluationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deprecated, use GetEvaluation instead
      /// List the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiEvalMetricsResponse> ListModelVersionEvaluations(global::Clarifai.Api.ListModelVersionEvaluationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deprecated, use GetEvaluation instead
      /// Get an evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleEvalMetricsResponse> GetModelVersionEvaluation(global::Clarifai.Api.GetModelVersionEvaluationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiEvalMetricsResponse> PostEvaluations(global::Clarifai.Api.PostEvaluationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiEvalMetricsResponse> ListEvaluations(global::Clarifai.Api.ListEvaluationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleEvalMetricsResponse> GetEvaluation(global::Clarifai.Api.GetEvaluationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists model references tied to a particular model id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelReferenceResponse> ListModelReferences(global::Clarifai.Api.ListModelReferencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetModelVersionInputExample
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModelVersionInputExampleResponse> GetModelVersionInputExample(global::Clarifai.Api.GetModelVersionInputExampleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModelVersionInputExampleResponse> ListModelVersionInputExamples(global::Clarifai.Api.ListModelVersionInputExamplesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleWorkflowResponse> GetWorkflow(global::Clarifai.Api.GetWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> ListWorkflows(global::Clarifai.Api.ListWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> PostWorkflows(global::Clarifai.Api.PostWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflows(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more workflows ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowIds(global::Clarifai.Api.PatchWorkflowIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflow(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflows(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostWorkflowResultsResponse> PostWorkflowResults(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Compare embeddings distances using a workflow
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> PostWorkflowResultsSimilarity(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List workflow versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowVersionResponse> ListWorkflowVersions(global::Clarifai.Api.ListWorkflowVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get single workflow version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleWorkflowVersionResponse> GetWorkflowVersion(global::Clarifai.Api.GetWorkflowVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete workflow versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowVersions(global::Clarifai.Api.DeleteWorkflowVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch workflow versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiWorkflowVersionResponse> PatchWorkflowVersions(global::Clarifai.Api.PatchWorkflowVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleKeyResponse> GetKey(global::Clarifai.Api.GetKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> ListKeys(global::Clarifai.Api.ListKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> ListAppKeys(global::Clarifai.Api.ListAppKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteKey(global::Clarifai.Api.DeleteKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> PostKeys(global::Clarifai.Api.PostKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiKeyResponse> PatchKeys(global::Clarifai.Api.PatchKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiScopeResponse> MyScopes(global::Clarifai.Api.MyScopesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiScopeUserResponse> MyScopesUser(global::Clarifai.Api.MyScopesUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiScopeRootResponse> MyScopesRoot(global::Clarifai.Api.MyScopesRootRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all auth scopes available to me as a user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiScopeDepsResponse> ListScopes(global::Clarifai.Api.ListScopesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAppResponse> GetApp(global::Clarifai.Api.GetAppRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> ListApps(global::Clarifai.Api.ListAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteApp(global::Clarifai.Api.DeleteAppRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PostApps(global::Clarifai.Api.PostAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PatchApps(global::Clarifai.Api.PatchAppsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch apps ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PatchAppsIds(global::Clarifai.Api.PatchAppsIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAppResponse> PatchApp(global::Clarifai.Api.PatchAppRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppResponse> PostAppsSearches(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get user information
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleUserResponse> GetUser(global::Clarifai.Api.GetUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SinglePasswordValidationResponse> PostValidatePassword(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a saved legacy search.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleSearchResponse> GetSearch(global::Clarifai.Api.GetSearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all saved legacy searches.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> ListSearches(global::Clarifai.Api.ListSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch saved legacy searches by ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PatchSearches(global::Clarifai.Api.PatchSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a new search and optionally save it.
      ///
      /// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostSearches(global::Clarifai.Api.PostSearchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute a previously saved legacy search.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiSearchResponse> PostSearchesByID(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> PostAnnotationSearchMetrics(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> GetAnnotationSearchMetrics(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> ListAnnotationSearchMetrics(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteAnnotationSearchMetrics
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationSearchMetrics(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteSearch(global::Clarifai.Api.DeleteSearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the annotation filters.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationFilterResponse> ListAnnotationFilters(global::Clarifai.Api.ListAnnotationFiltersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific annotation filter.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAnnotationFilterResponse> GetAnnotationFilter(global::Clarifai.Api.GetAnnotationFilterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add annotation filters.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationFilterResponse> PostAnnotationFilters(global::Clarifai.Api.PostAnnotationFiltersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more annotation filters.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAnnotationFilterResponse> PatchAnnotationFilters(global::Clarifai.Api.PatchAnnotationFiltersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete one or more annotation filters in a single request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationFilters(global::Clarifai.Api.DeleteAnnotationFiltersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiStatusCodeResponse> ListStatusCodes(global::Clarifai.Api.ListStatusCodesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleStatusCodeResponse> GetStatusCode(global::Clarifai.Api.GetStatusCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaboratorsResponse> ListCollaborators(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaboratorsResponse> PostCollaborators(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaboratorsResponse> PatchCollaborators(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteCollaborators(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollaborationsResponse> ListCollaborations(global::Clarifai.Api.ListCollaborationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostAppDuplications starts async app duplication jobs which copy resources
      /// (inputs, annotations, models etc) from one application to another. It can
      /// also create the destination application if it does not exist, with fields
      /// (description, metadata etc) copied from the source application.
      ///
      /// A duplication job can be started by any user that can read from the source
      /// application (the target of this call) and can create and write to the
      /// destination application. The duplication is associated with the user that
      /// created it, so in order to read the status and progress of the job, that
      /// user's ID has to be used in the call to GetAppDuplication, which might be
      /// different to the source application owner ID in this call.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppDuplicationsResponse> PostAppDuplications(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListAppDuplications lists all app duplication jobs created by the user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiAppDuplicationsResponse> ListAppDuplications(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetAppDuplication returns an app duplication job created by the user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleAppDuplicationResponse> GetAppDuplication(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTaskResponse> PostTasks(global::Clarifai.Api.PostTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Task annotation count
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleTaskCountResponse> GetTaskAnnotationCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Task Input count
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleTaskCountResponse> GetTaskInputCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleTaskResponse> GetTask(global::Clarifai.Api.GetTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTaskResponse> ListTasks(global::Clarifai.Api.ListTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTaskResponse> PatchTasks(global::Clarifai.Api.PatchTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteTasks(global::Clarifai.Api.DeleteTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add Label orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiLabelOrderResponse> PostLabelOrders(global::Clarifai.Api.PostLabelOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a label order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleLabelOrderResponse> GetLabelOrder(global::Clarifai.Api.GetLabelOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List label orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiLabelOrderResponse> ListLabelOrders(global::Clarifai.Api.ListLabelOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more label orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiLabelOrderResponse> PatchLabelOrders(global::Clarifai.Api.PatchLabelOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple label orders in one request.
      /// this do not change task status
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteLabelOrders(global::Clarifai.Api.DeleteLabelOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollectorResponse> PostCollectors(global::Clarifai.Api.PostCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleCollectorResponse> GetCollector(global::Clarifai.Api.GetCollectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollectorResponse> ListCollectors(global::Clarifai.Api.ListCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiCollectorResponse> PatchCollectors(global::Clarifai.Api.PatchCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteCollectors(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostStatValues
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiStatValueResponse> PostStatValues(global::Clarifai.Api.PostStatValuesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PostStatValuesAggregate
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiStatValueAggregateResponse> PostStatValuesAggregate(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Increase the view metric for a detail view
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PostTrendingMetricsView(global::Clarifai.Api.PostTrendingMetricsViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the view metrics for a detail view
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTrendingMetricsViewResponse> ListTrendingMetricsViews(global::Clarifai.Api.ListTrendingMetricsViewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific module from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModuleResponse> GetModule(global::Clarifai.Api.GetModuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the modules in community, by user or by app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModuleResponse> ListModules(global::Clarifai.Api.ListModulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a modules to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModuleResponse> PostModules(global::Clarifai.Api.PostModulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch one or more modules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModuleResponse> PatchModules(global::Clarifai.Api.PatchModulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple modules in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModules(global::Clarifai.Api.DeleteModulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific module version for a module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleModuleVersionResponse> GetModuleVersion(global::Clarifai.Api.GetModuleVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the modules versions for a given module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModuleVersionResponse> ListModuleVersions(global::Clarifai.Api.ListModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new module version to trigger training of the module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiModuleVersionResponse> PostModuleVersions(global::Clarifai.Api.PostModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a multiple module version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteModuleVersions(global::Clarifai.Api.DeleteModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInstalledModuleVersionResponse> GetInstalledModuleVersion(global::Clarifai.Api.GetInstalledModuleVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInstalledModuleVersionResponse> ListInstalledModuleVersions(global::Clarifai.Api.ListInstalledModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInstalledModuleVersionResponse> PostInstalledModuleVersions(global::Clarifai.Api.PostInstalledModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
      /// in the url.
      /// This cleaned up any associated caller keys so needs the Keys_Delete scope.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteInstalledModuleVersions(global::Clarifai.Api.DeleteInstalledModuleVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Assign a key that the caller owns to be used when accessing this installed module version
      /// If this endpoint is called with a different key then it overwrites what is there.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleKeyResponse> PostInstalledModuleVersionsKey(global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Perform bulk operations on a list of inputs based on input source.
      /// Operation include add, update, delete of concepts, metadata and geo data.
      /// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiBulkOperationsResponse> PostBulkOperations(global::Clarifai.Api.PostBulkOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the bulk operations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiBulkOperationsResponse> ListBulkOperations(global::Clarifai.Api.ListBulkOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the bulk operation details by ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleBulkOperationsResponse> GetBulkOperation(global::Clarifai.Api.GetBulkOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancel one or more bulk operations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiBulkOperationsResponse> CancelBulkOperations(global::Clarifai.Api.CancelBulkOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// delete one or more terminated bulk operations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteBulkOperations(global::Clarifai.Api.DeleteBulkOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List next non-labeled and unassigned inputs from task's dataset
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputResponse> ListNextTaskAssignments(global::Clarifai.Api.ListNextTaskAssignmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> PutTaskAssignments(global::Clarifai.Api.PutTaskAssignmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the inputs add jobs
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputsAddJobResponse> ListInputsAddJobs(global::Clarifai.Api.ListInputsAddJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the input add job details by ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputsAddJobResponse> GetInputsAddJob(global::Clarifai.Api.GetInputsAddJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// cancel the input add job by ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputsAddJobResponse> CancelInputsAddJob(global::Clarifai.Api.CancelInputsAddJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiUploadResponse> PostUploads(global::Clarifai.Api.PostUploadsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Upload a part of a multipart upload.
      /// Behaviour on completion depends on the endpoint that was used to initiate the upload.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleUploadResponse> PutUploadContentParts(global::Clarifai.Api.PutUploadContentPartsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleUploadResponse> GetUpload(global::Clarifai.Api.GetUploadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiUploadResponse> ListUploads(global::Clarifai.Api.ListUploadsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteUploads(global::Clarifai.Api.DeleteUploadsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Initiates retrieval of inputs from cloud storage from a user provided data source.
      /// Will create and return an inputs-add-job for tracking progress.
      /// Archives will be extracted and their contents will be processed as inputs.
      ///
      /// The cloud URL will be treated as a filter prefix. For example s3:/bucket/images_folder/abc will process
      /// files in the images_folder beginning with abc or in a subfolder beginning with abc.
      /// For example:
      /// bucket/images_folder/abcImage.png
      /// bucket/images_folder/abc-1/Data.zip
      ///
      /// If given URL is for a private bucket or file, then credentials should be provided to access the bucket.
      /// Credentials should include rights to list the objects in the bucket, except when pointed directly at a file archive,
      /// in which case it only requires rights to access that particular file.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputsAddJobResponse> PostInputsDataSources(global::Clarifai.Api.PostInputsDataSourcesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the input extraction job details by ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleInputsExtractionJobResponse> GetInputsExtractionJob(global::Clarifai.Api.GetInputsExtractionJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the input extraction jobs
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputsExtractionJobResponse> ListInputsExtractionJobs(global::Clarifai.Api.ListInputsExtractionJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputsExtractionJobResponse> CancelInputsExtractionJobs(global::Clarifai.Api.CancelInputsExtractionJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Start uploading a file archive containing inputs.
      /// Will create and return an inputs-add-job for tracking progress.
      ///
      /// Associated inputs-add-job contains an upload id which should be completed through `PutUploadContentParts` endpoint.
      /// Completing the upload will automatically begin unpacking the archive and uploading the contents as inputs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiInputsAddJobResponse> PostInputsUploads(global::Clarifai.Api.PostInputsUploadsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific runner from an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.SingleRunnerResponse> GetRunner(global::Clarifai.Api.GetRunnerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the runners in community, by user or by app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiRunnerResponse> ListRunners(global::Clarifai.Api.ListRunnersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a runners to an app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiRunnerResponse> PostRunners(global::Clarifai.Api.PostRunnersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete multiple runners in one request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.Status.BaseResponse> DeleteRunners(global::Clarifai.Api.DeleteRunnersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List items for the remote runner to work on.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiRunnerItemResponse> ListRunnerItems(global::Clarifai.Api.ListRunnerItemsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Post back outputs from remote runners
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiRunnerItemOutputResponse> PostRunnerItemOutputs(global::Clarifai.Api.PostRunnerItemOutputsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Clarifai.Api.MultiTrainingTimeEstimateResponse> PostModelVersionsTrainingTimeEstimate(global::Clarifai.Api.PostModelVersionsTrainingTimeEstimateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for V2</summary>
    public partial class V2Client : grpc::ClientBase<V2Client>
    {
      /// <summary>Creates a new client for V2</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public V2Client(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for V2 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public V2Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected V2Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected V2Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// List concept relations between concepts in the platform.
      /// MUST be above ListConcepts so that if concept_id is empty this will still match
      /// /concepts/relations to list all the concept relations in the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptRelationResponse ListConceptRelations(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptRelations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// MUST be above ListConcepts so that if concept_id is empty this will still match
      /// /concepts/relations to list all the concept relations in the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptRelationResponse ListConceptRelations(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConceptRelations, null, options, request);
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// MUST be above ListConcepts so that if concept_id is empty this will still match
      /// /concepts/relations to list all the concept relations in the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> ListConceptRelationsAsync(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptRelationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List concept relations between concepts in the platform.
      /// MUST be above ListConcepts so that if concept_id is empty this will still match
      /// /concepts/relations to list all the concept relations in the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> ListConceptRelationsAsync(global::Clarifai.Api.ListConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptRelationResponse PostConceptRelations(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptRelations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptRelationResponse PostConceptRelations(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> PostConceptRelationsAsync(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptRelationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptRelationResponse> PostConceptRelationsAsync(global::Clarifai.Api.PostConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteConceptRelations(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConceptRelations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteConceptRelations(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConceptRelations, null, options, request);
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteConceptRelationsAsync(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConceptRelationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post concept relations to create relations between concepts in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteConceptRelationsAsync(global::Clarifai.Api.DeleteConceptRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConceptRelations, null, options, request);
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptCountResponse GetConceptCounts(global::Clarifai.Api.GetConceptCountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptCounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptCountResponse GetConceptCounts(global::Clarifai.Api.GetConceptCountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConceptCounts, null, options, request);
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptCountResponse> GetConceptCountsAsync(global::Clarifai.Api.GetConceptCountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptCountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts with their positive and negative counts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptCountResponse> GetConceptCountsAsync(global::Clarifai.Api.GetConceptCountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConceptCounts, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleConceptResponse GetConcept(global::Clarifai.Api.GetConceptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConcept(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleConceptResponse GetConcept(global::Clarifai.Api.GetConceptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConcept, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptResponse> GetConceptAsync(global::Clarifai.Api.GetConceptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptResponse> GetConceptAsync(global::Clarifai.Api.GetConceptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConcept, null, options, request);
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptResponse ListConcepts(global::Clarifai.Api.ListConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptResponse ListConcepts(global::Clarifai.Api.ListConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConcepts, null, options, request);
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListConceptsAsync(global::Clarifai.Api.ListConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListConceptsAsync(global::Clarifai.Api.ListConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConcepts, null, options, request);
      }
      /// <summary>
      /// List models concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptResponse ListModelConcepts(global::Clarifai.Api.ListModelConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List models concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptResponse ListModelConcepts(global::Clarifai.Api.ListModelConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelConcepts, null, options, request);
      }
      /// <summary>
      /// List models concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListModelConceptsAsync(global::Clarifai.Api.ListModelConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List models concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> ListModelConceptsAsync(global::Clarifai.Api.ListModelConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelConcepts, null, options, request);
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptResponse PostConceptsSearches(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptResponse PostConceptsSearches(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptsSearches, null, options, request);
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsSearchesAsync(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the concepts to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsSearchesAsync(global::Clarifai.Api.PostConceptsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptsSearches, null, options, request);
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptResponse PostConcepts(global::Clarifai.Api.PostConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptResponse PostConcepts(global::Clarifai.Api.PostConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConcepts, null, options, request);
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsAsync(global::Clarifai.Api.PostConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a concept to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PostConceptsAsync(global::Clarifai.Api.PostConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConcepts, null, options, request);
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptResponse PatchConcepts(global::Clarifai.Api.PatchConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConcepts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptResponse PatchConcepts(global::Clarifai.Api.PatchConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchConcepts, null, options, request);
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PatchConceptsAsync(global::Clarifai.Api.PatchConceptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConceptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more concepts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptResponse> PatchConceptsAsync(global::Clarifai.Api.PatchConceptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchConcepts, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleConceptLanguageResponse GetConceptLanguage(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptLanguage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleConceptLanguageResponse GetConceptLanguage(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConceptLanguage, null, options, request);
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptLanguageResponse> GetConceptLanguageAsync(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConceptLanguageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific concept from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleConceptLanguageResponse> GetConceptLanguageAsync(global::Clarifai.Api.GetConceptLanguageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConceptLanguage, null, options, request);
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse ListConceptLanguages(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse ListConceptLanguages(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConceptLanguages, null, options, request);
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> ListConceptLanguagesAsync(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConceptLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the concept in all the translated languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> ListConceptLanguagesAsync(global::Clarifai.Api.ListConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Add a new translation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PostConceptLanguages(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new translation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PostConceptLanguages(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Add a new translation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PostConceptLanguagesAsync(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new translation for this concept.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PostConceptLanguagesAsync(global::Clarifai.Api.PostConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PatchConceptLanguages(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConceptLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptLanguageResponse PatchConceptLanguages(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchConceptLanguages, null, options, request);
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PatchConceptLanguagesAsync(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchConceptLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch the name for a given language names by passing in a list of concepts with the new names
      /// for the languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptLanguageResponse> PatchConceptLanguagesAsync(global::Clarifai.Api.PatchConceptLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchConceptLanguages, null, options, request);
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse ListKnowledgeGraphs(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKnowledgeGraphs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse ListKnowledgeGraphs(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> ListKnowledgeGraphsAsync(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKnowledgeGraphsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> ListKnowledgeGraphsAsync(global::Clarifai.Api.ListKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse PostKnowledgeGraphs(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKnowledgeGraphs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKnowledgeGraphResponse PostKnowledgeGraphs(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> PostKnowledgeGraphsAsync(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKnowledgeGraphsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post domain graphs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKnowledgeGraphResponse> PostKnowledgeGraphsAsync(global::Clarifai.Api.PostKnowledgeGraphsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostKnowledgeGraphs, null, options, request);
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptMappingJobResponse PostConceptMappingJobs(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptMappingJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiConceptMappingJobResponse PostConceptMappingJobs(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConceptMappingJobs, null, options, request);
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptMappingJobResponse> PostConceptMappingJobsAsync(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConceptMappingJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start concept mapping jobs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiConceptMappingJobResponse> PostConceptMappingJobsAsync(global::Clarifai.Api.PostConceptMappingJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConceptMappingJobs, null, options, request);
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleAnnotationResponse GetAnnotation(global::Clarifai.Api.GetAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleAnnotationResponse GetAnnotation(global::Clarifai.Api.GetAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnnotation, null, options, request);
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAnnotationResponse> GetAnnotationAsync(global::Clarifai.Api.GetAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific annotation from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAnnotationResponse> GetAnnotationAsync(global::Clarifai.Api.GetAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnnotation, null, options, request);
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationResponse ListAnnotations(global::Clarifai.Api.ListAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationResponse ListAnnotations(global::Clarifai.Api.ListAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotations, null, options, request);
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotationsAsync(global::Clarifai.Api.ListAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> ListAnnotationsAsync(global::Clarifai.Api.ListAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotations, null, options, request);
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationResponse PostAnnotations(global::Clarifai.Api.PostAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationResponse PostAnnotations(global::Clarifai.Api.PostAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotations, null, options, request);
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PostAnnotationsAsync(global::Clarifai.Api.PostAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PostAnnotationsAsync(global::Clarifai.Api.PostAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotations, null, options, request);
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationResponse PatchAnnotations(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationResponse PatchAnnotations(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnnotations, null, options, request);
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PatchAnnotationsAsync(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationResponse> PatchAnnotationsAsync(global::Clarifai.Api.PatchAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnnotations, null, options, request);
      }
      /// <summary>
      /// Patch annotations status by worker id and task id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.PatchAnnotationsStatusResponse PatchAnnotationsStatus(global::Clarifai.Api.PatchAnnotationsStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch annotations status by worker id and task id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.PatchAnnotationsStatusResponse PatchAnnotationsStatus(global::Clarifai.Api.PatchAnnotationsStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnnotationsStatus, null, options, request);
      }
      /// <summary>
      /// Patch annotations status by worker id and task id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PatchAnnotationsStatusResponse> PatchAnnotationsStatusAsync(global::Clarifai.Api.PatchAnnotationsStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch annotations status by worker id and task id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PatchAnnotationsStatusResponse> PatchAnnotationsStatusAsync(global::Clarifai.Api.PatchAnnotationsStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnnotationsStatus, null, options, request);
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotation(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotation(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotation, null, options, request);
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationAsync(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single annotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationAsync(global::Clarifai.Api.DeleteAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotation, null, options, request);
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotations(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotations(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotations, null, options, request);
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationsAsync(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple annotations in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationsAsync(global::Clarifai.Api.DeleteAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotations, null, options, request);
      }
      /// <summary>
      /// Patch saved annotations searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PatchAnnotationsSearches(global::Clarifai.Api.PatchAnnotationsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved annotations searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PatchAnnotationsSearches(global::Clarifai.Api.PatchAnnotationsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnnotationsSearches, null, options, request);
      }
      /// <summary>
      /// Patch saved annotations searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchAnnotationsSearchesAsync(global::Clarifai.Api.PatchAnnotationsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved annotations searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchAnnotationsSearchesAsync(global::Clarifai.Api.PatchAnnotationsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnnotationsSearches, null, options, request);
      }
      /// <summary>
      /// Execute a search over annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PostAnnotationsSearches(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PostAnnotationsSearches(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotationsSearches, null, options, request);
      }
      /// <summary>
      /// Execute a search over annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostAnnotationsSearchesAsync(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over annotations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostAnnotationsSearchesAsync(global::Clarifai.Api.PostAnnotationsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotationsSearches, null, options, request);
      }
      /// <summary>
      /// ListAnnotationWorkers lists users, models, and workflows (collectively
      /// known as "workers") that have added annotations to the application.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkerResponse ListAnnotationWorkers(global::Clarifai.Api.ListAnnotationWorkersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationWorkers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListAnnotationWorkers lists users, models, and workflows (collectively
      /// known as "workers") that have added annotations to the application.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkerResponse ListAnnotationWorkers(global::Clarifai.Api.ListAnnotationWorkersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotationWorkers, null, options, request);
      }
      /// <summary>
      /// ListAnnotationWorkers lists users, models, and workflows (collectively
      /// known as "workers") that have added annotations to the application.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkerResponse> ListAnnotationWorkersAsync(global::Clarifai.Api.ListAnnotationWorkersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationWorkersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListAnnotationWorkers lists users, models, and workflows (collectively
      /// known as "workers") that have added annotations to the application.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkerResponse> ListAnnotationWorkersAsync(global::Clarifai.Api.ListAnnotationWorkersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotationWorkers, null, options, request);
      }
      /// <summary>
      /// Get input count per status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInputCountResponse GetInputCount(global::Clarifai.Api.GetInputCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get input count per status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInputCountResponse GetInputCount(global::Clarifai.Api.GetInputCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInputCount, null, options, request);
      }
      /// <summary>
      /// Get input count per status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputCountResponse> GetInputCountAsync(global::Clarifai.Api.GetInputCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get input count per status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputCountResponse> GetInputCountAsync(global::Clarifai.Api.GetInputCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInputCount, null, options, request);
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse StreamInputs(global::Clarifai.Api.StreamInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse StreamInputs(global::Clarifai.Api.StreamInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StreamInputs, null, options, request);
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> StreamInputsAsync(global::Clarifai.Api.StreamInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Streams all the inputs starting from oldest assets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> StreamInputsAsync(global::Clarifai.Api.StreamInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StreamInputs, null, options, request);
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputAnnotationResponse GetInputSamples(global::Clarifai.Api.GetInputSamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputSamples(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputAnnotationResponse GetInputSamples(global::Clarifai.Api.GetInputSamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInputSamples, null, options, request);
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputAnnotationResponse> GetInputSamplesAsync(global::Clarifai.Api.GetInputSamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputSamplesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputAnnotationResponse> GetInputSamplesAsync(global::Clarifai.Api.GetInputSamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInputSamples, null, options, request);
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInputResponse GetInput(global::Clarifai.Api.GetInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInput(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInputResponse GetInput(global::Clarifai.Api.GetInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInput, null, options, request);
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputResponse> GetInputAsync(global::Clarifai.Api.GetInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific input from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputResponse> GetInputAsync(global::Clarifai.Api.GetInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInput, null, options, request);
      }
      /// <summary>
      /// Get a video input manifest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.GetVideoManifestResponse GetInputVideoManifest(global::Clarifai.Api.GetVideoManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputVideoManifest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a video input manifest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.GetVideoManifestResponse GetInputVideoManifest(global::Clarifai.Api.GetVideoManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInputVideoManifest, null, options, request);
      }
      /// <summary>
      /// Get a video input manifest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetVideoManifestResponse> GetInputVideoManifestAsync(global::Clarifai.Api.GetVideoManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputVideoManifestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a video input manifest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetVideoManifestResponse> GetInputVideoManifestAsync(global::Clarifai.Api.GetVideoManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInputVideoManifest, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse ListInputs(global::Clarifai.Api.ListInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse ListInputs(global::Clarifai.Api.ListInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInputs, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListInputsAsync(global::Clarifai.Api.ListInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListInputsAsync(global::Clarifai.Api.ListInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInputs, null, options, request);
      }
      /// <summary>
      /// Add 1 or more input to an app.
      /// The actual inputs processing is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse PostInputs(global::Clarifai.Api.PostInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add 1 or more input to an app.
      /// The actual inputs processing is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse PostInputs(global::Clarifai.Api.PostInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputs, null, options, request);
      }
      /// <summary>
      /// Add 1 or more input to an app.
      /// The actual inputs processing is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsAsync(global::Clarifai.Api.PostInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add 1 or more input to an app.
      /// The actual inputs processing is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PostInputsAsync(global::Clarifai.Api.PostInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputs, null, options, request);
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse PatchInputs(global::Clarifai.Api.PatchInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse PatchInputs(global::Clarifai.Api.PatchInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchInputs, null, options, request);
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PatchInputsAsync(global::Clarifai.Api.PatchInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> PatchInputsAsync(global::Clarifai.Api.PatchInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchInputs, null, options, request);
      }
      /// <summary>
      /// Delete a single input asynchronously.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInput(global::Clarifai.Api.DeleteInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInput(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single input asynchronously.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInput(global::Clarifai.Api.DeleteInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInput, null, options, request);
      }
      /// <summary>
      /// Delete a single input asynchronously.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputAsync(global::Clarifai.Api.DeleteInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInputAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single input asynchronously.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputAsync(global::Clarifai.Api.DeleteInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInput, null, options, request);
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInputs(global::Clarifai.Api.DeleteInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInputs(global::Clarifai.Api.DeleteInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInputs, null, options, request);
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputsAsync(global::Clarifai.Api.DeleteInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple inputs in one request.
      /// This call is asynchronous.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInputsAsync(global::Clarifai.Api.DeleteInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInputs, null, options, request);
      }
      /// <summary>
      /// Patch saved inputs searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PatchInputsSearches(global::Clarifai.Api.PatchInputsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchInputsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved inputs searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PatchInputsSearches(global::Clarifai.Api.PatchInputsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchInputsSearches, null, options, request);
      }
      /// <summary>
      /// Patch saved inputs searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchInputsSearchesAsync(global::Clarifai.Api.PatchInputsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchInputsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved inputs searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchInputsSearchesAsync(global::Clarifai.Api.PatchInputsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchInputsSearches, null, options, request);
      }
      /// <summary>
      /// Execute a search over inputs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PostInputsSearches(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over inputs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PostInputsSearches(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputsSearches, null, options, request);
      }
      /// <summary>
      /// Execute a search over inputs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostInputsSearchesAsync(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a search over inputs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostInputsSearchesAsync(global::Clarifai.Api.PostInputsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputsSearches, null, options, request);
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiOutputResponse PostModelOutputs(global::Clarifai.Api.PostModelOutputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelOutputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiOutputResponse PostModelOutputs(global::Clarifai.Api.PostModelOutputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelOutputs, null, options, request);
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOutputResponse> PostModelOutputsAsync(global::Clarifai.Api.PostModelOutputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelOutputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get predicted outputs from the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiOutputResponse> PostModelOutputsAsync(global::Clarifai.Api.PostModelOutputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelOutputs, null, options, request);
      }
      /// <summary>
      /// List all the datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetResponse ListDatasets(global::Clarifai.Api.ListDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetResponse ListDatasets(global::Clarifai.Api.ListDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatasets, null, options, request);
      }
      /// <summary>
      /// List all the datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> ListDatasetsAsync(global::Clarifai.Api.ListDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> ListDatasetsAsync(global::Clarifai.Api.ListDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatasets, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleDatasetResponse GetDataset(global::Clarifai.Api.GetDatasetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleDatasetResponse GetDataset(global::Clarifai.Api.GetDatasetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataset, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetResponse> GetDatasetAsync(global::Clarifai.Api.GetDatasetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetResponse> GetDatasetAsync(global::Clarifai.Api.GetDatasetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataset, null, options, request);
      }
      /// <summary>
      /// Add datasets to an app.
      /// The process is atomic, i.e. either all or no datasets are added.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetResponse PostDatasets(global::Clarifai.Api.PostDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add datasets to an app.
      /// The process is atomic, i.e. either all or no datasets are added.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetResponse PostDatasets(global::Clarifai.Api.PostDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostDatasets, null, options, request);
      }
      /// <summary>
      /// Add datasets to an app.
      /// The process is atomic, i.e. either all or no datasets are added.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> PostDatasetsAsync(global::Clarifai.Api.PostDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add datasets to an app.
      /// The process is atomic, i.e. either all or no datasets are added.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> PostDatasetsAsync(global::Clarifai.Api.PostDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostDatasets, null, options, request);
      }
      /// <summary>
      /// Patch one or more datasets.
      /// The process is atomic, i.e. either all or no datasets are patched.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetResponse PatchDatasets(global::Clarifai.Api.PatchDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchDatasets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more datasets.
      /// The process is atomic, i.e. either all or no datasets are patched.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetResponse PatchDatasets(global::Clarifai.Api.PatchDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchDatasets, null, options, request);
      }
      /// <summary>
      /// Patch one or more datasets.
      /// The process is atomic, i.e. either all or no datasets are patched.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> PatchDatasetsAsync(global::Clarifai.Api.PatchDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchDatasetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more datasets.
      /// The process is atomic, i.e. either all or no datasets are patched.
      /// If there is an error for one dataset,
      /// the process will stop, revert the transaction and return the error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetResponse> PatchDatasetsAsync(global::Clarifai.Api.PatchDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchDatasets, null, options, request);
      }
      /// <summary>
      /// Delete one or more datasets in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasets(global::Clarifai.Api.DeleteDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more datasets in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasets(global::Clarifai.Api.DeleteDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDatasets, null, options, request);
      }
      /// <summary>
      /// Delete one or more datasets in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetsAsync(global::Clarifai.Api.DeleteDatasetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more datasets in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetsAsync(global::Clarifai.Api.DeleteDatasetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDatasets, null, options, request);
      }
      /// <summary>
      /// List all the dataset inputs in a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetInputResponse ListDatasetInputs(global::Clarifai.Api.ListDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the dataset inputs in a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetInputResponse ListDatasetInputs(global::Clarifai.Api.ListDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatasetInputs, null, options, request);
      }
      /// <summary>
      /// List all the dataset inputs in a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetInputResponse> ListDatasetInputsAsync(global::Clarifai.Api.ListDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the dataset inputs in a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetInputResponse> ListDatasetInputsAsync(global::Clarifai.Api.ListDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatasetInputs, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset input.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleDatasetInputResponse GetDatasetInput(global::Clarifai.Api.GetDatasetInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetInput(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset input.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleDatasetInputResponse GetDatasetInput(global::Clarifai.Api.GetDatasetInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatasetInput, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset input.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetInputResponse> GetDatasetInputAsync(global::Clarifai.Api.GetDatasetInputRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetInputAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset input.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetInputResponse> GetDatasetInputAsync(global::Clarifai.Api.GetDatasetInputRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatasetInput, null, options, request);
      }
      /// <summary>
      /// Add dataset inputs to a dataset.
      /// The process is not atomic, i.e. if there are errors with some dataset
      /// inputs, others might still be added. The response reports
      ///   - SUCCESS if all dataset inputs were added,
      ///   - MIXED_STATUS if only some dataset inputs were added, and
      ///   - FAILURE if no dataset inputs were added.
      /// Each individual dataset input in the response has the status set to
      /// indicate if it was successful or if there was an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetInputResponse PostDatasetInputs(global::Clarifai.Api.PostDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasetInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add dataset inputs to a dataset.
      /// The process is not atomic, i.e. if there are errors with some dataset
      /// inputs, others might still be added. The response reports
      ///   - SUCCESS if all dataset inputs were added,
      ///   - MIXED_STATUS if only some dataset inputs were added, and
      ///   - FAILURE if no dataset inputs were added.
      /// Each individual dataset input in the response has the status set to
      /// indicate if it was successful or if there was an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetInputResponse PostDatasetInputs(global::Clarifai.Api.PostDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostDatasetInputs, null, options, request);
      }
      /// <summary>
      /// Add dataset inputs to a dataset.
      /// The process is not atomic, i.e. if there are errors with some dataset
      /// inputs, others might still be added. The response reports
      ///   - SUCCESS if all dataset inputs were added,
      ///   - MIXED_STATUS if only some dataset inputs were added, and
      ///   - FAILURE if no dataset inputs were added.
      /// Each individual dataset input in the response has the status set to
      /// indicate if it was successful or if there was an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetInputResponse> PostDatasetInputsAsync(global::Clarifai.Api.PostDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasetInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add dataset inputs to a dataset.
      /// The process is not atomic, i.e. if there are errors with some dataset
      /// inputs, others might still be added. The response reports
      ///   - SUCCESS if all dataset inputs were added,
      ///   - MIXED_STATUS if only some dataset inputs were added, and
      ///   - FAILURE if no dataset inputs were added.
      /// Each individual dataset input in the response has the status set to
      /// indicate if it was successful or if there was an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetInputResponse> PostDatasetInputsAsync(global::Clarifai.Api.PostDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostDatasetInputs, null, options, request);
      }
      /// <summary>
      /// Delete one or more dataset inputs in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasetInputs(global::Clarifai.Api.DeleteDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasetInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more dataset inputs in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasetInputs(global::Clarifai.Api.DeleteDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDatasetInputs, null, options, request);
      }
      /// <summary>
      /// Delete one or more dataset inputs in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetInputsAsync(global::Clarifai.Api.DeleteDatasetInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasetInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more dataset inputs in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetInputsAsync(global::Clarifai.Api.DeleteDatasetInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDatasetInputs, null, options, request);
      }
      /// <summary>
      /// List all the dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse ListDatasetVersions(global::Clarifai.Api.ListDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse ListDatasetVersions(global::Clarifai.Api.ListDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatasetVersions, null, options, request);
      }
      /// <summary>
      /// List all the dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> ListDatasetVersionsAsync(global::Clarifai.Api.ListDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> ListDatasetVersionsAsync(global::Clarifai.Api.ListDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleDatasetVersionResponse GetDatasetVersion(global::Clarifai.Api.GetDatasetVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleDatasetVersionResponse GetDatasetVersion(global::Clarifai.Api.GetDatasetVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatasetVersion, null, options, request);
      }
      /// <summary>
      /// Get a specific dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetVersionResponse> GetDatasetVersionAsync(global::Clarifai.Api.GetDatasetVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleDatasetVersionResponse> GetDatasetVersionAsync(global::Clarifai.Api.GetDatasetVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatasetVersion, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse ListDatasetVersionMetricsGroups(global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetVersionMetricsGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse ListDatasetVersionMetricsGroups(global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatasetVersionMetricsGroups, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse> ListDatasetVersionMetricsGroupsAsync(global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatasetVersionMetricsGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse> ListDatasetVersionMetricsGroupsAsync(global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatasetVersionMetricsGroups, null, options, request);
      }
      /// <summary>
      /// Add dataset versions to a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse PostDatasetVersions(global::Clarifai.Api.PostDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasetVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add dataset versions to a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse PostDatasetVersions(global::Clarifai.Api.PostDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Add dataset versions to a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> PostDatasetVersionsAsync(global::Clarifai.Api.PostDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostDatasetVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add dataset versions to a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> PostDatasetVersionsAsync(global::Clarifai.Api.PostDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Patch one or more dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse PatchDatasetVersions(global::Clarifai.Api.PatchDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchDatasetVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetVersionResponse PatchDatasetVersions(global::Clarifai.Api.PatchDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Patch one or more dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> PatchDatasetVersionsAsync(global::Clarifai.Api.PatchDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchDatasetVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more dataset versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionResponse> PatchDatasetVersionsAsync(global::Clarifai.Api.PatchDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Delete one or more dataset versions in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasetVersions(global::Clarifai.Api.DeleteDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasetVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more dataset versions in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteDatasetVersions(global::Clarifai.Api.DeleteDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Delete one or more dataset versions in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetVersionsAsync(global::Clarifai.Api.DeleteDatasetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatasetVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more dataset versions in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteDatasetVersionsAsync(global::Clarifai.Api.DeleteDatasetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDatasetVersions, null, options, request);
      }
      /// <summary>
      /// Create export of a dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetVersionExportResponse PutDatasetVersionExports(global::Clarifai.Api.PutDatasetVersionExportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutDatasetVersionExports(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create export of a dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiDatasetVersionExportResponse PutDatasetVersionExports(global::Clarifai.Api.PutDatasetVersionExportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutDatasetVersionExports, null, options, request);
      }
      /// <summary>
      /// Create export of a dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionExportResponse> PutDatasetVersionExportsAsync(global::Clarifai.Api.PutDatasetVersionExportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutDatasetVersionExportsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create export of a dataset version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiDatasetVersionExportResponse> PutDatasetVersionExportsAsync(global::Clarifai.Api.PutDatasetVersionExportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutDatasetVersionExports, null, options, request);
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelTypeResponse GetModelType(global::Clarifai.Api.GetModelTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelTypeResponse GetModelType(global::Clarifai.Api.GetModelTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelType, null, options, request);
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelTypeResponse> GetModelTypeAsync(global::Clarifai.Api.GetModelTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelTypeResponse> GetModelTypeAsync(global::Clarifai.Api.GetModelTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelType, null, options, request);
      }
      /// <summary>
      /// List all the supported open source licenses in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.ListOpenSourceLicensesResponse ListOpenSourceLicenses(global::Clarifai.Api.ListOpenSourceLicensesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOpenSourceLicenses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the supported open source licenses in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.ListOpenSourceLicensesResponse ListOpenSourceLicenses(global::Clarifai.Api.ListOpenSourceLicensesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOpenSourceLicenses, null, options, request);
      }
      /// <summary>
      /// List all the supported open source licenses in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListOpenSourceLicensesResponse> ListOpenSourceLicensesAsync(global::Clarifai.Api.ListOpenSourceLicensesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOpenSourceLicensesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the supported open source licenses in the platform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.ListOpenSourceLicensesResponse> ListOpenSourceLicensesAsync(global::Clarifai.Api.ListOpenSourceLicensesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOpenSourceLicenses, null, options, request);
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// This MUST be above ListModels so that the /models/types endpoint takes precedence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelTypeResponse ListModelTypes(global::Clarifai.Api.ListModelTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelTypes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// This MUST be above ListModels so that the /models/types endpoint takes precedence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelTypeResponse ListModelTypes(global::Clarifai.Api.ListModelTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelTypes, null, options, request);
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// This MUST be above ListModels so that the /models/types endpoint takes precedence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelTypeResponse> ListModelTypesAsync(global::Clarifai.Api.ListModelTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelTypesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the model types available in the platform.
      /// This MUST be above ListModels so that the /models/types endpoint takes precedence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelTypeResponse> ListModelTypesAsync(global::Clarifai.Api.ListModelTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelTypes, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelResponse GetModel(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelResponse GetModel(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModel, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelAsync(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelAsync(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModel, null, options, request);
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelResponse GetModelOutputInfo(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelOutputInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelResponse GetModelOutputInfo(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelOutputInfo, null, options, request);
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelOutputInfoAsync(global::Clarifai.Api.GetModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelOutputInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a the output info for a given model_id or model_id/version_id
      /// combo.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> GetModelOutputInfoAsync(global::Clarifai.Api.GetModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelOutputInfo, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelResponse ListModels(global::Clarifai.Api.ListModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelResponse ListModels(global::Clarifai.Api.ListModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModels, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> ListModelsAsync(global::Clarifai.Api.ListModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> ListModelsAsync(global::Clarifai.Api.ListModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModels, null, options, request);
      }
      /// <summary>
      /// List the resource counts for the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.GetResourceCountsResponse GetResourceCounts(global::Clarifai.Api.GetResourceCountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResourceCounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the resource counts for the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.GetResourceCountsResponse GetResourceCounts(global::Clarifai.Api.GetResourceCountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetResourceCounts, null, options, request);
      }
      /// <summary>
      /// List the resource counts for the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetResourceCountsResponse> GetResourceCountsAsync(global::Clarifai.Api.GetResourceCountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResourceCountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the resource counts for the app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.GetResourceCountsResponse> GetResourceCountsAsync(global::Clarifai.Api.GetResourceCountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetResourceCounts, null, options, request);
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelResponse PostModelsSearches(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelResponse PostModelsSearches(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelsSearches, null, options, request);
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PostModelsSearchesAsync(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the models to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PostModelsSearchesAsync(global::Clarifai.Api.PostModelsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelsSearches, null, options, request);
      }
      /// <summary>
      /// Add a models to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelResponse PostModels(global::Clarifai.Api.PostModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a models to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelResponse PostModels(global::Clarifai.Api.PostModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModels, null, options, request);
      }
      /// <summary>
      /// Add a models to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelsAsync(global::Clarifai.Api.PostModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a models to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelsAsync(global::Clarifai.Api.PostModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModels, null, options, request);
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelResponse PatchModels(global::Clarifai.Api.PatchModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelResponse PatchModels(global::Clarifai.Api.PatchModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModels, null, options, request);
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PatchModelsAsync(global::Clarifai.Api.PatchModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PatchModelsAsync(global::Clarifai.Api.PatchModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModels, null, options, request);
      }
      /// <summary>
      /// Patch one or more models ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelResponse PatchModelIds(global::Clarifai.Api.PatchModelIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more models ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelResponse PatchModelIds(global::Clarifai.Api.PatchModelIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelIds, null, options, request);
      }
      /// <summary>
      /// Patch one or more models ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PatchModelIdsAsync(global::Clarifai.Api.PatchModelIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more models ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelResponse> PatchModelIdsAsync(global::Clarifai.Api.PatchModelIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelIds, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModel(global::Clarifai.Api.DeleteModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModel(global::Clarifai.Api.DeleteModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModel, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelAsync(global::Clarifai.Api.DeleteModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelAsync(global::Clarifai.Api.DeleteModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModel, null, options, request);
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModels(global::Clarifai.Api.DeleteModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModels(global::Clarifai.Api.DeleteModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModels, null, options, request);
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelsAsync(global::Clarifai.Api.DeleteModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple models in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelsAsync(global::Clarifai.Api.DeleteModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModels, null, options, request);
      }
      /// <summary>
      /// Update model check consents
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelCheckConsentResponse PatchModelCheckConsents(global::Clarifai.Api.PatchModelCheckConsentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelCheckConsents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model check consents
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelCheckConsentResponse PatchModelCheckConsents(global::Clarifai.Api.PatchModelCheckConsentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelCheckConsents, null, options, request);
      }
      /// <summary>
      /// Update model check consents
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelCheckConsentResponse> PatchModelCheckConsentsAsync(global::Clarifai.Api.PatchModelCheckConsentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelCheckConsentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model check consents
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelCheckConsentResponse> PatchModelCheckConsentsAsync(global::Clarifai.Api.PatchModelCheckConsentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelCheckConsents, null, options, request);
      }
      /// <summary>
      /// Update model toolkits tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelToolkitResponse PatchModelToolkits(global::Clarifai.Api.PatchModelToolkitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelToolkits(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model toolkits tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelToolkitResponse PatchModelToolkits(global::Clarifai.Api.PatchModelToolkitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelToolkits, null, options, request);
      }
      /// <summary>
      /// Update model toolkits tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelToolkitResponse> PatchModelToolkitsAsync(global::Clarifai.Api.PatchModelToolkitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelToolkitsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model toolkits tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelToolkitResponse> PatchModelToolkitsAsync(global::Clarifai.Api.PatchModelToolkitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelToolkits, null, options, request);
      }
      /// <summary>
      /// Update model use_cases tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelUseCaseResponse PatchModelUseCases(global::Clarifai.Api.PatchModelUseCasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelUseCases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model use_cases tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelUseCaseResponse PatchModelUseCases(global::Clarifai.Api.PatchModelUseCasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelUseCases, null, options, request);
      }
      /// <summary>
      /// Update model use_cases tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelUseCaseResponse> PatchModelUseCasesAsync(global::Clarifai.Api.PatchModelUseCasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelUseCasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model use_cases tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelUseCaseResponse> PatchModelUseCasesAsync(global::Clarifai.Api.PatchModelUseCasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelUseCases, null, options, request);
      }
      /// <summary>
      /// Update model languages tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelLanguageResponse PatchModelLanguages(global::Clarifai.Api.PatchModelLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelLanguages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model languages tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelLanguageResponse PatchModelLanguages(global::Clarifai.Api.PatchModelLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelLanguages, null, options, request);
      }
      /// <summary>
      /// Update model languages tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelLanguageResponse> PatchModelLanguagesAsync(global::Clarifai.Api.PatchModelLanguagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelLanguagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update model languages tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelLanguageResponse> PatchModelLanguagesAsync(global::Clarifai.Api.PatchModelLanguagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelLanguages, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse ListModelInputs(global::Clarifai.Api.ListModelInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelInputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse ListModelInputs(global::Clarifai.Api.ListModelInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelInputs, null, options, request);
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListModelInputsAsync(global::Clarifai.Api.ListModelInputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelInputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListModelInputsAsync(global::Clarifai.Api.ListModelInputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelInputs, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersion(global::Clarifai.Api.GetModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersion(global::Clarifai.Api.GetModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelVersion, null, options, request);
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionAsync(global::Clarifai.Api.GetModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific model from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionAsync(global::Clarifai.Api.GetModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelVersion, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelVersionResponse ListModelVersions(global::Clarifai.Api.ListModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelVersionResponse ListModelVersions(global::Clarifai.Api.ListModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelVersions, null, options, request);
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionResponse> ListModelVersionsAsync(global::Clarifai.Api.ListModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the models.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionResponse> ListModelVersionsAsync(global::Clarifai.Api.ListModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelVersions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PostWorkflowVersionsUnPublish(global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowVersionsUnPublish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PostWorkflowVersionsUnPublish(global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowVersionsUnPublish, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsUnPublishAsync(global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowVersionsUnPublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsUnPublishAsync(global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowVersionsUnPublish, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PostWorkflowVersionsPublish(global::Clarifai.Api.PostWorkflowVersionsPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowVersionsPublish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PostWorkflowVersionsPublish(global::Clarifai.Api.PostWorkflowVersionsPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowVersionsPublish, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsPublishAsync(global::Clarifai.Api.PostWorkflowVersionsPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowVersionsPublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostWorkflowVersionsPublishAsync(global::Clarifai.Api.PostWorkflowVersionsPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowVersionsPublish, null, options, request);
      }
      /// <summary>
      /// PostModelVersionsPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PostModelVersionsPublish(global::Clarifai.Api.PostModelVersionsPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsPublish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostModelVersionsPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PostModelVersionsPublish(global::Clarifai.Api.PostModelVersionsPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersionsPublish, null, options, request);
      }
      /// <summary>
      /// PostModelVersionsPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsPublishAsync(global::Clarifai.Api.PostModelVersionsPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsPublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostModelVersionsPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsPublishAsync(global::Clarifai.Api.PostModelVersionsPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersionsPublish, null, options, request);
      }
      /// <summary>
      /// PostModelVersionsUnPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PostModelVersionsUnPublish(global::Clarifai.Api.PostModelVersionsUnPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsUnPublish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostModelVersionsUnPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PostModelVersionsUnPublish(global::Clarifai.Api.PostModelVersionsUnPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersionsUnPublish, null, options, request);
      }
      /// <summary>
      /// PostModelVersionsUnPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsUnPublishAsync(global::Clarifai.Api.PostModelVersionsUnPublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsUnPublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostModelVersionsUnPublish
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostModelVersionsUnPublishAsync(global::Clarifai.Api.PostModelVersionsUnPublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersionsUnPublish, null, options, request);
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelResponse PostModelVersions(global::Clarifai.Api.PostModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelResponse PostModelVersions(global::Clarifai.Api.PostModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersions, null, options, request);
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelVersionsAsync(global::Clarifai.Api.PostModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new model version to trigger training of the model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelResponse> PostModelVersionsAsync(global::Clarifai.Api.PostModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersions, null, options, request);
      }
      /// <summary>
      /// PatchModelVersions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelVersionResponse PatchModelVersions(global::Clarifai.Api.PatchModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PatchModelVersions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelVersionResponse PatchModelVersions(global::Clarifai.Api.PatchModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModelVersions, null, options, request);
      }
      /// <summary>
      /// PatchModelVersions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionResponse> PatchModelVersionsAsync(global::Clarifai.Api.PatchModelVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModelVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PatchModelVersions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionResponse> PatchModelVersionsAsync(global::Clarifai.Api.PatchModelVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModelVersions, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModelVersion(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModelVersion(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModelVersion, null, options, request);
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersionAsync(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModelVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single model.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModelVersionAsync(global::Clarifai.Api.DeleteModelVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModelVersion, null, options, request);
      }
      /// <summary>
      /// Deprecated: Use GetEvaluation instead
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersionMetrics(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated: Use GetEvaluation instead
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelVersionResponse GetModelVersionMetrics(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Deprecated: Use GetEvaluation instead
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionMetricsAsync(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated: Use GetEvaluation instead
      /// Get the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> GetModelVersionMetricsAsync(global::Clarifai.Api.GetModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Deprecated, use PostEvaluations instead
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelVersionResponse PostModelVersionMetrics(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated, use PostEvaluations instead
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelVersionResponse PostModelVersionMetrics(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Deprecated, use PostEvaluations instead
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> PostModelVersionMetricsAsync(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated, use PostEvaluations instead
      /// Run the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionResponse> PostModelVersionMetricsAsync(global::Clarifai.Api.PostModelVersionMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersionMetrics, null, options, request);
      }
      /// <summary>
      /// Deprecated, use PostEvaluations instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiEvalMetricsResponse PostModelVersionEvaluations(global::Clarifai.Api.PostModelVersionEvaluationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionEvaluations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated, use PostEvaluations instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiEvalMetricsResponse PostModelVersionEvaluations(global::Clarifai.Api.PostModelVersionEvaluationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersionEvaluations, null, options, request);
      }
      /// <summary>
      /// Deprecated, use PostEvaluations instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiEvalMetricsResponse> PostModelVersionEvaluationsAsync(global::Clarifai.Api.PostModelVersionEvaluationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionEvaluationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated, use PostEvaluations instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiEvalMetricsResponse> PostModelVersionEvaluationsAsync(global::Clarifai.Api.PostModelVersionEvaluationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersionEvaluations, null, options, request);
      }
      /// <summary>
      /// Deprecated, use GetEvaluation instead
      /// List the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiEvalMetricsResponse ListModelVersionEvaluations(global::Clarifai.Api.ListModelVersionEvaluationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersionEvaluations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated, use GetEvaluation instead
      /// List the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiEvalMetricsResponse ListModelVersionEvaluations(global::Clarifai.Api.ListModelVersionEvaluationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelVersionEvaluations, null, options, request);
      }
      /// <summary>
      /// Deprecated, use GetEvaluation instead
      /// List the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiEvalMetricsResponse> ListModelVersionEvaluationsAsync(global::Clarifai.Api.ListModelVersionEvaluationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersionEvaluationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated, use GetEvaluation instead
      /// List the evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiEvalMetricsResponse> ListModelVersionEvaluationsAsync(global::Clarifai.Api.ListModelVersionEvaluationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelVersionEvaluations, null, options, request);
      }
      /// <summary>
      /// Deprecated, use GetEvaluation instead
      /// Get an evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleEvalMetricsResponse GetModelVersionEvaluation(global::Clarifai.Api.GetModelVersionEvaluationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionEvaluation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated, use GetEvaluation instead
      /// Get an evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleEvalMetricsResponse GetModelVersionEvaluation(global::Clarifai.Api.GetModelVersionEvaluationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelVersionEvaluation, null, options, request);
      }
      /// <summary>
      /// Deprecated, use GetEvaluation instead
      /// Get an evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleEvalMetricsResponse> GetModelVersionEvaluationAsync(global::Clarifai.Api.GetModelVersionEvaluationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionEvaluationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated, use GetEvaluation instead
      /// Get an evaluation metrics for a model version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleEvalMetricsResponse> GetModelVersionEvaluationAsync(global::Clarifai.Api.GetModelVersionEvaluationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelVersionEvaluation, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiEvalMetricsResponse PostEvaluations(global::Clarifai.Api.PostEvaluationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostEvaluations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiEvalMetricsResponse PostEvaluations(global::Clarifai.Api.PostEvaluationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostEvaluations, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiEvalMetricsResponse> PostEvaluationsAsync(global::Clarifai.Api.PostEvaluationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostEvaluationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiEvalMetricsResponse> PostEvaluationsAsync(global::Clarifai.Api.PostEvaluationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostEvaluations, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiEvalMetricsResponse ListEvaluations(global::Clarifai.Api.ListEvaluationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEvaluations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiEvalMetricsResponse ListEvaluations(global::Clarifai.Api.ListEvaluationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListEvaluations, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiEvalMetricsResponse> ListEvaluationsAsync(global::Clarifai.Api.ListEvaluationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEvaluationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiEvalMetricsResponse> ListEvaluationsAsync(global::Clarifai.Api.ListEvaluationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListEvaluations, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleEvalMetricsResponse GetEvaluation(global::Clarifai.Api.GetEvaluationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEvaluation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleEvalMetricsResponse GetEvaluation(global::Clarifai.Api.GetEvaluationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEvaluation, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleEvalMetricsResponse> GetEvaluationAsync(global::Clarifai.Api.GetEvaluationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEvaluationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleEvalMetricsResponse> GetEvaluationAsync(global::Clarifai.Api.GetEvaluationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEvaluation, null, options, request);
      }
      /// <summary>
      /// Lists model references tied to a particular model id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelReferenceResponse ListModelReferences(global::Clarifai.Api.ListModelReferencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelReferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists model references tied to a particular model id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelReferenceResponse ListModelReferences(global::Clarifai.Api.ListModelReferencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelReferences, null, options, request);
      }
      /// <summary>
      /// Lists model references tied to a particular model id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelReferenceResponse> ListModelReferencesAsync(global::Clarifai.Api.ListModelReferencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelReferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists model references tied to a particular model id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelReferenceResponse> ListModelReferencesAsync(global::Clarifai.Api.ListModelReferencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelReferences, null, options, request);
      }
      /// <summary>
      /// GetModelVersionInputExample
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelVersionInputExampleResponse GetModelVersionInputExample(global::Clarifai.Api.GetModelVersionInputExampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionInputExample(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetModelVersionInputExample
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModelVersionInputExampleResponse GetModelVersionInputExample(global::Clarifai.Api.GetModelVersionInputExampleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModelVersionInputExample, null, options, request);
      }
      /// <summary>
      /// GetModelVersionInputExample
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionInputExampleResponse> GetModelVersionInputExampleAsync(global::Clarifai.Api.GetModelVersionInputExampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModelVersionInputExampleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetModelVersionInputExample
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModelVersionInputExampleResponse> GetModelVersionInputExampleAsync(global::Clarifai.Api.GetModelVersionInputExampleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModelVersionInputExample, null, options, request);
      }
      /// <summary>
      /// ListModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelVersionInputExampleResponse ListModelVersionInputExamples(global::Clarifai.Api.ListModelVersionInputExamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersionInputExamples(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModelVersionInputExampleResponse ListModelVersionInputExamples(global::Clarifai.Api.ListModelVersionInputExamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModelVersionInputExamples, null, options, request);
      }
      /// <summary>
      /// ListModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionInputExampleResponse> ListModelVersionInputExamplesAsync(global::Clarifai.Api.ListModelVersionInputExamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModelVersionInputExamplesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListModelVersionInputExamples
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModelVersionInputExampleResponse> ListModelVersionInputExamplesAsync(global::Clarifai.Api.ListModelVersionInputExamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModelVersionInputExamples, null, options, request);
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleWorkflowResponse GetWorkflow(global::Clarifai.Api.GetWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleWorkflowResponse GetWorkflow(global::Clarifai.Api.GetWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflow, null, options, request);
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowResponse> GetWorkflowAsync(global::Clarifai.Api.GetWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific workflow from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowResponse> GetWorkflowAsync(global::Clarifai.Api.GetWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflow, null, options, request);
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowResponse ListWorkflows(global::Clarifai.Api.ListWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowResponse ListWorkflows(global::Clarifai.Api.ListWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkflows, null, options, request);
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> ListWorkflowsAsync(global::Clarifai.Api.ListWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> ListWorkflowsAsync(global::Clarifai.Api.ListWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkflows, null, options, request);
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowResponse PostWorkflows(global::Clarifai.Api.PostWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowResponse PostWorkflows(global::Clarifai.Api.PostWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflows, null, options, request);
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PostWorkflowsAsync(global::Clarifai.Api.PostWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a workflow to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PostWorkflowsAsync(global::Clarifai.Api.PostWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflows, null, options, request);
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowResponse PatchWorkflows(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowResponse PatchWorkflows(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchWorkflows, null, options, request);
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowsAsync(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowsAsync(global::Clarifai.Api.PatchWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchWorkflows, null, options, request);
      }
      /// <summary>
      /// Patch one or more workflows ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowResponse PatchWorkflowIds(global::Clarifai.Api.PatchWorkflowIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more workflows ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowResponse PatchWorkflowIds(global::Clarifai.Api.PatchWorkflowIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchWorkflowIds, null, options, request);
      }
      /// <summary>
      /// Patch one or more workflows ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowIdsAsync(global::Clarifai.Api.PatchWorkflowIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more workflows ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowResponse> PatchWorkflowIdsAsync(global::Clarifai.Api.PatchWorkflowIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchWorkflowIds, null, options, request);
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflow(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflow(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflow, null, options, request);
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowAsync(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowAsync(global::Clarifai.Api.DeleteWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflow, null, options, request);
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflows(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflows(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflows, null, options, request);
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowsAsync(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple workflows in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowsAsync(global::Clarifai.Api.DeleteWorkflowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflows, null, options, request);
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.PostWorkflowResultsResponse PostWorkflowResults(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResults(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.PostWorkflowResultsResponse PostWorkflowResults(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowResults, null, options, request);
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsResponse> PostWorkflowResultsAsync(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResultsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Predict using a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsResponse> PostWorkflowResultsAsync(global::Clarifai.Api.PostWorkflowResultsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowResults, null, options, request);
      }
      /// <summary>
      /// Compare embeddings distances using a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.PostWorkflowResultsSimilarityResponse PostWorkflowResultsSimilarity(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResultsSimilarity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Compare embeddings distances using a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.PostWorkflowResultsSimilarityResponse PostWorkflowResultsSimilarity(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostWorkflowResultsSimilarity, null, options, request);
      }
      /// <summary>
      /// Compare embeddings distances using a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> PostWorkflowResultsSimilarityAsync(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostWorkflowResultsSimilarityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Compare embeddings distances using a workflow
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.PostWorkflowResultsSimilarityResponse> PostWorkflowResultsSimilarityAsync(global::Clarifai.Api.PostWorkflowResultsSimilarityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostWorkflowResultsSimilarity, null, options, request);
      }
      /// <summary>
      /// List workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowVersionResponse ListWorkflowVersions(global::Clarifai.Api.ListWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowVersionResponse ListWorkflowVersions(global::Clarifai.Api.ListWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// List workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowVersionResponse> ListWorkflowVersionsAsync(global::Clarifai.Api.ListWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowVersionResponse> ListWorkflowVersionsAsync(global::Clarifai.Api.ListWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// Get single workflow version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleWorkflowVersionResponse GetWorkflowVersion(global::Clarifai.Api.GetWorkflowVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single workflow version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleWorkflowVersionResponse GetWorkflowVersion(global::Clarifai.Api.GetWorkflowVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowVersion, null, options, request);
      }
      /// <summary>
      /// Get single workflow version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowVersionResponse> GetWorkflowVersionAsync(global::Clarifai.Api.GetWorkflowVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get single workflow version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleWorkflowVersionResponse> GetWorkflowVersionAsync(global::Clarifai.Api.GetWorkflowVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowVersion, null, options, request);
      }
      /// <summary>
      /// Delete workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflowVersions(global::Clarifai.Api.DeleteWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteWorkflowVersions(global::Clarifai.Api.DeleteWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// Delete workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowVersionsAsync(global::Clarifai.Api.DeleteWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteWorkflowVersionsAsync(global::Clarifai.Api.DeleteWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// Patch workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowVersionResponse PatchWorkflowVersions(global::Clarifai.Api.PatchWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiWorkflowVersionResponse PatchWorkflowVersions(global::Clarifai.Api.PatchWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// Patch workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowVersionResponse> PatchWorkflowVersionsAsync(global::Clarifai.Api.PatchWorkflowVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchWorkflowVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch workflow versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiWorkflowVersionResponse> PatchWorkflowVersionsAsync(global::Clarifai.Api.PatchWorkflowVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchWorkflowVersions, null, options, request);
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleKeyResponse GetKey(global::Clarifai.Api.GetKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleKeyResponse GetKey(global::Clarifai.Api.GetKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetKey, null, options, request);
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleKeyResponse> GetKeyAsync(global::Clarifai.Api.GetKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific key from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleKeyResponse> GetKeyAsync(global::Clarifai.Api.GetKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetKey, null, options, request);
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKeyResponse ListKeys(global::Clarifai.Api.ListKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKeyResponse ListKeys(global::Clarifai.Api.ListKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListKeys, null, options, request);
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListKeysAsync(global::Clarifai.Api.ListKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListKeysAsync(global::Clarifai.Api.ListKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListKeys, null, options, request);
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKeyResponse ListAppKeys(global::Clarifai.Api.ListAppKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKeyResponse ListAppKeys(global::Clarifai.Api.ListAppKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAppKeys, null, options, request);
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListAppKeysAsync(global::Clarifai.Api.ListAppKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List keys by app_id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> ListAppKeysAsync(global::Clarifai.Api.ListAppKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAppKeys, null, options, request);
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteKey(global::Clarifai.Api.DeleteKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteKey(global::Clarifai.Api.DeleteKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteKey, null, options, request);
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteKeyAsync(global::Clarifai.Api.DeleteKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the keys to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteKeyAsync(global::Clarifai.Api.DeleteKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteKey, null, options, request);
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKeyResponse PostKeys(global::Clarifai.Api.PostKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKeyResponse PostKeys(global::Clarifai.Api.PostKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostKeys, null, options, request);
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PostKeysAsync(global::Clarifai.Api.PostKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a key to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PostKeysAsync(global::Clarifai.Api.PostKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostKeys, null, options, request);
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKeyResponse PatchKeys(global::Clarifai.Api.PatchKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiKeyResponse PatchKeys(global::Clarifai.Api.PatchKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchKeys, null, options, request);
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PatchKeysAsync(global::Clarifai.Api.PatchKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more keys.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiKeyResponse> PatchKeysAsync(global::Clarifai.Api.PatchKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchKeys, null, options, request);
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiScopeResponse MyScopes(global::Clarifai.Api.MyScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiScopeResponse MyScopes(global::Clarifai.Api.MyScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MyScopes, null, options, request);
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeResponse> MyScopesAsync(global::Clarifai.Api.MyScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API Keys in the public API -- request is itself Key authorized, and will tell
      /// the user the scopes/access of the key/credential they're providing, as computed by
      /// our authorizer:
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeResponse> MyScopesAsync(global::Clarifai.Api.MyScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MyScopes, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiScopeUserResponse MyScopesUser(global::Clarifai.Api.MyScopesUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiScopeUserResponse MyScopesUser(global::Clarifai.Api.MyScopesUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MyScopesUser, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeUserResponse> MyScopesUserAsync(global::Clarifai.Api.MyScopesUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeUserResponse> MyScopesUserAsync(global::Clarifai.Api.MyScopesUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MyScopesUser, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiScopeRootResponse MyScopesRoot(global::Clarifai.Api.MyScopesRootRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesRoot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiScopeRootResponse MyScopesRoot(global::Clarifai.Api.MyScopesRootRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MyScopesRoot, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeRootResponse> MyScopesRootAsync(global::Clarifai.Api.MyScopesRootRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MyScopesRootAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeRootResponse> MyScopesRootAsync(global::Clarifai.Api.MyScopesRootRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MyScopesRoot, null, options, request);
      }
      /// <summary>
      /// List all auth scopes available to me as a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiScopeDepsResponse ListScopes(global::Clarifai.Api.ListScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScopes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all auth scopes available to me as a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiScopeDepsResponse ListScopes(global::Clarifai.Api.ListScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListScopes, null, options, request);
      }
      /// <summary>
      /// List all auth scopes available to me as a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeDepsResponse> ListScopesAsync(global::Clarifai.Api.ListScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScopesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all auth scopes available to me as a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiScopeDepsResponse> ListScopesAsync(global::Clarifai.Api.ListScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListScopes, null, options, request);
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleAppResponse GetApp(global::Clarifai.Api.GetAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleAppResponse GetApp(global::Clarifai.Api.GetAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApp, null, options, request);
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppResponse> GetAppAsync(global::Clarifai.Api.GetAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific app from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppResponse> GetAppAsync(global::Clarifai.Api.GetAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApp, null, options, request);
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppResponse ListApps(global::Clarifai.Api.ListAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppResponse ListApps(global::Clarifai.Api.ListAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListApps, null, options, request);
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> ListAppsAsync(global::Clarifai.Api.ListAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> ListAppsAsync(global::Clarifai.Api.ListAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListApps, null, options, request);
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteApp(global::Clarifai.Api.DeleteAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteApp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteApp(global::Clarifai.Api.DeleteAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteApp, null, options, request);
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAppAsync(global::Clarifai.Api.DeleteAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAppAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the apps to find one or more you're looking for.
      /// This leverage the "body" parameter because we also have page and
      /// per_page as url query param variables in this request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAppAsync(global::Clarifai.Api.DeleteAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteApp, null, options, request);
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppResponse PostApps(global::Clarifai.Api.PostAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppResponse PostApps(global::Clarifai.Api.PostAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostApps, null, options, request);
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsAsync(global::Clarifai.Api.PostAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a app to an app.
      /// This needs to load the default workflow to make a copy, validating all the models in it, and
      /// then writing the new workflow back to this new app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsAsync(global::Clarifai.Api.PostAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostApps, null, options, request);
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppResponse PatchApps(global::Clarifai.Api.PatchAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppResponse PatchApps(global::Clarifai.Api.PatchAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchApps, null, options, request);
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PatchAppsAsync(global::Clarifai.Api.PatchAppsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more apps.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PatchAppsAsync(global::Clarifai.Api.PatchAppsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchApps, null, options, request);
      }
      /// <summary>
      /// Patch apps ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppResponse PatchAppsIds(global::Clarifai.Api.PatchAppsIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppsIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch apps ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppResponse PatchAppsIds(global::Clarifai.Api.PatchAppsIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAppsIds, null, options, request);
      }
      /// <summary>
      /// Patch apps ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PatchAppsIdsAsync(global::Clarifai.Api.PatchAppsIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppsIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch apps ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PatchAppsIdsAsync(global::Clarifai.Api.PatchAppsIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAppsIds, null, options, request);
      }
      /// <summary>
      /// Patch one app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleAppResponse PatchApp(global::Clarifai.Api.PatchAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchApp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleAppResponse PatchApp(global::Clarifai.Api.PatchAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchApp, null, options, request);
      }
      /// <summary>
      /// Patch one app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppResponse> PatchAppAsync(global::Clarifai.Api.PatchAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAppAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppResponse> PatchAppAsync(global::Clarifai.Api.PatchAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchApp, null, options, request);
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppResponse PostAppsSearches(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppsSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppResponse PostAppsSearches(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAppsSearches, null, options, request);
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsSearchesAsync(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppsSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search over the applications to find one or more you're looking for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppResponse> PostAppsSearchesAsync(global::Clarifai.Api.PostAppsSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAppsSearches, null, options, request);
      }
      /// <summary>
      /// Get user information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleUserResponse GetUser(global::Clarifai.Api.GetUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get user information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleUserResponse GetUser(global::Clarifai.Api.GetUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUser, null, options, request);
      }
      /// <summary>
      /// Get user information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserResponse> GetUserAsync(global::Clarifai.Api.GetUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get user information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUserResponse> GetUserAsync(global::Clarifai.Api.GetUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUser, null, options, request);
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SinglePasswordValidationResponse PostValidatePassword(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostValidatePassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SinglePasswordValidationResponse PostValidatePassword(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostValidatePassword, null, options, request);
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SinglePasswordValidationResponse> PostValidatePasswordAsync(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostValidatePasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validate new password in real-time for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SinglePasswordValidationResponse> PostValidatePasswordAsync(global::Clarifai.Api.PostValidatePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostValidatePassword, null, options, request);
      }
      /// <summary>
      /// Get a saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleSearchResponse GetSearch(global::Clarifai.Api.GetSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleSearchResponse GetSearch(global::Clarifai.Api.GetSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSearch, null, options, request);
      }
      /// <summary>
      /// Get a saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleSearchResponse> GetSearchAsync(global::Clarifai.Api.GetSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleSearchResponse> GetSearchAsync(global::Clarifai.Api.GetSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSearch, null, options, request);
      }
      /// <summary>
      /// List all saved legacy searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse ListSearches(global::Clarifai.Api.ListSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all saved legacy searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse ListSearches(global::Clarifai.Api.ListSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSearches, null, options, request);
      }
      /// <summary>
      /// List all saved legacy searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> ListSearchesAsync(global::Clarifai.Api.ListSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all saved legacy searches.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> ListSearchesAsync(global::Clarifai.Api.ListSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSearches, null, options, request);
      }
      /// <summary>
      /// Patch saved legacy searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PatchSearches(global::Clarifai.Api.PatchSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved legacy searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PatchSearches(global::Clarifai.Api.PatchSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchSearches, null, options, request);
      }
      /// <summary>
      /// Patch saved legacy searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchSearchesAsync(global::Clarifai.Api.PatchSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch saved legacy searches by ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PatchSearchesAsync(global::Clarifai.Api.PatchSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchSearches, null, options, request);
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      ///
      /// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearches(global::Clarifai.Api.PostSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      ///
      /// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearches(global::Clarifai.Api.PostSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostSearches, null, options, request);
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      ///
      /// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesAsync(global::Clarifai.Api.PostSearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a new search and optionally save it.
      ///
      /// Deprecated: Use PostInputsSearches or PostAnnotationsSearches instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesAsync(global::Clarifai.Api.PostSearchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostSearches, null, options, request);
      }
      /// <summary>
      /// Execute a previously saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearchesByID(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearchesByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a previously saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiSearchResponse PostSearchesByID(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostSearchesByID, null, options, request);
      }
      /// <summary>
      /// Execute a previously saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesByIDAsync(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSearchesByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a previously saved legacy search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiSearchResponse> PostSearchesByIDAsync(global::Clarifai.Api.PostSearchesByIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostSearchesByID, null, options, request);
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse PostAnnotationSearchMetrics(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse PostAnnotationSearchMetrics(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> PostAnnotationSearchMetricsAsync(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Evaluate the results of two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> PostAnnotationSearchMetricsAsync(global::Clarifai.Api.PostAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse GetAnnotationSearchMetrics(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse GetAnnotationSearchMetrics(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> GetAnnotationSearchMetricsAsync(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> GetAnnotationSearchMetricsAsync(global::Clarifai.Api.GetAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse ListAnnotationSearchMetrics(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationSearchMetricsResponse ListAnnotationSearchMetrics(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> ListAnnotationSearchMetricsAsync(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the evaluation results between two search requests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationSearchMetricsResponse> ListAnnotationSearchMetricsAsync(global::Clarifai.Api.ListAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// DeleteAnnotationSearchMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotationSearchMetrics(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationSearchMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteAnnotationSearchMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotationSearchMetrics(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// DeleteAnnotationSearchMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationSearchMetricsAsync(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationSearchMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteAnnotationSearchMetrics
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationSearchMetricsAsync(global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotationSearchMetrics, null, options, request);
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteSearch(global::Clarifai.Api.DeleteSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteSearch(global::Clarifai.Api.DeleteSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSearch, null, options, request);
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteSearchAsync(global::Clarifai.Api.DeleteSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a saved search.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteSearchAsync(global::Clarifai.Api.DeleteSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSearch, null, options, request);
      }
      /// <summary>
      /// List all the annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse ListAnnotationFilters(global::Clarifai.Api.ListAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationFilters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse ListAnnotationFilters(global::Clarifai.Api.ListAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// List all the annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> ListAnnotationFiltersAsync(global::Clarifai.Api.ListAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationFiltersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> ListAnnotationFiltersAsync(global::Clarifai.Api.ListAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Get a specific annotation filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleAnnotationFilterResponse GetAnnotationFilter(global::Clarifai.Api.GetAnnotationFilterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationFilter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific annotation filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleAnnotationFilterResponse GetAnnotationFilter(global::Clarifai.Api.GetAnnotationFilterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnnotationFilter, null, options, request);
      }
      /// <summary>
      /// Get a specific annotation filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAnnotationFilterResponse> GetAnnotationFilterAsync(global::Clarifai.Api.GetAnnotationFilterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationFilterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific annotation filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAnnotationFilterResponse> GetAnnotationFilterAsync(global::Clarifai.Api.GetAnnotationFilterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnnotationFilter, null, options, request);
      }
      /// <summary>
      /// Add annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse PostAnnotationFilters(global::Clarifai.Api.PostAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationFilters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse PostAnnotationFilters(global::Clarifai.Api.PostAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Add annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> PostAnnotationFiltersAsync(global::Clarifai.Api.PostAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnnotationFiltersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> PostAnnotationFiltersAsync(global::Clarifai.Api.PostAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Patch one or more annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse PatchAnnotationFilters(global::Clarifai.Api.PatchAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationFilters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAnnotationFilterResponse PatchAnnotationFilters(global::Clarifai.Api.PatchAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Patch one or more annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> PatchAnnotationFiltersAsync(global::Clarifai.Api.PatchAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnnotationFiltersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more annotation filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAnnotationFilterResponse> PatchAnnotationFiltersAsync(global::Clarifai.Api.PatchAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Delete one or more annotation filters in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotationFilters(global::Clarifai.Api.DeleteAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationFilters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more annotation filters in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteAnnotationFilters(global::Clarifai.Api.DeleteAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// Delete one or more annotation filters in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationFiltersAsync(global::Clarifai.Api.DeleteAnnotationFiltersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationFiltersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one or more annotation filters in a single request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteAnnotationFiltersAsync(global::Clarifai.Api.DeleteAnnotationFiltersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotationFilters, null, options, request);
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiStatusCodeResponse ListStatusCodes(global::Clarifai.Api.ListStatusCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStatusCodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiStatusCodeResponse ListStatusCodes(global::Clarifai.Api.ListStatusCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListStatusCodes, null, options, request);
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatusCodeResponse> ListStatusCodesAsync(global::Clarifai.Api.ListStatusCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStatusCodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all status codes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatusCodeResponse> ListStatusCodesAsync(global::Clarifai.Api.ListStatusCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListStatusCodes, null, options, request);
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleStatusCodeResponse GetStatusCode(global::Clarifai.Api.GetStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleStatusCodeResponse GetStatusCode(global::Clarifai.Api.GetStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatusCode, null, options, request);
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleStatusCodeResponse> GetStatusCodeAsync(global::Clarifai.Api.GetStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get more details for a status code.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleStatusCodeResponse> GetStatusCodeAsync(global::Clarifai.Api.GetStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatusCode, null, options, request);
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse ListCollaborators(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse ListCollaborators(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollaborators, null, options, request);
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> ListCollaboratorsAsync(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// owner list users who the app is shared with
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> ListCollaboratorsAsync(global::Clarifai.Api.ListCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollaborators, null, options, request);
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PostCollaborators(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PostCollaborators(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostCollaborators, null, options, request);
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PostCollaboratorsAsync(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// add collaborators to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PostCollaboratorsAsync(global::Clarifai.Api.PostCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostCollaborators, null, options, request);
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PatchCollaborators(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollaboratorsResponse PatchCollaborators(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchCollaborators, null, options, request);
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PatchCollaboratorsAsync(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaboratorsResponse> PatchCollaboratorsAsync(global::Clarifai.Api.PatchCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchCollaborators, null, options, request);
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollaborators(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollaborators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollaborators(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCollaborators, null, options, request);
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollaboratorsAsync(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollaboratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete existing collaborators.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollaboratorsAsync(global::Clarifai.Api.DeleteCollaboratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCollaborators, null, options, request);
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollaborationsResponse ListCollaborations(global::Clarifai.Api.ListCollaborationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaborations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollaborationsResponse ListCollaborations(global::Clarifai.Api.ListCollaborationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollaborations, null, options, request);
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaborationsResponse> ListCollaborationsAsync(global::Clarifai.Api.ListCollaborationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollaborationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Collaboration includes the app user are invitied to work on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollaborationsResponse> ListCollaborationsAsync(global::Clarifai.Api.ListCollaborationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollaborations, null, options, request);
      }
      /// <summary>
      /// PostAppDuplications starts async app duplication jobs which copy resources
      /// (inputs, annotations, models etc) from one application to another. It can
      /// also create the destination application if it does not exist, with fields
      /// (description, metadata etc) copied from the source application.
      ///
      /// A duplication job can be started by any user that can read from the source
      /// application (the target of this call) and can create and write to the
      /// destination application. The duplication is associated with the user that
      /// created it, so in order to read the status and progress of the job, that
      /// user's ID has to be used in the call to GetAppDuplication, which might be
      /// different to the source application owner ID in this call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse PostAppDuplications(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppDuplications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostAppDuplications starts async app duplication jobs which copy resources
      /// (inputs, annotations, models etc) from one application to another. It can
      /// also create the destination application if it does not exist, with fields
      /// (description, metadata etc) copied from the source application.
      ///
      /// A duplication job can be started by any user that can read from the source
      /// application (the target of this call) and can create and write to the
      /// destination application. The duplication is associated with the user that
      /// created it, so in order to read the status and progress of the job, that
      /// user's ID has to be used in the call to GetAppDuplication, which might be
      /// different to the source application owner ID in this call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse PostAppDuplications(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAppDuplications, null, options, request);
      }
      /// <summary>
      /// PostAppDuplications starts async app duplication jobs which copy resources
      /// (inputs, annotations, models etc) from one application to another. It can
      /// also create the destination application if it does not exist, with fields
      /// (description, metadata etc) copied from the source application.
      ///
      /// A duplication job can be started by any user that can read from the source
      /// application (the target of this call) and can create and write to the
      /// destination application. The duplication is associated with the user that
      /// created it, so in order to read the status and progress of the job, that
      /// user's ID has to be used in the call to GetAppDuplication, which might be
      /// different to the source application owner ID in this call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> PostAppDuplicationsAsync(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAppDuplicationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostAppDuplications starts async app duplication jobs which copy resources
      /// (inputs, annotations, models etc) from one application to another. It can
      /// also create the destination application if it does not exist, with fields
      /// (description, metadata etc) copied from the source application.
      ///
      /// A duplication job can be started by any user that can read from the source
      /// application (the target of this call) and can create and write to the
      /// destination application. The duplication is associated with the user that
      /// created it, so in order to read the status and progress of the job, that
      /// user's ID has to be used in the call to GetAppDuplication, which might be
      /// different to the source application owner ID in this call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> PostAppDuplicationsAsync(global::Clarifai.Api.PostAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAppDuplications, null, options, request);
      }
      /// <summary>
      /// ListAppDuplications lists all app duplication jobs created by the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse ListAppDuplications(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppDuplications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListAppDuplications lists all app duplication jobs created by the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiAppDuplicationsResponse ListAppDuplications(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAppDuplications, null, options, request);
      }
      /// <summary>
      /// ListAppDuplications lists all app duplication jobs created by the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> ListAppDuplicationsAsync(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppDuplicationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListAppDuplications lists all app duplication jobs created by the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiAppDuplicationsResponse> ListAppDuplicationsAsync(global::Clarifai.Api.ListAppDuplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAppDuplications, null, options, request);
      }
      /// <summary>
      /// GetAppDuplication returns an app duplication job created by the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleAppDuplicationResponse GetAppDuplication(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppDuplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAppDuplication returns an app duplication job created by the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleAppDuplicationResponse GetAppDuplication(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAppDuplication, null, options, request);
      }
      /// <summary>
      /// GetAppDuplication returns an app duplication job created by the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppDuplicationResponse> GetAppDuplicationAsync(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppDuplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAppDuplication returns an app duplication job created by the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleAppDuplicationResponse> GetAppDuplicationAsync(global::Clarifai.Api.GetAppDuplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAppDuplication, null, options, request);
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiTaskResponse PostTasks(global::Clarifai.Api.PostTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiTaskResponse PostTasks(global::Clarifai.Api.PostTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostTasks, null, options, request);
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PostTasksAsync(global::Clarifai.Api.PostTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add tasks to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PostTasksAsync(global::Clarifai.Api.PostTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostTasks, null, options, request);
      }
      /// <summary>
      /// Task annotation count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleTaskCountResponse GetTaskAnnotationCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAnnotationCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Task annotation count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleTaskCountResponse GetTaskAnnotationCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTaskAnnotationCount, null, options, request);
      }
      /// <summary>
      /// Task annotation count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskCountResponse> GetTaskAnnotationCountAsync(global::Clarifai.Api.GetTaskCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAnnotationCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Task annotation count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskCountResponse> GetTaskAnnotationCountAsync(global::Clarifai.Api.GetTaskCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTaskAnnotationCount, null, options, request);
      }
      /// <summary>
      /// Task Input count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleTaskCountResponse GetTaskInputCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskInputCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Task Input count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleTaskCountResponse GetTaskInputCount(global::Clarifai.Api.GetTaskCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTaskInputCount, null, options, request);
      }
      /// <summary>
      /// Task Input count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskCountResponse> GetTaskInputCountAsync(global::Clarifai.Api.GetTaskCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskInputCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Task Input count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskCountResponse> GetTaskInputCountAsync(global::Clarifai.Api.GetTaskCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTaskInputCount, null, options, request);
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleTaskResponse GetTask(global::Clarifai.Api.GetTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleTaskResponse GetTask(global::Clarifai.Api.GetTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTask, null, options, request);
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskResponse> GetTaskAsync(global::Clarifai.Api.GetTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific task from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleTaskResponse> GetTaskAsync(global::Clarifai.Api.GetTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTask, null, options, request);
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiTaskResponse ListTasks(global::Clarifai.Api.ListTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiTaskResponse ListTasks(global::Clarifai.Api.ListTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTasks, null, options, request);
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> ListTasksAsync(global::Clarifai.Api.ListTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List tasks from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> ListTasksAsync(global::Clarifai.Api.ListTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTasks, null, options, request);
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiTaskResponse PatchTasks(global::Clarifai.Api.PatchTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiTaskResponse PatchTasks(global::Clarifai.Api.PatchTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchTasks, null, options, request);
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PatchTasksAsync(global::Clarifai.Api.PatchTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTaskResponse> PatchTasksAsync(global::Clarifai.Api.PatchTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchTasks, null, options, request);
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTasks(global::Clarifai.Api.DeleteTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteTasks(global::Clarifai.Api.DeleteTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTasks, null, options, request);
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTasksAsync(global::Clarifai.Api.DeleteTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple tasks in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteTasksAsync(global::Clarifai.Api.DeleteTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTasks, null, options, request);
      }
      /// <summary>
      /// Add Label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiLabelOrderResponse PostLabelOrders(global::Clarifai.Api.PostLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostLabelOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add Label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiLabelOrderResponse PostLabelOrders(global::Clarifai.Api.PostLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostLabelOrders, null, options, request);
      }
      /// <summary>
      /// Add Label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> PostLabelOrdersAsync(global::Clarifai.Api.PostLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostLabelOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add Label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> PostLabelOrdersAsync(global::Clarifai.Api.PostLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostLabelOrders, null, options, request);
      }
      /// <summary>
      /// Get a label order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleLabelOrderResponse GetLabelOrder(global::Clarifai.Api.GetLabelOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLabelOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a label order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleLabelOrderResponse GetLabelOrder(global::Clarifai.Api.GetLabelOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLabelOrder, null, options, request);
      }
      /// <summary>
      /// Get a label order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLabelOrderResponse> GetLabelOrderAsync(global::Clarifai.Api.GetLabelOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLabelOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a label order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleLabelOrderResponse> GetLabelOrderAsync(global::Clarifai.Api.GetLabelOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLabelOrder, null, options, request);
      }
      /// <summary>
      /// List label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiLabelOrderResponse ListLabelOrders(global::Clarifai.Api.ListLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLabelOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiLabelOrderResponse ListLabelOrders(global::Clarifai.Api.ListLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLabelOrders, null, options, request);
      }
      /// <summary>
      /// List label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> ListLabelOrdersAsync(global::Clarifai.Api.ListLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLabelOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> ListLabelOrdersAsync(global::Clarifai.Api.ListLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLabelOrders, null, options, request);
      }
      /// <summary>
      /// Patch one or more label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiLabelOrderResponse PatchLabelOrders(global::Clarifai.Api.PatchLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchLabelOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiLabelOrderResponse PatchLabelOrders(global::Clarifai.Api.PatchLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchLabelOrders, null, options, request);
      }
      /// <summary>
      /// Patch one or more label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> PatchLabelOrdersAsync(global::Clarifai.Api.PatchLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchLabelOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more label orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiLabelOrderResponse> PatchLabelOrdersAsync(global::Clarifai.Api.PatchLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchLabelOrders, null, options, request);
      }
      /// <summary>
      /// Delete multiple label orders in one request.
      /// this do not change task status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteLabelOrders(global::Clarifai.Api.DeleteLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLabelOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple label orders in one request.
      /// this do not change task status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteLabelOrders(global::Clarifai.Api.DeleteLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteLabelOrders, null, options, request);
      }
      /// <summary>
      /// Delete multiple label orders in one request.
      /// this do not change task status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteLabelOrdersAsync(global::Clarifai.Api.DeleteLabelOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLabelOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple label orders in one request.
      /// this do not change task status
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteLabelOrdersAsync(global::Clarifai.Api.DeleteLabelOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteLabelOrders, null, options, request);
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollectorResponse PostCollectors(global::Clarifai.Api.PostCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollectorResponse PostCollectors(global::Clarifai.Api.PostCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostCollectors, null, options, request);
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PostCollectorsAsync(global::Clarifai.Api.PostCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a list of Collectors to an app.
      /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      /// endpoint.
      /// Those current scopes are listed here as a hard requirement.
      /// They are needed when adding the collectors just so we now that you have permission with
      /// that key at least to do the writing to this app with POST /inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PostCollectorsAsync(global::Clarifai.Api.PostCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostCollectors, null, options, request);
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleCollectorResponse GetCollector(global::Clarifai.Api.GetCollectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCollector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleCollectorResponse GetCollector(global::Clarifai.Api.GetCollectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCollector, null, options, request);
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleCollectorResponse> GetCollectorAsync(global::Clarifai.Api.GetCollectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCollectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific collector from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleCollectorResponse> GetCollectorAsync(global::Clarifai.Api.GetCollectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCollector, null, options, request);
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollectorResponse ListCollectors(global::Clarifai.Api.ListCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollectorResponse ListCollectors(global::Clarifai.Api.ListCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollectors, null, options, request);
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> ListCollectorsAsync(global::Clarifai.Api.ListCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> ListCollectorsAsync(global::Clarifai.Api.ListCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollectors, null, options, request);
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollectorResponse PatchCollectors(global::Clarifai.Api.PatchCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiCollectorResponse PatchCollectors(global::Clarifai.Api.PatchCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchCollectors, null, options, request);
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PatchCollectorsAsync(global::Clarifai.Api.PatchCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more collectors.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiCollectorResponse> PatchCollectorsAsync(global::Clarifai.Api.PatchCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchCollectors, null, options, request);
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollectors(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteCollectors(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCollectors, null, options, request);
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollectorsAsync(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple collectors in one request.
      /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteCollectorsAsync(global::Clarifai.Api.DeleteCollectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCollectors, null, options, request);
      }
      /// <summary>
      /// PostStatValues
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiStatValueResponse PostStatValues(global::Clarifai.Api.PostStatValuesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValues(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostStatValues
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiStatValueResponse PostStatValues(global::Clarifai.Api.PostStatValuesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostStatValues, null, options, request);
      }
      /// <summary>
      /// PostStatValues
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueResponse> PostStatValuesAsync(global::Clarifai.Api.PostStatValuesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValuesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostStatValues
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueResponse> PostStatValuesAsync(global::Clarifai.Api.PostStatValuesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostStatValues, null, options, request);
      }
      /// <summary>
      /// PostStatValuesAggregate
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiStatValueAggregateResponse PostStatValuesAggregate(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValuesAggregate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostStatValuesAggregate
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiStatValueAggregateResponse PostStatValuesAggregate(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostStatValuesAggregate, null, options, request);
      }
      /// <summary>
      /// PostStatValuesAggregate
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueAggregateResponse> PostStatValuesAggregateAsync(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostStatValuesAggregateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PostStatValuesAggregate
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiStatValueAggregateResponse> PostStatValuesAggregateAsync(global::Clarifai.Api.PostStatValuesAggregateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostStatValuesAggregate, null, options, request);
      }
      /// <summary>
      /// Increase the view metric for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PostTrendingMetricsView(global::Clarifai.Api.PostTrendingMetricsViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTrendingMetricsView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Increase the view metric for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PostTrendingMetricsView(global::Clarifai.Api.PostTrendingMetricsViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostTrendingMetricsView, null, options, request);
      }
      /// <summary>
      /// Increase the view metric for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostTrendingMetricsViewAsync(global::Clarifai.Api.PostTrendingMetricsViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTrendingMetricsViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Increase the view metric for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PostTrendingMetricsViewAsync(global::Clarifai.Api.PostTrendingMetricsViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostTrendingMetricsView, null, options, request);
      }
      /// <summary>
      /// List the view metrics for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiTrendingMetricsViewResponse ListTrendingMetricsViews(global::Clarifai.Api.ListTrendingMetricsViewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTrendingMetricsViews(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the view metrics for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiTrendingMetricsViewResponse ListTrendingMetricsViews(global::Clarifai.Api.ListTrendingMetricsViewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTrendingMetricsViews, null, options, request);
      }
      /// <summary>
      /// List the view metrics for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTrendingMetricsViewResponse> ListTrendingMetricsViewsAsync(global::Clarifai.Api.ListTrendingMetricsViewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTrendingMetricsViewsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the view metrics for a detail view
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTrendingMetricsViewResponse> ListTrendingMetricsViewsAsync(global::Clarifai.Api.ListTrendingMetricsViewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTrendingMetricsViews, null, options, request);
      }
      /// <summary>
      /// Get a specific module from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModuleResponse GetModule(global::Clarifai.Api.GetModuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific module from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModuleResponse GetModule(global::Clarifai.Api.GetModuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModule, null, options, request);
      }
      /// <summary>
      /// Get a specific module from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModuleResponse> GetModuleAsync(global::Clarifai.Api.GetModuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific module from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModuleResponse> GetModuleAsync(global::Clarifai.Api.GetModuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModule, null, options, request);
      }
      /// <summary>
      /// List all the modules in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModuleResponse ListModules(global::Clarifai.Api.ListModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the modules in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModuleResponse ListModules(global::Clarifai.Api.ListModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModules, null, options, request);
      }
      /// <summary>
      /// List all the modules in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> ListModulesAsync(global::Clarifai.Api.ListModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the modules in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> ListModulesAsync(global::Clarifai.Api.ListModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModules, null, options, request);
      }
      /// <summary>
      /// Add a modules to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModuleResponse PostModules(global::Clarifai.Api.PostModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a modules to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModuleResponse PostModules(global::Clarifai.Api.PostModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModules, null, options, request);
      }
      /// <summary>
      /// Add a modules to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> PostModulesAsync(global::Clarifai.Api.PostModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a modules to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> PostModulesAsync(global::Clarifai.Api.PostModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModules, null, options, request);
      }
      /// <summary>
      /// Patch one or more modules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModuleResponse PatchModules(global::Clarifai.Api.PatchModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more modules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModuleResponse PatchModules(global::Clarifai.Api.PatchModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchModules, null, options, request);
      }
      /// <summary>
      /// Patch one or more modules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> PatchModulesAsync(global::Clarifai.Api.PatchModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchModulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch one or more modules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleResponse> PatchModulesAsync(global::Clarifai.Api.PatchModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchModules, null, options, request);
      }
      /// <summary>
      /// Delete multiple modules in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModules(global::Clarifai.Api.DeleteModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple modules in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModules(global::Clarifai.Api.DeleteModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModules, null, options, request);
      }
      /// <summary>
      /// Delete multiple modules in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModulesAsync(global::Clarifai.Api.DeleteModulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple modules in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModulesAsync(global::Clarifai.Api.DeleteModulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModules, null, options, request);
      }
      /// <summary>
      /// Get a specific module version for a module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModuleVersionResponse GetModuleVersion(global::Clarifai.Api.GetModuleVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific module version for a module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleModuleVersionResponse GetModuleVersion(global::Clarifai.Api.GetModuleVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModuleVersion, null, options, request);
      }
      /// <summary>
      /// Get a specific module version for a module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModuleVersionResponse> GetModuleVersionAsync(global::Clarifai.Api.GetModuleVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific module version for a module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleModuleVersionResponse> GetModuleVersionAsync(global::Clarifai.Api.GetModuleVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModuleVersion, null, options, request);
      }
      /// <summary>
      /// List all the modules versions for a given module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModuleVersionResponse ListModuleVersions(global::Clarifai.Api.ListModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the modules versions for a given module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModuleVersionResponse ListModuleVersions(global::Clarifai.Api.ListModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModuleVersions, null, options, request);
      }
      /// <summary>
      /// List all the modules versions for a given module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleVersionResponse> ListModuleVersionsAsync(global::Clarifai.Api.ListModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the modules versions for a given module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleVersionResponse> ListModuleVersionsAsync(global::Clarifai.Api.ListModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModuleVersions, null, options, request);
      }
      /// <summary>
      /// Create a new module version to trigger training of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModuleVersionResponse PostModuleVersions(global::Clarifai.Api.PostModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new module version to trigger training of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiModuleVersionResponse PostModuleVersions(global::Clarifai.Api.PostModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModuleVersions, null, options, request);
      }
      /// <summary>
      /// Create a new module version to trigger training of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleVersionResponse> PostModuleVersionsAsync(global::Clarifai.Api.PostModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new module version to trigger training of the module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiModuleVersionResponse> PostModuleVersionsAsync(global::Clarifai.Api.PostModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModuleVersions, null, options, request);
      }
      /// <summary>
      /// Delete a multiple module version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModuleVersions(global::Clarifai.Api.DeleteModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a multiple module version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteModuleVersions(global::Clarifai.Api.DeleteModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModuleVersions, null, options, request);
      }
      /// <summary>
      /// Delete a multiple module version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModuleVersionsAsync(global::Clarifai.Api.DeleteModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a multiple module version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteModuleVersionsAsync(global::Clarifai.Api.DeleteModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModuleVersions, null, options, request);
      }
      /// <summary>
      /// Get installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInstalledModuleVersionResponse GetInstalledModuleVersion(global::Clarifai.Api.GetInstalledModuleVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstalledModuleVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInstalledModuleVersionResponse GetInstalledModuleVersion(global::Clarifai.Api.GetInstalledModuleVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstalledModuleVersion, null, options, request);
      }
      /// <summary>
      /// Get installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInstalledModuleVersionResponse> GetInstalledModuleVersionAsync(global::Clarifai.Api.GetInstalledModuleVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstalledModuleVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInstalledModuleVersionResponse> GetInstalledModuleVersionAsync(global::Clarifai.Api.GetInstalledModuleVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstalledModuleVersion, null, options, request);
      }
      /// <summary>
      /// List installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInstalledModuleVersionResponse ListInstalledModuleVersions(global::Clarifai.Api.ListInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstalledModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInstalledModuleVersionResponse ListInstalledModuleVersions(global::Clarifai.Api.ListInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// List installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInstalledModuleVersionResponse> ListInstalledModuleVersionsAsync(global::Clarifai.Api.ListInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstalledModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List installed modules vesrions for an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInstalledModuleVersionResponse> ListInstalledModuleVersionsAsync(global::Clarifai.Api.ListInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInstalledModuleVersionResponse PostInstalledModuleVersions(global::Clarifai.Api.PostInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInstalledModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInstalledModuleVersionResponse PostInstalledModuleVersions(global::Clarifai.Api.PostInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInstalledModuleVersionResponse> PostInstalledModuleVersionsAsync(global::Clarifai.Api.PostInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInstalledModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Install a new module version which will deploy the specific ModuleVersion to the app in the url.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInstalledModuleVersionResponse> PostInstalledModuleVersionsAsync(global::Clarifai.Api.PostInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
      /// in the url.
      /// This cleaned up any associated caller keys so needs the Keys_Delete scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInstalledModuleVersions(global::Clarifai.Api.DeleteInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInstalledModuleVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
      /// in the url.
      /// This cleaned up any associated caller keys so needs the Keys_Delete scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteInstalledModuleVersions(global::Clarifai.Api.DeleteInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
      /// in the url.
      /// This cleaned up any associated caller keys so needs the Keys_Delete scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInstalledModuleVersionsAsync(global::Clarifai.Api.DeleteInstalledModuleVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInstalledModuleVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Uninstall an installed module version which will deploy the specific ModuleVersion to the app
      /// in the url.
      /// This cleaned up any associated caller keys so needs the Keys_Delete scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteInstalledModuleVersionsAsync(global::Clarifai.Api.DeleteInstalledModuleVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInstalledModuleVersions, null, options, request);
      }
      /// <summary>
      /// Assign a key that the caller owns to be used when accessing this installed module version
      /// If this endpoint is called with a different key then it overwrites what is there.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleKeyResponse PostInstalledModuleVersionsKey(global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInstalledModuleVersionsKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Assign a key that the caller owns to be used when accessing this installed module version
      /// If this endpoint is called with a different key then it overwrites what is there.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleKeyResponse PostInstalledModuleVersionsKey(global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInstalledModuleVersionsKey, null, options, request);
      }
      /// <summary>
      /// Assign a key that the caller owns to be used when accessing this installed module version
      /// If this endpoint is called with a different key then it overwrites what is there.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleKeyResponse> PostInstalledModuleVersionsKeyAsync(global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInstalledModuleVersionsKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Assign a key that the caller owns to be used when accessing this installed module version
      /// If this endpoint is called with a different key then it overwrites what is there.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleKeyResponse> PostInstalledModuleVersionsKeyAsync(global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInstalledModuleVersionsKey, null, options, request);
      }
      /// <summary>
      /// Perform bulk operations on a list of inputs based on input source.
      /// Operation include add, update, delete of concepts, metadata and geo data.
      /// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse PostBulkOperations(global::Clarifai.Api.PostBulkOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostBulkOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Perform bulk operations on a list of inputs based on input source.
      /// Operation include add, update, delete of concepts, metadata and geo data.
      /// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse PostBulkOperations(global::Clarifai.Api.PostBulkOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostBulkOperations, null, options, request);
      }
      /// <summary>
      /// Perform bulk operations on a list of inputs based on input source.
      /// Operation include add, update, delete of concepts, metadata and geo data.
      /// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> PostBulkOperationsAsync(global::Clarifai.Api.PostBulkOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostBulkOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Perform bulk operations on a list of inputs based on input source.
      /// Operation include add, update, delete of concepts, metadata and geo data.
      /// This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> PostBulkOperationsAsync(global::Clarifai.Api.PostBulkOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostBulkOperations, null, options, request);
      }
      /// <summary>
      /// List all the bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse ListBulkOperations(global::Clarifai.Api.ListBulkOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBulkOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse ListBulkOperations(global::Clarifai.Api.ListBulkOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBulkOperations, null, options, request);
      }
      /// <summary>
      /// List all the bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> ListBulkOperationsAsync(global::Clarifai.Api.ListBulkOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBulkOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> ListBulkOperationsAsync(global::Clarifai.Api.ListBulkOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBulkOperations, null, options, request);
      }
      /// <summary>
      /// Get the bulk operation details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleBulkOperationsResponse GetBulkOperation(global::Clarifai.Api.GetBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBulkOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the bulk operation details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleBulkOperationsResponse GetBulkOperation(global::Clarifai.Api.GetBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBulkOperation, null, options, request);
      }
      /// <summary>
      /// Get the bulk operation details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleBulkOperationsResponse> GetBulkOperationAsync(global::Clarifai.Api.GetBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBulkOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the bulk operation details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleBulkOperationsResponse> GetBulkOperationAsync(global::Clarifai.Api.GetBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBulkOperation, null, options, request);
      }
      /// <summary>
      /// Cancel one or more bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse CancelBulkOperations(global::Clarifai.Api.CancelBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelBulkOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel one or more bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiBulkOperationsResponse CancelBulkOperations(global::Clarifai.Api.CancelBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelBulkOperations, null, options, request);
      }
      /// <summary>
      /// Cancel one or more bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> CancelBulkOperationsAsync(global::Clarifai.Api.CancelBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelBulkOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel one or more bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiBulkOperationsResponse> CancelBulkOperationsAsync(global::Clarifai.Api.CancelBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelBulkOperations, null, options, request);
      }
      /// <summary>
      /// delete one or more terminated bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteBulkOperations(global::Clarifai.Api.DeleteBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBulkOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// delete one or more terminated bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteBulkOperations(global::Clarifai.Api.DeleteBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteBulkOperations, null, options, request);
      }
      /// <summary>
      /// delete one or more terminated bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteBulkOperationsAsync(global::Clarifai.Api.DeleteBulkOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBulkOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// delete one or more terminated bulk operations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteBulkOperationsAsync(global::Clarifai.Api.DeleteBulkOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteBulkOperations, null, options, request);
      }
      /// <summary>
      /// List next non-labeled and unassigned inputs from task's dataset
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse ListNextTaskAssignments(global::Clarifai.Api.ListNextTaskAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNextTaskAssignments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List next non-labeled and unassigned inputs from task's dataset
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputResponse ListNextTaskAssignments(global::Clarifai.Api.ListNextTaskAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNextTaskAssignments, null, options, request);
      }
      /// <summary>
      /// List next non-labeled and unassigned inputs from task's dataset
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListNextTaskAssignmentsAsync(global::Clarifai.Api.ListNextTaskAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNextTaskAssignmentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List next non-labeled and unassigned inputs from task's dataset
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputResponse> ListNextTaskAssignmentsAsync(global::Clarifai.Api.ListNextTaskAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNextTaskAssignments, null, options, request);
      }
      /// <summary>
      /// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PutTaskAssignments(global::Clarifai.Api.PutTaskAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutTaskAssignments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse PutTaskAssignments(global::Clarifai.Api.PutTaskAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutTaskAssignments, null, options, request);
      }
      /// <summary>
      /// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PutTaskAssignmentsAsync(global::Clarifai.Api.PutTaskAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutTaskAssignmentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PutTaskAssignments evaluates all the annotations by labeler (authenticated user) for given task (task_id) and input (input_id).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> PutTaskAssignmentsAsync(global::Clarifai.Api.PutTaskAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutTaskAssignments, null, options, request);
      }
      /// <summary>
      /// List all the inputs add jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputsAddJobResponse ListInputsAddJobs(global::Clarifai.Api.ListInputsAddJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputsAddJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs add jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputsAddJobResponse ListInputsAddJobs(global::Clarifai.Api.ListInputsAddJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInputsAddJobs, null, options, request);
      }
      /// <summary>
      /// List all the inputs add jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsAddJobResponse> ListInputsAddJobsAsync(global::Clarifai.Api.ListInputsAddJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputsAddJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the inputs add jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsAddJobResponse> ListInputsAddJobsAsync(global::Clarifai.Api.ListInputsAddJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInputsAddJobs, null, options, request);
      }
      /// <summary>
      /// Get the input add job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInputsAddJobResponse GetInputsAddJob(global::Clarifai.Api.GetInputsAddJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputsAddJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the input add job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInputsAddJobResponse GetInputsAddJob(global::Clarifai.Api.GetInputsAddJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInputsAddJob, null, options, request);
      }
      /// <summary>
      /// Get the input add job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputsAddJobResponse> GetInputsAddJobAsync(global::Clarifai.Api.GetInputsAddJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputsAddJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the input add job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputsAddJobResponse> GetInputsAddJobAsync(global::Clarifai.Api.GetInputsAddJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInputsAddJob, null, options, request);
      }
      /// <summary>
      /// cancel the input add job by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInputsAddJobResponse CancelInputsAddJob(global::Clarifai.Api.CancelInputsAddJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelInputsAddJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// cancel the input add job by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInputsAddJobResponse CancelInputsAddJob(global::Clarifai.Api.CancelInputsAddJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelInputsAddJob, null, options, request);
      }
      /// <summary>
      /// cancel the input add job by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputsAddJobResponse> CancelInputsAddJobAsync(global::Clarifai.Api.CancelInputsAddJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelInputsAddJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// cancel the input add job by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputsAddJobResponse> CancelInputsAddJobAsync(global::Clarifai.Api.CancelInputsAddJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelInputsAddJob, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiUploadResponse PostUploads(global::Clarifai.Api.PostUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUploads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiUploadResponse PostUploads(global::Clarifai.Api.PostUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostUploads, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUploadResponse> PostUploadsAsync(global::Clarifai.Api.PostUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUploadsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUploadResponse> PostUploadsAsync(global::Clarifai.Api.PostUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostUploads, null, options, request);
      }
      /// <summary>
      /// Upload a part of a multipart upload.
      /// Behaviour on completion depends on the endpoint that was used to initiate the upload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleUploadResponse PutUploadContentParts(global::Clarifai.Api.PutUploadContentPartsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutUploadContentParts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Upload a part of a multipart upload.
      /// Behaviour on completion depends on the endpoint that was used to initiate the upload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleUploadResponse PutUploadContentParts(global::Clarifai.Api.PutUploadContentPartsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutUploadContentParts, null, options, request);
      }
      /// <summary>
      /// Upload a part of a multipart upload.
      /// Behaviour on completion depends on the endpoint that was used to initiate the upload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUploadResponse> PutUploadContentPartsAsync(global::Clarifai.Api.PutUploadContentPartsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutUploadContentPartsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Upload a part of a multipart upload.
      /// Behaviour on completion depends on the endpoint that was used to initiate the upload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUploadResponse> PutUploadContentPartsAsync(global::Clarifai.Api.PutUploadContentPartsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutUploadContentParts, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleUploadResponse GetUpload(global::Clarifai.Api.GetUploadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUpload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleUploadResponse GetUpload(global::Clarifai.Api.GetUploadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUpload, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUploadResponse> GetUploadAsync(global::Clarifai.Api.GetUploadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUploadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleUploadResponse> GetUploadAsync(global::Clarifai.Api.GetUploadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUpload, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiUploadResponse ListUploads(global::Clarifai.Api.ListUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUploads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiUploadResponse ListUploads(global::Clarifai.Api.ListUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUploads, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUploadResponse> ListUploadsAsync(global::Clarifai.Api.ListUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUploadsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiUploadResponse> ListUploadsAsync(global::Clarifai.Api.ListUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUploads, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteUploads(global::Clarifai.Api.DeleteUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUploads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteUploads(global::Clarifai.Api.DeleteUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteUploads, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteUploadsAsync(global::Clarifai.Api.DeleteUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUploadsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteUploadsAsync(global::Clarifai.Api.DeleteUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteUploads, null, options, request);
      }
      /// <summary>
      /// Initiates retrieval of inputs from cloud storage from a user provided data source.
      /// Will create and return an inputs-add-job for tracking progress.
      /// Archives will be extracted and their contents will be processed as inputs.
      ///
      /// The cloud URL will be treated as a filter prefix. For example s3:/bucket/images_folder/abc will process
      /// files in the images_folder beginning with abc or in a subfolder beginning with abc.
      /// For example:
      /// bucket/images_folder/abcImage.png
      /// bucket/images_folder/abc-1/Data.zip
      ///
      /// If given URL is for a private bucket or file, then credentials should be provided to access the bucket.
      /// Credentials should include rights to list the objects in the bucket, except when pointed directly at a file archive,
      /// in which case it only requires rights to access that particular file.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputsAddJobResponse PostInputsDataSources(global::Clarifai.Api.PostInputsDataSourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsDataSources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initiates retrieval of inputs from cloud storage from a user provided data source.
      /// Will create and return an inputs-add-job for tracking progress.
      /// Archives will be extracted and their contents will be processed as inputs.
      ///
      /// The cloud URL will be treated as a filter prefix. For example s3:/bucket/images_folder/abc will process
      /// files in the images_folder beginning with abc or in a subfolder beginning with abc.
      /// For example:
      /// bucket/images_folder/abcImage.png
      /// bucket/images_folder/abc-1/Data.zip
      ///
      /// If given URL is for a private bucket or file, then credentials should be provided to access the bucket.
      /// Credentials should include rights to list the objects in the bucket, except when pointed directly at a file archive,
      /// in which case it only requires rights to access that particular file.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputsAddJobResponse PostInputsDataSources(global::Clarifai.Api.PostInputsDataSourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputsDataSources, null, options, request);
      }
      /// <summary>
      /// Initiates retrieval of inputs from cloud storage from a user provided data source.
      /// Will create and return an inputs-add-job for tracking progress.
      /// Archives will be extracted and their contents will be processed as inputs.
      ///
      /// The cloud URL will be treated as a filter prefix. For example s3:/bucket/images_folder/abc will process
      /// files in the images_folder beginning with abc or in a subfolder beginning with abc.
      /// For example:
      /// bucket/images_folder/abcImage.png
      /// bucket/images_folder/abc-1/Data.zip
      ///
      /// If given URL is for a private bucket or file, then credentials should be provided to access the bucket.
      /// Credentials should include rights to list the objects in the bucket, except when pointed directly at a file archive,
      /// in which case it only requires rights to access that particular file.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsAddJobResponse> PostInputsDataSourcesAsync(global::Clarifai.Api.PostInputsDataSourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsDataSourcesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initiates retrieval of inputs from cloud storage from a user provided data source.
      /// Will create and return an inputs-add-job for tracking progress.
      /// Archives will be extracted and their contents will be processed as inputs.
      ///
      /// The cloud URL will be treated as a filter prefix. For example s3:/bucket/images_folder/abc will process
      /// files in the images_folder beginning with abc or in a subfolder beginning with abc.
      /// For example:
      /// bucket/images_folder/abcImage.png
      /// bucket/images_folder/abc-1/Data.zip
      ///
      /// If given URL is for a private bucket or file, then credentials should be provided to access the bucket.
      /// Credentials should include rights to list the objects in the bucket, except when pointed directly at a file archive,
      /// in which case it only requires rights to access that particular file.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsAddJobResponse> PostInputsDataSourcesAsync(global::Clarifai.Api.PostInputsDataSourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputsDataSources, null, options, request);
      }
      /// <summary>
      /// Get the input extraction job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInputsExtractionJobResponse GetInputsExtractionJob(global::Clarifai.Api.GetInputsExtractionJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputsExtractionJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the input extraction job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleInputsExtractionJobResponse GetInputsExtractionJob(global::Clarifai.Api.GetInputsExtractionJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInputsExtractionJob, null, options, request);
      }
      /// <summary>
      /// Get the input extraction job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputsExtractionJobResponse> GetInputsExtractionJobAsync(global::Clarifai.Api.GetInputsExtractionJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInputsExtractionJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the input extraction job details by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleInputsExtractionJobResponse> GetInputsExtractionJobAsync(global::Clarifai.Api.GetInputsExtractionJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInputsExtractionJob, null, options, request);
      }
      /// <summary>
      /// List all the input extraction jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputsExtractionJobResponse ListInputsExtractionJobs(global::Clarifai.Api.ListInputsExtractionJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputsExtractionJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the input extraction jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputsExtractionJobResponse ListInputsExtractionJobs(global::Clarifai.Api.ListInputsExtractionJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInputsExtractionJobs, null, options, request);
      }
      /// <summary>
      /// List all the input extraction jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsExtractionJobResponse> ListInputsExtractionJobsAsync(global::Clarifai.Api.ListInputsExtractionJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInputsExtractionJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the input extraction jobs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsExtractionJobResponse> ListInputsExtractionJobsAsync(global::Clarifai.Api.ListInputsExtractionJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInputsExtractionJobs, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputsExtractionJobResponse CancelInputsExtractionJobs(global::Clarifai.Api.CancelInputsExtractionJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelInputsExtractionJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputsExtractionJobResponse CancelInputsExtractionJobs(global::Clarifai.Api.CancelInputsExtractionJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelInputsExtractionJobs, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsExtractionJobResponse> CancelInputsExtractionJobsAsync(global::Clarifai.Api.CancelInputsExtractionJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelInputsExtractionJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsExtractionJobResponse> CancelInputsExtractionJobsAsync(global::Clarifai.Api.CancelInputsExtractionJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelInputsExtractionJobs, null, options, request);
      }
      /// <summary>
      /// Start uploading a file archive containing inputs.
      /// Will create and return an inputs-add-job for tracking progress.
      ///
      /// Associated inputs-add-job contains an upload id which should be completed through `PutUploadContentParts` endpoint.
      /// Completing the upload will automatically begin unpacking the archive and uploading the contents as inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputsAddJobResponse PostInputsUploads(global::Clarifai.Api.PostInputsUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsUploads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start uploading a file archive containing inputs.
      /// Will create and return an inputs-add-job for tracking progress.
      ///
      /// Associated inputs-add-job contains an upload id which should be completed through `PutUploadContentParts` endpoint.
      /// Completing the upload will automatically begin unpacking the archive and uploading the contents as inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiInputsAddJobResponse PostInputsUploads(global::Clarifai.Api.PostInputsUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostInputsUploads, null, options, request);
      }
      /// <summary>
      /// Start uploading a file archive containing inputs.
      /// Will create and return an inputs-add-job for tracking progress.
      ///
      /// Associated inputs-add-job contains an upload id which should be completed through `PutUploadContentParts` endpoint.
      /// Completing the upload will automatically begin unpacking the archive and uploading the contents as inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsAddJobResponse> PostInputsUploadsAsync(global::Clarifai.Api.PostInputsUploadsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInputsUploadsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start uploading a file archive containing inputs.
      /// Will create and return an inputs-add-job for tracking progress.
      ///
      /// Associated inputs-add-job contains an upload id which should be completed through `PutUploadContentParts` endpoint.
      /// Completing the upload will automatically begin unpacking the archive and uploading the contents as inputs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiInputsAddJobResponse> PostInputsUploadsAsync(global::Clarifai.Api.PostInputsUploadsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostInputsUploads, null, options, request);
      }
      /// <summary>
      /// Get a specific runner from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleRunnerResponse GetRunner(global::Clarifai.Api.GetRunnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRunner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific runner from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.SingleRunnerResponse GetRunner(global::Clarifai.Api.GetRunnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRunner, null, options, request);
      }
      /// <summary>
      /// Get a specific runner from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleRunnerResponse> GetRunnerAsync(global::Clarifai.Api.GetRunnerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRunnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific runner from an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.SingleRunnerResponse> GetRunnerAsync(global::Clarifai.Api.GetRunnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRunner, null, options, request);
      }
      /// <summary>
      /// List all the runners in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiRunnerResponse ListRunners(global::Clarifai.Api.ListRunnersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRunners(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the runners in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiRunnerResponse ListRunners(global::Clarifai.Api.ListRunnersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRunners, null, options, request);
      }
      /// <summary>
      /// List all the runners in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiRunnerResponse> ListRunnersAsync(global::Clarifai.Api.ListRunnersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRunnersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the runners in community, by user or by app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiRunnerResponse> ListRunnersAsync(global::Clarifai.Api.ListRunnersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRunners, null, options, request);
      }
      /// <summary>
      /// Add a runners to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiRunnerResponse PostRunners(global::Clarifai.Api.PostRunnersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRunners(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a runners to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiRunnerResponse PostRunners(global::Clarifai.Api.PostRunnersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostRunners, null, options, request);
      }
      /// <summary>
      /// Add a runners to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiRunnerResponse> PostRunnersAsync(global::Clarifai.Api.PostRunnersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRunnersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a runners to an app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiRunnerResponse> PostRunnersAsync(global::Clarifai.Api.PostRunnersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostRunners, null, options, request);
      }
      /// <summary>
      /// Delete multiple runners in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteRunners(global::Clarifai.Api.DeleteRunnersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRunners(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple runners in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.Status.BaseResponse DeleteRunners(global::Clarifai.Api.DeleteRunnersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRunners, null, options, request);
      }
      /// <summary>
      /// Delete multiple runners in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteRunnersAsync(global::Clarifai.Api.DeleteRunnersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRunnersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete multiple runners in one request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.Status.BaseResponse> DeleteRunnersAsync(global::Clarifai.Api.DeleteRunnersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRunners, null, options, request);
      }
      /// <summary>
      /// List items for the remote runner to work on.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiRunnerItemResponse ListRunnerItems(global::Clarifai.Api.ListRunnerItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRunnerItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List items for the remote runner to work on.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiRunnerItemResponse ListRunnerItems(global::Clarifai.Api.ListRunnerItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRunnerItems, null, options, request);
      }
      /// <summary>
      /// List items for the remote runner to work on.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiRunnerItemResponse> ListRunnerItemsAsync(global::Clarifai.Api.ListRunnerItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRunnerItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List items for the remote runner to work on.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiRunnerItemResponse> ListRunnerItemsAsync(global::Clarifai.Api.ListRunnerItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRunnerItems, null, options, request);
      }
      /// <summary>
      /// Post back outputs from remote runners
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiRunnerItemOutputResponse PostRunnerItemOutputs(global::Clarifai.Api.PostRunnerItemOutputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRunnerItemOutputs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post back outputs from remote runners
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiRunnerItemOutputResponse PostRunnerItemOutputs(global::Clarifai.Api.PostRunnerItemOutputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostRunnerItemOutputs, null, options, request);
      }
      /// <summary>
      /// Post back outputs from remote runners
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiRunnerItemOutputResponse> PostRunnerItemOutputsAsync(global::Clarifai.Api.PostRunnerItemOutputsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRunnerItemOutputsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Post back outputs from remote runners
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiRunnerItemOutputResponse> PostRunnerItemOutputsAsync(global::Clarifai.Api.PostRunnerItemOutputsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostRunnerItemOutputs, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiTrainingTimeEstimateResponse PostModelVersionsTrainingTimeEstimate(global::Clarifai.Api.PostModelVersionsTrainingTimeEstimateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsTrainingTimeEstimate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Clarifai.Api.MultiTrainingTimeEstimateResponse PostModelVersionsTrainingTimeEstimate(global::Clarifai.Api.PostModelVersionsTrainingTimeEstimateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostModelVersionsTrainingTimeEstimate, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTrainingTimeEstimateResponse> PostModelVersionsTrainingTimeEstimateAsync(global::Clarifai.Api.PostModelVersionsTrainingTimeEstimateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostModelVersionsTrainingTimeEstimateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Clarifai.Api.MultiTrainingTimeEstimateResponse> PostModelVersionsTrainingTimeEstimateAsync(global::Clarifai.Api.PostModelVersionsTrainingTimeEstimateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostModelVersionsTrainingTimeEstimate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override V2Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new V2Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(V2Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListConceptRelations, serviceImpl.ListConceptRelations)
          .AddMethod(__Method_PostConceptRelations, serviceImpl.PostConceptRelations)
          .AddMethod(__Method_DeleteConceptRelations, serviceImpl.DeleteConceptRelations)
          .AddMethod(__Method_GetConceptCounts, serviceImpl.GetConceptCounts)
          .AddMethod(__Method_GetConcept, serviceImpl.GetConcept)
          .AddMethod(__Method_ListConcepts, serviceImpl.ListConcepts)
          .AddMethod(__Method_ListModelConcepts, serviceImpl.ListModelConcepts)
          .AddMethod(__Method_PostConceptsSearches, serviceImpl.PostConceptsSearches)
          .AddMethod(__Method_PostConcepts, serviceImpl.PostConcepts)
          .AddMethod(__Method_PatchConcepts, serviceImpl.PatchConcepts)
          .AddMethod(__Method_GetConceptLanguage, serviceImpl.GetConceptLanguage)
          .AddMethod(__Method_ListConceptLanguages, serviceImpl.ListConceptLanguages)
          .AddMethod(__Method_PostConceptLanguages, serviceImpl.PostConceptLanguages)
          .AddMethod(__Method_PatchConceptLanguages, serviceImpl.PatchConceptLanguages)
          .AddMethod(__Method_ListKnowledgeGraphs, serviceImpl.ListKnowledgeGraphs)
          .AddMethod(__Method_PostKnowledgeGraphs, serviceImpl.PostKnowledgeGraphs)
          .AddMethod(__Method_PostConceptMappingJobs, serviceImpl.PostConceptMappingJobs)
          .AddMethod(__Method_GetAnnotation, serviceImpl.GetAnnotation)
          .AddMethod(__Method_ListAnnotations, serviceImpl.ListAnnotations)
          .AddMethod(__Method_PostAnnotations, serviceImpl.PostAnnotations)
          .AddMethod(__Method_PatchAnnotations, serviceImpl.PatchAnnotations)
          .AddMethod(__Method_PatchAnnotationsStatus, serviceImpl.PatchAnnotationsStatus)
          .AddMethod(__Method_DeleteAnnotation, serviceImpl.DeleteAnnotation)
          .AddMethod(__Method_DeleteAnnotations, serviceImpl.DeleteAnnotations)
          .AddMethod(__Method_PatchAnnotationsSearches, serviceImpl.PatchAnnotationsSearches)
          .AddMethod(__Method_PostAnnotationsSearches, serviceImpl.PostAnnotationsSearches)
          .AddMethod(__Method_ListAnnotationWorkers, serviceImpl.ListAnnotationWorkers)
          .AddMethod(__Method_GetInputCount, serviceImpl.GetInputCount)
          .AddMethod(__Method_StreamInputs, serviceImpl.StreamInputs)
          .AddMethod(__Method_GetInputSamples, serviceImpl.GetInputSamples)
          .AddMethod(__Method_GetInput, serviceImpl.GetInput)
          .AddMethod(__Method_GetInputVideoManifest, serviceImpl.GetInputVideoManifest)
          .AddMethod(__Method_ListInputs, serviceImpl.ListInputs)
          .AddMethod(__Method_PostInputs, serviceImpl.PostInputs)
          .AddMethod(__Method_PatchInputs, serviceImpl.PatchInputs)
          .AddMethod(__Method_DeleteInput, serviceImpl.DeleteInput)
          .AddMethod(__Method_DeleteInputs, serviceImpl.DeleteInputs)
          .AddMethod(__Method_PatchInputsSearches, serviceImpl.PatchInputsSearches)
          .AddMethod(__Method_PostInputsSearches, serviceImpl.PostInputsSearches)
          .AddMethod(__Method_PostModelOutputs, serviceImpl.PostModelOutputs)
          .AddMethod(__Method_ListDatasets, serviceImpl.ListDatasets)
          .AddMethod(__Method_GetDataset, serviceImpl.GetDataset)
          .AddMethod(__Method_PostDatasets, serviceImpl.PostDatasets)
          .AddMethod(__Method_PatchDatasets, serviceImpl.PatchDatasets)
          .AddMethod(__Method_DeleteDatasets, serviceImpl.DeleteDatasets)
          .AddMethod(__Method_ListDatasetInputs, serviceImpl.ListDatasetInputs)
          .AddMethod(__Method_GetDatasetInput, serviceImpl.GetDatasetInput)
          .AddMethod(__Method_PostDatasetInputs, serviceImpl.PostDatasetInputs)
          .AddMethod(__Method_DeleteDatasetInputs, serviceImpl.DeleteDatasetInputs)
          .AddMethod(__Method_ListDatasetVersions, serviceImpl.ListDatasetVersions)
          .AddMethod(__Method_GetDatasetVersion, serviceImpl.GetDatasetVersion)
          .AddMethod(__Method_ListDatasetVersionMetricsGroups, serviceImpl.ListDatasetVersionMetricsGroups)
          .AddMethod(__Method_PostDatasetVersions, serviceImpl.PostDatasetVersions)
          .AddMethod(__Method_PatchDatasetVersions, serviceImpl.PatchDatasetVersions)
          .AddMethod(__Method_DeleteDatasetVersions, serviceImpl.DeleteDatasetVersions)
          .AddMethod(__Method_PutDatasetVersionExports, serviceImpl.PutDatasetVersionExports)
          .AddMethod(__Method_GetModelType, serviceImpl.GetModelType)
          .AddMethod(__Method_ListOpenSourceLicenses, serviceImpl.ListOpenSourceLicenses)
          .AddMethod(__Method_ListModelTypes, serviceImpl.ListModelTypes)
          .AddMethod(__Method_GetModel, serviceImpl.GetModel)
          .AddMethod(__Method_GetModelOutputInfo, serviceImpl.GetModelOutputInfo)
          .AddMethod(__Method_ListModels, serviceImpl.ListModels)
          .AddMethod(__Method_GetResourceCounts, serviceImpl.GetResourceCounts)
          .AddMethod(__Method_PostModelsSearches, serviceImpl.PostModelsSearches)
          .AddMethod(__Method_PostModels, serviceImpl.PostModels)
          .AddMethod(__Method_PatchModels, serviceImpl.PatchModels)
          .AddMethod(__Method_PatchModelIds, serviceImpl.PatchModelIds)
          .AddMethod(__Method_DeleteModel, serviceImpl.DeleteModel)
          .AddMethod(__Method_DeleteModels, serviceImpl.DeleteModels)
          .AddMethod(__Method_PatchModelCheckConsents, serviceImpl.PatchModelCheckConsents)
          .AddMethod(__Method_PatchModelToolkits, serviceImpl.PatchModelToolkits)
          .AddMethod(__Method_PatchModelUseCases, serviceImpl.PatchModelUseCases)
          .AddMethod(__Method_PatchModelLanguages, serviceImpl.PatchModelLanguages)
          .AddMethod(__Method_ListModelInputs, serviceImpl.ListModelInputs)
          .AddMethod(__Method_GetModelVersion, serviceImpl.GetModelVersion)
          .AddMethod(__Method_ListModelVersions, serviceImpl.ListModelVersions)
          .AddMethod(__Method_PostWorkflowVersionsUnPublish, serviceImpl.PostWorkflowVersionsUnPublish)
          .AddMethod(__Method_PostWorkflowVersionsPublish, serviceImpl.PostWorkflowVersionsPublish)
          .AddMethod(__Method_PostModelVersionsPublish, serviceImpl.PostModelVersionsPublish)
          .AddMethod(__Method_PostModelVersionsUnPublish, serviceImpl.PostModelVersionsUnPublish)
          .AddMethod(__Method_PostModelVersions, serviceImpl.PostModelVersions)
          .AddMethod(__Method_PatchModelVersions, serviceImpl.PatchModelVersions)
          .AddMethod(__Method_DeleteModelVersion, serviceImpl.DeleteModelVersion)
          .AddMethod(__Method_GetModelVersionMetrics, serviceImpl.GetModelVersionMetrics)
          .AddMethod(__Method_PostModelVersionMetrics, serviceImpl.PostModelVersionMetrics)
          .AddMethod(__Method_PostModelVersionEvaluations, serviceImpl.PostModelVersionEvaluations)
          .AddMethod(__Method_ListModelVersionEvaluations, serviceImpl.ListModelVersionEvaluations)
          .AddMethod(__Method_GetModelVersionEvaluation, serviceImpl.GetModelVersionEvaluation)
          .AddMethod(__Method_PostEvaluations, serviceImpl.PostEvaluations)
          .AddMethod(__Method_ListEvaluations, serviceImpl.ListEvaluations)
          .AddMethod(__Method_GetEvaluation, serviceImpl.GetEvaluation)
          .AddMethod(__Method_ListModelReferences, serviceImpl.ListModelReferences)
          .AddMethod(__Method_GetModelVersionInputExample, serviceImpl.GetModelVersionInputExample)
          .AddMethod(__Method_ListModelVersionInputExamples, serviceImpl.ListModelVersionInputExamples)
          .AddMethod(__Method_GetWorkflow, serviceImpl.GetWorkflow)
          .AddMethod(__Method_ListWorkflows, serviceImpl.ListWorkflows)
          .AddMethod(__Method_PostWorkflows, serviceImpl.PostWorkflows)
          .AddMethod(__Method_PatchWorkflows, serviceImpl.PatchWorkflows)
          .AddMethod(__Method_PatchWorkflowIds, serviceImpl.PatchWorkflowIds)
          .AddMethod(__Method_DeleteWorkflow, serviceImpl.DeleteWorkflow)
          .AddMethod(__Method_DeleteWorkflows, serviceImpl.DeleteWorkflows)
          .AddMethod(__Method_PostWorkflowResults, serviceImpl.PostWorkflowResults)
          .AddMethod(__Method_PostWorkflowResultsSimilarity, serviceImpl.PostWorkflowResultsSimilarity)
          .AddMethod(__Method_ListWorkflowVersions, serviceImpl.ListWorkflowVersions)
          .AddMethod(__Method_GetWorkflowVersion, serviceImpl.GetWorkflowVersion)
          .AddMethod(__Method_DeleteWorkflowVersions, serviceImpl.DeleteWorkflowVersions)
          .AddMethod(__Method_PatchWorkflowVersions, serviceImpl.PatchWorkflowVersions)
          .AddMethod(__Method_GetKey, serviceImpl.GetKey)
          .AddMethod(__Method_ListKeys, serviceImpl.ListKeys)
          .AddMethod(__Method_ListAppKeys, serviceImpl.ListAppKeys)
          .AddMethod(__Method_DeleteKey, serviceImpl.DeleteKey)
          .AddMethod(__Method_PostKeys, serviceImpl.PostKeys)
          .AddMethod(__Method_PatchKeys, serviceImpl.PatchKeys)
          .AddMethod(__Method_MyScopes, serviceImpl.MyScopes)
          .AddMethod(__Method_MyScopesUser, serviceImpl.MyScopesUser)
          .AddMethod(__Method_MyScopesRoot, serviceImpl.MyScopesRoot)
          .AddMethod(__Method_ListScopes, serviceImpl.ListScopes)
          .AddMethod(__Method_GetApp, serviceImpl.GetApp)
          .AddMethod(__Method_ListApps, serviceImpl.ListApps)
          .AddMethod(__Method_DeleteApp, serviceImpl.DeleteApp)
          .AddMethod(__Method_PostApps, serviceImpl.PostApps)
          .AddMethod(__Method_PatchApps, serviceImpl.PatchApps)
          .AddMethod(__Method_PatchAppsIds, serviceImpl.PatchAppsIds)
          .AddMethod(__Method_PatchApp, serviceImpl.PatchApp)
          .AddMethod(__Method_PostAppsSearches, serviceImpl.PostAppsSearches)
          .AddMethod(__Method_GetUser, serviceImpl.GetUser)
          .AddMethod(__Method_PostValidatePassword, serviceImpl.PostValidatePassword)
          .AddMethod(__Method_GetSearch, serviceImpl.GetSearch)
          .AddMethod(__Method_ListSearches, serviceImpl.ListSearches)
          .AddMethod(__Method_PatchSearches, serviceImpl.PatchSearches)
          .AddMethod(__Method_PostSearches, serviceImpl.PostSearches)
          .AddMethod(__Method_PostSearchesByID, serviceImpl.PostSearchesByID)
          .AddMethod(__Method_PostAnnotationSearchMetrics, serviceImpl.PostAnnotationSearchMetrics)
          .AddMethod(__Method_GetAnnotationSearchMetrics, serviceImpl.GetAnnotationSearchMetrics)
          .AddMethod(__Method_ListAnnotationSearchMetrics, serviceImpl.ListAnnotationSearchMetrics)
          .AddMethod(__Method_DeleteAnnotationSearchMetrics, serviceImpl.DeleteAnnotationSearchMetrics)
          .AddMethod(__Method_DeleteSearch, serviceImpl.DeleteSearch)
          .AddMethod(__Method_ListAnnotationFilters, serviceImpl.ListAnnotationFilters)
          .AddMethod(__Method_GetAnnotationFilter, serviceImpl.GetAnnotationFilter)
          .AddMethod(__Method_PostAnnotationFilters, serviceImpl.PostAnnotationFilters)
          .AddMethod(__Method_PatchAnnotationFilters, serviceImpl.PatchAnnotationFilters)
          .AddMethod(__Method_DeleteAnnotationFilters, serviceImpl.DeleteAnnotationFilters)
          .AddMethod(__Method_ListStatusCodes, serviceImpl.ListStatusCodes)
          .AddMethod(__Method_GetStatusCode, serviceImpl.GetStatusCode)
          .AddMethod(__Method_ListCollaborators, serviceImpl.ListCollaborators)
          .AddMethod(__Method_PostCollaborators, serviceImpl.PostCollaborators)
          .AddMethod(__Method_PatchCollaborators, serviceImpl.PatchCollaborators)
          .AddMethod(__Method_DeleteCollaborators, serviceImpl.DeleteCollaborators)
          .AddMethod(__Method_ListCollaborations, serviceImpl.ListCollaborations)
          .AddMethod(__Method_PostAppDuplications, serviceImpl.PostAppDuplications)
          .AddMethod(__Method_ListAppDuplications, serviceImpl.ListAppDuplications)
          .AddMethod(__Method_GetAppDuplication, serviceImpl.GetAppDuplication)
          .AddMethod(__Method_PostTasks, serviceImpl.PostTasks)
          .AddMethod(__Method_GetTaskAnnotationCount, serviceImpl.GetTaskAnnotationCount)
          .AddMethod(__Method_GetTaskInputCount, serviceImpl.GetTaskInputCount)
          .AddMethod(__Method_GetTask, serviceImpl.GetTask)
          .AddMethod(__Method_ListTasks, serviceImpl.ListTasks)
          .AddMethod(__Method_PatchTasks, serviceImpl.PatchTasks)
          .AddMethod(__Method_DeleteTasks, serviceImpl.DeleteTasks)
          .AddMethod(__Method_PostLabelOrders, serviceImpl.PostLabelOrders)
          .AddMethod(__Method_GetLabelOrder, serviceImpl.GetLabelOrder)
          .AddMethod(__Method_ListLabelOrders, serviceImpl.ListLabelOrders)
          .AddMethod(__Method_PatchLabelOrders, serviceImpl.PatchLabelOrders)
          .AddMethod(__Method_DeleteLabelOrders, serviceImpl.DeleteLabelOrders)
          .AddMethod(__Method_PostCollectors, serviceImpl.PostCollectors)
          .AddMethod(__Method_GetCollector, serviceImpl.GetCollector)
          .AddMethod(__Method_ListCollectors, serviceImpl.ListCollectors)
          .AddMethod(__Method_PatchCollectors, serviceImpl.PatchCollectors)
          .AddMethod(__Method_DeleteCollectors, serviceImpl.DeleteCollectors)
          .AddMethod(__Method_PostStatValues, serviceImpl.PostStatValues)
          .AddMethod(__Method_PostStatValuesAggregate, serviceImpl.PostStatValuesAggregate)
          .AddMethod(__Method_PostTrendingMetricsView, serviceImpl.PostTrendingMetricsView)
          .AddMethod(__Method_ListTrendingMetricsViews, serviceImpl.ListTrendingMetricsViews)
          .AddMethod(__Method_GetModule, serviceImpl.GetModule)
          .AddMethod(__Method_ListModules, serviceImpl.ListModules)
          .AddMethod(__Method_PostModules, serviceImpl.PostModules)
          .AddMethod(__Method_PatchModules, serviceImpl.PatchModules)
          .AddMethod(__Method_DeleteModules, serviceImpl.DeleteModules)
          .AddMethod(__Method_GetModuleVersion, serviceImpl.GetModuleVersion)
          .AddMethod(__Method_ListModuleVersions, serviceImpl.ListModuleVersions)
          .AddMethod(__Method_PostModuleVersions, serviceImpl.PostModuleVersions)
          .AddMethod(__Method_DeleteModuleVersions, serviceImpl.DeleteModuleVersions)
          .AddMethod(__Method_GetInstalledModuleVersion, serviceImpl.GetInstalledModuleVersion)
          .AddMethod(__Method_ListInstalledModuleVersions, serviceImpl.ListInstalledModuleVersions)
          .AddMethod(__Method_PostInstalledModuleVersions, serviceImpl.PostInstalledModuleVersions)
          .AddMethod(__Method_DeleteInstalledModuleVersions, serviceImpl.DeleteInstalledModuleVersions)
          .AddMethod(__Method_PostInstalledModuleVersionsKey, serviceImpl.PostInstalledModuleVersionsKey)
          .AddMethod(__Method_PostBulkOperations, serviceImpl.PostBulkOperations)
          .AddMethod(__Method_ListBulkOperations, serviceImpl.ListBulkOperations)
          .AddMethod(__Method_GetBulkOperation, serviceImpl.GetBulkOperation)
          .AddMethod(__Method_CancelBulkOperations, serviceImpl.CancelBulkOperations)
          .AddMethod(__Method_DeleteBulkOperations, serviceImpl.DeleteBulkOperations)
          .AddMethod(__Method_ListNextTaskAssignments, serviceImpl.ListNextTaskAssignments)
          .AddMethod(__Method_PutTaskAssignments, serviceImpl.PutTaskAssignments)
          .AddMethod(__Method_ListInputsAddJobs, serviceImpl.ListInputsAddJobs)
          .AddMethod(__Method_GetInputsAddJob, serviceImpl.GetInputsAddJob)
          .AddMethod(__Method_CancelInputsAddJob, serviceImpl.CancelInputsAddJob)
          .AddMethod(__Method_PostUploads, serviceImpl.PostUploads)
          .AddMethod(__Method_PutUploadContentParts, serviceImpl.PutUploadContentParts)
          .AddMethod(__Method_GetUpload, serviceImpl.GetUpload)
          .AddMethod(__Method_ListUploads, serviceImpl.ListUploads)
          .AddMethod(__Method_DeleteUploads, serviceImpl.DeleteUploads)
          .AddMethod(__Method_PostInputsDataSources, serviceImpl.PostInputsDataSources)
          .AddMethod(__Method_GetInputsExtractionJob, serviceImpl.GetInputsExtractionJob)
          .AddMethod(__Method_ListInputsExtractionJobs, serviceImpl.ListInputsExtractionJobs)
          .AddMethod(__Method_CancelInputsExtractionJobs, serviceImpl.CancelInputsExtractionJobs)
          .AddMethod(__Method_PostInputsUploads, serviceImpl.PostInputsUploads)
          .AddMethod(__Method_GetRunner, serviceImpl.GetRunner)
          .AddMethod(__Method_ListRunners, serviceImpl.ListRunners)
          .AddMethod(__Method_PostRunners, serviceImpl.PostRunners)
          .AddMethod(__Method_DeleteRunners, serviceImpl.DeleteRunners)
          .AddMethod(__Method_ListRunnerItems, serviceImpl.ListRunnerItems)
          .AddMethod(__Method_PostRunnerItemOutputs, serviceImpl.PostRunnerItemOutputs)
          .AddMethod(__Method_PostModelVersionsTrainingTimeEstimate, serviceImpl.PostModelVersionsTrainingTimeEstimate).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, V2Base serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListConceptRelations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(serviceImpl.ListConceptRelations));
      serviceBinder.AddMethod(__Method_PostConceptRelations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptRelationsRequest, global::Clarifai.Api.MultiConceptRelationResponse>(serviceImpl.PostConceptRelations));
      serviceBinder.AddMethod(__Method_DeleteConceptRelations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteConceptRelationsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteConceptRelations));
      serviceBinder.AddMethod(__Method_GetConceptCounts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetConceptCountsRequest, global::Clarifai.Api.MultiConceptCountResponse>(serviceImpl.GetConceptCounts));
      serviceBinder.AddMethod(__Method_GetConcept, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetConceptRequest, global::Clarifai.Api.SingleConceptResponse>(serviceImpl.GetConcept));
      serviceBinder.AddMethod(__Method_ListConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.ListConcepts));
      serviceBinder.AddMethod(__Method_ListModelConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.ListModelConcepts));
      serviceBinder.AddMethod(__Method_PostConceptsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptsSearchesRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.PostConceptsSearches));
      serviceBinder.AddMethod(__Method_PostConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.PostConcepts));
      serviceBinder.AddMethod(__Method_PatchConcepts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchConceptsRequest, global::Clarifai.Api.MultiConceptResponse>(serviceImpl.PatchConcepts));
      serviceBinder.AddMethod(__Method_GetConceptLanguage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetConceptLanguageRequest, global::Clarifai.Api.SingleConceptLanguageResponse>(serviceImpl.GetConceptLanguage));
      serviceBinder.AddMethod(__Method_ListConceptLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(serviceImpl.ListConceptLanguages));
      serviceBinder.AddMethod(__Method_PostConceptLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(serviceImpl.PostConceptLanguages));
      serviceBinder.AddMethod(__Method_PatchConceptLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchConceptLanguagesRequest, global::Clarifai.Api.MultiConceptLanguageResponse>(serviceImpl.PatchConceptLanguages));
      serviceBinder.AddMethod(__Method_ListKnowledgeGraphs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(serviceImpl.ListKnowledgeGraphs));
      serviceBinder.AddMethod(__Method_PostKnowledgeGraphs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostKnowledgeGraphsRequest, global::Clarifai.Api.MultiKnowledgeGraphResponse>(serviceImpl.PostKnowledgeGraphs));
      serviceBinder.AddMethod(__Method_PostConceptMappingJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostConceptMappingJobsRequest, global::Clarifai.Api.MultiConceptMappingJobResponse>(serviceImpl.PostConceptMappingJobs));
      serviceBinder.AddMethod(__Method_GetAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAnnotationRequest, global::Clarifai.Api.SingleAnnotationResponse>(serviceImpl.GetAnnotation));
      serviceBinder.AddMethod(__Method_ListAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(serviceImpl.ListAnnotations));
      serviceBinder.AddMethod(__Method_PostAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(serviceImpl.PostAnnotations));
      serviceBinder.AddMethod(__Method_PatchAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAnnotationsRequest, global::Clarifai.Api.MultiAnnotationResponse>(serviceImpl.PatchAnnotations));
      serviceBinder.AddMethod(__Method_PatchAnnotationsStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAnnotationsStatusRequest, global::Clarifai.Api.PatchAnnotationsStatusResponse>(serviceImpl.PatchAnnotationsStatus));
      serviceBinder.AddMethod(__Method_DeleteAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotation));
      serviceBinder.AddMethod(__Method_DeleteAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotations));
      serviceBinder.AddMethod(__Method_PatchAnnotationsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PatchAnnotationsSearches));
      serviceBinder.AddMethod(__Method_PostAnnotationsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostAnnotationsSearches));
      serviceBinder.AddMethod(__Method_ListAnnotationWorkers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAnnotationWorkersRequest, global::Clarifai.Api.MultiWorkerResponse>(serviceImpl.ListAnnotationWorkers));
      serviceBinder.AddMethod(__Method_GetInputCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputCountRequest, global::Clarifai.Api.SingleInputCountResponse>(serviceImpl.GetInputCount));
      serviceBinder.AddMethod(__Method_StreamInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.StreamInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.StreamInputs));
      serviceBinder.AddMethod(__Method_GetInputSamples, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputSamplesRequest, global::Clarifai.Api.MultiInputAnnotationResponse>(serviceImpl.GetInputSamples));
      serviceBinder.AddMethod(__Method_GetInput, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputRequest, global::Clarifai.Api.SingleInputResponse>(serviceImpl.GetInput));
      serviceBinder.AddMethod(__Method_GetInputVideoManifest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetVideoManifestRequest, global::Clarifai.Api.GetVideoManifestResponse>(serviceImpl.GetInputVideoManifest));
      serviceBinder.AddMethod(__Method_ListInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.ListInputs));
      serviceBinder.AddMethod(__Method_PostInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.PostInputs));
      serviceBinder.AddMethod(__Method_PatchInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.PatchInputs));
      serviceBinder.AddMethod(__Method_DeleteInput, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteInputRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteInput));
      serviceBinder.AddMethod(__Method_DeleteInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteInputsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteInputs));
      serviceBinder.AddMethod(__Method_PatchInputsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PatchInputsSearches));
      serviceBinder.AddMethod(__Method_PostInputsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostInputsSearches));
      serviceBinder.AddMethod(__Method_PostModelOutputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelOutputsRequest, global::Clarifai.Api.MultiOutputResponse>(serviceImpl.PostModelOutputs));
      serviceBinder.AddMethod(__Method_ListDatasets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(serviceImpl.ListDatasets));
      serviceBinder.AddMethod(__Method_GetDataset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetDatasetRequest, global::Clarifai.Api.SingleDatasetResponse>(serviceImpl.GetDataset));
      serviceBinder.AddMethod(__Method_PostDatasets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(serviceImpl.PostDatasets));
      serviceBinder.AddMethod(__Method_PatchDatasets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchDatasetsRequest, global::Clarifai.Api.MultiDatasetResponse>(serviceImpl.PatchDatasets));
      serviceBinder.AddMethod(__Method_DeleteDatasets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteDatasetsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteDatasets));
      serviceBinder.AddMethod(__Method_ListDatasetInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse>(serviceImpl.ListDatasetInputs));
      serviceBinder.AddMethod(__Method_GetDatasetInput, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetDatasetInputRequest, global::Clarifai.Api.SingleDatasetInputResponse>(serviceImpl.GetDatasetInput));
      serviceBinder.AddMethod(__Method_PostDatasetInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostDatasetInputsRequest, global::Clarifai.Api.MultiDatasetInputResponse>(serviceImpl.PostDatasetInputs));
      serviceBinder.AddMethod(__Method_DeleteDatasetInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteDatasetInputsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteDatasetInputs));
      serviceBinder.AddMethod(__Method_ListDatasetVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(serviceImpl.ListDatasetVersions));
      serviceBinder.AddMethod(__Method_GetDatasetVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetDatasetVersionRequest, global::Clarifai.Api.SingleDatasetVersionResponse>(serviceImpl.GetDatasetVersion));
      serviceBinder.AddMethod(__Method_ListDatasetVersionMetricsGroups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListDatasetVersionMetricsGroupsRequest, global::Clarifai.Api.MultiDatasetVersionMetricsGroupResponse>(serviceImpl.ListDatasetVersionMetricsGroups));
      serviceBinder.AddMethod(__Method_PostDatasetVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(serviceImpl.PostDatasetVersions));
      serviceBinder.AddMethod(__Method_PatchDatasetVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchDatasetVersionsRequest, global::Clarifai.Api.MultiDatasetVersionResponse>(serviceImpl.PatchDatasetVersions));
      serviceBinder.AddMethod(__Method_DeleteDatasetVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteDatasetVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteDatasetVersions));
      serviceBinder.AddMethod(__Method_PutDatasetVersionExports, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PutDatasetVersionExportsRequest, global::Clarifai.Api.MultiDatasetVersionExportResponse>(serviceImpl.PutDatasetVersionExports));
      serviceBinder.AddMethod(__Method_GetModelType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelTypeRequest, global::Clarifai.Api.SingleModelTypeResponse>(serviceImpl.GetModelType));
      serviceBinder.AddMethod(__Method_ListOpenSourceLicenses, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListOpenSourceLicensesRequest, global::Clarifai.Api.ListOpenSourceLicensesResponse>(serviceImpl.ListOpenSourceLicenses));
      serviceBinder.AddMethod(__Method_ListModelTypes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelTypesRequest, global::Clarifai.Api.MultiModelTypeResponse>(serviceImpl.ListModelTypes));
      serviceBinder.AddMethod(__Method_GetModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.GetModel));
      serviceBinder.AddMethod(__Method_GetModelOutputInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.GetModelOutputInfo));
      serviceBinder.AddMethod(__Method_ListModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelsRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.ListModels));
      serviceBinder.AddMethod(__Method_GetResourceCounts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetResourceCountsRequest, global::Clarifai.Api.GetResourceCountsResponse>(serviceImpl.GetResourceCounts));
      serviceBinder.AddMethod(__Method_PostModelsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelsSearchesRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.PostModelsSearches));
      serviceBinder.AddMethod(__Method_PostModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelsRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.PostModels));
      serviceBinder.AddMethod(__Method_PatchModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelsRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.PatchModels));
      serviceBinder.AddMethod(__Method_PatchModelIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelIdsRequest, global::Clarifai.Api.MultiModelResponse>(serviceImpl.PatchModelIds));
      serviceBinder.AddMethod(__Method_DeleteModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModel));
      serviceBinder.AddMethod(__Method_DeleteModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModels));
      serviceBinder.AddMethod(__Method_PatchModelCheckConsents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelCheckConsentsRequest, global::Clarifai.Api.MultiModelCheckConsentResponse>(serviceImpl.PatchModelCheckConsents));
      serviceBinder.AddMethod(__Method_PatchModelToolkits, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelToolkitsRequest, global::Clarifai.Api.MultiModelToolkitResponse>(serviceImpl.PatchModelToolkits));
      serviceBinder.AddMethod(__Method_PatchModelUseCases, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelUseCasesRequest, global::Clarifai.Api.MultiModelUseCaseResponse>(serviceImpl.PatchModelUseCases));
      serviceBinder.AddMethod(__Method_PatchModelLanguages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelLanguagesRequest, global::Clarifai.Api.MultiModelLanguageResponse>(serviceImpl.PatchModelLanguages));
      serviceBinder.AddMethod(__Method_ListModelInputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelInputsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.ListModelInputs));
      serviceBinder.AddMethod(__Method_GetModelVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelVersionRequest, global::Clarifai.Api.SingleModelVersionResponse>(serviceImpl.GetModelVersion));
      serviceBinder.AddMethod(__Method_ListModelVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse>(serviceImpl.ListModelVersions));
      serviceBinder.AddMethod(__Method_PostWorkflowVersionsUnPublish, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostWorkflowVersionsUnPublish));
      serviceBinder.AddMethod(__Method_PostWorkflowVersionsPublish, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostWorkflowVersionsPublish));
      serviceBinder.AddMethod(__Method_PostModelVersionsPublish, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionsPublishRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostModelVersionsPublish));
      serviceBinder.AddMethod(__Method_PostModelVersionsUnPublish, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionsUnPublishRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostModelVersionsUnPublish));
      serviceBinder.AddMethod(__Method_PostModelVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionsRequest, global::Clarifai.Api.SingleModelResponse>(serviceImpl.PostModelVersions));
      serviceBinder.AddMethod(__Method_PatchModelVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModelVersionsRequest, global::Clarifai.Api.MultiModelVersionResponse>(serviceImpl.PatchModelVersions));
      serviceBinder.AddMethod(__Method_DeleteModelVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModelVersionRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModelVersion));
      serviceBinder.AddMethod(__Method_GetModelVersionMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(serviceImpl.GetModelVersionMetrics));
      serviceBinder.AddMethod(__Method_PostModelVersionMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionMetricsRequest, global::Clarifai.Api.SingleModelVersionResponse>(serviceImpl.PostModelVersionMetrics));
      serviceBinder.AddMethod(__Method_PostModelVersionEvaluations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse>(serviceImpl.PostModelVersionEvaluations));
      serviceBinder.AddMethod(__Method_ListModelVersionEvaluations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelVersionEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse>(serviceImpl.ListModelVersionEvaluations));
      serviceBinder.AddMethod(__Method_GetModelVersionEvaluation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelVersionEvaluationRequest, global::Clarifai.Api.SingleEvalMetricsResponse>(serviceImpl.GetModelVersionEvaluation));
      serviceBinder.AddMethod(__Method_PostEvaluations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse>(serviceImpl.PostEvaluations));
      serviceBinder.AddMethod(__Method_ListEvaluations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListEvaluationsRequest, global::Clarifai.Api.MultiEvalMetricsResponse>(serviceImpl.ListEvaluations));
      serviceBinder.AddMethod(__Method_GetEvaluation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetEvaluationRequest, global::Clarifai.Api.SingleEvalMetricsResponse>(serviceImpl.GetEvaluation));
      serviceBinder.AddMethod(__Method_ListModelReferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelReferencesRequest, global::Clarifai.Api.MultiModelReferenceResponse>(serviceImpl.ListModelReferences));
      serviceBinder.AddMethod(__Method_GetModelVersionInputExample, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModelVersionInputExampleRequest, global::Clarifai.Api.SingleModelVersionInputExampleResponse>(serviceImpl.GetModelVersionInputExample));
      serviceBinder.AddMethod(__Method_ListModelVersionInputExamples, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModelVersionInputExamplesRequest, global::Clarifai.Api.MultiModelVersionInputExampleResponse>(serviceImpl.ListModelVersionInputExamples));
      serviceBinder.AddMethod(__Method_GetWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetWorkflowRequest, global::Clarifai.Api.SingleWorkflowResponse>(serviceImpl.GetWorkflow));
      serviceBinder.AddMethod(__Method_ListWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.ListWorkflows));
      serviceBinder.AddMethod(__Method_PostWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.PostWorkflows));
      serviceBinder.AddMethod(__Method_PatchWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchWorkflowsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.PatchWorkflows));
      serviceBinder.AddMethod(__Method_PatchWorkflowIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchWorkflowIdsRequest, global::Clarifai.Api.MultiWorkflowResponse>(serviceImpl.PatchWorkflowIds));
      serviceBinder.AddMethod(__Method_DeleteWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWorkflowRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteWorkflow));
      serviceBinder.AddMethod(__Method_DeleteWorkflows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWorkflowsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteWorkflows));
      serviceBinder.AddMethod(__Method_PostWorkflowResults, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowResultsRequest, global::Clarifai.Api.PostWorkflowResultsResponse>(serviceImpl.PostWorkflowResults));
      serviceBinder.AddMethod(__Method_PostWorkflowResultsSimilarity, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostWorkflowResultsSimilarityRequest, global::Clarifai.Api.PostWorkflowResultsSimilarityResponse>(serviceImpl.PostWorkflowResultsSimilarity));
      serviceBinder.AddMethod(__Method_ListWorkflowVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse>(serviceImpl.ListWorkflowVersions));
      serviceBinder.AddMethod(__Method_GetWorkflowVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetWorkflowVersionRequest, global::Clarifai.Api.SingleWorkflowVersionResponse>(serviceImpl.GetWorkflowVersion));
      serviceBinder.AddMethod(__Method_DeleteWorkflowVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteWorkflowVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteWorkflowVersions));
      serviceBinder.AddMethod(__Method_PatchWorkflowVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchWorkflowVersionsRequest, global::Clarifai.Api.MultiWorkflowVersionResponse>(serviceImpl.PatchWorkflowVersions));
      serviceBinder.AddMethod(__Method_GetKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetKeyRequest, global::Clarifai.Api.SingleKeyResponse>(serviceImpl.GetKey));
      serviceBinder.AddMethod(__Method_ListKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.ListKeys));
      serviceBinder.AddMethod(__Method_ListAppKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAppKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.ListAppKeys));
      serviceBinder.AddMethod(__Method_DeleteKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteKeyRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteKey));
      serviceBinder.AddMethod(__Method_PostKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.PostKeys));
      serviceBinder.AddMethod(__Method_PatchKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchKeysRequest, global::Clarifai.Api.MultiKeyResponse>(serviceImpl.PatchKeys));
      serviceBinder.AddMethod(__Method_MyScopes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.MyScopesRequest, global::Clarifai.Api.MultiScopeResponse>(serviceImpl.MyScopes));
      serviceBinder.AddMethod(__Method_MyScopesUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.MyScopesUserRequest, global::Clarifai.Api.MultiScopeUserResponse>(serviceImpl.MyScopesUser));
      serviceBinder.AddMethod(__Method_MyScopesRoot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.MyScopesRootRequest, global::Clarifai.Api.MultiScopeRootResponse>(serviceImpl.MyScopesRoot));
      serviceBinder.AddMethod(__Method_ListScopes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListScopesRequest, global::Clarifai.Api.MultiScopeDepsResponse>(serviceImpl.ListScopes));
      serviceBinder.AddMethod(__Method_GetApp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAppRequest, global::Clarifai.Api.SingleAppResponse>(serviceImpl.GetApp));
      serviceBinder.AddMethod(__Method_ListApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAppsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.ListApps));
      serviceBinder.AddMethod(__Method_DeleteApp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAppRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteApp));
      serviceBinder.AddMethod(__Method_PostApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAppsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PostApps));
      serviceBinder.AddMethod(__Method_PatchApps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAppsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PatchApps));
      serviceBinder.AddMethod(__Method_PatchAppsIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAppsIdsRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PatchAppsIds));
      serviceBinder.AddMethod(__Method_PatchApp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAppRequest, global::Clarifai.Api.SingleAppResponse>(serviceImpl.PatchApp));
      serviceBinder.AddMethod(__Method_PostAppsSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAppsSearchesRequest, global::Clarifai.Api.MultiAppResponse>(serviceImpl.PostAppsSearches));
      serviceBinder.AddMethod(__Method_GetUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetUserRequest, global::Clarifai.Api.SingleUserResponse>(serviceImpl.GetUser));
      serviceBinder.AddMethod(__Method_PostValidatePassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostValidatePasswordRequest, global::Clarifai.Api.SinglePasswordValidationResponse>(serviceImpl.PostValidatePassword));
      serviceBinder.AddMethod(__Method_GetSearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetSearchRequest, global::Clarifai.Api.SingleSearchResponse>(serviceImpl.GetSearch));
      serviceBinder.AddMethod(__Method_ListSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.ListSearches));
      serviceBinder.AddMethod(__Method_PatchSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PatchSearches));
      serviceBinder.AddMethod(__Method_PostSearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostSearchesRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostSearches));
      serviceBinder.AddMethod(__Method_PostSearchesByID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostSearchesByIDRequest, global::Clarifai.Api.MultiSearchResponse>(serviceImpl.PostSearchesByID));
      serviceBinder.AddMethod(__Method_PostAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(serviceImpl.PostAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_GetAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(serviceImpl.GetAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_ListAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAnnotationSearchMetricsRequest, global::Clarifai.Api.MultiAnnotationSearchMetricsResponse>(serviceImpl.ListAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_DeleteAnnotationSearchMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationSearchMetricsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotationSearchMetrics));
      serviceBinder.AddMethod(__Method_DeleteSearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteSearchRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteSearch));
      serviceBinder.AddMethod(__Method_ListAnnotationFilters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(serviceImpl.ListAnnotationFilters));
      serviceBinder.AddMethod(__Method_GetAnnotationFilter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAnnotationFilterRequest, global::Clarifai.Api.SingleAnnotationFilterResponse>(serviceImpl.GetAnnotationFilter));
      serviceBinder.AddMethod(__Method_PostAnnotationFilters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(serviceImpl.PostAnnotationFilters));
      serviceBinder.AddMethod(__Method_PatchAnnotationFilters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchAnnotationFiltersRequest, global::Clarifai.Api.MultiAnnotationFilterResponse>(serviceImpl.PatchAnnotationFilters));
      serviceBinder.AddMethod(__Method_DeleteAnnotationFilters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteAnnotationFiltersRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteAnnotationFilters));
      serviceBinder.AddMethod(__Method_ListStatusCodes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListStatusCodesRequest, global::Clarifai.Api.MultiStatusCodeResponse>(serviceImpl.ListStatusCodes));
      serviceBinder.AddMethod(__Method_GetStatusCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetStatusCodeRequest, global::Clarifai.Api.SingleStatusCodeResponse>(serviceImpl.GetStatusCode));
      serviceBinder.AddMethod(__Method_ListCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(serviceImpl.ListCollaborators));
      serviceBinder.AddMethod(__Method_PostCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(serviceImpl.PostCollaborators));
      serviceBinder.AddMethod(__Method_PatchCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchCollaboratorsRequest, global::Clarifai.Api.MultiCollaboratorsResponse>(serviceImpl.PatchCollaborators));
      serviceBinder.AddMethod(__Method_DeleteCollaborators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteCollaboratorsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteCollaborators));
      serviceBinder.AddMethod(__Method_ListCollaborations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListCollaborationsRequest, global::Clarifai.Api.MultiCollaborationsResponse>(serviceImpl.ListCollaborations));
      serviceBinder.AddMethod(__Method_PostAppDuplications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(serviceImpl.PostAppDuplications));
      serviceBinder.AddMethod(__Method_ListAppDuplications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListAppDuplicationsRequest, global::Clarifai.Api.MultiAppDuplicationsResponse>(serviceImpl.ListAppDuplications));
      serviceBinder.AddMethod(__Method_GetAppDuplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetAppDuplicationRequest, global::Clarifai.Api.SingleAppDuplicationResponse>(serviceImpl.GetAppDuplication));
      serviceBinder.AddMethod(__Method_PostTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostTasksRequest, global::Clarifai.Api.MultiTaskResponse>(serviceImpl.PostTasks));
      serviceBinder.AddMethod(__Method_GetTaskAnnotationCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse>(serviceImpl.GetTaskAnnotationCount));
      serviceBinder.AddMethod(__Method_GetTaskInputCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetTaskCountRequest, global::Clarifai.Api.SingleTaskCountResponse>(serviceImpl.GetTaskInputCount));
      serviceBinder.AddMethod(__Method_GetTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetTaskRequest, global::Clarifai.Api.SingleTaskResponse>(serviceImpl.GetTask));
      serviceBinder.AddMethod(__Method_ListTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListTasksRequest, global::Clarifai.Api.MultiTaskResponse>(serviceImpl.ListTasks));
      serviceBinder.AddMethod(__Method_PatchTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchTasksRequest, global::Clarifai.Api.MultiTaskResponse>(serviceImpl.PatchTasks));
      serviceBinder.AddMethod(__Method_DeleteTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteTasksRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteTasks));
      serviceBinder.AddMethod(__Method_PostLabelOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(serviceImpl.PostLabelOrders));
      serviceBinder.AddMethod(__Method_GetLabelOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetLabelOrderRequest, global::Clarifai.Api.SingleLabelOrderResponse>(serviceImpl.GetLabelOrder));
      serviceBinder.AddMethod(__Method_ListLabelOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(serviceImpl.ListLabelOrders));
      serviceBinder.AddMethod(__Method_PatchLabelOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchLabelOrdersRequest, global::Clarifai.Api.MultiLabelOrderResponse>(serviceImpl.PatchLabelOrders));
      serviceBinder.AddMethod(__Method_DeleteLabelOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteLabelOrdersRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteLabelOrders));
      serviceBinder.AddMethod(__Method_PostCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(serviceImpl.PostCollectors));
      serviceBinder.AddMethod(__Method_GetCollector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetCollectorRequest, global::Clarifai.Api.SingleCollectorResponse>(serviceImpl.GetCollector));
      serviceBinder.AddMethod(__Method_ListCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(serviceImpl.ListCollectors));
      serviceBinder.AddMethod(__Method_PatchCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchCollectorsRequest, global::Clarifai.Api.MultiCollectorResponse>(serviceImpl.PatchCollectors));
      serviceBinder.AddMethod(__Method_DeleteCollectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteCollectorsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteCollectors));
      serviceBinder.AddMethod(__Method_PostStatValues, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostStatValuesRequest, global::Clarifai.Api.MultiStatValueResponse>(serviceImpl.PostStatValues));
      serviceBinder.AddMethod(__Method_PostStatValuesAggregate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostStatValuesAggregateRequest, global::Clarifai.Api.MultiStatValueAggregateResponse>(serviceImpl.PostStatValuesAggregate));
      serviceBinder.AddMethod(__Method_PostTrendingMetricsView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostTrendingMetricsViewRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PostTrendingMetricsView));
      serviceBinder.AddMethod(__Method_ListTrendingMetricsViews, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListTrendingMetricsViewsRequest, global::Clarifai.Api.MultiTrendingMetricsViewResponse>(serviceImpl.ListTrendingMetricsViews));
      serviceBinder.AddMethod(__Method_GetModule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModuleRequest, global::Clarifai.Api.SingleModuleResponse>(serviceImpl.GetModule));
      serviceBinder.AddMethod(__Method_ListModules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModulesRequest, global::Clarifai.Api.MultiModuleResponse>(serviceImpl.ListModules));
      serviceBinder.AddMethod(__Method_PostModules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModulesRequest, global::Clarifai.Api.MultiModuleResponse>(serviceImpl.PostModules));
      serviceBinder.AddMethod(__Method_PatchModules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PatchModulesRequest, global::Clarifai.Api.MultiModuleResponse>(serviceImpl.PatchModules));
      serviceBinder.AddMethod(__Method_DeleteModules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModulesRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModules));
      serviceBinder.AddMethod(__Method_GetModuleVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetModuleVersionRequest, global::Clarifai.Api.SingleModuleVersionResponse>(serviceImpl.GetModuleVersion));
      serviceBinder.AddMethod(__Method_ListModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse>(serviceImpl.ListModuleVersions));
      serviceBinder.AddMethod(__Method_PostModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModuleVersionsRequest, global::Clarifai.Api.MultiModuleVersionResponse>(serviceImpl.PostModuleVersions));
      serviceBinder.AddMethod(__Method_DeleteModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteModuleVersions));
      serviceBinder.AddMethod(__Method_GetInstalledModuleVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInstalledModuleVersionRequest, global::Clarifai.Api.SingleInstalledModuleVersionResponse>(serviceImpl.GetInstalledModuleVersion));
      serviceBinder.AddMethod(__Method_ListInstalledModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse>(serviceImpl.ListInstalledModuleVersions));
      serviceBinder.AddMethod(__Method_PostInstalledModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInstalledModuleVersionsRequest, global::Clarifai.Api.MultiInstalledModuleVersionResponse>(serviceImpl.PostInstalledModuleVersions));
      serviceBinder.AddMethod(__Method_DeleteInstalledModuleVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteInstalledModuleVersionsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteInstalledModuleVersions));
      serviceBinder.AddMethod(__Method_PostInstalledModuleVersionsKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInstalledModuleVersionsKeyRequest, global::Clarifai.Api.SingleKeyResponse>(serviceImpl.PostInstalledModuleVersionsKey));
      serviceBinder.AddMethod(__Method_PostBulkOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(serviceImpl.PostBulkOperations));
      serviceBinder.AddMethod(__Method_ListBulkOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListBulkOperationsRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(serviceImpl.ListBulkOperations));
      serviceBinder.AddMethod(__Method_GetBulkOperation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetBulkOperationRequest, global::Clarifai.Api.SingleBulkOperationsResponse>(serviceImpl.GetBulkOperation));
      serviceBinder.AddMethod(__Method_CancelBulkOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.CancelBulkOperationRequest, global::Clarifai.Api.MultiBulkOperationsResponse>(serviceImpl.CancelBulkOperations));
      serviceBinder.AddMethod(__Method_DeleteBulkOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteBulkOperationRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteBulkOperations));
      serviceBinder.AddMethod(__Method_ListNextTaskAssignments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListNextTaskAssignmentsRequest, global::Clarifai.Api.MultiInputResponse>(serviceImpl.ListNextTaskAssignments));
      serviceBinder.AddMethod(__Method_PutTaskAssignments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PutTaskAssignmentsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.PutTaskAssignments));
      serviceBinder.AddMethod(__Method_ListInputsAddJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListInputsAddJobsRequest, global::Clarifai.Api.MultiInputsAddJobResponse>(serviceImpl.ListInputsAddJobs));
      serviceBinder.AddMethod(__Method_GetInputsAddJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse>(serviceImpl.GetInputsAddJob));
      serviceBinder.AddMethod(__Method_CancelInputsAddJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.CancelInputsAddJobRequest, global::Clarifai.Api.SingleInputsAddJobResponse>(serviceImpl.CancelInputsAddJob));
      serviceBinder.AddMethod(__Method_PostUploads, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostUploadsRequest, global::Clarifai.Api.MultiUploadResponse>(serviceImpl.PostUploads));
      serviceBinder.AddMethod(__Method_PutUploadContentParts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PutUploadContentPartsRequest, global::Clarifai.Api.SingleUploadResponse>(serviceImpl.PutUploadContentParts));
      serviceBinder.AddMethod(__Method_GetUpload, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetUploadRequest, global::Clarifai.Api.SingleUploadResponse>(serviceImpl.GetUpload));
      serviceBinder.AddMethod(__Method_ListUploads, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListUploadsRequest, global::Clarifai.Api.MultiUploadResponse>(serviceImpl.ListUploads));
      serviceBinder.AddMethod(__Method_DeleteUploads, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteUploadsRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteUploads));
      serviceBinder.AddMethod(__Method_PostInputsDataSources, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsDataSourcesRequest, global::Clarifai.Api.MultiInputsAddJobResponse>(serviceImpl.PostInputsDataSources));
      serviceBinder.AddMethod(__Method_GetInputsExtractionJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetInputsExtractionJobRequest, global::Clarifai.Api.SingleInputsExtractionJobResponse>(serviceImpl.GetInputsExtractionJob));
      serviceBinder.AddMethod(__Method_ListInputsExtractionJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListInputsExtractionJobsRequest, global::Clarifai.Api.MultiInputsExtractionJobResponse>(serviceImpl.ListInputsExtractionJobs));
      serviceBinder.AddMethod(__Method_CancelInputsExtractionJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.CancelInputsExtractionJobsRequest, global::Clarifai.Api.MultiInputsExtractionJobResponse>(serviceImpl.CancelInputsExtractionJobs));
      serviceBinder.AddMethod(__Method_PostInputsUploads, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostInputsUploadsRequest, global::Clarifai.Api.MultiInputsAddJobResponse>(serviceImpl.PostInputsUploads));
      serviceBinder.AddMethod(__Method_GetRunner, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.GetRunnerRequest, global::Clarifai.Api.SingleRunnerResponse>(serviceImpl.GetRunner));
      serviceBinder.AddMethod(__Method_ListRunners, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListRunnersRequest, global::Clarifai.Api.MultiRunnerResponse>(serviceImpl.ListRunners));
      serviceBinder.AddMethod(__Method_PostRunners, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostRunnersRequest, global::Clarifai.Api.MultiRunnerResponse>(serviceImpl.PostRunners));
      serviceBinder.AddMethod(__Method_DeleteRunners, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.DeleteRunnersRequest, global::Clarifai.Api.Status.BaseResponse>(serviceImpl.DeleteRunners));
      serviceBinder.AddMethod(__Method_ListRunnerItems, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.ListRunnerItemsRequest, global::Clarifai.Api.MultiRunnerItemResponse>(serviceImpl.ListRunnerItems));
      serviceBinder.AddMethod(__Method_PostRunnerItemOutputs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostRunnerItemOutputsRequest, global::Clarifai.Api.MultiRunnerItemOutputResponse>(serviceImpl.PostRunnerItemOutputs));
      serviceBinder.AddMethod(__Method_PostModelVersionsTrainingTimeEstimate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Clarifai.Api.PostModelVersionsTrainingTimeEstimateRequest, global::Clarifai.Api.MultiTrainingTimeEstimateResponse>(serviceImpl.PostModelVersionsTrainingTimeEstimate));
    }

  }
}
#endregion
